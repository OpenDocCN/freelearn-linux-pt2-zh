- en: Permissions, SELinux, and AppArmor
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 权限、SELinux和AppArmor
- en: 'In this chapter, we''re going to cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Linux file permissions
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux文件权限
- en: Modifying file permissions
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改文件权限
- en: Users and groups
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户和组
- en: AppArmor and modification
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AppArmor和修改
- en: SELinux and modification
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SELinux和修改
- en: Checking SELinux is running, and the importance of keeping it running
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查SELinux是否正在运行，以及保持其运行的重要性
- en: Resetting SELinux permissions
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重置SELinux权限
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: 'In the early days, way back in the mists of the 90s, Linux didn''t have a great
    deal in terms of access control...then came permissions and attributes. Permissions
    and attributes are the elements of a file that dictate what access the system
    and users have to that file (or folder), and what it''s capable of doing to the
    file in terms of interaction. At a basic level, you use `ls` to view information
    on permissions (more on this later), but for now, see the following example:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在早期，早在90年代的迷雾中，Linux在访问控制方面并不多……然后是权限和属性。权限和属性是文件的元素，它们决定了系统和用户对该文件（或文件夹）的访问权限，以及在交互方面对文件的操作能力。在基本水平上，您可以使用`ls`查看权限信息（稍后会详细介绍），但现在先看以下示例：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this chapter, we will learn about permissions from the basic Linux offerings,
    to SELinux and AppArmor. We'll also look at troubleshooting issues that might
    be caused by SELinux or AppArmor. We will also learn the importance of not disabling
    extended permission controls.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习从基本的Linux权限到SELinux和AppArmor。我们还将探讨可能由SELinux或AppArmor引起的故障排除问题。我们还将学习不要禁用扩展权限控制的重要性。
- en: In terms of security, locking down your system is obviously important, and at
    its extreme, you could create a system where every program is ignorant of every
    other program (effectively having each program siloed).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在安全方面，锁定系统显然很重要，而在极端情况下，您可以创建一个系统，其中每个程序都对其他程序一无所知（实际上使每个程序都被隔离）。
- en: While security is never a bad thing, a balance is crucial. You don't want to
    start stressing over the permissions of every file in an Ubuntu install, there's
    literally thousands and you'd go mad before you finished... unless it's literally
    your sole job to do this, or you want an especially dull hobby, in which case
    go nuts!
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然安全性从来都不是坏事，但平衡至关重要。您不希望开始为Ubuntu安装中的每个文件的权限而感到紧张，那里有成千上万个文件，除非您在完成之前就疯了……除非这确实是您唯一的工作，或者您想要一个特别乏味的爱好，否则就放手去做吧！
- en: Technical requirements
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Throughout this chapter, we''re going to use the following `Vagrantfile`; note
    that we only use two machines: CentOS to highlight SELinux features and abilities,
    and an Ubuntu installation for AppArmor:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用以下`Vagrantfile`；请注意，我们只使用两台机器：CentOS突出显示SELinux的功能和能力，以及Ubuntu安装用于AppArmor：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: At the time of writing, the `provisionScript` used here is to fix a slight problem
    with one of the sections in this chapter. If you experience issues surrounding
    this script, feel free to remove it from your configuration (there is a note later
    on about this, in the relevant section, where we talk about `.autorelabel`).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，此处使用的`provisionScript`是为了修复本章中一个部分的轻微问题。如果您在使用此脚本时遇到问题，请随时从配置中删除它（在相关部分中稍后会有一条注释，我们会在那里讨论`.autorelabel`）。
- en: Linux file permissions
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux文件权限
- en: To begin, we're going to go right back to basics by taking a look at the default
    Linux file permissions.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将回到基础知识，看一下默认的Linux文件权限。
- en: In this section, we're going to use a file and a directory on our CentOS box,
    to highlight some important and basic knowledge that we can use going forward.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用CentOS框上的一个文件和一个目录，以突出一些重要的基本知识，这些知识可以帮助我们继续前进。
- en: File permissions on Unix and Unix-like systems are different from those found
    on Windows and other OS installations. If you connect a hard drive formatted with
    a Unix file-system (such as XFS) to a Windows box, it is unlikely it will be able
    to read the permissions on the files accurately (unless you've got software to
    do it for you). These lines have been blurred a bit in recent years, thanks to
    things like the Windows Subsystem for Linux included in Windows 10, but the principle
    is basically true.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Unix和类Unix系统上的文件权限与Windows和其他操作系统安装中的文件权限不同。如果您将使用Unix文件系统（如XFS）格式化的硬盘连接到Windows框，它可能无法准确读取文件的权限（除非您有软件可以为您执行此操作）。近年来，由于Windows
    10中包含的Windows子系统等因素，这些界限已经有所模糊，但基本原则基本上是正确的。
- en: Getting ready
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Jump onto your CentOS box. For the sake of this section, everything we discuss
    is universal across Linux distributions:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 跳到您的CentOS框。在本节中，我们讨论的所有内容都适用于Linux发行版：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create a file, a directory, and a file in that directory as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下方式创建一个文件、一个目录和该目录中的一个文件：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How to do it...
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'With your files from the *Getting ready* section in place, run an `ls -l` on
    what we''ve created:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在*准备工作*部分的文件就绪后，运行`ls -l`查看我们创建的内容：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`-l`, used here, means using a long-listing format, and is used not just to
    print the files and folders found, but to give us a more complete picture.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 此处使用的`-l`表示使用长列表格式，并且不仅用于打印找到的文件和文件夹，还用于为我们提供更完整的图片。
- en: How it works...
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理
- en: 'We''ll need to break this down, because at first glance, it can appear quite
    confusing:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要对此进行详细说明，因为乍一看，它可能会显得相当令人困惑：
- en: exampledir
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: exampledir
- en: Starting with `exampledir`, let's look at the permissions and ownership of this
    directory.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 从`exampledir`开始，让我们看看这个目录的权限和所有权。
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We have an array of letters, a number `2`, and then two names, `vagrant` and
    `vagrant`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一系列字母、一个数字`2`，然后是两个名字，`vagrant`和`vagrant`。
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `d` at the beginning is an easy one; it indicates that the listed item is
    actually a directory.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 开头的`d`很容易理解；它表示列出的项目实际上是一个目录。
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Then, we have three elements that appear similar, and the first of these are
    the user permissions. Here, the permissions are read, write, and execute.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们有三个看起来相似的元素，其中第一个是用户权限。在这里，权限是读、写和执行。
- en: This means that the user will be able to `touch` (create) files in the directory,
    `mv` (rename) them, `ls` (list) them, `cat`/`less` (read) them, and even `rm`
    (delete) them should they wish.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着用户将能够在目录中 `touch`（创建）文件，`mv`（重命名）它们，`ls`（列出）它们，`cat`/`less`（读取）它们，甚至 `rm`（删除）它们，如果他们愿意的话。
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Next, we have the group permissions, here again as read, write, and execute.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有组权限，这里再次是读、写和执行。
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Thirdly, we have the permissions of everyone, and in this case anyone can read,
    or change into the directory.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 第三，我们有每个人的权限，这种情况下任何人都可以读取或进入目录。
- en: They won't be able to create, rename, or delete existing files, because they
    don't have the write (`w`) permission.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 他们将无法创建、重命名或删除现有文件，因为他们没有写 (`w`) 权限。
- en: This is something that even experienced sysadmins forget. If you're in a group
    that can access the contents of a file within a directory, but the directory's
    own permissions don't allow this, you're not going to be able to complete the
    action. I've heard some quite notable groans of realization related to this little
    tidbit.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是有经验的系统管理员也会忘记这一点。如果你在一个可以访问目录中文件内容的组中，但目录本身的权限不允许这样做，你将无法完成操作。我听到一些与这个小提示相关的相当显著的叹息声。
- en: 'We also have the `.` at the end of the block. Right now, we don''t have to
    worry about this too much, but it indicates that the directory has a security
    context applied to it:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有块末尾的 `.`。现在我们不用太担心这个，但它表示目录已经应用了安全上下文：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The digit, in this case `2`, refers to the number of locations pointing to
    the inode (the place on the disk where the data is actually stored). The reason
    why it''s `2` in this case is because two entries are created every time a directory
    is made, viewable with `ls -la`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，数字 `2` 指的是指向索引节点的位置的数量（实际存储数据的磁盘上的位置）。在这种情况下为什么是 `2` 是因为每次创建一个目录时都会创建两个条目，可以用
    `ls -la` 查看：
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Here, we can see two special entries, `.` and `..`, which refer to this directory,
    and the parent directory, respectively.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到两个特殊条目，`.` 和 `..`，分别指代这个目录和父目录。
- en: There are therefore two links to this directory; the first is from the parent
    (`/home/vagrant/exampledir`) and the second is from within the directory itself
    (`/home/vagrant/exampledir/.`). Confused yet?
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，有两个链接指向这个目录；第一个是来自父目录 (`/home/vagrant/exampledir`)，第二个是来自目录本身 (`/home/vagrant/exampledir/.`)。搞糊涂了吗？
- en: 'Now for a much easier bit, the `vagrant vagrant` entries:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是一个更容易的部分，`vagrant vagrant` 条目：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: These are simply the user, then the group, whose permissions are reflected in
    the `drwxrwxr-x.` block. There is no entry for everyone as that would be pointless.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是用户，然后是组，他们的权限反映在 `drwxrwxr-x.` 块中。没有每个人的条目，因为那样就没有意义了。
- en: examplefile
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例文件
- en: Moving on to `examplefile`, we have the following:.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 继续讨论 `examplefile`，我们有以下内容：
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here, we can see much the same as `exampledir`, with a few changes.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到与 `exampledir` 几乎相同，有一些变化。
- en: The `d` has been replaced by `a`—character, meaning we're dealing with an actual
    file.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`d` 被 `a` 替换了，意味着我们正在处理一个实际文件。'
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The permissions for the user and group are read only and write, meaning the
    file can be read and modified, but it can't yet be executed by the user and group.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 用户和组的权限只有读和写，这意味着文件可以被读取和修改，但用户和组还不能执行。
- en: '[PRE15]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The permissions for everyone else are only read, meaning the file can have `cat`/`less`
    applied, but it can't be modified or executed.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 其他所有人的权限只有读，这意味着文件可以使用 `cat`/`less`，但不能被修改或执行。
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: And finally, we can see a `1` for the number of links, which makes sense as
    the underlying inode isn't referenced from elsewhere.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以看到链接数为 `1`，这是有道理的，因为底层索引节点没有从其他地方引用。
- en: There's more...
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are a few more things to mention that are useful to know, even if we don't
    touch on them here.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些有用的东西要提一下，即使我们在这里没有涉及。
- en: Root access to directories and files
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对目录和文件的根访问
- en: 'The `god/super/almighty` user (`root`) has pretty much carte blanche access
    to everything on the system, meaning that a common shortcut you might see people
    enacting is the following, should they get frustrated at their inability to read
    a file:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`god/super/almighty` 用户 (`root`) 几乎对系统上的所有东西都有完全的访问权限，这意味着你可能会看到人们采取的一个常见快捷方式是以下内容，如果他们对无法读取文件感到沮丧：'
- en: '[PRE17]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This would work, because `root` has that power, but it's a bad habit to get
    into using `sudo` for everything. Be selective with it, and think about what you're
    doing before you arbitrarily stick `sudo` in front of things because you're frustrated.
    (Mostly, this is a message to myself, because I'm just as guilty of this as anyone.)
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这将起作用，因为 `root` 有这个权限，但是养成使用 `sudo` 处理所有事情的坏习惯是不好的。要有选择地使用它，并在任意在命令前加上 `sudo`
    之前考虑一下你在做什么。 （大多数情况下，这是对我自己的一条信息，因为我和其他人一样，也经常犯这个错误。）
- en: Other execute characters
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他执行字符
- en: Instead of the humble `x` in the execute column, it's possible to also see other
    characters, the most common of which are `s` and `t`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行列中，除了普通的 `x` 外，还可能看到其他字符，其中最常见的是 `s` 和 `t`。
- en: 'Take a look at these permissions for the `wall` program:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 看看 `wall` 程序的这些权限：
- en: '[PRE18]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note how the group has `s` set in place of an `x`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意组中的 `s` 替代了 `x`。
- en: This is known as the `setuid` and `setgid` bit, depending on if it's in the
    user or group triad, and effectively it changes the executing user's permissions
    to those of the owner or group, again depending on the triad. In this case, those
    users executing the `wall` command get the permissions of the `tty` group (allowing
    `wall` to output to all `ttys`).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这被称为 `setuid` 和 `setgid` 位，取决于它是在用户还是组三元组中，它有效地将执行用户的权限更改为所有者或组的权限，再次取决于三元组。在这种情况下，执行
    `wall` 命令的用户获得 `tty` 组的权限（允许 `wall` 输出到所有 `tty`）。
- en: 'Here, I''m using `wall` as the vagrant user:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我正在使用 `wall` 作为 vagrant 用户：
- en: '[PRE19]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The `t` entry, or sticky bit, is again quite rare, but it is set most commonly
    on the `/tmp` directory:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`t` 条目，或者叫做粘性位，再次非常罕见，但它最常设置在 `/tmp` 目录上：'
- en: '[PRE20]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Remember that the `.` character refers to this directory.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 记住`.`字符指的是这个目录。
- en: 'It sets it so that only the owner of a file in `/tmp` can rename or remove
    that file, meaning if I create a file in `/tmp` as the `vagrant` user, another
    person can''t come along and remove my file (except `root`). Visually, it looks
    like the following:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 它设置了只有`/tmp`中文件的所有者才能重命名或删除该文件，这意味着如果我以`vagrant`用户的身份在`/tmp`中创建文件，其他人就不能来删除我的文件（除了`root`）。在视觉上，它看起来像下面这样：
- en: '[PRE21]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: There's more than these two other execute characters, but these are the most
    common.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他两个执行字符，但这些是最常见的。
- en: Modifying file permissions
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改文件权限
- en: Creating files is all well and good, but eventually we'll come across a use
    case where the default permissions just aren't acceptable.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 创建文件是很好的，但最终我们会遇到默认权限不可接受的情况。
- en: A good example of this is SSH, which will downright refuse to function unless
    some particularly rigid file permissions are in place on your public and private
    keys.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的例子是SSH，除非在你的公钥和私钥上有一些特别严格的文件权限，否则它根本不会工作。
- en: So, here come "The Three Musketeers", in the form of `chown`, `chmod`, and `chattr`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，"三剑客"来了，以`chown`，`chmod`和`chattr`的形式。
- en: 'If you want to be really annoying, and lose friends easily, insist on calling
    these by their full titles: change ownership, change mode, and change attributes.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要真的很烦人，并且容易失去朋友，坚持称呼这些为它们的全称：改变所有权，改变模式和改变属性。
- en: Getting ready
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this section, we are going to again use our CentOS VM from our `Vagrantfile`,
    as everything we're doing is universally applicable.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将再次使用我们的`Vagrantfile`中的CentOS VM，因为我们所做的一切都是普遍适用的。
- en: 'SSH to your CentOS VM:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: SSH到你的CentOS VM：
- en: '[PRE22]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Move into the `/home` directory (up one level) and create a file, a directory,
    and a file in that directory:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 进入`/home`目录（上一级）并创建一个文件，一个目录，以及该目录中的一个文件：
- en: '[PRE23]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We''re also going to create another dummy user that we can use to explain what
    we''re doing in this section:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将创建另一个虚拟用户，我们可以用来解释本节中正在做的事情：
- en: '[PRE24]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Note the password we've set here is 'correcthorsebatterystaple'.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们设置的密码是'correcthorsebatterystaple'。
- en: How to do it...
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: We'll run through the three commands ( `chown`, `chmod`, and `chattr`) in order.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将按顺序运行三个命令（`chown`，`chmod`和`chattr`）。
- en: chown
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: chown
- en: Starting at the easiest bit, we're going to look at the ownership of the files
    in question.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 从最简单的部分开始，我们将查看所讨论文件的所有权。
- en: 'Begin by listing what we have already:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 首先列出我们已经拥有的内容：
- en: '[PRE25]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Say we wanted to make it so our vagrant user could write to the `permissionfile`,
    instead of its current ability to only read it. Note the following for this:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想让我们的vagrant用户可以写入`permissionfile`，而不是当前只能读取它的能力。请注意以下内容：
- en: '[PRE26]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We would use `chown` to make this change, by passing the user and group we
    want to change the file to:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`chown`进行更改，通过传递我们想要将文件更改为的用户和组：
- en: '[PRE27]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, check the permissions:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，检查权限：
- en: '[PRE28]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This means that we, as the vagrant user, can now write to the file:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们作为vagrant用户现在可以写入文件：
- en: '[PRE29]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'But, other users (that aren''t `root`) can''t write to the file:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，其他用户（不是`root`）无法写入文件：
- en: '[PRE30]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Here, we're using `su` to execute a command as the Packt user, and we're showing
    that though we tried to `echo IMPOSSIBLE` to the file, it failed. We used the
    full path for `permissionfile` to make sure we didn't create the file in the Packt
    user's `home` directory.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`su`以Packt用户的身份执行命令，并且我们展示了尽管我们尝试向文件`echo IMPOSSIBLE`，但失败了。我们使用了`permissionfile`的完整路径，以确保我们没有在Packt用户的`home`目录中创建文件。
- en: chmod
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: chmod
- en: 'We''re being a bit unfair on the old Packt user here, so let''s give everyone
    the ability to write to the file, rather than just `vagrant`:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里对旧的Packt用户有点不公平，所以让我们给每个人都有写入文件的能力，而不仅仅是`vagrant`：
- en: '[PRE31]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now, we should be able to write to the file as any user, instead of just vagrant:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们应该能够像任何用户一样写入文件，而不仅仅是vagrant：
- en: '[PRE32]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: chattr
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: chattr
- en: 'I''m starting to think we''ve been much too lenient here, so let''s completely
    lock down the file so no one (even almighty `root`) can mess with it:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我开始觉得我们在这里太宽容了，所以让我们完全锁定文件，这样没有人（甚至是全能的`root`）都不能乱动它：
- en: '[PRE33]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: We've made the file immutable!
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使文件不可变！
- en: '[PRE34]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'We can see this using the `lsattr` command:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`lsattr`命令来查看这一点：
- en: '[PRE35]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'And, not even `root` is able to modify the file:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至`root`也无法修改文件：
- en: '[PRE36]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: There are various attributes that can be applied to a file with `chattr`, but
    I'd put money on the immutable option being the most commonly used.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`chattr`可以应用各种属性到文件上，但我敢打赌不可变选项是最常用的。'
- en: 'To remove the attribute, use `chattr` again:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除属性，再次使用`chattr`：
- en: '[PRE37]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: How it works...
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Running through each of the commands again, let's take a brief look at what
    we did.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行每个命令，让我们简要看一下我们做了什么。
- en: chown
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: chown
- en: 'First, we changed the ownership of our file:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们改变了文件的所有权：
- en: '[PRE38]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Here, we're using `chown` in its most basic way, dictating which user and group
    the file should belong to. The values are colon-separated, though if you're backward
    like me, you occasionally use the deprecated and incorrect full stop (`.`)instead.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们以最基本的方式使用`chown`，指定文件应属于哪个用户和组。这些值是用冒号分隔的，尽管如果你像我一样保守，偶尔会使用已弃用和不正确的句号(`.`)。
- en: 'You can just specify a user if you want to leave the group alone:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只想保留组，你可以只指定一个用户：
- en: '[PRE39]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: chmod
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: chmod
- en: 'Next, we changed our file so that anyone could write to it:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们更改了我们的文件，以便任何人都可以写入它：
- en: '[PRE40]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Here, we passed certain octal values to the `permissionfile` in order to change
    the rights for the user, group, and everyone else in turn.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们传递了一些八进制值给`permissionfile`，以便依次更改用户、组和其他人的权限。
- en: I won't go into great detail on this, but effectively, the first digit indicates
    what values the user's triad should be, then the group's triad, then everyone
    else.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会详细介绍这一点，但实际上，第一个数字表示用户三元组应该是什么值，然后是组的三元组，然后是其他人。
- en: Our user gets the value of `6` that translates to read/write; our group can
    only read `4` and everyone else can read/write `6`.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的用户得到了`6`的值，这意味着读/写；我们的组只能读取`4`，其他人可以读/写`6`。
- en: 'This is because each of the values has a numeric equivalent, as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为每个值都有一个数字等价物，如下所示：
- en: '`x` = `1`'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x` = `1`'
- en: '`w` = `2`'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w` = `2`'
- en: '`r` = `4`'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`r` = `4`'
- en: So, the `6` value is `4`+`2`, or `r`/`w`, and the `4` value is only `r`.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，`6`值是`4`+`2`，或者`r`/`w`，而`4`值只是`r`。
- en: You could set `777`, which would mean `r`/`w`/`x` for everything and everyone,
    and it's frequently done by people who don't understand file permissions properly.
    It's not a good practice, and should be dissuaded outside of troubleshooting.
    If I find a box where someone has run `chmod 777` on a file in production, that
    person is getting their access revoked and a quick primer on permissions plonked
    into their calendar.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以设置`777`，这意味着对所有事物和所有人都有`r`/`w`/`x`权限，这经常是由不理解文件权限的人所做的。这不是一个好的做法，应该在故障排除之外加以阻止。如果我发现有人在生产环境中对文件运行了`chmod
    777`，那么这个人将被取消访问权限，并且会在他们的日历中快速介绍权限。
- en: chattr
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: chattr
- en: Lastly, we changed one of the file's attributes, specifically making the file
    immutable to even `root`, before we removed the flag again.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们改变了文件的一个属性，具体是使文件对`root`甚至是不可变的，然后我们再次移除了标志。
- en: 'There are many more flags than just immutable; all of them listed in the `chattr`
    main page, and some of them can be useful in niche situations:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 除了不可变之外，`chattr`主页中列出了许多其他标志，其中一些在特定情况下可能会有用：
- en: '`a`: A file can only be appended to (useful for logs)'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a`：文件只能被追加（对日志有用）'
- en: '`c`: To compress and uncompress transparently'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`c`：透明压缩和解压'
- en: '`s`: Results in the file''s blocks are zeroed and written back to disk on file
    deletion'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`s`：导致文件的块在文件删除时被清零并写回磁盘'
- en: 'Not all attributes are honored by all file systems; check if your filesystem
    supports them too (hint: `ext4` doesn''t support quite a few).'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有属性都受到所有文件系统的尊重；检查你的文件系统是否也支持它们（提示：`ext4`不支持很多）。
- en: There's more...
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are one or two more things to note, before we wrap this section.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们结束本节之前，还有一两件事情需要注意。
- en: Avoiding octal notation (if you hate it) in chmod
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在chmod中避免八进制表示法（如果你讨厌它）
- en: 'You don''t absolutely have to use the octal format in the `chmod` world; it
    does give you other options that are easier to read:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在`chmod`世界中，你并不一定非要使用八进制格式；它确实给了你其他更容易阅读的选项：
- en: '[PRE41]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The preceding command would give the user and others the read/write rights,
    and the group the read rights.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令会给用户和其他人读/写权限，给组读权限。
- en: 'Or, you might add a value to the permissions:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以向权限添加一个值：
- en: '[PRE42]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'This would grant the group the additional ability to execute the file:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这将授予组额外的执行文件的能力：
- en: '[PRE43]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Hierarchical permissions
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分层权限
- en: We created a directory, and a file in that directory, so let's take a quick
    look at understanding directory permissions.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个目录，并在该目录中创建了一个文件，所以让我们快速了解一下理解目录权限。
- en: 'To start, our `permissiondir` looks like this:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们的`permissiondir`看起来是这样的：
- en: '[PRE44]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'We can''t currently rename this file, despite us wanting to, as it''s too long:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们想要，但我们目前无法重命名这个文件，因为它太长了：
- en: '[PRE45]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'So, let''s set the write permission on this file for everyone:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们为这个文件设置所有人的写权限：
- en: '[PRE46]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'And now, let''s try again:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们再试一次：
- en: '[PRE47]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Huh.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯。
- en: 'Okay, so the reason for this is because it''s actually the directory permissions
    stopping us from moving the file, not the file permissions. We have to modify
    the directory that the file is contained in, as the permissions won''t let us
    rename (`mv`) a file as they are:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这是因为实际上是目录权限阻止我们移动文件，而不是文件权限。我们必须修改包含文件的目录，因为权限不允许我们重命名（`mv`）文件：
- en: '[PRE48]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'And we should be able to move the file, because our permissions are now extremely
    liberal:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们应该能够移动文件了，因为我们的权限现在非常宽松：
- en: '[PRE49]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Success!
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 成功！
- en: See also
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: One thing we didn't cover in this section were **access control lists** (**ACLs**)
    that can be used to further extend a file's permissions.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中我们没有涵盖的一件事是**访问控制列表**（**ACLs**），它可以用来进一步扩展文件的权限。
- en: 'Start by putting a small command in our `permissionfile` to make it execute
    something:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 首先在我们的`permissionfile`中放入一个小命令来执行某些操作：
- en: '[PRE50]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Say we want to view our entire access control list for a file; we would use
    `getfacl`:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要查看文件的整个访问控制列表；我们将使用`getfacl`：
- en: '[PRE51]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Here, we can see the owner is `vagrant`, and the user has `rw`.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到所有者是`vagrant`，用户有`rw`。
- en: But, what if we wanted Packt to be able to execute the file, without impacting
    the other permissions? At the moment, Packt can't because it's not in the `root`
    group.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果我们希望Packt能够执行该文件，而不影响其他权限呢？目前，Packt不能，因为它不在`root`组中。
- en: 'One potential solution is `setfacl`:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 一个潜在的解决方案是`setfacl`：
- en: '[PRE52]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'We can now see a little `+` sign with `ls`, showing us that the file has extended
    access controls:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看到`ls`中有一个小`+`号，显示我们的文件有扩展的访问控制：
- en: '[PRE53]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'And, we can see those using `getfacl` again:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，我们可以再次使用`getfacl`来查看这些：
- en: '[PRE54]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'This means that our `vagrant` user can''t execute the file:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们的`vagrant`用户无法执行该文件：
- en: '[PRE55]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'But, our Packt user can:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我们的Packt用户可以：
- en: '[PRE56]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Technical requirements
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For this section, we're going to jump onto both our CentOS and Ubuntu VMs, to
    highlight some important differences in approach to users and groups.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将跳转到我们的CentOS和Ubuntu虚拟机上，以突出用户和组处理方法上的一些重要差异。
- en: Users and groups
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户和组
- en: We've covered users and groups in terms of file permissions, but it's a good
    idea to run over what we know about users and groups in brief.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经涵盖了文件权限方面的用户和组，但是简要地回顾一下我们对用户和组的了解是个好主意。
- en: In this section, we're going to delve into a short primer on users and groups,
    determining which user a process is running as, how it changes to that user, and
    finding which users exist on your system by using `/etc/passwd` and similar commands.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将深入探讨用户和组的简要介绍，确定进程正在以哪个用户运行，它如何更改为该用户，并通过使用`/etc/passwd`和类似命令来查找系统中存在哪些用户。
- en: Getting ready
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Use Vagrant to connect to your Ubuntu and CentOS VMs, in different windows
    or one after the other:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Vagrant连接到你的Ubuntu和CentOS虚拟机，在不同的窗口中或者依次进行：
- en: '[PRE57]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: How to do it...
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Over a few short sections, we're going to look at different elements of users
    and groups.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在几个简短的部分中，我们将看一下用户和组的不同元素。
- en: whoami
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: whoami
- en: If you ever need to know who you are, ask yourself through deep reflection and
    inner contemplation.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要知道你是谁，通过深层反思和内心沉思来问问自己。
- en: 'If you need to know what users are logged into a server as (or running a command
    as), it''s a lot easier:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要知道有哪些用户登录到服务器上（或者以某个用户身份运行命令），这将会更容易：
- en: '[PRE58]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Users on a system
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 系统上的用户
- en: To show what users are in place on a system, check out `/etc/passwd`.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示系统上有哪些用户，请查看`/etc/passwd`。
- en: 'On CentOS, it''ll look something like this:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在CentOS上，它看起来会像这样：
- en: '[PRE59]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'And, on Ubuntu, it''ll look something like this:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 而在Ubuntu上，它看起来会像这样：
- en: '[PRE60]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Most of these users you will not have created yourself; they are system users
    for the most part, or bundled with software you've installed.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数这些用户你不会自己创建；它们大部分是系统用户，或者与你安装的软件捆绑在一起。
- en: Groups on a system
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 系统上的组
- en: Groups are discovered in a similar fashion to users, and again, you won't have
    created most of them.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 组的发现方式与用户类似，同样，你不会创建大部分组。
- en: 'For CentOS, note the following:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 对于CentOS，请注意以下内容：
- en: '[PRE61]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'And for Ubuntu, note the following:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Ubuntu，请注意以下内容：
- en: '[PRE62]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: I've emboldened the first big difference between this Ubuntu and CentOS system,
    namely the `wheel` and `admin` groups. `wheel` doesn't exist on our Ubuntu system,
    because it's been replaced by the `admin` group; this means that the `visudo`
    file on Ubuntu references the members of the `admin` group instead of `wheel`.
    Something to remember.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经加粗了这个Ubuntu和CentOS系统之间的第一个重大区别，即`wheel`和`admin`组。`wheel`在我们的Ubuntu系统上不存在，因为它已被`admin`组取代；这意味着Ubuntu上的`visudo`文件引用了`admin`组的成员，而不是`wheel`。记住这一点。
- en: Daemons using users
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用用户的守护进程
- en: On our Ubuntu system, the `syslogd` daemon is run using the `syslog` user.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的Ubuntu系统上，`syslogd`守护进程是使用`syslog`用户运行的。
- en: 'We can confirm this by locating our `rsyslogd` process and checking the user
    in the leftmost column:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过定位我们的`rsyslogd`进程并检查最左边列中的用户来确认这一点：
- en: '[PRE63]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'And we can see why this user is found by checking out the `/etc/rsyslog.conf`
    configuration file:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过查看`/etc/rsyslog.conf`配置文件来找到这个用户是如何被发现的：
- en: '[PRE64]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: If you wanted to quickly exclude processes running as `root`, you might use
    a quick one-liner such as the following (though it's not perfect by any means).
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想快速排除以`root`身份运行的进程，你可以使用一个快速的一行命令，比如下面的（尽管这并不完美）。
- en: 'This is on our CentOS VM:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的CentOS虚拟机上的情况：
- en: '[PRE65]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: How it works...
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Generally, different users and groups will have specific uses, deliberately
    segregated so that they're not too powerful in their own right. If you've got
    a multi-tenanted system (which is very rare these days) with more than one person
    logging on to do their day-to-day work, you want to make sure that person can't
    make life harder for everyone else, by doing something silly like overwriting
    the logs on the box.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，不同的用户和组将具有特定的用途，有意地分隔开来，以便它们在自己的权利范围内不会太强大。如果你有一个多租户系统（这在今天非常罕见），有多个人登录进行日常工作，你希望确保这个人不能通过做一些愚蠢的事情，比如覆盖盒子上的日志，让其他人的生活变得更加困难。
- en: You might solve this issue by putting all human users in one group, and while
    allowing them their own users with limited access, you could then give the group
    access to things such as shared directories and applications they might need to
    use.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过将所有人类用户放在一个组中来解决这个问题，然后允许他们拥有自己的有限访问权限的用户，然后给予该组访问共享目录和他们可能需要使用的应用程序的权限。
- en: Processes have the option to drop their privilege, though not all will do so
    out of the box, and if you want to go this extra mile, it's usually a lot of work
    to set up. Here, we saw `syslog` starting up (as `root`) then immediately lowering
    its own privilege level to that of the `syslog` user and group.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 进程有选择放弃它们的特权的选项，尽管并非所有进程都会默认这样做，如果你想再走这一步，通常需要大量工作来设置。在这里，我们看到`syslog`启动（作为`root`），然后立即降低自己的特权级别到`syslog`用户和组的级别。
- en: The reason `rsyslogd` has to start as `root` is because it binds to a port lower
    than `1024`, which are the restricted ports only accessible to `root` programs.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '`rsyslogd`必须以`root`身份启动的原因是因为它绑定到低于`1024`的端口，这些端口是只有`root`程序可以访问的受限端口。'
- en: Some distributions and operating systems take this approach a lot more strictly
    than others, but as with everything security-related, it's like another layer
    to the onion of being secure.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 一些发行版和操作系统对此的处理方式比其他的更加严格，但就像所有与安全相关的事情一样，这就像是安全的洋葱的另一层。
- en: There's more...
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Take a look at this user, on your Ubuntu VM:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 看看你的Ubuntu虚拟机上的这个用户：
- en: '[PRE66]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: It's got an underscore, the only one to have one in the entirety of the `/etc/passwd`
    file; why might that be?
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 它有一个下划线，在整个`/etc/passwd`文件中是唯一一个有下划线的；这可能是为什么呢？
- en: One potential reason is that it's a system account and the application maintainer
    or developer decided to denote this with an underscore character, as is the case
    with other operating systems.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 一个潜在的原因是它是一个系统账户，应用程序维护者或开发者决定用下划线字符表示这一点，就像其他操作系统一样。
- en: AppArmor and modification
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AppArmor和修改
- en: In this section, we're going to use AppArmor on Ubuntu and determine what effect
    it has on our system.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将在Ubuntu上使用AppArmor，并确定它对我们的系统有什么影响。
- en: AppArmor is installed by default on Ubuntu. It was originally developed by SUSE,
    but Canonical seem to have stuck their flag firmly in the AppArmor planet, introducing
    it in Ubuntu 7.04 and turning it on by default in 7.10 (2007).
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: AppArmor默认安装在Ubuntu上。它最初是由SUSE开发的，但Canonical似乎已经坚定地将他们的旗帜插在了AppArmor星球上，在Ubuntu
    7.04中引入了它，并在7.10（2007年）中默认启用了它。
- en: Like SELinux, AppArmor is a way of introducing mandatory access controls (MAC)
    into Linux; it has been included in the kernel since 2.6.36.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 像SELinux一样，AppArmor是将强制访问控制（MAC）引入Linux的一种方式；它自2.6.36内核以来就已经包含在内。
- en: Getting ready
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this section, we're going to be using our Ubuntu VM.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用我们的Ubuntu虚拟机。
- en: 'SSH to your Ubuntu VM:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: SSH到你的Ubuntu虚拟机：
- en: '[PRE67]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: How to do it...
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'First thing''s first, let''s make sure that `apparmor` is running, using our
    old pal, `systemctl`:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们确保`apparmor`正在运行，使用我们的老朋友`systemctl`：
- en: '[PRE68]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'To see what profiles are loaded, and what mode they''re running in, use `apparmor_status`:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看加载了哪些配置文件以及它们运行在什么模式下，使用`apparmor_status`：
- en: '[PRE69]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'To understand how AppArmor can limit applications, let''s make a modification
    to the `tcpdump` profile and restart AppArmor:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解AppArmor如何限制应用程序，让我们对`tcpdump`配置文件进行修改并重新启动AppArmor：
- en: '[PRE70]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'What we did here was remove the ability of `tcpdump` to capture, making it
    pretty useless:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们做的是删除`tcpdump`捕获的能力，使其变得相当无用：
- en: '[PRE71]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'If we look at the kernel log, we can see the denial from us trying to run `tcpdump`:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看内核日志，我们可以看到我们试图运行`tcpdump`时的拒绝：
- en: '[PRE72]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Note the capibility name, `net_raw`, that we removed with `sed` earlier.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意我们之前用`sed`删除的`net_raw`能力名称。
- en: How it works...
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Profiles for AppArmor are written and loaded into the kernel using the `apparmor_parser`
    program. Mostly, these will be profiles located in `/etc/apparmor.d/`; though
    if a program doesn't have a profile, AppArmor doesn't stop it from running.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: AppArmor的配置文件是使用`apparmor_parser`程序编写并加载到内核中的。大多数情况下，这些配置文件将位于`/etc/apparmor.d/`中；尽管如果一个程序没有配置文件，AppArmor也不会阻止它运行。
- en: When the actual systemd unit is started, an `init.d` script is run (located
    at `/etc/init.d/apparmor`), which does the actual calling of `apparmor_parser`.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 当实际的systemd单元启动时，会运行一个`init.d`脚本（位于`/etc/init.d/apparmor`），该脚本会实际调用`apparmor_parser`。
- en: When profiles are run in enforcement mode, as the preceding fifteen are, they
    must adhere to the policy definition, or they will not be able to act outside
    the policy's requirements, and violations are logged. If profiles are in complain
    mode, the policy is not enforced, but violations are logged for later perusal.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 当配置文件以强制执行模式运行时，就像前面的十五个配置文件一样，它们必须遵守策略定义，否则它们将无法在策略要求之外行事，并且违规行为将被记录。如果配置文件处于投诉模式，则策略不会被执行，但违规行为将被记录以供以后审查。
- en: 'Profiles are generally named by replacing the executable''s slash location
    with dots:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件通常以用点替换可执行文件的斜杠位置来命名：
- en: '[PRE73]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'If we take a look at the top few lines of the `tcpdump` profile, we can start
    to see how profiles are built up:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们看一下`tcpdump`配置文件的前几行，我们就可以开始看到配置文件是如何构建的：
- en: '[PRE74]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: We can see first that the name of the binary is specified, then a select amount
    of includes (which are rules that could be used across other programs too).
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以首先看到指定了二进制文件的名称，然后是一些包括的内容（这些规则也可以在其他程序中使用）。
- en: Next, we have `capability`, including the one we commented out. There are a
    list of capabilities, viewable in the `man (7) capabilities` page where they're
    listed with names like `CAP_NET_RAW` and `CAP_SETGID`, but here they're lowercase.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有`capability`，包括我们注释掉的那个。有一系列的capabilities，可以在`man (7) capabilities`页面上查看，其中列出了像`CAP_NET_RAW`和`CAP_SETGID`这样的名称，但这里它们都是小写。
- en: When we removed this `capability`, `tcpdump` lost the capability to use RAW
    and PACKET sockets, as well as to bind to any address for transparent proxying.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们删除了这个`capability`时，`tcpdump`失去了使用RAW和PACKET sockets的能力，以及绑定到任何地址进行透明代理的能力。
- en: 'Further down, we can see how the author of the file has used comments, and
    flags for `tcpdump`, to describe what they''re allowing with what permission.
    In the following example, they''re allowing the use of `gzip` and `bzip2` specifically,
    so that the `-z` option works:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 在更下面，我们可以看到文件的作者如何使用注释和`tcpdump`的标志来描述他们允许的权限。在下面的例子中，他们特别允许使用`gzip`和`bzip2`，以便`-z`选项起作用：
- en: '[PRE75]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: The syntax can be compared and understood using the surprisingly detailed `apparmor.d`
    man page.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用令人惊讶的详细的`apparmor.d`手册页来比较和理解语法。
- en: There's more...
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'While AppArmor is nice and it definitely does what it advertises, there are
    some caveats:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然AppArmor很好，它确实做到了它所宣传的，但也有一些注意事项：
- en: It relies on developers to write and supply profiles (or others who contribute
    the time)
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它依赖于开发人员编写和提供配置文件（或其他人贡献时间）
- en: Profiles have to be bulletproof before they can be included in the default installation,
    which could be the reason there are so few even after a decade
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在默认安装中包含配置文件之前，配置文件必须是无懈可击的，这可能是十年后仍然如此之少的原因
- en: It's fairly unknown and most people don't even bother with it outside of the
    defaults
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它相当不为人知，大多数人甚至在默认情况下都不会去理会它
- en: 'It also goes off path, rather than inode, meaning you can do things such as
    create a hardlink to bypass restrictions:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 它也会偏离路径，而不是inode，这意味着你可以做一些事情，比如创建一个硬链接来绕过限制：
- en: '[PRE76]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Admittedly, if you''re on a box and have `sudo`, it''s pretty much game over
    at that point anyway:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 诚然，如果你在一个盒子上并且有`sudo`，那么在那一点上游戏基本上就结束了：
- en: '[PRE77]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: You might ask why you need something like this on your system if it's so easy
    to tweak and bypass, but the answer is relatively simple.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会问为什么你的系统需要这样的东西，如果它很容易调整和绕过，但答案相对简单。
- en: If you have a web server on the public internet, there's a good chance it might
    get attacked at some point, and when that happens, you might be completely up
    to date and get hit by a zero-day exploit (however unlikely). Your web server
    could then be compromised, and the individual attacking you might then use it
    to try and set up a different process, running on a different port, or even use
    it to start reading files that it shouldn't.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在公共互联网上有一个web服务器，很有可能它会在某个时候受到攻击，当这种情况发生时，你可能已经完全更新，并受到了零日漏洞的攻击（尽管可能性很小）。然后你的web服务器可能会被攻破，攻击你的个人可能会利用它来尝试建立一个运行在不同端口上的不同进程，甚至利用它开始读取它不应该读取的文件。
- en: Mandatory access controls go a long way to ensuring this doesn't happen, and
    life gets just that bit more frustrating for the person on the other end of the
    attack. They might have your web server, but that's all they've got.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 强制访问控制在很大程度上确保了这种情况不会发生，对于攻击的另一方来说，生活变得更加沮丧。他们可能攻击了你的web服务器，但那就是他们所能做的。
- en: SELinux and modification
  id: totrans-302
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SELinux和修改
- en: 'Like AppArmor, **Security-Enhanced Linux** (**SELinux**) is a way to introduce
    mandatory access controls into Linux, only it has a couple of key differences:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 像AppArmor一样，**安全增强型Linux**（**SELinux**）是一种在Linux中引入强制访问控制的方式，只是它有一些关键的不同：
- en: It's more widely used and loathed than AppArmor
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它比AppArmor更广泛使用和令人讨厌
- en: It's primarily used on Red Hat-based distributions
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它主要用于基于Red Hat的发行版
- en: If you're in the enterprise world, or thinking of going there, SELinux is a
    great tool to add to your tool belt.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在企业世界中，或者正在考虑进入那里，SELinux是一个很好的工具，可以添加到你的工具箱中。
- en: You might recall that we've already touched on SELinux previously, making a
    couple of small changes to allow things like SSH to run on different ports; here,
    we're exploring it further.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还记得我们之前已经提到过SELinux，做了一些小的更改，允许诸如SSH在不同端口上运行；在这里，我们进一步探讨了它。
- en: Getting ready
  id: totrans-308
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this section, we're going to use our CentOS VM.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用我们的CentOS虚拟机。
- en: 'SSH to your CentOS VM, forwarding `8080` as you do:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 通过SSH连接到你的CentOS虚拟机，转发`8080`：
- en: '[PRE78]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Make sure NGINX and some utilities are installed, and that NGINX is started
    for this example:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 确保为NGINX和一些实用程序安装了，并且为这个示例启动了NGINX：
- en: '[PRE79]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: How to do it...
  id: totrans-314
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: We're going to change the port on which NGINX listens by default, to show how
    much of a pain SELinux can be.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要改变NGINX默认监听的端口，以展示SELinux有多么让人头疼。
- en: 'First, check that NGINX is running on port `80` (the default) by using `curl`
    and printing the return code:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，通过使用`curl`并打印返回码来检查NGINX是否在端口`80`（默认端口）上运行：
- en: '[PRE80]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Using `-I` here means that we don't pull in a screen full of code, and instead
    we just get the pertinent information, like the return code (`200` being OK).
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里使用`-I`意味着我们不会拉入一屏幕的代码，而是只获取相关信息，比如返回码（`200`表示OK）。
- en: Cool, so that's all working normally, and SELinux isn't getting in the way.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，所以一切都正常工作，SELinux没有阻碍。
- en: 'What if we want NGINX to listen on a different port? Say the one we forwarded?
    Let''s try it:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想让NGINX监听不同的端口呢？比如我们转发的那个？让我们试试：
- en: '[PRE81]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Running our `curl` command again with the new port should report an error (obviously,
    as the service failed to start):'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行我们的`curl`命令，使用新端口应该会报错（显然，因为服务启动失败）：
- en: '[PRE82]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Odd...but not really.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 奇怪...但也不是真的。
- en: This is because NGINX is only allowed to run on certain ports, `80` being one,
    `8080` being another, and so on. `5858` is obscure and weird; why would a web
    server want to run on it?
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为NGINX只允许在某些端口上运行，`80`是其中一个，`8080`是另一个，等等。`5858`是奇怪和怪异的；为什么一个Web服务器要在上面运行？
- en: 'Because of this, we have to update SELinux to allow NGINX to run on the new
    port:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们必须更新SELinux以允许NGINX在新端口上运行：
- en: '[PRE83]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Oh damn, it looks like `5858` is already defined for something else (in this
    case Node.js – curse you Node.js!).
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 哦该死，看起来`5858`已经为其他东西定义了（在这种情况下是Node.js - 诅咒你Node.js！）。
- en: 'Thankfully, this isn''t the end of the world, we just have to modify the port
    rather than add one:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，这并不是世界末日，我们只需要修改端口而不是添加一个：
- en: '[PRE84]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Now, we can restart NGINX, and it should work fine:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以重新启动NGINX，应该可以正常工作：
- en: '[PRE85]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'You can also visit it in your browser:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在浏览器中访问它：
- en: '![](img/3b5564f2-b3e8-47cd-a5a2-d9bb5e33f22a.png)'
  id: totrans-334
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3b5564f2-b3e8-47cd-a5a2-d9bb5e33f22a.png)'
- en: Yep, it says Fedora, and yes, it's wrong.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，它说的是Fedora，而且是错误的。
- en: So, that's the first step, but now we've decided that instead of the default
    NGINX welcome page, we want it to show our file in `/srv/webserver/arbitrary-location/`.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这是第一步，但现在我们决定，不使用默认的NGINX欢迎页面，而是要在`/srv/webserver/arbitrary-location/`中显示我们的文件。
- en: 'First, let''s create this directory structure and put a simple file in there
    to serve:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建这个目录结构，并在其中放一个简单的文件来提供服务：
- en: '[PRE86]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Next, let''s check the permissions we have on the existing page location, and
    make sure they''re the same:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们检查一下我们在现有页面位置上的权限，并确保它们是一样的：
- en: '[PRE87]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'We''ll make sure ours are the same:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将确保我们的权限是一样的：
- en: '[PRE88]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'Next, we''ll update our NGINX config to log to this new location:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将更新我们的NGINX配置，将日志记录到这个新位置：
- en: '[PRE89]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'And now, we restart our service:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们重新启动我们的服务：
- en: '[PRE90]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'Let''s give our `curl` a go, omitting the `-I` this time so we get our page
    back:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再试一下我们的`curl`，这次省略`-I`，这样我们就可以得到我们的页面：
- en: '[PRE91]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Oops...that doesn't look right.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀...看起来不对。
- en: 'Unsurprisingly, SELinux is to blame, but the fix is a fairly simple set of
    commands that we can use to correct the `fcontext` of the file in question:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 毫不奇怪，SELinux是罪魁祸首，但修复它是一组相当简单的命令，我们可以用来纠正文件的`fcontext`：
- en: '[PRE92]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Trying our `curl` now should give us our message:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 现在再试一下我们的`curl`应该会给我们返回消息：
- en: '[PRE93]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'And we can view it in our browser like so:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以在浏览器中查看它：
- en: '![](img/5778bc90-f8c0-4a88-a7d6-bb5d0719bda6.png)'
  id: totrans-355
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5778bc90-f8c0-4a88-a7d6-bb5d0719bda6.png)'
- en: If this isn't worthy of Tate Modern, I don't know what is.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这不值得泰特现代美术馆，我不知道还有什么值得。
- en: How it works...
  id: totrans-357
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'When we changed the port and restarted the service, we got some errors:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们更改端口并重新启动服务时，我们遇到了一些错误：
- en: '[PRE94]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: Note the specific `Permission denied` entry on the `5858` port.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`5858`端口上的具体`Permission denied`条目。
- en: 'You can query SELinux port types and their number, using the `semanage` command
    we installed as part of the utilities installation earlier:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用我们之前作为实用程序安装的一部分安装的`semanage`命令来查询SELinux端口类型及其编号：
- en: '[PRE95]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Here, we can see that while `80` and other ports are permitted as HTTP ports,
    `5858` wasn't there initially.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到，虽然`80`和其他端口被允许作为HTTP端口，但`5858`最初并不在其中。
- en: 'After we added the additional port just shown, this command looked different:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们添加了刚刚显示的额外端口之后，这个命令看起来有些不同：
- en: '[PRE96]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: So, SELinux now allows this port to be used.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，SELinux现在允许使用这个端口。
- en: In terms of the file, we can check what `fcontext` NGINX needs files to have,
    using the `ls -Z` option.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 就文件而言，我们可以使用`ls -Z`选项来检查NGINX需要文件具有的`fcontext`。
- en: 'Seen here, we run it against the default files:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 如图所示，我们对默认文件运行了它：
- en: '[PRE97]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: This is a good way to determine what context you need to give the new files
    you create.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 这是确定你需要给新文件的上下文的好方法。
- en: When we applied our new policy rule and restored the policy values to the system,
    our file was suddenly capable of being used by NGINX.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们应用我们的新策略规则并将策略值恢复到系统时，我们的文件突然可以被NGINX使用了。
- en: There's more...
  id: totrans-372
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: SELinux isn't really as bad as everyone thinks, and it's come a long way since
    the days when things used to silently fail for no obvious reason. Generally, there's
    a plethora of tools and debugging programs available to you these days when it
    comes to finding the correct configuration for your system and programs, though
    they can (and do) fill books by themselves.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: SELinux实际上并不像每个人想象的那样糟糕，它已经走过了很长的路，不再像以前那样默默地失败。一般来说，当您需要为系统和程序找到正确的配置时，现在有大量的工具和调试程序可供选择，尽管它们可能会填满整整一本书。
- en: If you take anything away from this section, understand that disabling SELinux
    isn't the answer (that is, setting it to permissive mode), and that outside of
    a development environment, all you're doing is making life less secure for yourself
    in the future.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您从本节中获得了任何信息，请了解禁用SELinux不是答案（即将其设置为宽松模式），并且在开发环境之外，您所做的一切只会让您的未来变得不太安全。
- en: '`semanage` also isn''t the only way to manage SELinux policies, but it''s very
    easy to use and quite a neat way to introduce yourself to the wonderful world
    of policy files.'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '`semanage`并不是管理SELinux策略的唯一方法，但它非常易于使用，是一个很好的介绍自己进入策略文件的精彩世界的方式。'
- en: See also
  id: totrans-376
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Generally, desktop systems don't use SELinux, with the exception of Fedora,
    so if you really want to start messing around with it, fire up a VM with Fedora
    installed and take a look at tools such as `audit2allow` and `chcon`.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，桌面系统不使用SELinux，除了Fedora之外，因此，如果您真的想开始尝试它，可以启动安装了Fedora的虚拟机，并查看诸如`audit2allow`和`chcon`之类的工具。
- en: Checking SELinux is running, and the importance of keeping it running
  id: totrans-378
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查SELinux是否正在运行，以及保持其运行的重要性
- en: In this section, we're going to look at how we check that SELinux is enabled
    and running on our system, and we're going to use the logs that SELinux writes
    to during its operation. At the same time, we're going to use `setroubleshoot`
    to help us in determining what might be the issue with what we're trying to do.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看看如何检查SELinux在我们的系统上是否启用并运行，并且我们将使用SELinux在运行过程中写入的日志。同时，我们将使用`setroubleshoot`来帮助我们确定我们尝试做的事情可能出现的问题。
- en: To again stress, there was a period when SELinux started to become a thing,
    and people dismissed it immediately. Most online guides would begin with the immortal
    words "be sure to check SELinux is disabled". Thankfully, that mentality has mostly
    died out now, and people have come to accept SELinux as their one-true-god.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，有一段时间，当SELinux开始成为一个事物时，人们立即将其摒弃。大多数在线指南都会以不朽的话语“务必检查SELinux是否已禁用”开始。幸运的是，这种心态现在大多已经消失了，人们已经接受SELinux作为他们唯一真正的上帝。
- en: It's extremely tempting, when you come across an issue caused by SELinux, to
    simply disable it. This is doubly true if the issue is on a production server,
    and you're under pressure to fix it. Abstain from the easy solution of disabling
    SELinux, as doing so will only going to come around and bit you in the future.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 当您遇到由SELinux引起的问题时，很容易就会有冲动直接禁用它。如果问题出现在生产服务器上，并且您面临着修复的压力，这种冲动就会变得更加强烈。不要采用禁用SELinux的简单解决方案，因为这样做只会在将来给您带来麻烦。
- en: That said, I will now touch on how to disable SELinux (to aid with troubleshooting!).
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，我现在将讨论如何禁用SELinux（以帮助故障排除！）。
- en: Getting ready
  id: totrans-383
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this section, we're going to use our CentOS VM.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用我们的CentOS虚拟机。
- en: 'SSH to your CentOS VM:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: SSH到您的CentOS虚拟机：
- en: '[PRE98]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'If not installed from the previous section, make sure NGINX and our various
    tools are installed:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在上一节中未安装，请确保已安装NGINX和各种工具：
- en: '[PRE99]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: How to do it...
  id: totrans-389
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Firstly, and easily, you can check the current status of SELinux with `sestatus`:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您可以使用`sestatus`轻松检查SELinux的当前状态：
- en: '[PRE100]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Here, we see that it's `enabled`, and the mode that it's operating in is `enforcing`,
    meaning that violations of the policy are denied.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们看到它是“启用”的，并且它正在运行的模式是“强制”，这意味着策略的违规行为将被拒绝。
- en: 'To disable SElinux on the fly (temporarily,) there''s a relatively easy command:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 要临时禁用SElinux（即在运行时），有一个相对简单的命令：
- en: '[PRE101]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: But this will change again at boot-time.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 但这将在启动时再次更改。
- en: 'For now, let''s leave it enabled:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将其保持启用状态：
- en: '[PRE102]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Next, we're going to change the port that we want NGINX to use (again), restart
    NGINX, watch it fail, and see how we'd go about determining the problem.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将再次更改我们希望NGINX使用的端口，重新启动NGINX，观察它失败，并看看我们如何确定问题所在。
- en: 'Changing the port can be done like so:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 更改端口可以这样完成：
- en: '[PRE103]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: If you didn't change the port in the previous section (you're starting fresh),
    then you'll want to substitute the `5858` shown here for `80`.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有在上一节更改端口（您是从头开始的），那么您将想要将此处显示的`5858`替换为`80`。
- en: 'Restarting NGINX is easiest with  `systemctl`:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`systemctl`最容易重新启动NGINX：
- en: '[PRE104]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'What we can do now is determine why it failed:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以确定为什么它失败了：
- en: '[PRE105]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'This might give you a lot of results, especially if you''ve been running the
    box for some time, but near to the end should be a report that looks similar to
    the following:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能会给您很多结果，特别是如果您已经运行该系统一段时间，但在最后附近应该会有一个类似以下内容的报告：
- en: '[PRE106]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: Emboldened at the top is the one-line summary of what `sealert` thinks the issue
    is; in this case, it's right.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 在顶部加粗显示的是`sealert`认为问题的一行摘要；在这种情况下，它是正确的。
- en: It then gives you a `semanage` command, similar to what we used earlier, to
    modify the policy.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，它会给出一个`semanage`命令，类似于我们之前使用的命令，用于修改策略。
- en: It also gives you two commands, `ausearch` and `semodule`, that you can use
    to generate a local policy, which is effectively used alongside the base policy,
    but which can be included with things like Ansible installation scripts.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 它还为您提供了两个命令`ausearch`和`semodule`，您可以使用这两个命令生成一个本地策略，该策略有效地与基本策略一起使用，但可以与诸如Ansible安装脚本之类的东西一起使用。
- en: For example, you have an Ansible role that installs NGINX on a custom port,
    but it's okay because you can bundle the text-based policy alongside the configuration,
    and load it in the Ansible configuration run.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您有一个Ansible角色，该角色在自定义端口上安装NGINX，但这没关系，因为您可以将基于文本的策略与配置捆绑在一起，并在Ansible配置运行中加载它。
- en: 'Let''s run these:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行这些命令：
- en: '[PRE107]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'Now, try restarting NGINX, and `curl` our new port:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，尝试重新启动NGINX，并`curl`我们的新端口：
- en: '[PRE108]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: Woop!
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！
- en: How it works...
  id: totrans-417
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'SELinux''s configuration (in terms of if it''s running and in what mode) is
    set in the `/etc/selinux/config` file:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: SELinux的配置（就其是否正在运行以及处于什么模式）设置在`/etc/selinux/config`文件中：
- en: '[PRE109]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: If you want to disable SELinux permanently, this is the file that you would
    change, flipping `enforcing` to `permissive` or even `disabled`.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想永久禁用SELinux，这是您需要更改的文件，将`enforcing`翻转为`permissive`甚至`disabled`。
- en: When it comes to the custom policy we loaded, we're looking at something a bit
    more complex.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 在加载的自定义策略方面，我们正在研究一些更复杂的东西。
- en: 'This command made two files:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令生成了两个文件：
- en: '[PRE110]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: The `.pp` file is a compiled policy, ready to be loaded, and the `.te` file
    is a human-readable file for your confirmation.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: '`.pp`文件是一个已编译的策略，准备加载，而`.te`文件是一个可供您确认的人类可读文件。'
- en: When we loaded the policy using the `semodule -i` command, we activated it.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用`semodule -i`命令加载策略时，我们激活了它。
- en: 'You can see your active policies with `semodule` again:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以再次使用`semodule`查看您的活动策略：
- en: '[PRE111]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: There's more...
  id: totrans-428
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: '`audit2allow` does its best, but it doesn''t always get policy files quite
    right (or it creates them with too much power, effectively making SELinux useless).
    Always get someone to sanity-check your configuration prior to loading it, unless
    you''re really, really confident.'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: '`audit2allow`尽力而为，但它并不总是完全正确地获取策略文件（或者它们具有太大的权限，从而使SELinux无效）。除非您真的非常有信心，否则请让某人在加载之前对您的配置进行理智检查。'
- en: See also
  id: totrans-430
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: I said at the start that it's important to ensure SELinux is running and to
    make sure you keep it running.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 我在一开始就说过，确保SELinux正在运行并确保您保持其运行是非常重要的。
- en: The problems that arise from disabling it and leaving it disabled should be
    obvious, but just to paint you a picture, note the following.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 禁用它并保持禁用所产生的问题应该是显而易见的，但为了给您一个形象的描述，请注意以下内容。
- en: It's the end of the day on a Friday, just before the Christmas break, and most
    of the staff have already left after making some final checks to make sure your
    e-commerce site stays up during the Christmas and Boxing Day rush of people returning
    unwanted presents.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 这是星期五的最后一天，就在圣诞节假期之前，大部分员工已经离开，之前他们做了一些最后的检查，以确保您的电子商务网站在圣诞节和节礼日期间保持运行。
- en: You're about to clock off when you notice an issue with the site, leading customers
    to believe they can get three hundred points off the latest Nintendo console,
    and you can't be having any of that nonsense.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 您正要下班时，注意到网站出现了问题，导致客户认为他们可以在最新的任天堂游戏机上获得三百点，而您不能容忍任何这种胡闹。
- en: You go in and make a manual change, adding an extra config file to correctly
    load the prices, and you restart the service.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 您进去手动更改，添加额外的配置文件以正确加载价格，并重新启动服务。
- en: The service doesn't come back up.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 服务没有重新启动。
- en: Panic sets in.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 恐慌开始蔓延。
- en: Your stomach drops out.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 你的胃一下子就空了。
- en: Someone in the distance lets out a bellow.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 远处有人发出了一声吼叫。
- en: With speed and dexterity, you disable SELinux, restarting the service and bringing
    everything back online. The site is up, and the console now shows the right price.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 以速度和灵巧，您禁用了SELinux，重新启动了服务，并使一切恢复在线。网站已经上线，控制台现在显示正确的价格。
- en: Phew—you go home and eat several mince pies to celebrate.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 呼——您回家吃了几个肉馅饼来庆祝。
- en: Then, no one notices SELinux is disabled all year, until it comes time to push
    another version of the software next Christmas, using your CI/CD infrastructure
    that also makes sure SELinux is enabled. When that happens, the site goes down.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，一整年都没有人注意到SELinux被禁用，直到下一次圣诞节推送软件的时候，使用您的CI/CD基础设施，该基础设施还确保SELinux已启用。当这种情况发生时，网站就会崩溃。
- en: Everyone panics and no one is sure what happened, but you don't care because
    you long since quit the company for making you work stupid hours, and you've decided
    to move to Japan to start a fruit-growing business.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 每个人都陷入恐慌，没有人确定发生了什么，但您并不在乎，因为您早就因为公司让您工作愚蠢的时间而辞职，并且决定搬到日本开始一个水果种植业务。
- en: Everything catches fire.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 一切都着火了。
- en: See what you did?
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 看到你做了什么吗？
- en: Leave SELinux enabled!
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 保持SELinux启用！
- en: Resetting SELinux permissions
  id: totrans-447
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重置SELinux权限
- en: In this section, we're going to talk about resetting SELinux permissions, and
    touch upon how you might reset a `root` password on a box you've forgotten the
    password for, while accounting for SELinux, which will hinder you otherwise.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论重置SELinux权限，并简要介绍如何在您忘记密码的情况下重置`root`密码，同时考虑到会阻碍您的SELinux。
- en: Getting ready
  id: totrans-449
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备好了
- en: 'Connect to your CentOS VM:'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到您的CentOS VM：
- en: '[PRE112]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: How to do it...
  id: totrans-452
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: First off, it's important to understand that with SELinux, we effectively have
    a running-ish configuration and a saved configuration. When you're running your
    system, it's important that any changes you make to SELinux are saved, to be loaded
    in the event of an SELinux relabel.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，重要的是要理解，对于SELinux，我们实际上有一个运行中的配置和一个保存的配置。当您运行系统时，重要的是您对SELinux所做的任何更改都要保存下来，以便在SELinux重新标记的情况下加载。
- en: To see this in action, let's copy some contexts around.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 要看到这一点，让我们复制一些上下文。
- en: 'Start by taking a look at the context our `.bashrc` file has (because it''s
    immediately available):'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，看一下我们的`.bashrc`文件的上下文（因为它立即可用）：
- en: '[PRE113]'
  id: totrans-456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'There are four parts to this: we have a user (`unconfined_u`), a role (`object_r`),
    a type (`user_home_t`), and the sensitivity of the resource (`s0.`) The type is
    what''s important to us here.'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 这有四个部分：我们有一个用户（`unconfined_u`），一个角色（`object_r`），一个类型（`user_home_t`），以及资源的敏感性（`s0.`）类型对我们来说很重要。
- en: 'Say we want to change the type; we can do it on the fly by copying the type
    from another file (in this case, the `authorized_keys` file, which looks like
    this):'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要更改类型；我们可以通过从另一个文件中复制类型来实时更改（在这种情况下，是`authorized_keys`文件，看起来像这样）：
- en: '[PRE114]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'Note now that when we look at our `.bashrc` file, the SELinux context has changed:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 现在请注意，当我们查看我们的`.bashrc`文件时，SELinux上下文已经改变了：
- en: '[PRE115]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'But `chcon` isn''t permanent, and what we''ve effectively done is change the
    running configuration of SELinux, meaning we can reset it with a simple command:'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 但`chcon`不是永久的，我们实际上改变了SELinux的运行配置，这意味着我们可以用一个简单的命令来重置它：
- en: '[PRE116]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: You may recall that earlier, we did this the other way around, using `semanage`
    to add a new context to a file, then using `restorecon` to apply that context.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还记得之前，我们是用`semanage`来向文件添加新的上下文，然后用`restorecon`来应用该上下文。
- en: Another way to go about fixing temporary context changes is to relabel your
    filesystem.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 解决临时上下文更改的另一种方法是重新标记你的文件系统。
- en: 'Let''s make our change again, copying the `authorized_keys` context once more:'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次进行更改，再次复制`authorized_keys`上下文：
- en: '[PRE117]'
  id: totrans-467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'Now, let''s put a very specific file in a very specific location, and reboot:'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们把一个非常具体的文件放在一个非常具体的位置，然后重新启动：
- en: '[PRE118]'
  id: totrans-469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'Once your machine comes back up, take a look at the file''s context again:'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的机器重新启动，再次查看文件的上下文：
- en: '[PRE119]'
  id: totrans-471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: And, you'll also discover the `.autorelabel` file we added has been automatically
    deleted.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，你还会发现我们添加的`.autorelabel`文件已经被自动删除了。
- en: The `Vagrantfile` for this chapter very specifically removes some console options
    as part of the bootstrap process for the CentOS VM. This is because if you don't,
    the `.autorelabel` function won't work. If you experience problems with this fix,
    try it on a physical machine or a vanilla VM (*in a development environment!*).
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的`Vagrantfile`非常明确地在CentOS VM的引导过程中删除了一些控制台选项。这是因为如果你不这样做，`.autorelabel`函数就不会起作用。如果你在这个修复过程中遇到问题，请尝试在物理机或原始VM上进行（*在开发环境中*）。
- en: How it works...
  id: totrans-474
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: What `restorecon` does is check a file's context against what it expects to
    be true, and if it finds anything amiss, it will correct it with the static configuration
    it knows about.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: '`restorecon`的作用是检查文件的上下文是否符合它所期望的真相，如果发现任何问题，它将使用它所知道的静态配置进行纠正。'
- en: When we ran the `.autorelabel` function, we effectively ran the `fixfiles relabel`
    command across our system at boot-time, prior to our touched file being deleted.
    What you'll notice is that this boot may take longer as it has more of a job to
    do when coming up.
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行`.autorelabel`函数时，实际上是在我们的系统在启动时运行了`fixfiles relabel`命令，之后我们触摸的文件被删除。你会注意到这次启动可能会花更长的时间，因为它在启动时要做更多的工作。
- en: There's more...
  id: totrans-477
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多……
- en: By default, `restorecon` will only restore the `type` context and leave the
    others as it found them. This can be overridden with the `-F` flag.
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`restorecon`只会恢复`type`上下文，并将其他上下文保留为它发现的样子。这可以通过`-F`标志来覆盖。
- en: We also mentioned resetting the `root` user's password, which is made oh-so-annoying
    by SELinux.
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还提到了重置`root`用户密码，这在SELinux的情况下变得非常烦人。
- en: Let's say you've forgotten the `root` password to your box; the way to go about
    fixing this is to boot into single-user mode, change the password, and reboot...or
    at least, that used to be the way.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你忘记了你的盒子的`root`密码；解决这个问题的方法是进入单用户模式，更改密码，然后重新启动……或者至少，过去是这样的。
- en: 'Now, the steps involved look like this:'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，所涉及的步骤看起来是这样的：
- en: Reboot the system.
  id: totrans-482
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动系统。
- en: Edit the GRUB entry for your installation before it times out.
  id: totrans-483
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在超时之前编辑你的安装的GRUB条目。
- en: Make sure the `linux16` line is `rw` instead of `ro`, and change the `init`
    to something like `/bin/bash`.
  id: totrans-484
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保`linux16`行是`rw`而不是`ro`，并将`init`更改为类似`/bin/bash`的东西。
- en: Continue the boot process.
  id: totrans-485
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续引导过程。
- en: Make sure your `/` directory is mounted as `rw`, and you can edit files.
  id: totrans-486
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你的`/`目录被挂载为`rw`，你可以编辑文件。
- en: Run `passwd` to update the `root` password.
  id: totrans-487
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`passwd`来更新`root`密码。
- en: Run `touch .autorelabel` in the `/` directory, and reboot.
  id: totrans-488
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/`目录中运行`touch .autorelabel`，然后重新启动。
- en: Check you can log in.
  id: totrans-489
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查你是否可以登录。
- en: If you skip the `touch .autorelabel` step, it won't work, and you'll have to
    start again.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你跳过了`touch .autorelabel`这一步，它就不会起作用，你就得重新开始。
- en: In the grand scheme of things, it's not much, but it can be infuriating in the
    moment.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 从长远来看，这并不算什么，但在当时可能会令人恼火。
- en: Roundup - permissions, SELinux, and AppArmor
  id: totrans-492
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结-权限、SELinux和AppArmor
- en: At what point is it too late?
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 什么时候为时已晚？
- en: When have you exhausted every possible avenue for resolving your problem?
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 当你已经尽一切可能来解决你的问题时呢？
- en: Do you have decent backups that you've checked and confirmed work?
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 你有检查并确认工作的良好备份吗？
- en: Are you tearing your hair out?
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 你是不是快要抓狂了？
- en: Has it been three days, and have you not seen daylight since Tuesday?
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 已经三天了，你自周二以来就没有见过阳光了吗？
- en: Permissions can be tricky and awkward, and sometimes it's just better to say,
    "Screw it, this system is too far gone, I'm starting again." My general rule of
    thumb for this sort of thing is how many meals I have skipped trying to fix something,
    and if it's more than one, that's too many meals skipped.
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 权限可能会很棘手和尴尬，有时最好的办法就是说：“算了，这个系统已经太糟糕了，我要重新开始。”我对这种事情的一般准则是我跳过了多少顿饭来修复问题，如果超过一顿，那就是跳过了太多的饭。
- en: Before now, I've done stupid things, as I think I've made painfully clear throughout
    this book so far. I've chmod'd entire systems to `777` recursively (which breaks
    a lot), I've deleted directories in an effort to free up space, only to discover
    that directory was actually rather important to the system's good health (I won't
    share which one, but it had files and non-files inside it). I've even stopped
    an accidental `rm` of much more than I intended to `rm` and stressed myself blue
    trying to work out how much of the filesystem I'd actually hosed.
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之前，我做过很愚蠢的事情，我认为在这本书中我已经非常清楚地表明了。我曾经递归地将整个系统的权限改为`777`（这会造成很多问题），我曾经删除目录以释放空间，结果发现那个目录实际上对系统的健康非常重要（我不会分享是哪一个，但它里面有文件和非文件）。我甚至阻止了一个意外的`rm`，比我打算的`rm`多得多，然后努力工作，试图弄清楚我实际上已经损坏了多少文件系统。
- en: In short, I've broken systems to the point where they're technically fixable,
    but where the time it would take outweighs the heartache of doing a recovery.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，我已经把系统搞得乱七八糟，以至于它们在技术上是可以修复的，但花费的时间超过了恢复的痛苦。
- en: SELinux, AppArmor, and simple blanket Linux permissions can leave you scouring
    the internet for obscure error messages, in the hope someone else has come across
    the exact same problem as you, and that they've decided to share their solution
    (as long as it isn't "It's fine, I fixed it, closing this thread").
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: SELinux、AppArmor和简单的Linux权限可能会让你在互联网上搜寻晦涩的错误信息，希望有人遇到过和你完全相同的问题，并且他们决定分享他们的解决方案（只要不是“没事了，我解决了，关闭这个帖子”）。
- en: But all that said, the macOS systems, and even POSIX standard file permissions,
    are important. It can be time-consuming and annoying, but using tools such as
    `audit2allow` can greatly reduce your blood pressure, while adding to your awesomeness,
    and learning the correct `chmod` incantations can speed up your troubleshooting
    tenfold.
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，所有这些说法，macOS系统，甚至POSIX标准文件权限，都很重要。这可能会耗费时间和令人讨厌，但使用诸如`audit2allow`之类的工具可以大大降低你的血压，同时增加你的厉害程度，学习正确的`chmod`咒语可以将你的故障排除速度提高十倍。
- en: For the most part, the software you install from the official repositories is
    going to be set up sensibly, and as long as the third party is worth their salt,
    you might even find that other repositories you add later include appropriate
    SELinux permissions on their software. The situation is so much better than it
    was when SELinux first started to be a thing.
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，你从官方仓库安装的软件会被合理地设置好，只要第三方值得信赖，你甚至可能会发现后来添加的其他仓库也包含他们软件的适当SELinux权限。情况比SELinux刚开始出现时好多了。
- en: I remember when people recommended disabling SELinux as step one on their guides,
    and I'm glad we're beyond those days, but sometimes it can be tempting.
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 我记得以前人们在他们的指南中建议将SELinux禁用作为第一步，我很高兴我们已经走出了那些日子，但有时候还是很诱人。
- en: Those moments when you're at your wit's end, and you just want your application
    to work, can be the most tempting moments to disable SELinux. Hold firm, be steadfast,
    and tell yourself you're not going to be beaten by a computer.
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 当你快要绝望，只想让你的应用程序工作时，禁用SELinux可能是最诱人的时刻。坚定不移，坚定不移，告诉自己你不会被电脑打败。
- en: It's not like you're up against HAL 9000.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 这不像是你要对抗HAL 9000一样。
