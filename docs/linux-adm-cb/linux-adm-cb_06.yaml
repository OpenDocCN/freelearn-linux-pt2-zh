- en: Security, Updating, and Package Management
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全、更新和软件包管理
- en: 'The following topics will be covered in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Checking package versions
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查软件包版本
- en: Checking the OS version
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查操作系统版本
- en: Checking for updates
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查更新
- en: Automating updates
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动更新
- en: Checking mailing lists and errata pages
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查邮件列表和勘误页面
- en: Using snaps
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Snaps
- en: Using Flatpak
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Flatpak
- en: Using Pip, RubyGems, and other package managers
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Pip、RubyGems和其他软件包管理器
- en: Dependency hell (a quick word)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖地狱（简短说明）
- en: Compiling from sources
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从源代码编译
- en: Adding additional repositories
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加额外的软件源
- en: Introduction
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Your system will be in a perfect state once (maybe twice) in its lifetime.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您的系统在其生命周期中会有一次（也许两次）处于完美状态。
- en: The first time that it's perfect, unsullied, and unsoiled, is when it's installed
    (providing that you've ticked the box to update the packages during installation).
    Your system will never again be in such a pristine condition, because it has not
    had dirty human hands meddling with its innards.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次完美、纯洁和未被玷污的时候是在安装时（假设您已经在安装过程中勾选了更新软件包的选项）。您的系统再也不会处于如此原始的状态，因为它没有被肮脏的人类手干预过。
- en: The second time it's perfect is when it's turned off for the last time, with
    a job well done, and with a visit to the scrap factory well earned (or, in the
    case of cloud computing, a quick ethereal jaunt to silicon heaven).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 第二次完美的时候是当它最后一次关闭时，工作完成得很好，并且值得去报废厂参观（或者在云计算的情况下，快速地去硅天堂）。
- en: In this section, you'll learn about different sources of packages, how to go
    about finding and installing new software, and the importance of keeping your
    systems secure and up to date (lest you end up as a headline on The Register).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将了解软件包的不同来源，如何查找和安装新软件，以及保持系统安全和最新的重要性（以免最终成为The Register的头条新闻）。
- en: It's not the most fun element of the job, and you might find yourself banging
    your head against the nearest wall several times, but if you get it right, you'll
    find you have to deal with considerably fewer problems caused by mismatched software
    in your infrastructure.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是工作中最有趣的部分，你可能会发现自己多次撞头在最近的墙上，但如果你做对了，你会发现你需要处理的基础架构中由软件不匹配引起的问题会大大减少。
- en: The best installations that I've come across automatically rebuild their images
    periodically, then roll them out across the infrastructure in a consistent and
    testable way. That takes time to accomplish, and here, we will look at the building
    blocks to get you started.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我遇到的最好的安装会定期重新构建它们的镜像，然后以一致且可测试的方式在基础架构中推出它们。这需要时间来完成，在这里，我们将看看开始的基本组件。
- en: Technical requirements
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter will deal with disparate package managers and multiple ways of
    doing the same thing (which pretty much sums up Linux in general).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涉及不同的软件包管理器和执行相同操作的多种方法（这基本上概括了Linux）。
- en: 'Because of that, we''re going to use three different boxes in our `Vagrantfile`,
    as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将在我们的`Vagrantfile`中使用三个不同的盒子，如下所示：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Spinning up these boxes (with `vagrant up`) will provide you with a CentOS
    installation, a Debian installation, and an Ubuntu installation:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 启动这些盒子（使用`vagrant up`）将为您提供一个CentOS安装、一个Debian安装和一个Ubuntu安装：
- en: '![](img/9f597ee6-7597-406c-a1a4-f664640a9382.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9f597ee6-7597-406c-a1a4-f664640a9382.png)'
- en: We're going to be using each of these at one point or other.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在某个时候使用每一个。
- en: Checking package versions
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查软件包版本
- en: In this section, we'll look at listing the packages installed on our systems,
    and getting the version numbers of those packages.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将查看已安装在我们系统上的软件包，并获取这些软件包的版本号。
- en: This will generally be useful if you hear about the latest vulnerability that
    signals the end of the world, and you are shouted at by your boss to fix it, fix
    it, fix it.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常是有用的，如果你听说了最新的漏洞，它预示着世界末日，你的老板大喊让你去修复它，修复它，修复它。
- en: There are a considerable number of vulnerabilities out there; it just so happens
    that a few of the bigger ones bleed through to the mainstream media on occasion.
    These are arguably the most dangerous, as they make people panic, and if there's
    one thing worse than a bad situation, it's being in a bad situation while everyone
    around you is losing their heads.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 存在大量的漏洞；偶尔会有一些更大的漏洞渗透到主流媒体。这些可以说是最危险的，因为它们会让人们恐慌，如果有比处于糟糕境地更糟糕的事情，那就是当你周围的人都在失去理智时处于糟糕境地。
- en: You should also generally keep your systems up to date, because it's a lot more
    awkward to jump several version releases (when you inevitably do have to upgrade)
    than to change things incrementally.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 通常也应该保持系统最新，因为跨越多个版本的升级（当您最终需要升级时）比逐步改变事物更加麻烦。
- en: Getting ready
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Ensure that all of your boxes are spun up, and try to connect to the first
    two (CentOS and Debian):'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 确保所有盒子都已启动，并尝试连接前两个（CentOS和Debian）：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In your Debian box, be sure to install `aptitude`, as it''s one of the frontends
    that we''ll be using later in this section; while it is installed by default on
    some distributions, this Debian installation isn''t one of them:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的Debian盒子中，确保安装`aptitude`，因为这是我们稍后在本节中将要使用的前端之一；虽然它在某些发行版上是默认安装的，但这个Debian安装不是其中之一：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How to do it...
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: The method is similar for each OS, but we're going to take them in turn.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 每个操作系统的方法都类似，但我们将依次进行。
- en: CentOS
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CentOS
- en: CentOS (and Red Hat) have two package managers, with another soon to be added
    to the equation.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: CentOS（和Red Hat）有两个软件包管理器，另一个即将加入到等式中。
- en: Starting at the top, we have **RPM Package Manager** (**RPM** is a recursive
    acronym), which is the underpinning of package management in Red Hat based systems.
    It is what you might consider to be a raw package manager, in the sense that it
    is primordial, and you probably won't be using it directly day to day.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 从头开始，我们有**RPM软件包管理器**（**RPM**是一个递归缩写），它是Red Hat系统中软件包管理的基础。从某种意义上说，它是原始的软件包管理器，因为它是原始的，你可能不会每天直接使用它。
- en: 'RPM does the following four things:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: RPM执行以下四个操作：
- en: Select
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择
- en: Query
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询
- en: Verify
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证
- en: Install
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装
- en: These options have arguments, and the one that I find myself using the most
    often is query.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这些选项有参数，我经常使用的是查询。
- en: 'To list all installed packages on your system, use `-qa`, as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出系统上所有已安装的软件包，请使用`-qa`，如下所示：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To list a specific package, you can name it (without the full version information),
    as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出特定软件包，可以按名称（不包括完整版本信息），如下所示：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To get information on the package, you can use `-i`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取有关软件包的信息，可以使用`-i`：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'One trick that I find useful is to output specific information in a pseudo-YAML
    fashion. This can be handy for logging the versions of packages, and can be accomplished
    with the `--queryformat` option:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现有用的一个技巧是以伪YAML格式输出特定信息。这对于记录软件包的版本非常方便，可以通过`--queryformat`选项实现：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: I joke about how RPM is old hat, but there are a considerable number of areas
    in which it excels, and in a lot of cases it's much quicker to run a package query
    using the `rpm` command than any of its available frontends, meaning that it is
    great for scripts. Just be aware that using both RPM and YUM together (to install
    things) can cause problems.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我开玩笑说RPM已经过时了，但它在许多方面都表现出色，而且在许多情况下，使用`rpm`命令运行软件包查询要比任何可用的前端快得多，这意味着它非常适合脚本。只是要注意，同时使用RPM和YUM（安装东西）可能会导致问题。
- en: If you want to use something a bit more recent, the current incarnation of the
    nice frontend to RPM is called **Yellowdog Updater Modified** (**YUM**), and was
    originally developed for Yellow Dog Linux.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想使用一些更近期的东西，那么对RPM的良好前端的当前版本称为**Yellowdog Updater Modified**（**YUM**），最初是为Yellow
    Dog Linux开发的。
- en: YUM is generally used because it handles dependency resolution (automatic downloading
    and installing of dependent packages) as well as installation from configured
    remote repositories.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: YUM通常被使用，因为它处理依赖关系解析（自动下载和安装依赖软件包）以及从配置的远程存储库安装。
- en: Those of you that had a Playstation 3 in the mid-2000s might be interested to
    know that Yellow Dog was targeted to run on those consoles, during the brief period
    that Sony allowed for the installation of third-party operating systems alongside
    its own Orbis OS (based on FreeBSD.)
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 那些在2000年代中期拥有Playstation 3的人可能会感兴趣知道，Yellow Dog是针对这些游戏机开发的，当时索尼允许在自己的Orbis OS（基于FreeBSD）旁边安装第三方操作系统的时间很短。
- en: 'To list all installed packages with YUM, use `list installed`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出所有已安装的软件包，请使用`list installed`：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You can also use `yum` to query individual pieces of information, just like
    we did with RPM, as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以像我们使用RPM一样使用`yum`来查询单个信息，如下所示：
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note that we also get the available packages by default, and those of you with
    sharp eyes will have noticed that the only difference between these two packages
    is the fact that the available one is the 32-bit version.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，默认情况下我们还会得到可用的软件包，你们中眼尖的人会注意到这两个软件包之间唯一的区别是可用的版本是32位的。
- en: DNF (which doesn't stand for did not finish) is the newest of the frontend package
    managers to take on the task of unifying Red Hat installations. It has been the
    default in Fedora (a good distribution, and also Red Hat's testing ground) for
    a while, which means that there is a good chance it'll make it into the next version
    of CentOS and Red Hat itself. For the most part, it's a drop-in replacement, with
    a couple of newer features to justify its existence.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: DNF（这并不代表未完成）是最新的前端软件包管理器，负责统一Red Hat安装。它已经成为Fedora（一个很好的发行版，也是Red Hat的测试场）的默认选项一段时间了，这意味着它很可能会进入下一个版本的CentOS和Red
    Hat本身。在大多数情况下，它是一个可替换的工具，还有一些新功能来证明它的存在。
- en: Debian
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Debian
- en: Under the hood, Debian uses the `dpkg` package manager to install and manage
    packages. There are also various frontends available, such as `apt` and `aptitude`,
    which make management more user friendly.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在底层，Debian使用`dpkg`软件包管理器来安装和管理软件包。还有各种可用的前端，比如`apt`和`aptitude`，使管理更加用户友好。
- en: 'Starting with the basics, you can use `dpkg-query` to query installed packages
    on a system:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 从基础开始，您可以使用`dpkg-query`来查询系统上安装的软件包：
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You''ll no doubt notice that by default, the packages and versions are separated
    by a tab character. Personally, I think this is hideous (because two spaces are
    the superior option), but thankfully, we can customize the output by using `showformat`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你肯定会注意到，默认情况下，软件包和版本之间用制表符分隔。我个人认为这很丑陋（因为两个空格是更好的选择），但幸运的是，我们可以使用`showformat`来自定义输出：
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This can be especially handy for scripts!
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于脚本来说特别方便！
- en: 'On top of `dpkg-query`, we have `apt`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`dpkg-query`，我们还有`apt`：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This default output might be preferable to you.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这个默认输出可能更适合你。
- en: '`apt` is the newer way of interacting with packages on your system, though
    the traditionalists among you (or those that have learned from traditionalists)
    might be more familiar with the `apt-get` and `apt-cache` suite of tools.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`apt`是与系统上的软件包交互的新方法，尽管你们中的传统主义者（或者从传统主义者那里学到的人）可能更熟悉`apt-get`和`apt-cache`工具套件。'
- en: Lastly for this section, there's `aptitude`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在本节中，还有`aptitude`。
- en: Aptitude is the first package manager that I can remember using, and I also
    remember it being a pain to use, because occasionally, it would drop me into a
    TUI (textual or text-based user interface), and I wouldn't know what was happening.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Aptitude是我记得使用的第一个软件包管理器，我还记得它很难用，因为有时它会让我进入TUI（文本或基于文本的用户界面），我不知道发生了什么。
- en: 'It''s possible to use `aptitude` on the command line, as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在命令行上使用`aptitude`，如下所示：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'It''s also possible to type `aptitude` on its own, and get dropped into the
    TUI:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以单独输入`aptitude`，然后进入TUI：
- en: '![](img/e2ff4e45-f9fc-4d94-8b34-f025f8bf7b76.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e2ff4e45-f9fc-4d94-8b34-f025f8bf7b76.png)'
- en: This interface can be navigated either via the arrow keys on your keyboard,
    or by using your mouse.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用键盘上的箭头键或鼠标来导航此界面。
- en: 'Right off the bat, however, we can see the listed `Security Updates` and `Installed
    Packages`, which make up the `369` packages that we get on the command line:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们可以立即看到列出的`安全更新`和`已安装的软件包`，这构成了我们在命令行上得到的`369`个软件包。
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We can double-click and drill down into the `aptitude` interface.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以双击并深入到`aptitude`界面。
- en: 'In the following screenshot, I''ve shown the two kernels installed in our VM
    (`4.9.0-6` and `4.9.0-7`):'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的屏幕截图中，我展示了我们的VM中安装的两个内核（`4.9.0-6`和`4.9.0-7`）：
- en: '![](img/38ac4bfb-6dfc-4ec3-bb56-3d5ff56bf5c2.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/38ac4bfb-6dfc-4ec3-bb56-3d5ff56bf5c2.png)'
- en: You might also notice `linux-image-amd64`, which is a meta-package, as opposed
    to a package in its own right.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还注意到`linux-image-amd64`，这是一个元包，而不是一个独立的包。
- en: 'We can look for these kernels on the command line, too:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以在命令行上查找这些内核：
- en: '[PRE14]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: How it works...
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: What you're effectively doing (in both cases) is querying the package database
    on your system.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 您实际上正在做的事情（在这两种情况下）是查询系统上的软件包数据库。
- en: On your CentOS system, RPM and YUM are both looking inside `/var/lib/rpm` in
    order to determine the state of your system.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的CentOS系统上，RPM和YUM都在`/var/lib/rpm`中查看，以确定系统的状态。
- en: Similarly, on your Debian system, your package state is held within `/var/lib/dpkg`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，在您的Debian系统上，您的软件包状态保存在`/var/lib/dpkg`中。
- en: It is advisable to not mess with these folders outside of the applications that
    are used to manage them, as modifying the nature of the packages installed on
    your system (outside of a package manager) can cause odd, and sometimes destructive,
    behavior.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 最好不要在用于管理它们的应用程序之外搞乱这些文件夹，因为修改系统上安装的软件包的性质（在软件包管理器之外）可能会导致奇怪的，有时是破坏性的行为。
- en: There's more...
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Remember that you don't have to use the system's package manager to list versions;
    if you would rather trust the output of the application itself, most applications
    have some variation of the `-v`, `--version` standard.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，您不必使用系统的软件包管理器来列出版本；如果您更愿意相信应用程序本身的输出，大多数应用程序都有某种形式的`-v`、`--version`标准。
- en: '`bash`, for example, is as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`bash`如下所示：
- en: '[PRE15]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The following shows the code for `ssh`, which uses `-V` (uppercase):'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 以下显示了`ssh`的代码，其中使用了`-V`（大写）：
- en: '[PRE16]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'And, just to be awkward, Vagrant uses `-v` (lowercase):'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，为了使人感到困扰，Vagrant使用了`-v`（小写）：
- en: '[PRE17]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: You may have noticed the distinct lack of Ubuntu in the preceding examples;
    this is because anything that works on a Debian system is extremely likely to
    work on an Ubuntu system.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到在前面的示例中缺少Ubuntu；这是因为在Debian系统上运行的任何东西极有可能在Ubuntu系统上运行。
- en: Checking the OS version
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查操作系统版本
- en: We will be using the same `Vagrantfile` that was used in the previous section.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用在上一节中使用的相同的`Vagrantfile`。
- en: In this section, we're going to list the canonical version of our operating
    system, as well as the kernel version.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将列出我们操作系统的规范版本，以及内核版本。
- en: We will also take a look at the concept of LSB compliance.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将研究LSB兼容性的概念。
- en: How to do it...
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: We'll break this section into the different operating systems.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把这一部分分成不同的操作系统。
- en: CentOS
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CentOS
- en: 'We can determine the version of our `CentOS` installation by printing the contents
    of the `centos-release` file, as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过打印`centos-release`文件的内容来确定我们的`CentOS`安装版本，如下所示：
- en: '[PRE18]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Here''s a fun fact (among a certain type of people): if you `cat` the contents
    of `redhat-release` on your box, you''ll get the same information, due to the
    fact that `CentOS` and Red Hat systems are so closely aligned:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是（在某种类型的人中间）：如果您在您的盒子上`cat` `redhat-release`的内容，您将获得相同的信息，因为`CentOS`和Red
    Hat系统是如此紧密地对齐：
- en: '[PRE19]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '`cat` (derived from concatenate) is a program that was historically used to
    print the contents of multiple files to standard out.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`cat`（源自concatenate）是一个历史上用于将多个文件的内容打印到标准输出的程序。'
- en: 'Likewise, `system-release` is a symbolic link to `centos-release`:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，`system-release`是指向`centos-release`的符号链接：
- en: '[PRE20]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'If you wanted more detailed information, you could even print the contents
    of the `os-release` file:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要更详细的信息，甚至可以打印`os-release`文件的内容：
- en: '[PRE21]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: These commands tell you the release of your operating system; what they don't
    provide you with is the kernel release, which is separate (think back to [Chapter
    1](e2264f18-69d3-4ff4-af6c-dc8fe152b3e0.xhtml), *Introduction and Environment
    Setup*).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令告诉您操作系统的版本；它们没有提供给您的是内核版本，这是分开的（回想一下[第1章](e2264f18-69d3-4ff4-af6c-dc8fe152b3e0.xhtml)，*介绍和环境设置*）。
- en: 'To determine the kernel release, one might query `dmesg`, as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定内核版本，可以查询`dmesg`，如下所示：
- en: '[PRE22]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Alternatively, for a command that doesn''t rely on a log file, you might run
    `uname` with `-a`, in order to print all information about the system:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，对于不依赖日志文件的命令，您可以运行带有`-a`的`uname`，以打印有关系统的所有信息：
- en: '[PRE23]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'For just the kernel release information, use `-r`, as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 仅获取内核版本信息，请使用`-r`，如下所示：
- en: '[PRE24]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '`uname` is definitely not a Linux-specific command; it''ll work on most Unix
    and Unix-like derivatives. Take a look at what it prints out on your FreeBSD or
    OpenBSD systems (or your macOS box, if you''re not that sad).'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`uname`绝对不是一个特定于Linux的命令；它将在大多数Unix和类Unix的衍生产品上运行。看看它在您的FreeBSD或OpenBSD系统上（或者如果您不那么悲伤的话，在您的macOS盒子上）打印出什么。'
- en: 'You can also use YUM, as listed previously:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用YUM，如前所述：
- en: '[PRE25]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If you are a real rebel, you can even take a look at what kernels you have
    installed in `/boot`:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是一个真正的叛逆者，您甚至可以查看您在`/boot`中安装了哪些内核：
- en: '[PRE26]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: There's a good chance that the most recent version (emboldened in the preceding
    code) is the one that you're running, though this doesn't always ring true.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 最新版本（在前面的代码中加粗）很有可能是您正在运行的版本，尽管这并不总是正确的。
- en: Debian
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Debian
- en: Things are much the same in the Debian world, although there are fewer OS version
    files to be worried about.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在Debian世界中情况大致相同，尽管要担心的OS版本文件较少。
- en: 'In Debian, we can look at the contents of `/etc/debian_version` for the version
    that we are running:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在Debian中，我们可以查看`/etc/debian_version`的内容，以获取我们正在运行的版本：
- en: '[PRE27]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Or, we can look in `/etc/os-release`, like with `CentOS`:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以像在`CentOS`中一样查看`/etc/os-release`：
- en: '[PRE28]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Also like in `CentOS`, we can `grep` the `dmesg` log for the version of our
    kernel:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在`CentOS`中一样，我们可以通过`grep` `dmesg`日志来获取我们内核的版本：
- en: '[PRE29]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Or, we could use `uname`, as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以使用`uname`，如下所示：
- en: '[PRE30]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Yes, Debian has a much more recent version of the kernel at the time of writing
    this book; this is a mixture of `CentOS`  backporting fixes and features into
    their older kernels (literally taking improvements from upstream and applying
    them to older releases,) and the Debian distribution having a much shorter release
    cycle.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，Debian在撰写本书时有一个更加最新的内核版本；这是`CentOS`将修复和功能后移植到他们的旧内核中（从上游获取改进并将其应用到旧版本中），以及Debian发行版的发布周期要短得多的混合体。
- en: 'You can list the installed versions by using any of the methods listed previously;
    the following is the `dpkg-query` example:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用之前列出的任何方法列出已安装的版本；以下是`dpkg-query`的示例：
- en: '[PRE31]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'There''s also the trusty old `/boot`, as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 还有老式的`/boot`，如下所示：
- en: '[PRE32]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Ubuntu
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ubuntu
- en: Like all good distributions, Ubuntu also lets you `cat` a file to get information;
    but, unlike some others, it also tells you when you log in (by default).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 像所有好的发行版一样，Ubuntu也允许您`cat`一个文件以获取信息；但是，与其他一些发行版不同的是，它还会在您登录时告诉您（默认情况下）。
- en: 'SSHing to our Ubuntu box should print something like the following:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 通过SSH连接到我们的Ubuntu主机应该打印出类似以下的内容：
- en: '[PRE33]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Note the emboldened line, which tells you right when you log in what version
    of Ubuntu you are running.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 注意加粗的行，它告诉您在登录时正在运行的Ubuntu版本。
- en: 'This **message of the day** (**MOTD**) is actually built from several files;
    the header is `00-header`:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这个**每日消息**（**MOTD**）实际上是由几个文件构建的；头部是`00-header`：
- en: '[PRE34]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Within this file are some lines, as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个文件中有一些行，如下所示：
- en: '[PRE35]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Here, we can check to see whether the `lsb-release` file exists (and is readable)
    before it's sourced (`. /etc/lsb-release`) for the version.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以检查`lsb-release`文件是否存在（并且可读），然后再使用该文件（`. /etc/lsb-release`）来确定版本。
- en: Then, we have an `if` statement, which says that if the `DISTRIB_DESCRIPTION`
    variable is empty, and the `lsb_release` binary is executable, we fall back to
    using that utility to determine the release version (`lsb_release -s -d`).
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们有一个`if`语句，它说如果`DISTRIB_DESCRIPTION`变量为空，并且`lsb_release`二进制文件可执行，我们将回退到使用该实用程序来确定发行版本（`lsb_release
    -s -d`）。
- en: We then print the output, which is what we saw at the top of the login message.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们打印输出，这就是我们在登录消息顶部看到的内容。
- en: 'Failing the MOTD, we can `cat /etc/lsb-release` ourselves, using the following
    command:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 如果MOTD失败，我们可以自己`cat /etc/lsb-release`，使用以下命令：
- en: '[PRE36]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Or, we can use `os-release` again, as follows:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以再次使用`os-release`，如下所示：
- en: '[PRE37]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'For the kernel, it''s much the same as the previous actions; check the `uname`,
    as follows:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 对于内核，与之前的操作基本相同；检查`uname`，如下所示：
- en: '[PRE38]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Check the installed versions, as follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 检查已安装的版本，如下所示：
- en: '[PRE39]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Or, take a look at `/boot`, as follows:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，看看`/boot`，如下所示：
- en: '[PRE40]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The `vmlinuz` object, as seen previously, is the compressed executable of the
    Linux kernel.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`vmlinuz`对象，如前所述，是Linux内核的压缩可执行文件。'
- en: How it works...
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When you are querying these files, you are asking the OS what version it thinks
    it is.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 当你查询这些文件时，你在询问操作系统它认为自己是什么版本。
- en: This is useful in everything from security to writing scripts. Not only do you
    want to know when the version of an OS you're running is insecure, you might also
    want to add a sanity check to the top of any scripts, to ensure they're only run
    on systems they're designed for, that is, you can write a script for CentOS systems,
    and step one can be to "check we're actually being executed on a CentOS system."
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于从安全到编写脚本都很有用。您不仅想知道您正在运行的操作系统版本是否不安全，还可能想在任何脚本的顶部添加一个健全性检查，以确保它们只在为其设计的系统上运行，也就是说，您可以为CentOS系统编写一个脚本，第一步可以是“检查我们实际上是在CentOS系统上执行”。
- en: '`uname` (Unix name) is more interesting, because instead of querying files
    for the OS version, what we were actually doing was querying the running kernel
    for its information.'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`uname`（Unix名称）更有趣，因为我们实际上不是在查询操作系统版本的文件，而是在查询正在运行的内核的信息。'
- en: '`uname` uses the `uname` system call (confused yet?), which is not only POSIX-compliant,
    but has roots that go all the way back to the 1970s and PWB/Unix.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`uname`使用`uname`系统调用（搞糊涂了吗？），它不仅符合POSIX标准，而且根源可以追溯到上世纪70年代和PWB/Unix。'
- en: There's more...
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'You might have noticed the Ubuntu usage of `lsb_release` to grab its OS version;
    the same can be done on `CentOS`, but first, `lsb_release` needs to be installed:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到Ubuntu使用`lsb_release`来获取其操作系统版本；在`CentOS`上也可以这样做，但首先需要安装`lsb_release`：
- en: '[PRE41]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Now, we can run the same command that Ubuntu uses in order to get OS information:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以运行Ubuntu使用的相同命令以获取操作系统信息：
- en: '[PRE42]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The same can be done on `Debian`, without having to install anything by default:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Debian`上也可以这样做，而无需默认安装任何内容：
- en: '[PRE43]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '**Linux Standard Base** (**LSB**) is basically a standard that multiple distributions
    sign up to. It specifies a **Filesystem Hierarchy Standard** (**FHS**), as well
    as various other components of a Linux system.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '**Linux标准基础**（**LSB**）基本上是多个发行版签署的标准。它指定了**文件系统层次结构标准**（**FHS**），以及Linux系统的各种其他组件。'
- en: The LSB also suggests the package format of RPM, although Debian and Ubuntu
    obviously don't use this by default, opting for `.deb` instead. To get around
    this, Debian offers the `alien` package, which is used to transform `.rpm` files
    into `.deb` files prior to installation. It is something of a dirty hack, and
    it doesn't guarantee compliance; it is more a sort of courtesy nod.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: LSB还建议使用RPM的软件包格式，尽管Debian和Ubuntu显然不会默认使用这个格式，而是选择`.deb`。为了解决这个问题，Debian提供了`alien`软件包，用于在安装之前将`.rpm`文件转换为`.deb`文件。这有点像一个肮脏的黑客，它并不能保证合规性；它更像是一种礼貌的表示。
- en: See also...
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: Take a look at the old Unix programs and conventions, and you'll be surprised
    by how many of them have survived till the modern day.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 看看旧的Unix程序和约定，您会惊讶地发现其中有多少已经存活到现代。
- en: GNU is not Unix, though, so why do Linux systems also have `uname`? The answer
    is, because it's Unix-like, and a lot of the commands and conventions pioneered
    by Unix were rewritten by the GNU operating system and free software movement,
    for the convenience of familiarity.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: GNU不是Unix，那么为什么Linux系统也有`uname`？答案是，因为它类似于Unix，并且Unix开创的许多命令和约定被GNU操作系统和自由软件运动重新编写，以方便熟悉。
- en: Checking for updates
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查更新
- en: In this section, we will use the `Vagrantfile` that was used in part of the
    first section. Now that we know the versions of software associated with our system
    (packages, OS, and kernel), we're going to look at what updates are available
    to us, and how we might install them.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用第一节的一部分中使用的`Vagrantfile`。现在我们知道与我们的系统相关的软件版本（软件包、操作系统和内核），我们将查看我们可以使用的更新以及如何安装它们。
- en: We will check for both specific package updates and updates to all packages.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将检查特定软件包的更新以及所有软件包的更新。
- en: How to do it...
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: In this section, we're going to drop into our `CentOS` and `Debian` boxes, skipping
    Ubuntu, as the same rules from Debian will apply.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将进入我们的`CentOS`和`Debian`框，跳过Ubuntu，因为Debian的相同规则也适用。
- en: We are going to use the kernel throughout these examples, although any package
    on your system can be substituted.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在这些示例中使用内核，尽管您的系统上的任何软件包都可以替换。
- en: CentOS
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CentOS
- en: 'In `CentOS`, the easiest way to check for updates to a package is with YUM,
    as follows:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在`CentOS`中，检查软件包更新的最简单方法是使用YUM，如下所示：
- en: '[PRE44]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Note that we are not limiting the output to installed packages; instead, we
    are checking what we have installed, and what is available.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们不限制输出到已安装的软件包；相反，我们正在检查我们安装了什么以及可用的软件包。
- en: The output tells us that while the version number has not changed, the release
    of the kernel has been updated, and is available from the `updates/7/x86_64` repo.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 输出告诉我们，虽然版本号没有更改，但内核的发布已经更新，并且可以从`updates/7/x86_64`仓库中获取。
- en: 'To update our kernel, we would simply run a `yum upgrade` command, as follows:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新我们的内核，我们只需运行`yum upgrade`命令，如下所示：
- en: '[PRE45]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: We've previously mentioned the list of packages-that-will-change when running
    YUM commands. With '-y' we auto-accept these changes, but if you're unsure, it's
    a good idea to omit the '-y' flag and sanity-check manually by reading the presented
    list.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前提到运行YUM命令时会列出将更改的软件包列表。使用“-y”我们会自动接受这些更改，但如果您不确定，最好省略“-y”标志，并通过阅读呈现的列表手动进行健全性检查。
- en: So, specific packages are pretty simple, but how do we check all installed packages
    on our system?
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，特定软件包非常简单，但是如何检查系统上安装的所有软件包呢？
- en: With YUM, of course!
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 当然是用YUM！
- en: 'We can use either `update` or `upgrade`, which are basically the same on modern
    installations:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`update`或`upgrade`，在现代安装中基本上是相同的：
- en: '[PRE46]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Using `upgrade` (rather than `update`) should technically be different, as it
    also uses logic to obsolete and replace obsoleted programs, but because this is
    behavior that most people desire, `obsoletes=1` is also set in `yum.conf`, making `update` and `upgrade` functionally
    the same by default.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`upgrade`（而不是`update`）在技术上应该是不同的，因为它还使用逻辑来使过时的程序过时并替换，但因为这是大多数人所期望的行为，`obsoletes=1`也设置在`yum.conf`中，使`update`和`upgrade`在默认情况下具有相同的功能。
- en: 'Our preceding command should result in a screen like the following:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前的命令应该会显示如下屏幕：
- en: '![](img/1b99277c-c53c-46ff-9896-1180817c89da.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1b99277c-c53c-46ff-9896-1180817c89da.png)'
- en: Note that without flags added to the command, the update will stop here, with
    a prompt for you to choose `y/d/N` (with `N` being the default).
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果没有在命令中添加标志，更新将在此处停止，并提示您选择`y/d/N`（其中`N`是默认值）。
- en: If you are ready to upgrade, passing `y` to this command will update and install
    the preceding packages.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您准备好升级，通过此命令传递`y`将更新并安装前面的软件包。
- en: If you are not ready to upgrade, passing `d` will only download the packages.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有准备好升级，传递`d`将只下载软件包。
- en: As we've said before, typically, the only programs that require a reboot to
    update are the kernel and `systemd` (the `init` system), as these are the soul
    of your installation, and you're basically killing the old program to make way
    for the new (which will be selected by default on most systems, following an upgrade).
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所说，通常，需要重新启动以更新的唯一程序是内核和`systemd`（`init`系统），因为它们是您安装的灵魂，您基本上是在杀死旧程序以为新程序腾出空间（在大多数系统上，升级后会默认选择新程序）。
- en: 'Running our `yum info` command will now show two installed kernels, and no
    available ones, as follows:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 运行我们的`yum info`命令现在将显示两个已安装的内核，没有可用的内核，如下所示：
- en: '[PRE47]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Debian
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Debian
- en: On Debian, we're going to use `apt`, which is the newest and, in my opinion,
    friendliest tool.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在Debian上，我们将使用`apt`，这是最新的，也是我认为最友好的工具。
- en: 'Unlike YUM, we can easily and independently update the list of available packages:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 与YUM不同，我们可以轻松独立地更新可用软件包的列表：
- en: '[PRE48]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Note that it only updates its list, not the programs themselves.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，它只更新其列表，而不是程序本身。
- en: 'Now, we can look for specific information by using the suggested command:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用建议的命令查找特定信息：
- en: '[PRE49]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Without adding the `regex-matched` package on the end, this command will list
    all packages that are `upgradable`:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在末尾不添加`regex-matched`软件包的情况下，此命令将列出所有可升级的软件包：
- en: '[PRE50]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'As with YUM, we can upgrade a single package by using `apt`:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 与YUM一样，我们可以使用`apt`来升级单个软件包：
- en: '[PRE51]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Note that we specifically use the `install` option instead of `upgrade`, as `upgrade`
    would try to do all packages, instead of just `linux-image-amd64`.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们特别使用`install`选项而不是`upgrade`，因为`upgrade`会尝试执行所有软件包，而不仅仅是`linux-image-amd64`。
- en: 'If we wanted to upgrade everything, we would use `upgrade` or `full-upgrade`:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要升级所有内容，我们将使用`upgrade`或`full-upgrade`：
- en: '[PRE52]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The reason that I used `full-upgrade` is because using only `upgrade` can result
    in packages not being upgraded (if that upgrade requires the removal of another
    package).
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用`full-upgrade`的原因是，仅使用`upgrade`可能导致软件包不会被升级（如果该升级需要删除另一个软件包）。
- en: There may be moments when `upgrade` is preferable to `full-upgrade`, so I would
    advocate checking the output of your `upgrade` command prior to confirming that
    it is what you want to do.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会有时候`upgrade`比`full-upgrade`更可取，因此我建议在确认是否要执行`upgrade`命令之前检查其输出。
- en: How it works...
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: When you run the preceding package manager commands, what you are doing is querying
    whichever upstream servers they're configured to talk to, and asking if there
    are any newer versions of the installed packages available.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行前面的软件包管理器命令时，您所做的是查询它们配置为连接的上游服务器，并询问是否有安装软件的更新版本可用。
- en: Configured repositories are in `/etc/yum.repos.d/` on `CentOS` and `/etc/apt/sources.list.d`
    (or `sources.list.conf`).
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 配置的存储库位于`CentOS`的`/etc/yum.repos.d/`和`/etc/apt/sources.list.d`（或`sources.list.conf`）中。
- en: If there are newer versions of your software available, you have the option
    to install or download for later. Generally, it's a good idea to ensure that all
    your software is kept up to date, but this is especially true for public-facing
    services, such as web servers and SSH daemons.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的软件有更新版本可用，您可以选择安装或下载以备后用。通常，确保所有软件保持最新是个好主意，但对于公共服务（如Web服务器和SSH守护程序）来说尤其如此。
- en: There's more...
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Some popular and tricky software exists outside the realm of sense (as far as
    this opinionated author is concerned).
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 一些受欢迎且棘手的软件存在于感知范围之外（就这位有主见的作者而言）。
- en: 'Of particular note are the Hashicorp suite of tools, which check to see if
    there''s a new version of themselves available when invoked. This means that when
    you run `Terraform`, there is a chance that it will inform you that it is out
    of date, and you should download a newer version:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 特别值得注意的是Hashicorp工具套件，当调用时会检查自身是否有新版本可用。这意味着当您运行`Terraform`时，有可能会通知您它已过时，并建议您下载新版本：
- en: '[PRE53]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: The package maintainers for distributions usually do not keep on top of this,
    through no fault of their own, and quite a few won't even bother to package software
    that does this at the moment. What this means is that frequently people will instead
    add Terraform, Packer, and other pieces of cool software outside of their package
    manager, doubling the number of package management systems you need to keep track
    of (one being your system's, and the other being you).
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 发行版的软件包维护者通常不会及时跟进，这并非他们的错，而且很多人甚至都不会费心打包此类软件。这意味着经常人们会添加Terraform、Packer和其他酷炫软件到他们的软件包管理器之外，使您需要跟踪的软件包管理系统数量翻倍（一个是您系统的，另一个是您自己的）。
- en: Automating updates
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动更新
- en: In this section, we will use the `Vagrantfile` that was used in part of the
    first section.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用第一节的一部分中使用的`Vagrantfile`。
- en: Something of a slur, "automatic updating" is a sticky subject for a lot of system
    administrators, because historically, it was frequently the case that updates
    would brick a system.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: “自动更新”是一个棘手的话题，对于许多系统管理员来说，因为在历史上，更新通常会使系统变砖。
- en: This is less and less likely these days, and there are ways you can automate
    updates on your boxes without worry (though I still wouldn't do this in production,
    personally).
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 这在如今越来越不太可能发生，而且您可以在不担心的情况下自动更新您的框（尽管我个人在生产环境中不会这样做）。
- en: We will also discuss programmatically rebuilding systems.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将讨论以编程方式重建系统。
- en: How to do it...
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Jump into each of your boxes in turn, in this section.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中依次进入每个框中。
- en: It is important to note that you might not want to automatically install updates
    at all, especially if you are in an environment where machines are periodically
    destroyed and rebuilt.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，您可能根本不想自动安装更新，特别是如果您处于定期销毁和重建机器的环境中。
- en: There might also be in-house procedures that tie your hands, meaning that whatever
    you are technically capable of doing, bureaucracy can always get in the way.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 可能还有内部程序会限制您的操作，这意味着无论您在技术上能够做什么，官僚主义总是会成为阻碍。
- en: CentOS
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CentOS
- en: 'On `CentOS` systems, we have a handy tool called `yum-cron`:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在`CentOS`系统上，我们有一个方便的工具叫做`yum-cron`：
- en: '[PRE54]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: It comes with two configuration files, located in `/etc/yum/`.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 它带有两个配置文件，位于`/etc/yum/`中。
- en: 'By default, the `/etc/yum/yum-cron.conf`  file will be used, and it has a random
    sleep inside it that we are going to disable:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，将使用`/etc/yum/yum-cron.conf`文件，并且其中有一个我们将要禁用的随机休眠：
- en: '[PRE55]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Now, this means that when `yum-cron` is called, it will automatically run,
    applying the default settings of `yum-cron.conf`:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这意味着当调用`yum-cron`时，它将自动运行，应用`yum-cron.conf`的默认设置：
- en: '[PRE56]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: If there are no updates, `yum-cron` will not show any output (as seen previously).
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有更新，`yum-cron`将不显示任何输出（如之前所见）。
- en: 'If there are updates, by default, you will get a notification that they have
    downloaded successfully:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有更新，默认情况下，您将收到已成功下载的通知：
- en: '![](img/8890cd95-2e9f-4e8d-9c5e-31674b585dbd.png)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8890cd95-2e9f-4e8d-9c5e-31674b585dbd.png)'
- en: 'If you wanted to apply the updates automatically, that would involve another
    config file change, as follows:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要自动应用更新，那将涉及另一个配置文件更改，如下所示：
- en: '[PRE57]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Running `yum-cron` again will apply the downloaded updates:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行`yum-cron`将应用已下载的更新：
- en: '![](img/b337a448-b86e-440d-8b61-1908e95298e3.png)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b337a448-b86e-440d-8b61-1908e95298e3.png)'
- en: We have mentioned previously (but it is worth saying again) that this does not
    necessarily mean that services will instantly be fixed, or will have new features.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前已经提到过（但值得再次提到）这并不一定意味着服务将立即修复或将具有新功能。
- en: That is where the command `needs-restarting` comes in.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是`needs-restarting`命令发挥作用的地方。
- en: 'You can also run this with a timer (or `cron`, if you must) to list processes
    that need restarting after they''ve been updated, or a component they utilize
    has:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用定时器（或`cron`，如果必须）运行此命令，以列出在更新后需要重新启动的进程，或者它们使用的组件：
- en: '[PRE58]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'If you would like nicer output, you can specify services, as follows:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望获得更好的输出，可以指定服务，如下所示：
- en: '[PRE59]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Or only if a reboot is needed, use the following command:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 或者只有在需要重新启动时，使用以下命令：
- en: '[PRE60]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'A really simple way of starting `yum-cron` is with the following line:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 启动`yum-cron`的一个非常简单的方法如下：
- en: '[PRE61]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Debian
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Debian
- en: In the Debian (and Ubuntu) world, we use a package called `unattended-upgrades`.
    It's been around for quite a while, and is usually the option people go with for
    automatically updating their Debian-based distributions.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在Debian（和Ubuntu）世界中，我们使用一个名为`unattended-upgrades`的软件包。它已经存在了相当长的时间，通常是人们自动更新他们基于Debian的发行版的选择。
- en: 'Jump into your stretch box and run a quick `install` of the package, as follows:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 跳转到您的stretch框并运行以下包的快速`install`：
- en: '[PRE62]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'If you now `ls` the `/etc/apt/apt.conf.d/` directory, you will see a couple
    of new files:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 如果现在`ls` `/etc/apt/apt.conf.d/`目录，您会看到几个新文件：
- en: '[PRE63]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: These are the crux of the `unattended-upgrades` package.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是`unattended-upgrades`软件包的关键。
- en: 'If we take a look at the block in the `50unattended-upgrades` configuration
    file that handles which updates to pull in, we will see the following:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们看一下`50unattended-upgrades`配置文件中处理要拉取哪些更新的块，我们会看到以下内容：
- en: '[PRE64]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Note that the only uncommented line is the bottom one (before the closing brace).
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，只有最后一行是未注释的行（在右括号之前）。
- en: 'We are going to uncomment the lines that precede it, as follows:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将取消注释它之前的行，如下所示：
- en: '[PRE65]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'You can run and test your configuration by starting the command in debug mode:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在调试模式下启动命令来运行和测试您的配置：
- en: '[PRE66]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'It might look something like the following:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 它可能看起来像以下内容：
- en: '![](img/41e2ddc7-898d-4023-845e-e646e015438a.png)'
  id: totrans-291
  prefs: []
  type: TYPE_IMG
  zh: '![](img/41e2ddc7-898d-4023-845e-e646e015438a.png)'
- en: Noticed how the upgrades were actually installed, and a log file was created.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到升级实际上已经安装，并且创建了一个日志文件。
- en: How it works...
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: '`yum-cron` is actually just an easy way to use YUM from within a cron job (which
    we mentioned disparagingly earlier, while discussing `systemd` timers). Because
    of this, you would find it easy to incorporate into a custom timer (see earlier
    chapters) or a cron job that might run nightly.'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '`yum-cron`实际上只是在cron作业中使用YUM的一种简单方式（我们之前在讨论`systemd`定时器时曾轻蔑地提到）。因此，您会发现很容易将其纳入自定义定时器（请参阅前几章）或可能每晚运行的cron作业中。'
- en: In general, you could apply all updates to a development environment nightly,
    and then potentially stagger updates to other (higher) environments throughout
    the week, upgrading production to the next Tuesday. That is entirely up to you,
    as the all-powerful sysadmin.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，您可以每晚将所有更新应用到开发环境，然后可能在一周内将更新分散到其他（更高级）环境，将生产环境升级到下一个星期二。这完全取决于您作为全能的系统管理员。
- en: 'If you have taken the suggestion of enabling `yum-cron` as a service, you should
    now find that the following file exists:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经采纳了将`yum-cron`作为服务启用的建议，现在应该会发现以下文件存在：
- en: '[PRE67]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'This enables the two `cron` jobs, as follows:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启用两个`cron`作业，如下所示：
- en: '[PRE68]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: These will use the configuration files that we mentioned.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使用我们提到的配置文件。
- en: In the case of Debian's `unattended-upgrades`, and as with most modern systems,
    `systemd` is used to run this job daily.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 在Debian的`unattended-upgrades`的情况下，与大多数现代系统一样，`systemd`用于每天运行此作业。
- en: 'List your `systemd` timers, as follows:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 列出您的`systemd`定时器，如下所示：
- en: '[PRE69]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Note the two `apt` jobs, the first of which runs the following:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意两个`apt`作业，第一个运行以下内容：
- en: '[PRE70]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'The second one runs the following:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个运行以下内容：
- en: '[PRE71]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: There's more...
  id: totrans-308
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Like unattended upgrades on Debian, `yum-cron` has the ability to work through
    only specific types of upgrades. By default, this is set to `default`, as seen
    in the following snippet, which is why we didn''t modify it earlier:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 与Debian上的无人值守升级一样，`yum-cron`有能力仅处理特定类型的升级。默认情况下，这设置为`default`，如以下片段所示，这就是为什么我们之前没有修改它的原因：
- en: '[PRE72]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: There's nothing stopping you from changing this, perhaps specifying that only
    security upgrades should be applied automatically?
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 没有什么能阻止你改变这一点，也许可以指定只有安全升级应该自动应用？
- en: Automatic provisioning
  id: totrans-312
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动配置
- en: In the prelude I suggested that we would touch on this, and it is definitely
    worth discussing.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 在序言中，我建议我们会涉及到这一点，这绝对值得讨论。
- en: Once, it was the case that physical machines roamed the earth, preying on unsuspecting
    sysadmins that dared to enter their swamps and server cages.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 曾经，物理机器在地球上漫游，捕食那些敢于进入它们的沼泽和服务器笼子的无辜系统管理员。
- en: Nowadays, servers still exist, but they have been given a more tech-unfriendly
    and media-savvy name, becoming colloquially known as the **cloud**, and being
    made transparent enough that sysadmins no longer know whether their favorite hipster
    distribution is running on a Dell, HPE, or IBM machine.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，服务器仍然存在，但它们已经被赋予了一个更加不友好和媒体熟悉的名称，变得通俗地被称为**云**，并且变得足够透明，以至于系统管理员不再知道他们最喜欢的时髦发行版是在戴尔、HPE还是IBM机器上运行。
- en: This has given rise to transient servers, or servers that periodically cease
    to exist in the evening, only to be born anew the next morning.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致了瞬态服务器的出现，或者服务器在晚上定期停止存在，只在第二天早上重新诞生。
- en: Aside from giving you an existential crisis about whether or not you cease to
    exist when you go to sleep for the night, this might start to give you ideas about
    never updating your machines, instead simply ensuring that they come back up with
    all updates already applied.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 除了让您对于晚上睡觉时是否存在产生存在危机之外，这可能开始让您想到从不更新您的机器，而只是确保它们在所有更新已经应用的情况下重新启动。
- en: The notion of automatically provisioning your infrastructure on a schedule is
    gaining traction, and what it boils down to is creating an image programmatically
    (with a program such as Packer) before uploading and/or moving it to a different
    portion of your virtual infrastructure, where another program (Terraform) can
    use the new image to spin up a lot of shiny new boxes.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 按计划自动配置您的基础设施的概念正在获得认可，其核心是通过程序（如Packer）以编程方式创建一个镜像，然后将其上传和/或移动到虚拟基础设施的不同部分，另一个程序（Terraform）可以使用新镜像来启动许多闪亮的新盒子。
- en: Obviously, this works all the way up to a production network without issues,
    because there are no customers around on your `dev` instances (I hope—I really,
    really hope). It does present a problem in production, but then you start to think
    about wild and crazy things such as blue/green deployments.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，这在生产网络上完全没有问题，因为在您的`dev`实例上没有客户在周围（我希望-我真的，真的希望）。但在生产中会出现问题，然后您开始考虑一些疯狂的事情，比如蓝/绿部署。
- en: Checking mailing lists and errata pages
  id: totrans-320
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查邮件列表和勘误页面
- en: Outside of our systems, we will take a look at where you go for news on how
    your operating systems are performing, in general. Are they healthy? Do they need
    some space? Are they going to implode pretty soon?
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的系统之外，我们将看看您在哪里获取有关操作系统整体表现的新闻。它们健康吗？它们需要一些空间吗？它们会很快崩溃吗？
- en: It's good practice to get into this habit, because occasionally, system and
    behavioral changes may require manual intervention on the part of the sysadmin,
    even if you automate all of your other problems away.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 养成这种习惯是很好的做法，因为偶尔，系统和行为变化可能需要系统管理员进行手动干预，即使您已经自动解决了所有其他问题。
- en: Servers – who needs them?
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器-谁需要它们？
- en: Getting ready
  id: totrans-324
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this section, we will be using our VMs a bit, and the almighty internet.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将稍微使用我们的虚拟机和强大的互联网。
- en: How to do it...
  id: totrans-326
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: We're going to take a look at our VMs a little bit, but we are mostly going
    to be focusing on online locations for news.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将稍微查看一下我们的虚拟机，但我们主要将专注于在线新闻来源。
- en: There are various methods and places that you might go for information, so let's
    work through some of the more popular ones.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 有各种各样的方法和地方可以获取信息，所以让我们逐步了解一些更受欢迎的方法。
- en: Package changelogs
  id: totrans-329
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件包更改日志
- en: If you want information about a package, one thing that you might like is the
    `changelog`, accessible from your system with a simple RPM command.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想获取有关软件包的信息，您可能会喜欢的一件事是`changelog`，可以通过简单的RPM命令从系统中访问。
- en: 'First, find the package you want to check; we''re going to grab the most recently
    installed `kernel`:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，找到您想要检查的软件包；我们将获取最近安装的`kernel`：
- en: '[PRE73]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Now, open the `changelog` for that `kernel` (it''s long):'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开那个`kernel`的`changelog`（很长）：
- en: '[PRE74]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'You will get something like the following:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 您将得到类似以下的内容：
- en: '![](img/5c52aa6a-0e84-407e-bbb1-47fb7cf93c5d.png)'
  id: totrans-336
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5c52aa6a-0e84-407e-bbb1-47fb7cf93c5d.png)'
- en: This can be a good way to check for specific changes, but it can also sometimes
    be a bit tricky (depending on the nature of the log).
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以是检查特定更改的好方法，但有时可能有点棘手（取决于日志的性质）。
- en: 'To show that it''s available for other packages, too, here''s `lsof`, which
    is a lot more sparse:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 为了证明它也适用于其他软件包，这里是`lsof`，它要少得多：
- en: '![](img/2045bc58-7d52-49e0-8c00-f75af20d7d20.png)'
  id: totrans-339
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2045bc58-7d52-49e0-8c00-f75af20d7d20.png)'
- en: 'Under Debian and Ubuntu, we can use `apt` to accomplish the same thing, as
    follows:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 在Debian和Ubuntu下，我们可以使用`apt`来完成相同的事情，如下所示：
- en: '[PRE75]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Admittedly, the output isn''t as verbose, as shown in the following screenshot:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 诚然，输出并不像下面的截图那样详细：
- en: '![](img/8d5a288e-3d68-47b4-ae2f-82800af7bf82.png)'
  id: totrans-343
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8d5a288e-3d68-47b4-ae2f-82800af7bf82.png)'
- en: Official sources and mailing Lists
  id: totrans-344
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 官方来源和邮件列表
- en: Red Hat, through the goodness of their collective hearts, provide a page to
    reference for errata and update news: [https://access.redhat.com/security/updates/advisory](https://access.redhat.com/security/updates/advisory)
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: Red Hat通过他们的集体心灵之善，提供了一个用于参考勘误和更新新闻的页面：[https://access.redhat.com/security/updates/advisory](https://access.redhat.com/security/updates/advisory)
- en: There are some important and very helpful links on this page, such as a link
    to the Red Hat **Common Vulnerabilities and Exposures** (**CVE**) database: [https://access.redhat.com/security/security-updates/#/cve](https://access.redhat.com/security/security-updates/#/cve)
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 此页面上有一些重要且非常有帮助的链接，例如指向Red Hat **通用漏洞和暴露** (**CVE**) 数据库的链接：[https://access.redhat.com/security/security-updates/#/cve](https://access.redhat.com/security/security-updates/#/cve)
- en: If you have a Red Hat login, there's also a link to their own errata page on
    the customer portal.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有Red Hat登录，还可以在客户门户上找到他们自己的勘误页面链接。
- en: Mailing lists are a big part of this world, with some going back several decades,
    and you, too, can receive far too much email (most of which you'll never read)!
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 邮件列表是这个世界的重要组成部分，有些邮件列表可以追溯到几十年前，您也可能会收到太多的电子邮件（其中大部分您永远不会阅读）！
- en: Most of the big projects have mailing lists (sometimes several of them), and
    it would be next to pointless to subscribe to all of them (for example, why sign
    up to the PowerPC mailing list for the kernel, when you got rid of your New World
    Macintosh in the mid 2000s?)
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数大型项目都有邮件列表（有时有几个），订阅所有这些列表几乎是毫无意义的（例如，为什么要订阅内核的PowerPC邮件列表，当你在2000年代中期就摆脱了你的New
    World Macintosh呢？）
- en: 'Select the ones that interest you, and that might be useful for administration.
    Security lists are generally a good place to start:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 选择您感兴趣的内容，可能对管理有用。安全列表通常是一个很好的起点：
- en: Red Hat maintains a few at the following at [https://www.redhat.com/mailman/listinfo](https://www.redhat.com/mailman/listinfo).
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Red Hat在[https://www.redhat.com/mailman/listinfo](https://www.redhat.com/mailman/listinfo)上维护了一些邮件列表。
- en: CentOS has their own mailing list at [https://lists.centos.org/mailman/listinfo/](https://lists.centos.org/mailman/listinfo/).
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CentOS在[https://lists.centos.org/mailman/listinfo/](https://lists.centos.org/mailman/listinfo/)上有他们自己的邮件列表。
- en: Debian have their mailing list at [https://lists.debian.org/](https://lists.debian.org/).
    (It includes handy documentation on which lists you might find useful.)
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Debian在[https://lists.debian.org/](https://lists.debian.org/)上有他们的邮件列表。（其中包括有关您可能会发现有用的列表的方便文档。）
- en: And, of course, Ubuntu has their list at [https://lists.ubuntu.com/](https://lists.ubuntu.com/).
    (It is also nicely formatted, such as Debian.)
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当然，Ubuntu也有他们的列表在[https://lists.ubuntu.com/](https://lists.ubuntu.com/)。（它也格式良好，就像Debian一样。）
- en: Good lists to sign up to include announcement lists; for example, the `CentOS-announce`
    list covers general and security information.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 注册的好列表包括公告列表；例如，`CentOS-announce`列表涵盖了一般和安全信息。
- en: Included on the official sources list should be the various publicly viewable
    source trees of projects, and their associated *Issues* sections (in places such
    as GitHub). Be sure to keep an eye on any pet projects that you like the look
    of, or those that might underpin your infrastructure (Terraform, and suchlike).
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 在官方源列表中应该包括各种公开可见的项目源树，以及它们相关的*Issues*部分（比如GitHub）。一定要留意你喜欢的任何个人项目，或者那些可能支撑你基础设施的项目（比如Terraform等）。
- en: Other sources
  id: totrans-357
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他来源
- en: BBC, HackerNews, The Register, and Reddit have all previously informed me of
    problems that I should have been aware of before reading about them on the front
    page of popular news sites; don't underestimate the mainstream media when it comes
    to wanting to drum up panic.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: BBC，HackerNews，The Register和Reddit以前都曾告诉我一些问题，我在阅读热门新闻网站的头条新闻之前应该意识到这些问题；当涉及到想要引起恐慌时，不要低估主流媒体。
- en: How it works...
  id: totrans-359
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: These projects are public, and those involved are well aware of the stakes when
    there's a problem. One only has to take a look at the panic caused when big vulnerabilities
    are revealed to appreciate why notification avenues are so widely used and appreciated.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 这些项目是公开的，参与其中的人都非常清楚存在问题时的风险。只需看一下当大漏洞被揭示时引起的恐慌，就能够理解为什么通知渠道如此广泛地被使用和赞赏。
- en: If a project had no means of communicating critical problems with its users,
    it would very quickly find itself inundated with concerned individuals, just wanting
    to know that the software they're using is being kept up to date.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个项目没有与用户沟通关键问题的手段，它很快就会发现自己被关心的个人淹没，这些个人只是想知道他们使用的软件是否被及时更新。
- en: All that we can do in this fight against security issues and breaking changes
    is keep informed, and act swiftly when we need to.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在对抗安全问题和重大变化方面所能做的就是保持信息灵通，并在需要时迅速采取行动。
- en: There's more...
  id: totrans-363
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There is a lot more, really; check for blogs, such as CentOS ([https://blog.centos.org/](https://blog.centos.org/)),
    and individual mailing lists for other packages and projects.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上还有很多；查看博客，比如CentOS（[https://blog.centos.org/](https://blog.centos.org/)），以及其他软件包和项目的个人邮件列表。
- en: OpenSSL, for example, is a good one to keep an eye on ([https://www.openssl.org/community/mailinglists.html](https://www.openssl.org/community/mailinglists.html)),
    and I don't say that for any particular heart-health-related reason.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，OpenSSL是一个值得关注的好例子（[https://www.openssl.org/community/mailinglists.html](https://www.openssl.org/community/mailinglists.html)），我并不是因为任何特定的心脏健康原因而这么说。
- en: A big one is the kernel mailing list selection, viewable through [https://lkml.org/](https://lkml.org/);
    here, kernel news is generally broken first.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 一个重要的是内核邮件列表选择，可以通过[https://lkml.org/](https://lkml.org/)查看；在这里，内核新闻通常是最先被报道的。
- en: Using snaps
  id: totrans-367
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用snaps
- en: In this section, we're going to use our Ubuntu VM.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将使用我们的Ubuntu VM。
- en: '**Snaps** (by Canonical) are one of two new kids in the neighborhood. They
    are a method for packaging software in a universal fashion, so that one package
    can be deployed to any OS that supports snaps.'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '**Snaps**（由Canonical提供）是新邻居中的两个新成员之一。它们是一种以通用方式打包软件的方法，因此一个软件包可以部署到支持snaps的任何操作系统上。'
- en: At the time of writing this book, Ubuntu probably has the best support for snaps,
    but Canonical proudly lists installation instructions for quite a few distributions
    on their website (despite the fact that three of these are just downstream Ubuntu
    distros), [https://docs.snapcraft.io/core/install](https://docs.snapcraft.io/core/install).
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 在写这本书的时候，Ubuntu可能是对snaps支持最好的，但Canonical在他们的网站上自豪地列出了相当多发行版的安装说明（尽管其中三个只是Ubuntu的下游发行版）[https://docs.snapcraft.io/core/install](https://docs.snapcraft.io/core/install)。
- en: I am usually pretty harsh on Canonical, so let me just say that I applaud this
    effort. It has been true for a while that the disparate packaging methods on Linux
    are one of the many reasons that some developers stay away, and anything that
    aims to close that gap is a welcome addition to the community.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 我通常对Canonical很苛刻，所以让我说一声，我对这一努力表示赞赏。有段时间以来，Linux上不同的打包方法是一些开发人员远离的原因之一，任何旨在弥合这一差距的努力都是社区的受欢迎的补充。
- en: How to do it...
  id: totrans-372
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Jump onto the Ubuntu machine we created earlier, as follows:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 跳转到我们之前创建的Ubuntu机器，如下所示：
- en: '[PRE76]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: On our VM, the `snapd` service will already be started and running (or it should
    be; check with `systemctl`).
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的VM上，`snapd`服务将已经启动并运行（或者应该是的；使用`systemctl`进行检查）。
- en: Searching out snaps
  id: totrans-376
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搜索snaps
- en: 'To search for snaps, we use the `snap` command-line utility. In this example,
    I am going to look for another Canonical product (`lxd`):'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 要搜索snaps，我们使用`snap`命令行实用程序。在这个例子中，我将寻找另一个Canonical产品（`lxd`）：
- en: '[PRE77]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: We get a few results, variously published by Canonical and a few other names.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了一些结果，分别由Canonical和其他一些名称发布。
- en: 'It''s not limited to daemons either; in the following code I''m searching for
    the `aws-cli` tool:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 它不仅限于守护程序；在下面的代码中，我正在搜索`aws-cli`工具：
- en: '[PRE78]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Note the tick next to the publisher's name; this means that the package is from
    a verified account (in this case, Amazon Web Services).
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意发布者名称旁边的勾号；这意味着该软件包来自已验证的帐户（在这种情况下是亚马逊网络服务）。
- en: Installing snaps
  id: totrans-383
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装snaps
- en: 'The snap that we want has the name `lxd`, making our installation easy:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要的snap的名称是`lxd`，这样我们的安装就很容易了：
- en: '[PRE79]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'You will see a progress bar similar to the following:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到类似以下的进度条：
- en: '![](img/64973e8c-5fab-46ff-a99f-1f945a0ab60d.png)'
  id: totrans-387
  prefs: []
  type: TYPE_IMG
  zh: '![](img/64973e8c-5fab-46ff-a99f-1f945a0ab60d.png)'
- en: Once finished, you will have the `lxd` container manager installed from a snap.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，您将从一个snap安装了`lxd`容器管理器。
- en: Listing installed snaps
  id: totrans-389
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出已安装的snaps
- en: 'We can list our installed snaps with `snap list`, as follows:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`snap list`列出我们安装的snaps，如下所示：
- en: '[PRE80]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Interacting with daemon snaps
  id: totrans-392
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与守护程序snaps互动
- en: 'Because LXD is a daemon, we can enable it by using the `snap` command-line
    tool again; first, we should check the active state of our service, as follows:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 因为LXD是一个守护程序，我们可以再次使用`snap`命令行工具来启用它；首先，我们应该检查我们服务的活动状态，如下所示：
- en: '[PRE81]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'It is inactive, but we can activate it (we have the technology), as follows:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 它是非活动的，但我们可以激活它（我们有这项技术），如下所示：
- en: '[PRE82]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Checking the services again, we can see it has started:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 再次检查服务，我们可以看到它已经启动了：
- en: '[PRE83]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Under `systemd`, the service is called `snap.lxd.daemon.service`, if you want
    to use traditional tools to check its status.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 在`systemd`下，服务被称为`snap.lxd.daemon.service`，如果您想使用传统工具来检查它的状态。
- en: 'To prove that it has started and that we can interact with the daemon, we can
    use the bundled `lxc` package, as follows:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 为了证明它已经启动并且我们可以与守护进程交互，我们可以使用捆绑的`lxc`包，如下所示：
- en: '[PRE84]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: You can see that it tries to communicate with the socket; and, while it has
    given us a permission denied error in the preceding snippet, this does serve to
    highlight that the socket exists in the `/var/snap/` directory.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到它试图与套接字通信；虽然在前面的片段中它给了我们一个权限被拒绝的错误，但这确实突出了套接字存在于`/var/snap/`目录中。
- en: 'Let''s try again, with `sudo`:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再试一次，使用`sudo`：
- en: '[PRE85]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Awesome!
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！
- en: Removing snaps
  id: totrans-406
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移除snaps
- en: 'Finally, we can use our tool to remove `lxd` without prejudice:'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以使用我们的工具无偏见地移除`lxd`：
- en: '[PRE86]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: How it works...
  id: totrans-409
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Snaps work like any other package manager, installing and managing packages
    brought in from a repository on your system.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: Snaps像任何其他软件包管理器一样工作，安装和管理从存储库中引入的软件包。
- en: You'll also have noticed the core installation on our list of installed snaps;
    this is effectively the base platform that snaps work on top of.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 您还会注意到我们安装的snaps列表中的核心安装；这实际上是snaps工作的基本平台。
- en: '`snapd` is the daemon that underpins snaps; it''s the environment that manages
    the installed snaps, dealing with installs, updates, and deletion of old versions.'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: '`snapd`是支持snaps的守护进程；它是管理已安装的snaps的环境，处理安装、更新和删除旧版本。'
- en: 'When you install a snap, what you actually download is a read-only `squashfs`
    file that lives in `/var/lib/snapd/snaps/`:'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 当你安装一个snap时，你实际上下载的是一个位于`/var/lib/snapd/snaps/`中的只读`squashfs`文件：
- en: '[PRE87]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: The numbers are snap revision numbers.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数字是snap修订号。
- en: 'When these `squashfs` images are mounted by `snapd`, you can see them personified
    as loop devices with `df`:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 当这些`squashfs`镜像被`snapd`挂载时，您可以用`df`看到它们被人格化为循环设备：
- en: '[PRE88]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'You can also see the specific `mount` information with `mount`:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用`mount`命令查看特定的`mount`信息：
- en: '[PRE89]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Note that we can navigate into the locations where these snaps are mounted,
    as follows:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们可以进入这些snaps被挂载的位置，如下所示：
- en: '[PRE90]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'However, because the filesystem is read only, we cannot write anything inside
    of it:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于文件系统是只读的，我们无法在其中写入任何内容：
- en: '[PRE91]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Neat, right?
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 很整洁，对吧？
- en: 'We can use our snaps without calling the binaries directly, because of various
    `snap` entries in our `$PATH`:'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的`$PATH`中有各种`snap`条目，我们可以在不直接调用二进制文件的情况下使用我们的snaps：
- en: '[PRE92]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: The `PATH` is the list of defined locations where your shell will look for binaries;
    when you run `ls`, you're locating is the binary somewhere within your `PATH`.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: '`PATH`是您的shell将查找二进制文件的定义位置列表；当您运行`ls`时，您正在在`PATH`中的某个位置定位二进制文件。'
- en: Snaps are also self-contained, meaning that libraries and runtimes are bundled
    into the package (which makes portability between distributions easy).
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: Snaps也是自包含的，这意味着库和运行时被捆绑到软件包中（这使得在不同发行版之间的可移植性变得容易）。
- en: There's more...
  id: totrans-429
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: If you want detailed information about a snap, there's also the `snap info` command.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要关于snap的详细信息，还有`snap info`命令。
- en: 'The following is the output when the command is run against the `lxd` package:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 当命令针对`lxd`包运行时，以下是输出：
- en: '[PRE93]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: This should tell you most of what you need to know about any particular snap.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该告诉您大部分关于任何特定snap的信息。
- en: See also...
  id: totrans-434
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: You don't have to search for snaps on the command line, if you live in the 21st
    century.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你生活在21世纪，你就不必在命令行上搜索snaps。
- en: 'You can also use the `snapcraft.io` website at [https://snapcraft.io/](https://snapcraft.io/):'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`snapcraft.io`网站：[https://snapcraft.io/](https://snapcraft.io/)
- en: '![](img/b8015e11-f633-4c93-881d-a8456cc0132f.png)'
  id: totrans-437
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b8015e11-f633-4c93-881d-a8456cc0132f.png)'
- en: 'In the Store section, you will find a visual search, which can help you to
    find what you are after in a friendly, click-button fashion. In the following
    screenshot, I''ve searched for `aws`:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 在商店部分，您将找到一个视觉搜索，它可以帮助您以友好的、点击按钮的方式找到您想要的东西。在下面的截图中，我搜索了`aws`：
- en: '![](img/fa26d151-e0a0-4776-be9c-0f612b263d75.png)'
  id: totrans-439
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fa26d151-e0a0-4776-be9c-0f612b263d75.png)'
- en: Using Flatpak
  id: totrans-440
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Flatpak
- en: Flatpak (by Alex Larsson and the Flatpak team) is the second in the trendy clique
    of complete-solution package managers. It is also a good way of packaging software
    so that one package can be deployed to any OS that supports Flatpak installations.
    Sound familiar?
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: Flatpak（由Alex Larsson和Flatpak团队）是完整解决方案软件包管理器时髦团体中的第二个。这也是一种打包软件的好方法，这样一个软件包可以部署到支持Flatpak安装的任何操作系统。听起来很熟悉吗？
- en: Really, though, we are also getting into conflicting technology development
    (yet again) and holy wars (yet again).
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们又再次涉及到了冲突的技术发展和圣战。
- en: To kick things off, I should point out that Flatpak really does emphasize desktop
    applications over server applications, from their complex run commands to the
    fact that they are mostly graphical tools. Snaps are definitely more of a mixture
    between the two worlds.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我应该指出，Flatpak确实强调桌面应用程序而不是服务器应用程序，从它们复杂的运行命令到它们大多是图形工具的事实。Snaps绝对更多地是两个世界的混合体。
- en: Obviously if you want to install a GUI on your server, there's nothing stopping
    you, you could even use VNC for management! However, it's not really done, like
    fish fingers and custard.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，如果您想在服务器上安装GUI，没有什么能阻止您，您甚至可以使用VNC进行管理！然而，这并不是真的，就像鱼柳和卡斯塔德一样。
- en: Getting ready
  id: totrans-445
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: In this section, we will continue to use our Ubuntu VM (mostly because it's
    the one I still have open, after having written the last section).
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将继续使用我们的Ubuntu虚拟机（主要是因为它是我写完上一节后仍然打开的）。
- en: 'There''s no reason why we couldn''t use our Debian or CentOS box, instead;
    a host of other distributions are also supported, including (but not limited to)
    the following:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用我们的Debian或CentOS盒子，其他许多发行版也受支持，包括（但不限于）以下：
- en: Arch
  id: totrans-448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arch
- en: Fedora
  id: totrans-449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 联邦
- en: Gentoo
  id: totrans-450
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gentoo
- en: Solus
  id: totrans-451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Solus
- en: Alpine
  id: totrans-452
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阿尔卑斯
- en: openSUSE
  id: totrans-453
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: openSUSE
- en: 'To set up our VM for Flatpak, we have to install it, although it is available
    in the default repositories (potentially after an upgrade, depending on when you''re
    reading this; if you''re reading this prior to 2017, I''m impressed by your temporal-displacement
    abilities, but you should know that the future is dark and full of lemons):'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设置我们的VM以使用Flatpak，我们必须安装它，尽管它在默认仓库中可用（取决于您阅读本书的时间，可能需要升级；如果您在2017年之前阅读本书，我对您的时间位移能力印象深刻，但您应该知道未来是黑暗且充满柠檬）：
- en: '[PRE94]'
  id: totrans-455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'Next, we need to enable the remote `flathub` repo from [https://flathub.org](https://flathub.org):'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要从[https://flathub.org](https://flathub.org)启用远程`flathub`仓库：
- en: '[PRE95]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Now, we can install stuff!
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以安装东西了！
- en: How to do it...
  id: totrans-459
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: For the purposes of this section, I've chosen the relatively lightweight `vim`
    package to install from Flathub.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 为了本节的目的，我选择了相对轻量级的`vim`软件包从Flathub安装。
- en: Searching for a package
  id: totrans-461
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搜索软件包
- en: 'First, let''s look for the package:'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们查找软件包：
- en: '[PRE96]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Again, we have a few results, but the top one is what we're after.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们有一些结果，但最重要的是我们要找的。
- en: Installing our package
  id: totrans-465
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装我们的软件包
- en: 'We can install the package with a small command, as follows:'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用一个小命令安装软件包，如下所示：
- en: '[PRE97]'
  id: totrans-467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: This can take quite some time to download, and it takes up more space than you
    might expect (despite being a relatively lightweight package).
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能需要相当长的时间来下载，并且占用的空间可能比您预期的要大（尽管它是一个相对轻量级的软件包）。
- en: Running our package
  id: totrans-469
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行我们的软件包
- en: 'Once the installation is complete, you can run your new version of `Vim`:'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，您可以运行您的新版本`Vim`：
- en: '[PRE98]'
  id: totrans-471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: The package identifier is in three parts: usually `org/com.<company or team>.<app
    name>`.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 软件包标识符由三部分组成：通常是`org/com.<公司或团队>.<应用程序名称>`。
- en: 'It''s not the prettiest command, but it will drop you into the tried and true
    text editor, as follows:'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是最漂亮的命令，但它会让您进入经过验证的文本编辑器，如下所示：
- en: '![](img/27891bc3-c8ac-4b71-84bf-9f2e391b7522.png)'
  id: totrans-474
  prefs: []
  type: TYPE_IMG
  zh: '![](img/27891bc3-c8ac-4b71-84bf-9f2e391b7522.png)'
- en: 'If we look at the versions of the Flatpak installation and the native `Vim`
    install, we can see the difference:'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看Flatpak安装和本地`Vim`安装的版本，我们可以看到区别：
- en: '[PRE99]'
  id: totrans-476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: Listing installed packages
  id: totrans-477
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出已安装的软件包
- en: 'Now that we have something to actually show, we can list our installed `flatpak`
    packages:'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有东西可以展示了，我们可以列出我们安装的`flatpak`软件包：
- en: '[PRE100]'
  id: totrans-479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Note that it also tells us that the package is a `system` package, rather than
    a per-user package.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，它还告诉我们该软件包是一个`系统`软件包，而不是一个每个用户的软件包。
- en: User installations
  id: totrans-481
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户安装
- en: 'Flatpak also has the concept of local user installations, meaning that we can
    install our packages as our user, too:'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: Flatpak还有本地用户安装的概念，这意味着我们也可以以我们的用户身份安装我们的软件包：
- en: '[PRE101]'
  id: totrans-483
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: Removing packages
  id: totrans-484
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移除软件包
- en: 'When you inevitably get bored with `Vim` and go back to using `ed` for your
    day to day editing needs (because `ed` is the standard text editor), you can remove
    your package easily, as follows:'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 当您最终对`Vim`感到厌倦，并回到使用`ed`进行日常编辑需求时（因为`ed`是标准文本编辑器），您可以轻松地移除您的软件包，如下所示：
- en: '[PRE102]'
  id: totrans-486
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Here, we're specifically removing the user-installed version; the system one
    will remain.
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们特别移除了用户安装的版本；系统版本将保留。
- en: How it works...
  id: totrans-488
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'When you install a package using Flatpak, it ends up in one of two places:'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用Flatpak安装软件包时，它会出现在两个地方之一：
- en: System packages end up in `/var/lib/flatpak`.
  id: totrans-490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统软件包最终会出现在`/var/lib/flatpak`中。
- en: User packages end up in `~/.local/share/flatpak/`.
  id: totrans-491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户软件包最终会出现在`~/.local/share/flatpak/`中。
- en: 'Looking into these locations, we can find an `app` directory, and within that,
    our package:'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 查看这些位置，我们可以找到一个`app`目录，在其中有我们的软件包：
- en: '[PRE103]'
  id: totrans-493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Within this directory, there are yet more layers, which house the current version
    of your package and the various binary files.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个目录中，还有更多的层，其中包含您的软件包的当前版本和各种二进制文件。
- en: Packages are built atop runtimes, like those that you saw when you listed installed
    packages earlier. These runtimes are distribution agnostic, meaning that they
    can be installed on all of the Ubuntu, CentOS, and Fedora systems of the world.
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 软件包是建立在运行时之上的，就像您之前列出已安装软件包时看到的那样。这些运行时是分发无关的，这意味着它们可以安装在世界上所有的Ubuntu、CentOS和Fedora系统上。
- en: If there is something additional required for an application to function, such
    as a specific library, you can bundle that in your package, too.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用程序需要额外的东西来运行，比如特定的库，您也可以将其打包到您的软件包中。
- en: There's more...
  id: totrans-497
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'At the time of writing this book, there are `585` packages available to install
    from `flathub`, with the number growing every day:'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，有`585`个软件包可供从`flathub`安装，这个数字每天都在增长：
- en: '[PRE104]'
  id: totrans-499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'You can also update your applications with one command, as follows:'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用一个命令更新您的应用程序，如下所示：
- en: '[PRE105]'
  id: totrans-501
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: See also...
  id: totrans-502
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见...
- en: 'For those of you that hate `Vim` with a passion, despite its obvious superiority,
    Flathub has you covered:'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些对`Vim`深恶痛绝的人，尽管它显然更优秀，Flathub也为您提供了解决方案：
- en: '[PRE106]'
  id: totrans-504
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: There are many more packages available, but, as I've said previously, you are
    actually unlikely to find yourself using Flatpak on a server, simply because it's
    a desktop-focused endeavor.
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多软件包可用，但正如我之前所说，您实际上不太可能在服务器上使用Flatpak，因为它是一个面向桌面的努力。
- en: On your own computer, though, snaps and Flatpak packages can be installed side
    by side.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在您自己的计算机上，Snaps和Flatpak软件包可以并存安装。
- en: I once tried to use `Solus` as my daily driver, but wanted to ensure that I
    did nothing out of the ordinary with my installation. At the time, `Solus` had
    its own packages, snap support, and Flatpak support. This actually resulted in
    me using specific snaps for managing a Kubernetes setup, Flatpak to install `Slack`,
    and the system's own package manager for everything else; it was a bit of a mess
    by the end, but a consistent mess!
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 我曾试图将`Solus`作为我的日常驱动程序，但希望确保我的安装没有任何异常。当时，`Solus`有自己的软件包、snap支持和Flatpak支持。这实际上导致我使用特定的snaps来管理Kubernetes设置，使用Flatpak安装`Slack`，并使用系统自带的软件包管理器来处理其他所有事情；最后有点混乱，但是一致的混乱！
- en: Using Pip, RubyGems, and other package managers
  id: totrans-508
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Pip、RubyGems和其他软件包管理器
- en: Aside from YUM, Apt, snaps, and Flatpak, there are a host of other package management
    systems. Pip and RubyGems are programming-language related methods of distributing
    packages to systems; there are more than these two, but they're by far the most
    popular right now.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 除了YUM、Apt、snaps和Flatpak之外，还有许多其他软件包管理系统。Pip和RubyGems是分发软件包到系统的编程语言相关方法；除了这两种方法，还有更多，但它们目前是最受欢迎的。
- en: '**P****ip installs packages** (**Pip**) is included by default in recent Python
    installations. Gem is just a play on the fact that it is for packaging Ruby elements;
    it, too, is included in recent Ruby installations.'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: '**Pip安装软件包**（**Pip**）在最近的Python安装中默认包含。Gem只是玩弄它是用于打包Ruby元素的事实；它也包含在最近的Ruby安装中。'
- en: We're going to touch on installing software using these package managers.
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涉及使用这些软件包管理器安装软件。
- en: Getting ready
  id: totrans-512
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this section, we will continue to use our Ubuntu VM.
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将继续使用我们的Ubuntu VM。
- en: 'Install Pip and RubyGems on your Ubuntu machine (Python will already be installed,
    but it''s a separate package for Pip in this instance), as follows:'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的Ubuntu机器上安装Pip和RubyGems（Python将已经安装，但在这种情况下，Pip是一个单独的软件包），如下所示：
- en: '[PRE107]'
  id: totrans-515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Python2 and Python3 are both widely used, although these days, you really shouldn't
    be writing anything new in Python2 (which will be going out of support in 2020).
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: Python2和Python3都被广泛使用，尽管如今，您真的不应该在Python2中编写任何新内容（Python2将在2020年停止支持）。
- en: 'We now want to install `pip`, using the `easy_install3` script:'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们想要安装`pip`，使用`easy_install3`脚本：
- en: '[PRE108]'
  id: totrans-518
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: There is a way to install `python3-pip` using `apt`, but this version will be
    frequently out of date, and the whole point of using Pip is that you get the latest
    version of everything; hence why we use `easy_install`. Together with that, if
    you try to upgrade the system-installed version of Pip, it might very well work,
    but you'll be changing system-controlled packages outside of the system-method-of-control...
    phew.
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种方法可以使用`apt`安装`python3-pip`，但是这个版本经常过时，而使用Pip的整个目的是获得所有内容的最新版本；因此我们使用`easy_install`。除此之外，如果您尝试升级系统安装的Pip版本，可能会很好用，但是您将会在系统控制之外更改系统控制的软件包...
    哎呀。
- en: How to do it...
  id: totrans-520
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: We will now run through some basic things that you might do with each of these
    package managers.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将运行一些基本操作，您可能会使用这些软件包管理器。
- en: Pip
  id: totrans-522
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pip
- en: 'Starting with Pip, you can check which version you''re running with the `--version`
    argument:'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 从Pip开始，您可以使用`--version`参数检查您正在运行的版本：
- en: '[PRE109]'
  id: totrans-524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'You can list which packages you have installed (and their versions) with `list`,
    as follows:'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`list`列出您安装的软件包（及其版本），如下所示：
- en: '[PRE110]'
  id: totrans-526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'You can search for the package that you want; here, I''m checking for Ansible:'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以搜索您想要的软件包；在这里，我正在检查Ansible：
- en: '[PRE111]'
  id: totrans-528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: There are a lot of packages in the **Python package index** (**PyPI**), so you
    might get a lot of results from your search; this is where learning some `regex`
    and invoking `grep` can be useful.
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: '**Python软件包索引**（**PyPI**）中有很多软件包，因此您可能会从搜索中获得很多结果；这就是学习一些`regex`和调用`grep`可能会有用的地方。'
- en: 'Once it''s located, we can also install our package, as follows:'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦找到它，我们也可以安装我们的软件包，如下所示：
- en: '[PRE112]'
  id: totrans-531
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'Note the lack of `sudo`; this is because we want to install it as our user,
    meaning that the package ends up in a `.local` directory in our home directory
    (`~`):'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意缺少`sudo`；这是因为我们希望将其安装为我们的用户，这意味着软件包最终会出现在我们主目录（`~`）中的`.local`目录中：
- en: '[PRE113]'
  id: totrans-533
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'By default, the `.local/bin` directory is in our `PATH` (if we log out and
    back in):'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`.local/bin`目录在我们的`PATH`中（如果我们退出并重新登录）：
- en: '[PRE114]'
  id: totrans-535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'This means that we can just run `ansible` from our shell:'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们可以从我们的shell中运行`ansible`：
- en: '[PRE115]'
  id: totrans-537
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'After our package has been installed, we may find that we actually need an
    older version; thankfully, Pip lets you specify this easily, as follows:'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的软件包安装完成后，我们可能会发现我们实际上需要一个旧版本；幸运的是，Pip让您可以轻松指定这一点，如下所示：
- en: '[PRE116]'
  id: totrans-539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'And, at a later date, if we decide that we need the latest version (because
    the old playbook has finally been updated to work without deprecated features),
    we can upgrade, as follows:'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 并且，在以后的某个日期，如果我们决定需要最新版本（因为旧的playbook最终已更新以在没有弃用功能的情况下工作），我们可以升级，如下所示：
- en: '[PRE117]'
  id: totrans-541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: RubyGems
  id: totrans-542
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RubyGems
- en: 'Like Pip, we can check which version of RubyGems we have installed with a simple
    `gem` command:'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 与Pip一样，我们可以使用简单的`gem`命令检查我们安装了哪个版本的RubyGems：
- en: '[PRE118]'
  id: totrans-544
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'To list the installed gems, we can use `list`, funnily enough:'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出已安装的gems，我们可以使用`list`，非常有趣：
- en: '[PRE119]'
  id: totrans-546
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'If we want to search for a package, we use `gem search` (we also have the `--exact`
    option in RubyGems, which Pip lacks):'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想搜索软件包，我们使用`gem search`（RubyGems中还有`--exact`选项，Pip中缺少）：
- en: '[PRE120]'
  id: totrans-548
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'We can also install (as a user) with `gem install`:'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用`gem install`（作为用户）进行安装：
- en: '[PRE121]'
  id: totrans-550
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'Note that by default, the `.local` gem installation location will not be in
    your `PATH`, but we can call it with its full path from our home directory (to
    be added to our `PATH` at a later date):'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，默认情况下，`.local` gem安装位置不会出现在您的`PATH`中，但是我们可以在以后的某个日期从我们的主目录中使用其完整路径调用它（以添加到我们的`PATH`中）：
- en: '[PRE122]'
  id: totrans-552
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: 'As with Pip, we can install other versions of packages:'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: 与Pip一样，我们可以安装其他版本的软件包：
- en: '[PRE123]'
  id: totrans-554
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: Note that we used a different path here, dropping into the `/gems/` portion
    of the installation directory to call the package by its version.
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在这里使用了不同的路径，进入安装目录的`/gems/`部分，通过其版本调用软件包。
- en: 'If you go to `uninstall` the package, you now get a choice, as follows:'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您要`卸载`软件包，现在您有一个选择，如下所示：
- en: '[PRE124]'
  id: totrans-557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: Choose to uninstall `14.5.33` (option `2`).
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 选择卸载`14.5.33`（选项`2`）。
- en: 'We now have one version of `chef` installed, as follows:'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经安装了一个版本的`chef`，如下所示：
- en: '[PRE125]'
  id: totrans-560
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: 'Also like with Pip, we can upgrade this, as follows:'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 与Pip一样，我们也可以升级它，如下所示：
- en: '[PRE126]'
  id: totrans-562
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: Note how it also leaves the old version installed, by default.
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，默认情况下它也会保留旧版本的安装。
- en: How it works...
  id: totrans-564
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Pip and RubyGems try to be relatively self-contained, but they're still package
    managers, meaning that all they're effectively doing is querying an upstream repository
    for a package, and then downloading it onto your system.
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: Pip和RubyGems试图相对独立，但它们仍然是软件包管理器，这意味着它们实际上只是在上游存储库中查询软件包，然后将其下载到您的系统上。
- en: When you update your `PATH` to update whichever binary location the new executables
    live in, you're able to run the packages that you've just installed.
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 当您更新您的`PATH`以更新新可执行文件所在的位置时，您就能够运行您刚刚安装的软件包。
- en: There's more...
  id: totrans-567
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Pip and RubyGems are huge topics, with a large ethereal-blog-post potential
    for each, so it makes sense that there is a lot more to them that we have not
    covered. A couple of the more obvious things to mention will be covered in the
    following sections.
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: Pip和RubyGems是一个庞大的话题，每个话题都有大量的博客潜力，因此有很多我们没有涵盖的内容。接下来的几节将涵盖一些更明显的内容。
- en: When to use programming-language package managers
  id: totrans-569
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 何时使用编程语言软件包管理器
- en: So, here is the thing.
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，问题来了。
- en: Ansible and Chef are available in the Ubuntu repositories, carefully tailored
    and packaged for Ubuntu systems the world over.
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible和Chef都可以在Ubuntu存储库中找到，经过精心定制和打包，适用于世界各地的Ubuntu系统。
- en: So, why would I use Pip to install it instead?
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，为什么我要使用Pip来安装呢？
- en: It's simple; at the time of writing, the Ansible version in the Ubuntu repositories
    is 2.5.1, and the version in the PyPI repository is 2.7.0, which is quite a significant
    bump.
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 很简单；在撰写本文时，Ubuntu存储库中的Ansible版本是2.5.1，而PyPI存储库中的版本是2.7.0，这是一个相当大的升级。
- en: If you want the latest and greatest features of a program, or newer libraries
    than your distribution ships, you may very well find yourself tempted to install
    outside of Apt, and that's not necessarily a problem. The problem is remembering
    how all these packages are installed, and making sure that you know how to keep
    each up to date.
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要程序的最新和最好的功能，或者比您的发行版提供的更新的库，您很可能会被诱惑在Apt之外安装，这并不一定是一个问题。问题在于记住所有这些软件包是如何安装的，并确保您知道如何保持每个软件包的最新状态。
- en: --user/ --system (pip) and --user-install (gem)
  id: totrans-575
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: --user/ --system (pip) and --user-install (gem)
- en: As with Flatpak, we have the option to install packages on either a user level
    or system-wide. For the examples used, I chose to install things locally, meaning
    that the packages will generally only be available to my user by default.
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 与Flatpak一样，我们可以选择在用户级别或系统范围内安装软件包。在使用的示例中，我选择了本地安装，这意味着这些软件包通常只能默认提供给我的用户。
- en: '[PRE127]'
  id: totrans-577
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: Python virtualenv
  id: totrans-578
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python虚拟环境
- en: Python has an inherent problem – conflicting package versions – and because
    of this, virtualenv is a thing. Effectively, virtualenv is a way to segregate
    installs so that they don't conflict, and you can (potentially) easily install
    multiple versions of the same package.
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: Python存在一个固有的问题-冲突的软件包版本-因此有了虚拟环境。实际上，虚拟环境是一种隔离安装的方式，使它们不会冲突，并且您可以（可能）轻松地安装同一软件包的多个版本。
- en: One use case for this might be Molecule, a testing framework designed for Ansible
    roles. Versions 1 and 2 of Molecule are incompatible with each other, but you
    could definitely have some Ansible roles in your infrastructure written for version
    1 (which no one is going to update any time soon, because there's more pressing
    issues... there's always more pressing issues.) We have virtualenv though, so
    we can install both Molecule 1 and Molecule 2 without worrying about them conflicting.
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况的一个用例可能是Molecule，这是一个为Ansible角色设计的测试框架。Molecule的1和2版本彼此不兼容，但您绝对可以在您的基础架构中为第1版编写一些Ansible角色（因为没有人会立即更新，因为有更紧迫的问题...总是有更紧迫的问题）。不过我们有虚拟环境，所以我们可以安装Molecule
    1和Molecule 2而不必担心它们冲突。
- en: See also
  id: totrans-581
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: As with any other package manager, Pip and RubyGems manage packages.
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何其他软件包管理器一样，Pip和RubyGems管理软件包。
- en: Some of you will have spotted a problem with this, and it is one that people
    rarely realize can be an issue. If you have multiple package managers on a system,
    each maintaining its own packages and adjusting your `PATH`, you can end up with
    packages installed from the system's package manager and those installed from
    third-party package managers conflicting.
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 你们中的一些人可能已经发现了这个问题，这是人们很少意识到的问题。如果系统上有多个软件包管理器，每个管理器维护其自己的软件包并调整您的`PATH`，您可能会遇到从系统软件包管理器安装的软件包和从第三方软件包管理器安装的软件包之间的冲突。
- en: In some cases, you will get name clashes.
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，您会遇到名称冲突。
- en: I once saw an instance of the Puppet binary `factor` conflicting with another
    binary of the exact same name, causing strange and wonderful problems on a machine –
    that was fun.
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 我曾经看到Puppet二进制文件`factor`与另一个完全相同名称的二进制文件发生冲突，在一台机器上引起了奇怪而奇妙的问题-那真是有趣。
- en: Dependency hell (a quick word)
  id: totrans-586
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖地狱（简短说明）
- en: We will now take a trip down memory lane; specifically, the author is going
    to curl up into a ball for a couple of hours while he recalls hours of yelling
    at servers for being dumb.
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将回顾一下记忆；具体来说，作者将在几个小时内蜷缩成一团，回忆着对服务器的怒吼。
- en: Dependency hell is the notion that a package can have dependencies on things
    that either conflict with other versions of dependent packages or libraries that
    you have installed, or can try to use incompatible versions, for whatever reason.
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖地狱是指一个软件包可能对您安装的依赖项有冲突，或者可能尝试使用不兼容的版本，出于任何原因。
- en: In the case of Python and Pip, we've already discussed the concept of virtualenv,
    but historically, this has also been a problem in other package managers, too.
    RPM-based distributions are notorious for these issues, developing the term **RPM
    Hell** to specifically reference their problems.
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python和Pip的情况下，我们已经讨论了虚拟环境的概念，但从历史上看，这在其他软件包管理器中也是一个问题。基于RPM的发行版以这些问题臭名昭著，特别是开发了术语**RPM地狱**来专门指代它们的问题。
- en: You can also get into a situation where there are a few options for dependencies
    when installing software; programs like Apt attempt to mitigate this by presenting
    several options to the user, and asking them to select which one they want to
    use.
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装软件时，有时会出现几个依赖项的选择；像Apt这样的程序试图通过向用户呈现几个选项并要求他们选择要使用的选项来缓解这种情况。
- en: Getting ready
  id: totrans-591
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: In this section, we're only going to run a couple of commands on our VMs, in
    order to look at the output.
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们只会在我们的虚拟机上运行几个命令，以便查看输出。
- en: 'Jump into your Debian 9 box and ensure Pip is installed and up to date:'
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: 进入您的Debian 9系统并确保Pip已安装并且是最新的：
- en: '[PRE128]'
  id: totrans-594
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: 'Now, jump into our Ubuntu box and install `pip` by using `apt`:'
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，进入我们的Ubuntu系统并使用`apt`安装`pip`：
- en: '[PRE129]'
  id: totrans-596
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: 'Check the `version`, as follows:'
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: 检查`version`，如下所示：
- en: '[PRE130]'
  id: totrans-598
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: 'Then, `upgrade` it (only on the Ubuntu box), as follows:'
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在Ubuntu上进行`upgrade`（仅限Ubuntu），如下所示：
- en: '[PRE131]'
  id: totrans-600
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: 'Log out (an important step) and check the `version` again:'
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 注销（一个重要的步骤）并再次检查`version`：
- en: '[PRE132]'
  id: totrans-602
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: How to do it...
  id: totrans-603
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: To visualize what dependency problems can look like, take a look at the following.
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解依赖问题可能是什么样子，请看以下内容。
- en: System-installed and third-party installed versions of Pip
  id: totrans-605
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pip的系统安装和第三方安装版本
- en: In our Ubuntu box, we installed `pip` by using the system package manager (`apt`)
    only to then use Pip to upgrade itself.
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的Ubuntu系统中，我们使用系统软件包管理器（`apt`）安装了`pip`，然后使用Pip升级了它。
- en: 'This means that `apt` thinks the package looks like this:'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着`apt`认为该软件包看起来像这样：
- en: '[PRE133]'
  id: totrans-608
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: 'Our local session thinks that `pip` looks like this:'
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的本地会话认为`pip`看起来像这样：
- en: '[PRE134]'
  id: totrans-610
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: This is a problem, as future packages could rely on Pip 9 and expect it to be
    installed correctly on the box, despite the different versions.
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个问题，因为将来的软件包可能依赖于Pip 9，并期望它在系统上正确安装，尽管版本不同。
- en: In this case, what we've actually done is use the system-installed version of
    Pip to install and upgraded the version locally; hence, the reason that the version
    string comes from our `.local` directory, but it's still not an ideal scenario.
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们实际上使用了系统安装的Pip版本来安装并升级了本地版本；这就是为什么版本字符串来自我们的`.local`目录的原因，但这仍然不是一个理想的情况。
- en: Dependency problems in conflicting Pip packages
  id: totrans-613
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pip软件包中的依赖问题
- en: To better understand why virtualenv is a thing, we can look at an installation
    of Molecule.
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解为什么virtualenv是一个东西，我们可以看一下Molecule的安装。
- en: 'In your Debian instance, install the Molecule testing framework (specifically, `2.15.0`):'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的Debian实例中，安装Molecule测试框架（具体来说是`2.15.0`）：
- en: '[PRE135]'
  id: totrans-616
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: 'All being well, the installation should go fine, and you''ll be able to check
    your Molecule version:'
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: 一切顺利的话，安装应该会很顺利，你可以检查你的Molecule版本：
- en: '[PRE136]'
  id: totrans-618
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: 'However, we''re now going to use `install ansible-lint` (the latest version,
    at the time of writing this book):'
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们现在要使用`install ansible-lint`（在撰写本书时的最新版本）：
- en: '[PRE137]'
  id: totrans-620
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: 'Our installation works, but in the middle of it, we get a nasty warning:'
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的安装工作正常，但在安装过程中，我们收到了一个令人讨厌的警告：
- en: '[PRE138]'
  id: totrans-622
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: 'If we check the installed `version`, `ansible-lint` looks good:'
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们检查已安装的`version`，`ansible-lint`看起来不错：
- en: '[PRE139]'
  id: totrans-624
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: 'However, if we run our Molecule installation again, we get informed that it
    has helpfully downgraded `ansible-lint` for us:'
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们再次运行我们的Molecule安装，我们会被告知它已经帮助我们将`ansible-lint`降级了：
- en: '[PRE140]'
  id: totrans-626
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: This is obviously an easy example to show you, as there are only two packages
    involved; imagine how hectic and stressful this could get with five, ten, or even
    twenty packages managed by Pip.
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: 这显然是一个简单的例子，因为只涉及两个软件包；想象一下如果由Pip管理的五个、十个甚至二十个软件包会变得多么忙碌和紧张。
- en: Apt's conflict solution
  id: totrans-628
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Apt的冲突解决方案
- en: 'The following is an example of Apt detecting dependency problems and refusing
    to carry on with an installation:'
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Apt检测到依赖问题并拒绝继续安装的示例：
- en: '[PRE141]'
  id: totrans-630
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: 'Note that if you then install `postfix` by itself and attempt to install `exim`,
    you will be given the following result:'
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果你单独安装`postfix`然后尝试安装`exim`，你将得到以下结果：
- en: '[PRE142]'
  id: totrans-632
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: The line that tells you that `postfix` will be ripped out of your system if
    you proceed is in bold.
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: 告诉您，如果继续，`postfix`将从您的系统中删除的那一行是用粗体标出的。
- en: Potential solutions
  id: totrans-634
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 潜在的解决方案
- en: In spite of these annoying (and sometimes tedious) problems, there are some
    solutions to these issues.
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管存在这些令人讨厌（有时候令人厌烦）的问题，但这些问题确实有一些解决方案。
- en: We have already mentioned virtualenv, and now, we're going to mention it again,
    just to hammer the point home. Go out and seek knowledge on it, as it could save
    you a severe headache in the future.
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经提到了virtualenv，现在，我们要再次提到它，只是为了强调这一点。去寻找关于它的知识，因为它可能会在未来为你节省严重的头痛。
- en: Docker is another potential solution, and although the idea of jailing applications
    into their own little environments is nothing new (see Solaris Zones and FreeBSD
    jails), Docker provides a quick and simple interface to utilize Linux kernel features
    for segregating apps and dependencies.
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: Docker是另一个潜在的解决方案，尽管将应用程序限制在它们自己的小环境中的想法并不新鲜（参见Solaris Zones和FreeBSD jails），但Docker提供了一个快速简单的接口，利用Linux内核功能来隔离应用程序和依赖项。
- en: Multiple VMs might also be your way forward. It used to be the case that we
    needed to buy one, two, or maybe three servers, and use multiple packages on each
    server; nowadays, that isn't as true, and, while you might still have a handful
    of physical boxes, you're much more likely to be using VMs on each, which provide
    a great way to completely segregate whole operating systems.
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: 多个虚拟机也可能是您前进的方式。过去我们需要购买一个、两个或者三个服务器，并在每台服务器上使用多个软件包；如今情况已经不同了，虽然您可能仍然有一些物理服务器，但更有可能的是在每台服务器上使用虚拟机，这提供了一个完全隔离整个操作系统的好方法。
- en: How it works...
  id: totrans-639
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Package management works because diligent people make it work. Dependency problems
    are still an issue, even though they're mostly transparent to the user these days.
    It becomes more of an issue with the more packages that you support, meaning that
    Debian, with its thousands of packages, has a tough job of making sure each will
    always work, or that conflict is detected before it causes issues.
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 软件包管理之所以有效是因为勤奋的人让它有效。依赖问题仍然是一个问题，尽管这些问题对用户来说大多是透明的。随着您支持的软件包越来越多，这个问题就会变得更加严重，这意味着Debian作为一个拥有成千上万软件包的系统，需要确保每个软件包始终正常工作，或者在引起问题之前检测到冲突。
- en: Let's give a shout out to the hardworking package maintainers in each distribution,
    and thank them for their tireless efforts in ensuring that our systems don't try
    to install packages and libraries that are incompatible with each other.
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们向每个发行版中辛勤工作的软件包维护者大喊一声，并感谢他们不知疲倦地努力确保我们的系统不会尝试安装彼此不兼容的软件包和库。
- en: If you ever have to make a package of your own, best of luck to you!
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您曾经不得不制作自己的软件包，祝您好运！
- en: Compiling from source
  id: totrans-643
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从源代码编译
- en: '*"Oh, it''s Linux; call me when you''ve finished recompiling your kernel!"*
    This is a statement from every uninformed techy ever.'
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: “哦，这是Linux；当你重新编译内核完成时给我打电话！”这是每个不明真相的技术人员的声明。
- en: Packages aren't the only way to install software on your system; if you have
    the source code (the recipe for the software that you want to install), you can
    compile the program yourself, in your own way!
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: 软件包不是在系统上安装软件的唯一方法；如果您有源代码（要安装的软件的配方），您可以按照自己的方式编译程序！
- en: It's not done very frequently these days, outside of in-house software, as compiling
    software can be a time-consuming and resource-intensive task. The likes of the
    Gentoo users of the world might like it, and there are arguments that it can speed
    up and slim down installations, but these are generally negligible benefits on
    modern hardware.
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: 这在现今很少发生，除了内部软件之外，因为编译软件可能是一项耗时和资源密集的任务。世界上像Gentoo用户可能会喜欢它，并且有人认为它可以加快和精简安装，但这些在现代硬件上通常是微不足道的好处。
- en: Getting ready
  id: totrans-647
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Here, we're going to grab the source code of `htop`, a popular and interactive
    process monitor.
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将获取`htop`的源代码，这是一个流行的交互式进程监视器。
- en: This isn't a sales pitch, but I do happen to like `htop`, and I make a point
    of installing it on my personal systems, as well as systems I manage, when I get
    the chance.
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是在推销，但我碰巧喜欢`htop`，并且我会在有机会的时候在我的个人系统以及我管理的系统上安装它。
- en: You will need access to the GitHub page of the source code, at [https://github.com/hishamhm/htop](https://github.com/hishamhm/htop).
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要访问源代码的GitHub页面，网址为[https://github.com/hishamhm/htop](https://github.com/hishamhm/htop)。
- en: You will also be using your CentOS VM.
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: 您还将使用您的CentOS虚拟机。
- en: 'Log in to your CentOS VM and install `unzip` and `wget`, as follows:'
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: 登录到您的CentOS虚拟机并安装`unzip`和`wget`，如下：
- en: '[PRE143]'
  id: totrans-653
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: 'Navigate to `/usr/local/src`, the place where we will put source code for locally
    installed software, by convention:'
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: 按照惯例，导航到`/usr/local/src`，这是我们将放置本地安装软件的源代码的地方：
- en: '[PRE144]'
  id: totrans-655
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: 'Download the most recent version of the `htop` repository (here, I use `https`):'
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: 下载`htop`存储库的最新版本（这里，我使用`https`）：
- en: '[PRE145]'
  id: totrans-657
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: How to do it...
  id: totrans-658
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'You should now have a `master.zip` file in your directory:'
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您的目录中应该有一个`master.zip`文件：
- en: '[PRE146]'
  id: totrans-660
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: 'We need to `unzip` this, change the ownership for convenience, and jump inside:'
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要`unzip`它，为了方便起见更改所有权，并跳转到内部：
- en: '[PRE147]'
  id: totrans-662
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: 'Inside this directory, you''ll find a whole host of files, mostly of the `C`
    variety, but with a few others here and there. One file you''ll almost always
    find in a source directory is a `README`, which is an excellent place to start:'
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个目录中，您会找到一大堆文件，大多数是`C`类型的，但偶尔也会有其他类型的文件。在源目录中，您几乎总是会找到一个`README`，这是一个很好的起点：
- en: '[PRE148]'
  id: totrans-664
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: 'READMEs are always different, but I''ve yet to find a serious project where
    they aren''t good. See the following example:'
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: README总是不同的，但我还没有找到一个严肃的项目，它们不是好的。请参阅以下示例：
- en: '![](img/4a8ac1c9-cdf3-427e-8972-e25735b0540f.png)'
  id: totrans-666
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4a8ac1c9-cdf3-427e-8972-e25735b0540f.png)'
- en: This file will tell you, in a few words, any dependencies that you need to install,
    and then the appropriate method for installing the package itself.
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件会告诉您需要安装的任何依赖项，并且安装软件包本身的适当方法。
- en: 'As we downloaded the sources, we need the `autogen.sh` line from the preceding
    screenshot. If we attempt to run the script, we will be given an error:'
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们下载了源代码，我们需要从前面的屏幕截图中获取`autogen.sh`行。如果我们尝试运行脚本，将会收到一个错误：
- en: '[PRE149]'
  id: totrans-669
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: 'This is because the `autoconf` package isn''t installed; proceed to do so,
    then try the script again:'
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为`autoconf`软件包没有安装；继续安装，然后再次尝试脚本：
- en: '[PRE150]'
  id: totrans-671
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: Another `yum` that tells us the `automake` package isn't installed, so let's
    install it!
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个`yum`告诉我们`automake`软件包没有安装，所以让我们安装它！
- en: '[PRE151]'
  id: totrans-673
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: Good! This time, it worked.
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: 好！这次，它起作用了。
- en: 'The `README` suggested checking out the `INSTALL` file; so, let''s take a look
    at that next:'
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: “README”建议查看“INSTALL”文件；所以，让我们接下来看一下：
- en: '![](img/8044d85a-5a3a-4292-8e74-7f3e46a84a0e.png)'
  id: totrans-676
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8044d85a-5a3a-4292-8e74-7f3e46a84a0e.png)'
- en: In quite a few words, this gives us the installation process for most packages
    packaged in this way.
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: 用相当多的文字，这为我们提供了大多数以这种方式打包的软件包的安装过程。
- en: 'Back in the `README` file, we''re going to try the next bit of the installation
    step, as follows:'
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: 回到`README`文件，我们将尝试安装步骤的下一部分，如下所示：
- en: '[PRE152]'
  id: totrans-679
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: We have something else missing; in this case, the error is telling us that a
    C compiler wasn't found.
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还缺少其他东西；在这种情况下，错误告诉我们找不到C编译器。
- en: 'The default C compiler in most systems is GCC, but there are others that may
    or may not work (such as `musl`):'
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数系统中默认的C编译器是GCC，但也有其他可能有效或无效的编译器（如`musl`）：
- en: '[PRE153]'
  id: totrans-682
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: We can go further now, but as the script checks for requirements, we can see
    that we can't find a `libncursesw` installation.
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以更进一步，但是由于脚本检查要求，我们发现找不到`libncursesw`的安装。
- en: 'It gives us two options: disabling unicode, or installing `libncursesw`. For
    completeness, let''s install the `ncurses-devel` package:'
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: 它给了我们两个选项：禁用unicode，或安装`libncursesw`。为了完整起见，让我们安装`ncurses-devel`软件包：
- en: '[PRE154]'
  id: totrans-685
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: Now, we get to the end of the configuration script with no more errors. Hurrah!
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们到了配置脚本的末尾，没有更多的错误了。万岁！
- en: 'Lastly, we `make` the package, which is the actual step that compiles the source
    code into usable programs:'
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们`make`软件包，这是将源代码编译成可用程序的实际步骤：
- en: '[PRE155]'
  id: totrans-688
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: 'It can be noisy, as shown in the following screenshot:'
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: 它可能会很吵，如下面的屏幕截图所示：
- en: '![](img/435c0c82-a066-4420-8155-5fc1f79637df.png)'
  id: totrans-690
  prefs: []
  type: TYPE_IMG
  zh: '![](img/435c0c82-a066-4420-8155-5fc1f79637df.png)'
- en: 'In our directory, we now have an `htop` binary, as follows:'
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的目录中，现在有一个`htop`二进制文件，如下：
- en: '[PRE156]'
  id: totrans-692
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: 'Give it a whirl:'
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: 试一试：
- en: '[PRE157]'
  id: totrans-694
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: 'Lastly, we need to install the program to its appropriate locations; this is
    done with the `make install` command. This does need `sudo`, as we''re moving
    things out of our local folder and into the rest of the filesystem:'
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要将程序安装到适当的位置；这是通过`make install`命令完成的。这确实需要`sudo`，因为我们正在将东西从我们的本地文件夹移动到文件系统的其他位置：
- en: '[PRE158]'
  id: totrans-696
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: 'Now, we can run a `whereis` and find out its installed location (although we
    can also see it in the preceding code snippet):'
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以运行`whereis`并找出它的安装位置（尽管我们也可以在前面的代码片段中看到）：
- en: '[PRE159]'
  id: totrans-698
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: How it works...
  id: totrans-699
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: For most Linux programs (certainly of the C variety), this pattern is fairly
    standard. Copy down the source code, configure it with its defaults (or make any
    changes that you want), compile the software, and install it variously on the
    filesystem.
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数Linux程序（特别是C类型），这种模式是相当标准的。复制源代码，使用默认配置进行配置（或进行任何您想要的更改），编译软件，并在文件系统的各个位置安装它。
- en: 'The `INSTALL` file provides a good overview of the different steps, but in
    short, they look like this:'
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: '`INSTALL`文件提供了对不同步骤的良好概述，但简而言之，它们如下：'
- en: '`configure`: Creates a `Makefile` that contains system-specific options, based
    on your environment. These can be quite long; the `htop` file comes out at 1,422
    lines.'
  id: totrans-702
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`configure`：根据您的环境创建包含特定系统选项的`Makefile`。这可能会相当长；`htop`文件有1,422行。'
- en: '`make`: This is invoked to correctly compile any source code that needs it,
    creating binaries and supplementing files that might be needed.'
  id: totrans-703
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`make`：这是为了正确编译任何需要它的源代码，创建二进制文件和补充可能需要的文件。'
- en: '`make install`: This puts the files into their appropriate places.'
  id: totrans-704
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`make install`：这将把文件放到适当的位置。'
- en: Easy, right?
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: 很简单，对吧？
- en: There's more...
  id: totrans-706
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Things like the kernel can be compiled too, but will take much longer given
    the sheer number of parts and subsystems that have to be accounted for. Long compile-times
    are the main reason people and projects have defaulted to using pre-compiled binary
    blobs these days (because few people want to wait around for their code to compile,
    unless they're deliberately trying to avoid work.)
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: 像内核这样的东西也可以编译，但是由于需要考虑的部件和子系统的数量庞大，所以需要更长的编译时间。长时间的编译时间是人们和项目这些天默认使用预编译的二进制文件块的主要原因（因为很少有人愿意等待他们的代码编译完成，除非他们故意想要避免工作）。
- en: Even Gentoo, which is famous for allowing customizability (at the expense of
    installation time), has precompiled binaries that you can install for the larger
    programs, if you don't want to sit around for a week waiting for your code to
    compile.
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是以允许可定制性而闻名的Gentoo（以安装时间为代价），也有预编译的二进制文件，可以安装更大的程序，如果你不想坐在那里等一个星期来编译你的代码。
- en: There's also cross-compiling, which is the act of compiling software for different
    architectures. For example, I may want to compile `htop` for `aarch64` hardware
    on my `x86_64` VM, because it's got 32 cores and my `aarch64` board is a Raspberry
    Pi 3.
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: 还有交叉编译，这是为不同架构编译软件的行为。例如，我可能想要在我的`x86_64`虚拟机上为`aarch64`硬件编译`htop`，因为它有32个核心，而我的`aarch64`板是树莓派3。
- en: See also...
  id: totrans-710
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: There are other ways to compile software, depending on the language used. Go,
    for example, will have you `go get` the package source code that you want to compile,
    but it uses the `make` command to perform the actual build, whereas the Rust programming
    language uses a tool called `cargo`.
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: 根据使用的语言，还有其他编译软件的方法。例如，Go将让您`go get`您想要编译的软件包源代码，但它使用`make`命令来执行实际的构建，而Rust编程语言使用一个叫做`cargo`的工具。
- en: Technical requirements
  id: totrans-712
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this section, we will use all three of our virtual machines, adding additional
    repositories to each. This is to showcase how the different package management
    systems do things differently.
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用我们的三台虚拟机，为每台虚拟机添加额外的存储库。这是为了展示不同的软件包管理系统如何以不同的方式处理事情。
- en: Adding additional repositories
  id: totrans-714
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加额外的存储库
- en: There are default repositories installed when your system is created; there
    are also wilder and more out-there repositories that may contain that one piece
    of software that you really need (or can't be bothered to compile yourself).
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建系统时会安装默认存储库；还有更疯狂和更偏僻的存储库，可能包含您真正需要的软件（或者您自己不想编译的软件）。
- en: 'Some common repositories are as follows:'
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常见的存储库如下：
- en: EPEL
  id: totrans-717
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EPEL
- en: RPMfusion
  id: totrans-718
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RPMfusion
- en: Remi
  id: totrans-719
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Remi
- en: ZFS, on Linux
  id: totrans-720
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ZFS，关于Linux
- en: Here, we will look at adding additional repositories, and the ramifications
    of doing so.
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将看看如何添加额外的存储库，以及这样做的后果。
- en: Getting ready
  id: totrans-722
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You can go through this section in any order, but it's probably sensible to
    start at the start, and finish at the finish.
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以按任何顺序查看本节，但从头开始，最后结束可能是明智的选择。
- en: How to do it...
  id: totrans-724
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Log in to your VM. We''re going to start with CentOS. To begin, let''s take
    a look at the default repositories that we have to play with, using the `yum repolist`
    command:'
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: 登录到您的虚拟机。我们将从CentOS开始。首先，让我们使用`yum repolist`命令查看我们可以使用的默认存储库：
- en: '[PRE160]'
  id: totrans-726
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: We see three repositories enabled by default, `Base`, `Extras`, and `Updates`.
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到默认启用了三个存储库，`Base`，`Extras`和`Updates`。
- en: CentOS - Adding the EPEL repository with epel-release
  id: totrans-728
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CentOS - 使用epel-release添加EPEL存储库
- en: '**Extra Packages for Enterprise Linux** (**EPEL**) is one of the more popular
    additional repositories in the CentOS/Red Hat space.'
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: '**企业Linux的额外软件包**（**EPEL**）是CentOS/Red Hat空间中更受欢迎的额外存储库之一。'
- en: 'Because of this, it actually has a very easy method for installation, from
    the given repositories:'
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，它实际上有一个非常简单的安装方法，从给定的存储库：
- en: '[PRE161]'
  id: totrans-731
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: 'Looking in our `repo` directory, you''ll now see two new files:'
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`repo`目录中查看，现在会看到两个新文件：
- en: '[PRE162]'
  id: totrans-733
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: 'And `yum repolist` will show it, too:'
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: '`yum repolist`也会显示它：'
- en: '[PRE163]'
  id: totrans-735
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: Note that `epel-testing` isn't listed; this is because it's disabled, by default.
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`epel-testing`没有列出；这是因为默认情况下它是禁用的。
- en: 'We can use this repository to search for packages that might not be in the
    defaults (such as `htop`, for example):'
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用这个存储库来搜索可能不在默认存储库中的软件包（例如`htop`）：
- en: '[PRE164]'
  id: totrans-738
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: CentOS - Adding the ELRepo repository by file
  id: totrans-739
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CentOS - 通过文件添加ELRepo存储库
- en: As suggested in the previous section, all that the package installation did
    was add appropriate GPG keys and the YUM configuration files for additional repositories;
    there's nothing stopping you from doing the same thing manually.
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一节所建议的，软件包安装所做的只是添加适当的GPG密钥和用于额外存储库的YUM配置文件；没有什么能阻止你手动执行相同的操作。
- en: ELRepo is a popular repo, mostly due to the fact that it offers more up-to-date
    versions of the Linux kernel, for those people who like the layout and style of
    CentOS but who really want the latest drivers and features that the kernel can
    offer.
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: ELRepo是一个受欢迎的存储库，主要是因为它提供了更更新的Linux内核版本，适用于那些喜欢CentOS布局和风格但真正想要内核提供的最新驱动程序和功能的人。
- en: 'First, we need to import the repository''s public key, like so:'
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要导入存储库的公钥，就像这样：
- en: '[PRE165]'
  id: totrans-743
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: It's a good idea to make sure that the key you're installing is legitimate;
    there are various ways of doing this, including checking that TLS certificates
    are legitimate, comparing it with other systems, or ringing up the owner of the
    key and pestering them until they read the whole thing out to you.
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您安装的密钥是合法的是个好主意；有各种方法可以做到这一点，包括检查TLS证书是否合法，与其他系统进行比较，或者打电话给密钥的所有者，直到他们把整个内容读给你为止。
- en: 'At this point, we can either download and `yum install` the `rpm` file from
    the `elrepo` site, or we download it ourselves and extract the contents, so that
    we can take a look at what it does:'
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们可以从`elrepo`站点下载并`yum install` `rpm`文件，或者我们自己下载并提取内容，以便查看它的内容：
- en: '[PRE166]'
  id: totrans-746
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: The `rpm2cpio` command does what it suggests, and allows us to use `cpio` to
    extract the archive.
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
  zh: '`rpm2cpio`命令就像它的名字一样，允许我们使用`cpio`来提取存档。'
- en: 'If we now `cat` the directory that we''ve just unarchived, we can see the file
    that it''s going to drop into our system:'
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在`cat`刚刚解压缩的目录，我们可以看到它将放入我们系统的文件：
- en: '[PRE167]'
  id: totrans-749
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: 'There''s more, as there are multiple repo designations in this file. Let''s
    just copy the `elrepo` block and output it to a file of our own making, like so:'
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多，因为此文件中有多个存储库指定。让我们只复制`elrepo`块并将其输出到我们自己制作的文件中，就像这样：
- en: '[PRE168]'
  id: totrans-751
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: 'Note that the repo has `enabled=1` set, meaning that we can now just run a
    `yum update` to make sure that our system is synced and aware of the upstream
    repository (although if we wanted to permanently disable this repo, we could change
    it to a `0`, and `yum` would ignore it):'
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，该存储库已设置`enabled=1`，这意味着我们现在只需运行`yum update`来确保我们的系统与上游存储库同步并意识到它（尽管如果我们想永久禁用此存储库，我们可以将其更改为`0`，`yum`将忽略它）：
- en: '[PRE169]'
  id: totrans-753
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: 'Now, if we want to, we can also list all of the packages in the repo that we''ve
    just added:'
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们愿意，我们还可以列出我们刚刚添加的存储库中的所有软件包：
- en: '[PRE170]'
  id: totrans-755
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: Debian - Adding additional repositories
  id: totrans-756
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Debian-添加额外的存储库
- en: Debian is famous for having a shed-load of packages available to the end users.
    If you can think of a package, there's a good chance that it's available for installation
    out of the box, or that someone somewhere is working on how to maintain the package
    for you.
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
  zh: Debian以其大量可供最终用户使用的软件包而闻名。如果你能想到一个软件包，很有可能它可以直接安装，或者某个地方的人正在努力维护这个软件包。
- en: FreeBSD is probably the only OS that springs to mind that might have more packages
    available in its base installation.
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: FreeBSD可能是唯一一个在其基本安装中可能有更多软件包可用的操作系统。
- en: Because of this famous fact, there's a good chance that you'll never need to
    install additional repositories, but never say never (despite me just doing so).
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个著名的事实，你可能永远不需要安装额外的存储库，但是永远不要说永远（尽管我刚刚这样做了）。
- en: A good place to look for some unofficial repositories is the maintained unofficial
    page at [https://wiki.debian.org/DebianRepository/Unofficial](https://wiki.debian.org/DebianRepository/Unofficial).
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: 一个寻找一些非官方存储库的好地方是维护的非官方页面[https://wiki.debian.org/DebianRepository/Unofficial](https://wiki.debian.org/DebianRepository/Unofficial)。
- en: Here, we can find various repositories, including one for Google Chrome, which
    we'll add.
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以找到各种存储库，包括一个用于谷歌浏览器的存储库，我们将添加它。
- en: 'First, we will look at the default `sources.list` file that''s shipped with
    our image:'
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将查看随图像一起提供的默认`sources.list`文件：
- en: '[PRE171]'
  id: totrans-763
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: It looks fairly sparse, with only the `stretch main` and `stretch/updates main`
    repositories enabled.
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来相当稀疏，只启用了`stretch main`和`stretch/updates main`存储库。
- en: 'As with YUM, we need to make sure that we have a legitimate GPG key in place;
    Google''s is installed like so:'
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: 与YUM一样，我们需要确保我们有一个合法的GPG密钥；谷歌的安装方式如下：
- en: '[PRE172]'
  id: totrans-766
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: 'Now, we need to add the repository – in this case, Google Chrome:'
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要添加存储库-在这种情况下是谷歌浏览器：
- en: '[PRE173]'
  id: totrans-768
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: 'Run `sudo apt update` to make sure that your list of available packages is
    up to date:'
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`sudo apt update`以确保您的可用软件包列表是最新的：
- en: '[PRE174]'
  id: totrans-770
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: 'Then, do a search for Chrome:'
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，搜索Chrome：
- en: '[PRE175]'
  id: totrans-772
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: Voilà!
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！
- en: This is not a Chrome advertisement, either, and actually, the open source version
    of Chrome (Chromium) is already available in the default repositories. I would
    probably advise installing that, instead.
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是Chrome的广告，实际上，Chrome的开源版本（Chromium）已经在默认存储库中可用。我可能会建议安装它。
- en: 'Mostly, you''ll probably be adding the `contrib` repository, which contains
    non-free software:'
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，您可能会添加`contrib`存储库，其中包含非自由软件：
- en: '[PRE176]'
  id: totrans-776
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: Ubuntu - Adding PPAs
  id: totrans-777
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ubuntu-添加PPA
- en: Interestingly, this is one significant place in which the Ubuntu and Debian
    worlds differ. In Ubuntu-land, there's the concept of **Personal Package Archives** (**PPAs**),
    which can be used to install third-party software.
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，这是Ubuntu和Debian世界之间的一个重要区别。在Ubuntu领域，有**个人软件包存档**（**PPA**）的概念，可以用来安装第三方软件。
- en: You can install regular repositories, too, but PPAs are arguably a little more
    targeted. Do bear in mind that there's very little stopping anyone from creating
    a PPA, so make sure to follow due diligence before adding just anything.
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以安装常规存储库，但是PPA可能更有针对性。请记住，几乎没有什么能阻止任何人创建PPA，因此在添加任何内容之前，请务必进行尽职调查。
- en: PPAs can be searched out on the Canonical site, at [https://launchpad.net/ubuntu/+ppas](https://launchpad.net/ubuntu/+ppas).
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: PPAs可以在Canonical网站上搜索到，网址为[https://launchpad.net/ubuntu/+ppas](https://launchpad.net/ubuntu/+ppas)。
- en: 'We''ll add the LibreOffice Fresh PPA, as an example:'
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以LibreOffice Fresh PPA为例添加：
- en: '[PRE177]'
  id: totrans-782
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: You may be prompted to accept the additional repository, simply by pressing
    *Enter*.
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会被提示接受额外的存储库，只需按下*Enter*键即可。
- en: 'The repository configuration that you just added is in the `apt sources.list.d`
    directory:'
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚刚添加的存储库配置位于`apt sources.list.d`目录中：
- en: '[PRE178]'
  id: totrans-785
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: This means that you can now install the bleeding edge version of LibreOffice!
    You'll be the cool kid of the word processing world at last.
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你现在可以安装最新版本的LibreOffice！你终于成为了文字处理世界的酷孩子。
- en: How it works...
  id: totrans-787
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Repositories are generally just places that house packages you might want to
    install. There's nothing special about them, as they're generally web servers
    that react as any might, serving you the contents (package) when you request it.
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: 存储库通常只是存放你可能想要安装的软件包的地方。它们并没有什么特别之处，因为它们通常只是像任何其他网页服务器一样，当你请求时为你提供内容（软件包）。
- en: Adding additional repositories is a fairly common sysadmin activity, usually
    because you're adding your in-house proxy (commonly Artifactory at the moment,)
    or your developers really need the latest version of NodeJS.
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
  zh: 添加额外的存储库是一种相当常见的系统管理员活动，通常是因为你正在添加你的内部代理（目前通常是Artifactory），或者你的开发人员确实需要最新版本的NodeJS。
- en: Whatever the reason for adding repositories, just remember that basic security
    goes a long way (you are, after all, trusting the upstream not to have anything
    malicious in it), and appreciate that you can create problems for yourself if
    the repository disappears (which has happened, and will continue to happen).
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: 无论添加存储库的原因是什么，只要记住基本的安全措施很重要（毕竟，你是在信任上游没有任何恶意内容），并且要意识到如果存储库消失，你可能会给自己制造问题（这已经发生过，也将继续发生）。
- en: Roundup - security, updating, and package management
  id: totrans-791
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结 - 安全性、更新和软件包管理
- en: It's easy to forget about updates. It's comforting to get a system to a stable
    state, where no matter how much it's hammered, it's going to continue to chug
    along, doing what you've told it to do, and nothing more. What's uncomfortable
    is the idea of breaking that perfect peace, and that's where updates come in.
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易忘记更新。让系统达到稳定状态是令人欣慰的，无论它受到多大的冲击，它都会继续进行下去，做你告诉它要做的事情，而不会做其他事情。令人不安的是打破这种完美和平的想法，这就是更新的作用。
- en: Software doesn't stand still; there are features being developed, security holes
    being patched, and tougher encryption methods being implemented, and all of these
    need to be accounted for by you, the sysadmin.
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: 软件不会停滞不前；正在开发功能，正在修补安全漏洞，正在实施更严格的加密方法，所有这些都需要你这个系统管理员来考虑。
- en: Package maintainers can do a lot, and they do, but it's up to you to make sure
    that what you're updating is tested, that it won't break anything else in your
    environment, and that those developers that were using an exploit to get their
    code to work on your platform have been thoroughly reprimanded.
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
  zh: 软件包维护者可以做很多事情，他们也确实做了，但你需要确保你正在更新的内容经过了测试，不会破坏你环境中的其他任何东西，并且那些开发人员如果曾经利用漏洞让他们的代码在你的平台上运行，他们已经受到了严厉的惩罚。
- en: At the end of the day, things are likely to go wrong, but that's why development
    and testing environments should exist.
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: 一天结束时，事情很可能会出错，但这就是为什么开发和测试环境应该存在的原因。
- en: Yes, it was nerve-wracking to perform an update in the past, and that's why
    we came in on weekends and did updates in the middle of the night, when no one
    would notice if it broke for a bit. Those breakages can still happen, but now,
    we've learned from them; we have warnings and erratas and the general public will
    understand if your site has to go offline for a couple of hours to make sure that
    their credit card information doesn't get leaked, thanks to a malicious exploit.
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: 过去进行更新是令人紧张的，这就是为什么我们在周末和深夜进行更新，如果出了问题，没有人会注意到。这种故障仍然可能发生，但现在我们已经从中吸取了教训；我们有警告和勘误，公众会理解如果你的网站必须暂时下线几个小时，以确保他们的信用卡信息不会因为恶意利用而泄露。
- en: At the end of the day, software is stupid, and it's put together by humans,
    who are fallible. Keep your systems up to date, make sure that you check your
    sources (in other words, don't install random executables from untraveled corners
    of the internet), and make sure that you let your superiors know that yes, you
    might have to take the website offline for a little bit, or shut down their phone
    system, but it's better than appearing on the front page of the BBC website the
    next day.
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: 一天结束时，软件是愚蠢的，它是由人类组成的，人类是会犯错的。保持系统更新，确保检查你的来源（换句话说，不要从互联网的偏僻角落安装随机可执行文件），并确保让你的上级知道，是的，你可能不得不让网站暂时下线一会儿，或者关闭他们的电话系统，但这总比第二天出现在BBC网站的头条新闻上要好。
- en: Of course, if you're really interested in the intricacies of how a distribution
    is built, how the packages all fit together, and why they're built or installed
    in the way that they are, then there are tools out there that can help you to
    learn.
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果你真的对发行版是如何构建的、软件包是如何组合在一起的、以及它们为什么以这种方式构建或安装感兴趣，那么有一些工具可以帮助你学习。
- en: '*Linux from Scratch* is one such tool, effectively a book on the ins and outs
    of building your own version of Linux. It''s not for beginners, and it can be
    frustrating at times (or slightly outdated, as software evolves), but it''s a
    great way to learn why things are the way they are, and I''d encourage everyone
    to perform the Linux from scratch installation at least once in their professional
    careers.'
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: '*Linux from Scratch*就是这样一种工具，实际上是一本关于构建你自己版本的Linux的书。它不适合初学者，有时可能会令人沮丧（或者稍微过时，因为软件在不断发展），但这是一个了解事物为什么是这样的好方法，我鼓励每个人在他们的职业生涯中至少进行一次Linux
    from scratch安装。'
