- en: Containers and Virtualization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器和虚拟化
- en: 'In this chapter, we''re going to be covering the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: What is a container?
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是容器？
- en: Installing Docker
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Docker
- en: Running your first Docker container
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行你的第一个Docker容器
- en: Debugging a container
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试一个容器
- en: Searching for containers (and security)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搜索容器（和安全性）
- en: What is virtualization?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是虚拟化？
- en: Starting a QEMU machine with our VM
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动我们的VM的QEMU机器
- en: Using virsh and virt-install
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用virsh和virt-install
- en: Comparing the benefits of local installs, containers, and VMs
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比较本地安装、容器和虚拟机的优势
- en: Brief comparison of virtualization options (VMware, proxmox, and more)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟化选项的简要比较（VMware、proxmox等）
- en: Introduction
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: 'I''m going to be honest: containers and virtualization is one of my favorite
    things to talk about in relation to computers and servers. The very concept of
    being able to install an entirely different computer, within your computer, is
    a concept that just sings brilliance to me.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 坦率地说：容器和虚拟化是我在与计算机和服务器相关的事情中最喜欢谈论的之一。能够在你的计算机内安装一个完全不同的计算机的概念，对我来说就是一个充满智慧的概念。
- en: It's not a new idea; this principle has been around for quite some time, with
    even my first OS9 computer being capable of virtualization to some degree. Going
    back further, the root of the term is from the 1960s, though it had a slightly
    different meaning than it does in modern-day vernacular.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是一个新概念；这个原则已经存在了相当长的时间，即使我的第一台OS9计算机也能在一定程度上进行虚拟化。更早的时候，这个术语的根源可以追溯到20世纪60年代，尽管它的含义与现代用语中的含义略有不同。
- en: You've probably used a **virtual machine** (**VM**) already, though you might
    not even know you have. VMs are quick these days, with a negligible performance
    hit compared to running on the underlying tin, thanks to advantages in virtualization
    that mean that you're no longer emulating everything to do with the VM, and instead
    you're passing VM instructions straight through to the host computer's CPU.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经使用过**虚拟机**（**VM**），尽管你可能甚至不知道你已经使用过。如今，虚拟机速度很快，与在底层硬件上运行相比，性能损失可以忽略不计，这要归功于虚拟化的优势，这意味着你不再需要模拟与虚拟机相关的一切，而是直接将虚拟机指令传递给主机计算机的CPU。
- en: VMs are undeniably a powerhouse of hosting and development, with the ability
    to quickly spin up and tear down machines, being a godsend when you're constantly
    breaking things or looking into a secure and cheap way to segment a massive workhorse
    of a server.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机无疑是托管和开发的强大工具，能够快速启动和关闭机器，在你不断破坏东西或寻找一种安全且廉价的方式来分割一个庞大的服务器时，它就是一个救世主。
- en: These days, containers have somewhat taken the mantle away from VMs, though
    they each have their advantages, and they exist in harmony rather than in constant
    war with each other.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，容器在某种程度上已经取代了虚拟机的地位，尽管它们各自都有优势，它们存在于和谐中，而不是不断争斗。
- en: Containers, unlike virtual machines, are more like a slice of a system, if you
    will, with a shared core.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 与虚拟机不同，容器更像是系统的一部分，有一个共享的核心。
- en: When you're using a container on a Linux system, you're sharing the kernel of
    the host machine, rather than installing your own, and you've usually not bothered
    with the emulation of extra hardware, like disk controllers.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在Linux系统上使用容器时，你共享主机机器的内核，而不是安装你自己的内核，并且通常不需要模拟额外的硬件，比如磁盘控制器。
- en: Again, containers and containerization aren't new concepts, with the idea having
    been around since the days of jails on FreeBSD, and latterly Zones on Solaris
    (both of which still exist in one shape or another, and which we'll look at later).
    They have exploded recently though (within the last few years) with the introduction
    of **Docker**, which made the whole idea of containers a lot easier for people
    to swallow (and their marketing was stellar).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，容器和容器化并不是新概念，这个想法自从FreeBSD上的jails以及后来的Solaris上的Zones（它们以一种形式或另一种形式仍然存在，我们稍后会看到）以来就一直存在。然而，最近几年，随着**Docker**的推出，它们已经迅速发展，使得容器的整个概念对人们来说更容易接受（而且他们的营销手段也很出色）。
- en: In this chapter, we're going to look at containers and virtual machines, discuss
    the pros and cons of each, and talk about management of a virtual environment.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将研究容器和虚拟机，讨论各自的利弊，并谈论虚拟环境的管理。
- en: Technical requirements
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this section, and for this chapter, we're going to use our Ubuntu machine
    primarily.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节和本章中，我们将主要使用我们的Ubuntu机器。
- en: Mostly, this is because Ubuntu comes with a lot of the more up-to-date elements
    we require out of the box, whereas CentOS has had a lot of things patched backward
    (back-ported) thanks to its long shelf life.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 主要是因为Ubuntu默认包含了我们需要的更多最新元素，而CentOS由于其长期的使用寿命，许多东西都是向后修补的。
- en: 'Feel free to use the following `Vagrantfile`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 请随意使用以下`Vagrantfile`：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: What is a container?
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是容器？
- en: In this section, we're going to look at what containers actually are at a bit
    of a deeper level than we covered in the introduction.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将深入探讨容器的实际含义，比我们在介绍中涵盖的更深入一些。
- en: We won't go into a huge amount of depth (because we'd get lost and have to call
    James Cameron to get us out), but we will touch on the core of what makes a container
    a container, and how it differs from running a full-fledged virtual machine.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会深入探讨（因为我们会迷失并不得不打电话给詹姆斯·卡梅隆来帮助我们），但我们会触及容器的核心是什么，以及它与运行一个完整的虚拟机有何不同。
- en: Getting ready
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'SSH to your Ubuntu VM:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: SSH到你的Ubuntu虚拟机：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How to do it...
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: We're going to create a container without using the most popular tool on the
    market.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个容器，而不使用市场上最流行的工具。
- en: Containers utilize certain kernel features (namespaces and cgroups), which means
    that they're not strictly portable to the Windows and Macs of the world.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 容器利用某些内核特性（命名空间和cgroups），这意味着它们不严格可移植到Windows和Mac等系统。
- en: 'First, we''re going to create a storage pool for our containers to use:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将为我们的容器创建一个存储池：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Directory storage pools are discouraged for production use. You're better off
    using a tailored solution that uses LVM or ZFS, but for testing and examples,
    it's fine.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 不鼓励在生产中使用目录存储池。最好使用使用LVM或ZFS的定制解决方案，但是对于测试和示例，这是可以的。
- en: 'Next, we''re going to start a container with this pool:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用此存储池启动一个容器：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding retrieval can take some time, and will depend on your network
    connection speed.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的检索可能需要一些时间，这将取决于您的网络连接速度。
- en: 'At the end of this process, our container should be created. We can list it
    by using the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个过程结束时，我们的容器应该已经创建。我们可以使用以下命令列出它：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, we can execute the commands inside it:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以在其中执行命令：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here, we're running a command that, when run on our host VM, would tell us `ubuntu-bionic`.
    Therefore, by checking it alongside our `lxc` command, we can prove it's running
    in the container.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们运行的命令在我们的主机VM上运行时，会告诉我们`ubuntu-bionic`。因此，通过与我们的`lxc`命令一起检查它，我们可以证明它正在容器中运行。
- en: 'If we wanted to enter the container, we could simply start a shell:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要进入容器，我们可以简单地启动一个shell：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: There you have it – a very quick slice of an operating system, inside your operating
    system!
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样 - 一个非常快速的操作系统切片，位于您的操作系统内部！
- en: 'Once you''re done, simply type `exit` or hit *Ctrl* + *D* to log out of the
    container:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，只需键入`exit`或按*Ctrl* + *D*退出容器：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, we can destroy it with the following commands:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用以下命令销毁它：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: One thing people frequently forget, both in the LXC world and the Docker world,
    is that you've got more than just the container to contend with. We've deleted
    the container, but if you really want to clean up shop, you will have to delete
    the image you downloaded and the storage pool, too.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 人们在LXC世界和Docker世界经常忘记的一件事是，你不仅仅需要处理容器。我们已经删除了容器，但是如果您真的想要清理干净，您还必须删除下载的镜像和存储池。
- en: How it works...
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: To elaborate somewhat on the cgroups and namespaces comment, what containers
    are in reality are functions of the kernel and user space tools to make things
    look nice. LXC is a tool that abstracts complexity away, simplifying the setup
    of our semi-segregated machines into a few easy-to-use commands.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 稍微详细解释一下cgroups和命名空间的评论，实际上容器是内核和用户空间工具的功能，使事情看起来很好。 LXC是一个工具，它抽象了复杂性，简化了我们的半隔离机器的设置为几个易于使用的命令。
- en: cgroups (Linux control groups)
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: cgroups（Linux控制组）
- en: 'Here''s an excerpt from the *Linux Programmer''s Manual*:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是*Linux程序员手册*的摘录：
- en: '"Control groups, usually referred to as cgroups, are a Linux kernel feature
    that allows processes to be organized into hierarchical groups whose usage of
    various types of resources can then be limited and monitored. The kernel''s cgroup
    interface is provided through a pseudo-filesystem called cgroupfs. Grouping is
    implemented in the core cgroup kernel code, while resource tracking and limits
    are implemented in a set of per-resource-type subsystems (memory, CPU, and so
    on)."'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: “控制组，通常称为cgroups，是Linux内核的一个功能，允许将进程组织成分层组，然后可以限制和监视各种类型资源的使用。内核的cgroup接口通过一个名为cgroupfs的伪文件系统提供。分组是在核心cgroup内核代码中实现的，而资源跟踪和限制是在一组每种资源类型子系统（内存、CPU等）中实现的。”
- en: In practice, this means that the kernel has the ability to group processes together
    into a stack and that it can then control and monitor the resource usage of it.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这意味着内核有能力将进程组合成堆栈，然后可以控制和监视其资源使用情况。
- en: namespaces
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命名空间
- en: 'Without starting a trend, here''s the *Linux Programmer''s Manual* again:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 不要引起趋势，这里再次是*Linux程序员手册*：
- en: '"A namespace wraps a global system resource in an abstraction that makes it
    appear to the processes within the namespace that they have their own isolated
    instance of the global resource. Changes to the global resource are visible to
    other processes that are members of the namespace, but are invisible to other
    processes. One use of namespaces is to implement containers."'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: “命名空间将全局系统资源封装在一个抽象中，使得在命名空间内的进程看起来好像它们有自己的隔离实例的全局资源。对全局资源的更改对于属于命名空间的其他进程是可见的，但对其他进程是不可见的。命名空间的一个用途是实现容器。”
- en: In practice, this means that your singular network interface can have multiple
    namespaces attached to it, which the utilizing processes will believe is the sole
    instance of that device.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这意味着您的单个网络接口可以连接多个命名空间，使用这些命名空间的进程将认为这是该设备的唯一实例。
- en: Network interfaces aren't the only example, but they're one of the more obvious
    candidates as every VM needs a NIC.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 网络接口并不是唯一的例子，但它们是更明显的候选者，因为每个VM都需要一个NIC。
- en: The breakdown of our creation
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们创建的细节
- en: 'When we created the storage pool at the beginning of this section, what we
    were really doing was informing our system (the `lxd` daemon) that it needed to
    use a specific directory for container storage, namely the one below `/var/lib/lxd/storage-pools/`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在本节开始时创建存储池时，我们实际上是在通知我们的系统（`lxd`守护程序）需要使用特定目录来存储容器，即下面的`/var/lib/lxd/storage-pools/`：
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: When we started our container, what we first did was download a prepackaged
    image from a default internet location that served as the base for the container
    we created.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们启动容器时，我们首先从默认的互联网位置下载了一个预打包的镜像，作为我们创建的容器的基础。
- en: 'Here, it''s seen as an alphanumeric string, but it''s really Ubuntu 18.04 in
    cut-down-container form:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，它被视为一个字母数字字符串，但实际上是Ubuntu 18.04的精简容器形式：
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note the size of this container, `175 M`, which is one of the primary advantages
    that people highlight regarding containers (they're tiny, and this is actually
    one of the bigger examples!).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 注意这个容器的大小，`175 M`，这是人们强调容器的主要优势之一（它们很小，这实际上是更大的例子之一）。
- en: 'When our container is running, we can see it from the host as a collection
    of processes:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们的容器正在运行时，我们可以从主机上看到它作为一组进程：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output should look something like the following screenshot:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该看起来像以下截图：
- en: '![](img/4de248d9-dd2c-40aa-a38a-950383b5813c.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4de248d9-dd2c-40aa-a38a-950383b5813c.png)'
- en: This container therefore has most of an OS inside it, which it has inherited
    from the image we pulled down, though it notably doesn't contain a kernel that
    is shared with the host VM.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这个容器在里面有大部分的操作系统，它是从我们下载的镜像继承而来的，尽管它显然不包含与主机VM共享的内核。
- en: Imagine a container like an orange (I also quite like oranges) where each segment
    can exist as its own little parcel of juicy goodness, but without the outer rind
    of the orange giving it structure and passing it nutrients, it's useless. This
    is in contrast to a virtual machine, which is more like an eternally young baby
    spider (hear me out) where each exist independently as living, breathing creatures,
    but they still ride around on their mother's back, ready to deliver a dose of
    eldritch horror to anyone who comes into contact with a brood.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一个容器就像一个橙子（我也很喜欢橙子），其中每个片段都可以存在为自己的一小部分多汁的好处，但没有橙子的外皮给它结构和传递养分，它就毫无用处。这与虚拟机形成对比，后者更像是一个永远年轻的小蜘蛛（听我说完），每个都独立存在为活生生的生物，但它们仍然骑在它们母亲的背上，准备向任何接触到它们的人提供一剂神秘的恐怖。
- en: There's more...
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: At the moment, you should have a container created by LXC, inside a virtual
    machine managed by Vagrant (and utilizing VirtualBox) atop your own laptop, desktop,
    or server.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，您应该在由LXC创建的容器中，位于由Vagrant管理的虚拟机（并利用VirtualBox）之上，位于您自己的笔记本电脑、台式机或服务器上。
- en: This can get a bit tricky to visualize, but a lot of clever people put a lot
    of hours into making sure this sort of setup works without problems.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能有点难以想象，但很多聪明的人花了很多时间来确保这种设置可以无问题地工作。
- en: The LXD daemon
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LXD守护程序
- en: 'As ever, we can use `systemctl` to visualize our service:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，我们可以使用`systemctl`来可视化我们的服务：
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: See also
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: At the top of this section, we ran `hostname` inside our container, but that
    doesn't give you a clue as to what the container is doing. One thing that I find
    particularly handy is the ability to check the processes running in my container,
    without having to dig out process IDs for my `ps` command first.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节的开头，我们在容器内运行了`hostname`，但这并不能让您知道容器在做什么。我发现特别方便的一件事是能够检查运行在我的容器中的进程，而不必先挖出我的`ps`命令的进程ID。
- en: 'Here, I''m using the following command:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我使用以下命令：
- en: '[PRE13]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This gives me the following output:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这给了我以下输出：
- en: '![](img/339e1759-742e-4a74-8e37-1a88d8cc6913.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/339e1759-742e-4a74-8e37-1a88d8cc6913.png)'
- en: Note that it's significantly quieter than the host machine, and very few daemons
    are actually running in the container.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，它比主机机器安静得多，实际上只有很少的守护程序在容器中运行。
- en: Installing Docker
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Docker
- en: By far the most popular solution to running containers on Linux (at least at
    the time of writing) is Docker.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 迄今为止，在Linux上运行容器的最流行的解决方案（至少在撰写本文时）是Docker。
- en: Starting out as a way for Docker Inc. (then dotCloud) to better utilize containers
    in their **PaaS** (**Platform-as-a-Service**) company, Docker quickly gained traction
    in the open source world and was soon seen as the future of computing in a lot
    of circles (the cynical sysadmins generally came after the developers got wind
    of it).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 最初是Docker Inc.（当时是dotCloud）为了更好地利用其**PaaS**（**平台即服务**）公司中的容器而开始的，Docker很快在开源世界中获得了广泛的认可，并很快被视为计算的未来在许多领域（愤世嫉俗的系统管理员通常是在开发人员得知之后才出现的）。
- en: Because it's effectively a simple way to use already-present kernel features,
    and includes the Docker Hub for people to both upload and download pre-built images,
    it made containers easy.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 因为它实际上是一种使用已经存在的内核特性的简单方式，并且包括Docker Hub，供人们上传和下载预构建的镜像，这使得容器变得简单。
- en: Soon, people were containerizing everything, from Firefox, to Nginx, to entire
    distributions, just because.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 很快，人们开始将一切都容器化，从Firefox到Nginx，再到整个发行版，只是因为。
- en: I firmly believe that the ease with which Docker made it possible to upload
    and download their images contributed to its success. As I've already mentioned,
    the concepts of containers go back to the nineties, but there was no "jail prison"
    or "zones zone" for people to download pre-built collections of software from.
    Docker Hub provided this on an already popular platform.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我坚信Docker使得上传和下载他们的镜像变得容易，这有助于其成功。正如我已经提到的，容器的概念可以追溯到九十年代，但当时没有“监狱”或“区域”供人们下载预构建的软件集合。Docker
    Hub在一个已经流行的平台上提供了这一点。
- en: Getting ready
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Most distributions come with Docker in some form or another in the traditional
    repositories. However, this is frequently out of step with upstream or just plain
    old, so it's a good idea to utilize the upstream Docker repositories in your environment.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数发行版都以某种形式在传统存储库中提供Docker。然而，这经常与上游不一致，或者只是老旧的，因此在您的环境中利用上游Docker存储库是一个好主意。
- en: 'SSH to your Ubuntu VM:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: SSH到您的Ubuntu虚拟机：
- en: '[PRE14]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: How to do it...
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Docker keeps a page up to date on how to install Docker on your distribution
    of choice (see [https://docs.docker.com/install](https://docs.docker.com/install)).
    The following are the condensed instructions for Ubuntu.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Docker保持了一个页面，介绍了如何在您选择的发行版上安装Docker（参见[https://docs.docker.com/install](https://docs.docker.com/install)）。以下是Ubuntu的简化指令。
- en: 'Run an update to make sure you''re ready to install Docker:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 运行更新以确保您已准备好安装Docker：
- en: '[PRE15]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Install the GPG key and then add the repository itself:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 安装GPG密钥，然后添加存储库本身：
- en: '[PRE16]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As ever, check the GPG fingerprint against an official source.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，检查GPG指纹是否与官方来源一致。
- en: 'Now, we can finally install Docker itself (this may take some time):'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们终于可以安装Docker本身了（这可能需要一些时间）：
- en: '[PRE17]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We can also check the status of our Docker daemon by using `systemctl`:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`systemctl`来检查我们的Docker守护程序的状态：
- en: '[PRE18]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You may have noticed we haven't started and enabled this service. This is mostly
    because Debian-derived systems like to start services for you... there are a variety
    of reasons I don't like this approach personally, but it is what it is.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到我们还没有启动和启用此服务。这主要是因为派生自Debian的系统喜欢为您启动服务...我个人不喜欢这种方法的原因有很多，但它就是这样。
- en: How it works...
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Before we start, you may have noticed that we constantly worked with a package
    called `docker-ce`, and this is for a very good reason.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，你可能已经注意到我们不断使用一个名为`docker-ce`的软件包，这是有很好的原因的。
- en: There are two base versions of Docker, **Community Edition**** (CE)** and **Enterprise
    Edition**** (EE)**. Mostly, you will only ever see CE in the wild, and it's perfectly
    functional for all of your needs.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Docker有两个基本版本，**社区版（CE）**和**企业版（EE）**。大多数情况下，你只会在野外看到CE，它完全可以满足你的所有需求。
- en: 'All we did here was go to the writers of the software directly and add their
    own GPG key and repository information, alongside our Ubuntu defaults. Docker
    is a very dynamic program, meaning it has frequent and sizable releases. At the
    time of writing, we installed `18.06.1-ce`, but that might change before you know
    it. Docker works on a YEAR-MONTH release format:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里所做的只是直接去软件的作者那里添加他们自己的GPG密钥和存储库信息，以及我们的Ubuntu默认设置。Docker是一个非常动态的程序，意味着它经常发布并且发布量很大。在撰写本文时，我们安装了`18.06.1-ce`，但在你知道之前可能会发生变化。Docker采用年-月发布格式：
- en: '[PRE19]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We also installed two primary components (alongside a lot of tools and extras),
    which were the Docker command-line tool and the Docker daemon.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还安装了两个主要组件（以及许多工具和附加组件），即Docker命令行工具和Docker守护程序。
- en: Docker works in the same way as other user space tools, making use of the kernel
    functionality. What sets it apart is how user-friendly it can be.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Docker的工作方式与其他用户空间工具相同，利用内核功能。它的独特之处在于它可以是多么用户友好。
- en: You mostly work with Docker through the command-line tool `docker`, which, in
    turn, communicated with the Docker daemon. This daemon is the component that's
    responsible for managing the containers it's instructed to create, and maintaining
    the images that it pulls in from Docker Hub or other registries.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 你主要通过命令行工具`docker`来使用Docker，而这个工具又与Docker守护程序进行通信。这个守护程序负责管理它被指示创建的容器，并维护它从Docker
    Hub或其他注册表中拉取的图像。
- en: A Docker registry is a repository of images. The most popular is Docker Hub,
    but there's nothing stopping you from creating your own, or using an off-the-shelf
    solution to manage one, like Artifactory.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Docker注册表是图像的存储库。最受欢迎的是Docker Hub，但没有什么能阻止你创建自己的注册表，或者使用现成的解决方案来管理一个，比如Artifactory。
- en: The last component to be aware of for now is the runtime that Docker is using,
    which is `runC` (the universal container runtime) out of the box.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在要注意的最后一个组件是Docker正在使用的运行时，即`runC`（通用容器运行时）。
- en: The runtime is actually just the name given to the collection of unified systems
    that Docker will use to run containers (think of cgroups and namespaces bundled
    into one word, though there's other features, too). What this means is that while
    `runC` is Linux-specific, if Windows has a container runtime (Host Compute Service),
    then Docker can utilize this instead.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时实际上只是Docker将用于运行容器的统一系统集合的名称（想象一下cgroups和命名空间捆绑成一个词，尽管还有其他功能）。这意味着，虽然`runC`是特定于Linux的，但如果Windows有一个容器运行时（Host
    Compute Service），那么Docker可以使用它。
- en: This does not make the containers universal between operating systems – you
    can't create a container for Linux and spin it up in the Windows-specific runtime,
    but it does make the Docker tooling universal.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不使容器在操作系统之间通用 - 你不能在Linux上创建一个容器，然后在特定于Windows的运行时中运行它，但这确实使得Docker工具通用。
- en: There's more...
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The easiest way to get all the information you could want to know about your
    Docker installation is to use the `docker info` command:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 获取有关Docker安装的所有信息的最简单方法是使用`docker info`命令：
- en: '[PRE20]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Slightly more
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 稍微更多
- en: One thing I haven't touched on is `containerd` and the likes of `CRI-O`. If
    you already know these terms, then there's a good chance you understand why I
    haven't mentioned them, because they're far too far out of scope for what this
    book is trying to accomplish.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我没有涉及的一件事是`containerd`和`CRI-O`之类的东西。如果你已经了解这些术语，那么我之所以没有提到它们，是因为它们远远超出了本书试图实现的范围。
- en: I would encourage anyone who is interested to pick up dedicated literature on
    Docker and its various components as you'll not be out of work for the next few
    years if you understand the most popular containerization tool of the day, inside
    and out.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我鼓励任何对Docker及其各个组件感兴趣的人，去阅读专门的文献，因为如果你全面了解当今最流行的容器化工具，未来几年你将不会失业。
- en: See also
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Did you spot `pigz` in the list of extras downloaded with Docker? This is a
    particularly interesting bit of software, as it's basically a parallelized version
    of `gzip.` When you're decompressing a file and you've got eighteen cores, it's
    nice to use as many of them as you can, instead of overloading one.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 你有没有在使用Docker时注意到`pigz`？这是一个特别有趣的软件，因为它基本上是`gzip`的并行版本。当你解压文件并且有18个核心时，最好尽可能多地使用它们，而不是过载一个核心。
- en: Running your first Docker container
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行你的第一个Docker容器
- en: We've already used a container, way back in the LXC section, but now we're going
    to use the more popular system for running containers.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在LXC部分使用了一个容器，但现在我们将使用更流行的容器运行系统。
- en: This section will cover some basic commands, without going into a great deal
    of depth.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将涵盖一些基本命令，而不会深入讨论。
- en: Getting ready
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this section, we're going to use our Ubuntu VM, but make sure that Docker
    from the previous section is set up first.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用我们的Ubuntu虚拟机，但请确保先设置好上一节的Docker。
- en: 'SSH to your VM, and be sure to use the previous section to set up the upstream
    Docker repository before installing Docker:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: SSH到你的虚拟机，并确保在安装Docker之前使用上一节设置上游Docker存储库：
- en: '[PRE21]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: How to do it...
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: As with the LXC section, we're going to start an Ubuntu container, and we're
    then going to interact with it.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 与LXC部分一样，我们将启动一个Ubuntu容器，然后与其进行交互。
- en: 'Begin with the following command:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 从以下命令开始：
- en: '[PRE22]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now that the container is up and running, you can view it with `docker ps`:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在容器已经启动运行，你可以用`docker ps`查看它：
- en: '[PRE23]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You can also enter it, should you wish, with `docker exec`:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你愿意，你也可以使用`docker exec`进入它：
- en: '[PRE24]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: You could also use `docker attach`, which would accomplish the same thing on
    the face of it (giving you access to a shell in the container). The only problem
    with this method is that you would be attaching to the active process, meaning
    that when you closed your session, the container would stop too.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用`docker attach`，它在表面上完成了相同的事情（让你访问容器中的shell）。这种方法的唯一问题是，你将附加到活动进程，这意味着当你关闭会话时，容器也会停止。
- en: Leaving the container again (`exit`) will bring you back to your VM's prompt.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 再次离开容器（`exit`）将带你回到你的VM提示符。
- en: 'From here, you can stop your container:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，你可以停止你的容器：
- en: '[PRE25]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This may take a few seconds.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能需要几秒钟。
- en: 'The container is now deleted, and we can confirm this with another `docker
    ps`:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 容器现在已被删除，我们可以通过另一个`docker ps`来确认：
- en: '[PRE26]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: How it works...
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Let's break down our commands.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解我们的命令。
- en: Creating a container
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个容器
- en: 'Starting with the creation of our new container, this was the command we used:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 从创建新容器开始，这是我们使用的命令：
- en: '[PRE27]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Here, we''re telling Docker we want to `run` a command in a new container:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们告诉Docker我们想要在一个新的容器中`run`一个命令：
- en: '[PRE28]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We''re then informing it that we want it to be interactive, to have a pseudo-TTY,
    and to start detached (knocking us back to the VM shell):'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们通知它我们希望它是交互式的，有一个伪TTY，并且启动分离的（将我们带回VM shell）：
- en: '[PRE29]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Next, we''re telling Docker that when the container stops, we want it to automatically
    remove itself:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们告诉Docker，当容器停止时，我们希望它自动删除自己：
- en: '[PRE30]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This is a relatively new feature, only introduced because people didn't realize
    containers linger after they stop, and people would end up with lists of hundreds
    of stopped containers.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相对较新的功能，只是因为人们没有意识到容器在停止后仍然存在，人们最终会得到数百个已停止的容器列表。
- en: 'Lastly, we''re saying what image (from Docker Hub) we want to use, and what
    command to run (here, it''s Alpine Linux''s default shell, `ash`):'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们说我们想使用什么镜像（来自Docker Hub），以及要运行什么命令（这里是Alpine Linux的默认shell，`ash`）：
- en: '[PRE31]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Listing our container
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出我们的容器
- en: 'Secondly, we used the following command to list our new container:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，我们使用以下命令列出我们的新容器：
- en: '[PRE32]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This showed the `CONTAINER ID`, `IMAGE`, `COMMAND`, `CREATED`, `STATUS`, `PORTS`,
    and `NAMES` of all our containers (or, in this case, just one).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了所有我们的容器（或者在这种情况下，只有一个）的`CONTAINER ID`、`IMAGE`、`COMMAND`、`CREATED`、`STATUS`、`PORTS`和`NAMES`。
- en: The `CONTAINER ID` portion is a random string allocation, and the `NAMES` section
    features the randomly generated friendly names of your containers (though this
    can also be defined at creation time).
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`CONTAINER ID`部分是一个随机字符串分配，`NAMES`部分显示了你的容器的随机生成的友好名称（尽管这也可以在创建时定义）。'
- en: When we latterly added `-a` to our listing command, it was to show that the
    container wasn't omitted from the initial list simply because it was stopped,
    as the `-a` flag will show all containers, not just running ones.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们后来在我们的列表命令中添加了`-a`时，是为了显示容器并没有因为停止而被从初始列表中省略，因为`-a`标志将显示所有容器，而不仅仅是正在运行的容器。
- en: Executing commands in our container
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在我们的容器中执行命令
- en: 'Next, we jumped inside our container, starting another (atop the one we''ve
    already started at creation time) shell session:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们跳进容器内，启动另一个（在创建时已经启动的）shell会话：
- en: '[PRE33]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Here, we executed a command by using an interactive session and another pseudo-TTY
    within our container (denoted here by its friendly name from `docker ps`).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们通过在容器内使用交互式会话和另一个伪TTY来执行命令（在这里用`docker ps`中的友好名称表示）。
- en: 'This dropped us inside the container. If we then run `top`, we will see both
    instances of the `/bin/ash` command we''ve started:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把我们放在容器内。如果我们运行`top`，我们将看到我们已经启动的`/bin/ash`命令的两个实例：
- en: '![](img/4340b198-411c-4038-b90f-ad36e8361aec.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4340b198-411c-4038-b90f-ad36e8361aec.png)'
- en: Did you spot that one of the `/bin/ash` instances is `PID 1`?
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 你有没有注意到`/bin/ash`实例中的一个是`PID 1`？
- en: Stopping our container
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 停止我们的容器
- en: 'Once we''d jumped out again, we then stopped our running container:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们再次跳出来，然后停止正在运行的容器：
- en: '[PRE34]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: This takes a few seconds, but, once completed, the container will vanish (as
    we saw), though the image it used (alpine) will remain.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要几秒钟，但是一旦完成，容器将消失（正如我们所看到的），尽管它使用的镜像（alpine）将保留下来。
- en: Because our image is still kicking around, the next time you want to use it
    for something, you won't have to download it!
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们的镜像仍然存在，所以下次你想用它做点什么时，你就不必再下载它了！
- en: Debugging a container
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试一个容器
- en: In this section, we're going to start up our container again, make a few changes,
    and check to see whether our changes have had any affect.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将再次启动我们的容器，进行一些更改，并检查我们的更改是否产生了影响。
- en: This serves to highlight the transient nature of containers, and what you can
    do with a running instance.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这有助于突出容器的瞬时性质，以及你可以在运行的实例中做些什么。
- en: Getting ready
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this section, we're going to continue using our Ubuntu VM.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将继续使用我们的Ubuntu VM。
- en: 'SSH to your VM, if not already connected, and start up a container:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 如果还没有连接，通过SSH连接到你的VM，并启动一个容器：
- en: '[PRE35]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: How to do it...
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'You should now have a running docker container, listed here with `docker ps`:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该有一个正在运行的docker容器，在这里列出为`docker ps`：
- en: '[PRE36]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Note that we also have a port forwarded in this example, namely port `8080.`
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在这个例子中还有一个端口转发，即端口`8080`。
- en: Port forwarding in this instance is the same as any other—we're forwarding a
    port from the host to a port in the container.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，端口转发与其他情况相同-我们正在将主机的一个端口转发到容器中的一个端口。
- en: 'Try to `curl` the port:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试使用`curl`命令访问端口：
- en: '[PRE37]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Now, jump into the VM and let''s start a web server on the specified port:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，跳到VM，让我们在指定的端口上启动一个Web服务器：
- en: '[PRE38]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'First, we need to install some additional busybox things:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要安装一些额外的busybox东西：
- en: '[PRE39]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Now, we can start a small web server on port `8080` before exiting the container:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在端口`8080`上启动一个小型Web服务器，然后退出容器：
- en: '[PRE40]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Now, from your VM, you''ll be able to `curl` your container''s new web server:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，从你的VM，你将能够`curl`你的容器的新Web服务器：
- en: '[PRE41]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Stop the container, and start a new one:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 停止容器，然后启动一个新的：
- en: '[PRE42]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Note that when you now `curl` your port again, it won''t work, because all
    your previous changes to the running container have been lost, and a new one has
    a risen in its place:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当你再次`curl`你的端口时，它将不起作用，因为你之前对运行的容器所做的所有更改都已丢失，并且一个新的容器已经取而代之：
- en: '[PRE43]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: How it works...
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: All we've done here is highlight that containers are ephemeral by nature, and
    while you can stop and start the same container (minus the `--rm` to the `docker
    run` command), you're running in a transient state until you tag your container
    and upload it to a registry somewhere.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里所做的只是强调容器本质上是短暂的，虽然你可以停止和启动相同的容器（在`docker run`命令中去掉`--rm`），但在将容器标记并上传到某个注册表之前，你都处于一个瞬态状态。
- en: It's generally not good practice to build a container by starting one and then
    installing a bunch of software inside it, before leaving it and saving it for
    later. The better method is to use a `Dockerfile` or some other automated and
    reproducible way of building containers.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 通常不建议通过启动一个容器然后在其中安装大量软件来构建容器，然后离开并保存它以供以后使用。更好的方法是使用`Dockerfile`或其他自动化和可重复构建容器的方法。
- en: What we've also done is point out that while docker containers should be a self-contained
    little entity, that doesn't mean you can't hop inside them to see what's going
    on, and even install extra software to help with your debugging, should you so
    wish.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还指出，虽然Docker容器应该是一个独立的小实体，但这并不意味着你不能进入其中查看发生了什么，甚至安装额外的软件来帮助你进行调试，如果你愿意的话。
- en: There's more...
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: If you are interested in using a `Dockerfile` to do what we did here, it's a
    fairly trivial one, though it's technically outside the scope of this book.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有兴趣使用`Dockerfile`来做我们在这里做的事情，这是一个相当简单的方法，尽管它在技术上超出了本书的范围。
- en: 'The following would be enough to get you started:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 以下内容足以让你开始：
- en: '[PRE44]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'You could then build this with something like the following:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以使用以下类似的方法构建：
- en: '[PRE45]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Then, you could start your resulting container (detached, and forwarding the
    port):'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以启动你的结果容器（分离，并转发端口）：
- en: '[PRE46]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'We added the `-f` in the `Dockerfile` to ensure that the process remains in
    the foreground (and the container doesn''t stop immediately):'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`Dockerfile`中添加了`-f`，以确保进程保持在前台（容器不会立即停止）：
- en: '[PRE47]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Searching for containers (and security)
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搜索容器（和安全性）
- en: In this section, you're mostly going to need access to a browser of some sort,
    though in a pinch, you might get away with calling up a friend and asking them
    to do an internet search for you (if you're a really good friend and they have
    literally nothing better to do).
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，你大部分时间都需要访问某种类型的浏览器，尽管在紧急情况下，你可能可以打电话给朋友让他们帮你做互联网搜索（如果你是一个真正好的朋友，而且他们确实没有更好的事情要做的话）。
- en: We're also going to use our VM a bit to practice what we discover.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将使用我们的虚拟机来练习我们发现的东西。
- en: We're going to search for containers on Docker Hub, and we're going to touch
    upon the security implications of downloading and using public images.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在Docker Hub上搜索容器，并提及下载和使用公共镜像的安全性问题。
- en: This section is not designed to scare you, in the same way you're not supposed
    to be scared to run any piece of free (as in open source) software that you find
    – it's about doing due diligence.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分并不是为了吓唬你，就像你不应该害怕运行任何你找到的自由软件一样——这是在做尽职调查。
- en: Getting ready
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Jump onto your Ubuntu VM (and install docker from the previous section, if
    you haven''t already done so):'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 跳到你的Ubuntu虚拟机上（如果你还没有安装docker，请从上一节安装）：
- en: '[PRE48]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: How to do it...
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: From your browser of choice, which is Firefox for me, head over to [https://hub.docker.com](https://hub.docker.com).
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 从你选择的浏览器（对我来说是Firefox），前往[https://hub.docker.com](https://hub.docker.com)。
- en: 'You''ll be greeted by a page that looks like the following:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 你将会看到一个类似以下的页面：
- en: '![](img/fc79e940-83c1-4660-9a05-a88c0b474f6e.png)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fc79e940-83c1-4660-9a05-a88c0b474f6e.png)'
- en: There's something of an implication here, which is the section entitled New
    to Docker?. There's no need to create a Docker ID to get started, despite what
    the first sentence there might suggest. You may find it handy to do so, and you
    may even have good reason to create an ID, but there's absolutely no need to do
    so initially (at least not at the time of writing...).
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些暗示，即标题为“新手入门Docker？”的部分。尽管第一句话可能会让人觉得需要创建Docker ID才能开始使用，但实际上并不需要。你可能会发现这样做很方便，甚至可能有充分的理由创建一个ID，但最初（至少在撰写本文时）绝对没有必要这样做。
- en: 'Instead, use the search bar at the top of the screen, and type `redis`:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，使用屏幕顶部的搜索栏，输入`redis`：
- en: '![](img/e5f3b6f7-83c8-4bfc-b402-760e156a2832.png)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e5f3b6f7-83c8-4bfc-b402-760e156a2832.png)'
- en: Wow! That's a lot of repositories!
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！那是很多存储库！
- en: Herein is the first thing it's good to know about Docker. Because it's just
    so easy to create images and upload them to Docker Hub (I have a few myself),
    there's a good chance that there's going to be multiple versions of what you want.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是关于Docker的第一件好事。因为创建镜像并上传到Docker Hub（我自己有几个）是如此容易，所以你想要的东西可能会有多个版本。
- en: Here, we can see that the top result is simply titled redis instead of being
    `<username>/redis-foo` like the rest.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到顶部的结果只是简单地命名为redis，而不是像其他的`<username>/redis-foo`。
- en: When an image is official, it gets the privileged honor of only having the explicit
    name of its software, in this case, redis.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个镜像是官方的时候，它会得到特权的荣誉，只有它的软件的明确名称，就像在这种情况下的redis一样。
- en: 'Click it:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 点击它：
- en: '![](img/8d5a1c09-ddaf-4cba-851d-5bb77087e479.png)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8d5a1c09-ddaf-4cba-851d-5bb77087e479.png)'
- en: There's a few things to note here.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有几件事情需要注意。
- en: Helpfully, we get a command to get started, that is, `docker pull redis` on
    the right.
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 幸运的是，我们得到了一个开始的命令，即右边的`docker pull redis`。
- en: We get repository information, which is the default view that provides us with
    a short and full description. In practice, this can be as short or as long as
    the maintainer feels like making it.
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们得到了存储库信息，这是默认视图，为我们提供了简短和完整的描述。在实践中，这可以是维护者想要的任何长度。
- en: 'Finally, for this moment, we get a Tags section at the top. Click this now:'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，此刻，我们在顶部得到了一个标签部分。现在点击这个：
- en: '![](img/69cd9d17-f020-4149-8ed7-09dd57f44d04.png)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![](img/69cd9d17-f020-4149-8ed7-09dd57f44d04.png)'
- en: Tags, as with Git, are a way of denoting a specific version of the container
    you want to download.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 标签，就像Git一样，是表示您要下载的容器的特定版本的一种方式。
- en: 'The default tag is the latest and it''s the image you would download if you
    were to run the following command (as you can see in the line immediately following
    our command):'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 默认标签是最新的，如果您要运行以下命令，它就是您要下载的镜像（正如您可以在我们的命令后面立即看到的那样）：
- en: '[PRE49]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'If we wanted to specifically pull in the Alpine version of Redis (as in Redis
    installed atop Alpine Linux), we would instead run the following:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要专门拉取Redis的Alpine版本（即在Alpine Linux上安装的Redis），我们将运行以下命令：
- en: '[PRE50]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Note that we pulled every later except the base one, which already existed in
    our setup.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们拉取了除基本版本之外的每个版本，而基本版本已经存在于我们的设置中。
- en: Et voilà! You used Docker Hub to seek out a version of everyone's favorite in-memory
    database!
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 看这里！您使用Docker Hub寻找了每个人最喜欢的内存数据库的一个版本！
- en: How it works...
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: All we're doing here is pulling in a functional image from the global Docker
    Registry; this is the default, the omega, the biggest, the original, and the best
    (according to some people.)
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里做的就是从全球Docker Registry中拉取一个功能性镜像；这是默认的，最重要的，最大的，最原始的，也是最好的（根据一些人的说法）。
- en: Docker Hub is a repository of smaller repositories, with everyone able to put
    their own spin on containers they've built (or forked) and thus adding to the
    software soup of the world.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Hub是一个更小的存储库，每个人都可以在他们构建（或分叉）的容器上加上自己的标记，从而增加了世界软件的种类。
- en: This obviously has disadvantages, as I alluded to in the previous sardonic line.
    This means that because it's so easy to punt your image onto Docker Hub, it can
    become increasingly frustrating to find that one image you want.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 显然这有缺点，正如我在前面讽刺的一行中所暗示的那样。这意味着因为将您的镜像轻松地推送到Docker Hub，发现您想要的一个镜像可能变得越来越令人沮丧。
- en: People can also be malicious, uploading containers that may very well do what
    they say on the tin, while at the same time using an entire core of your computer
    to mine bitcoin (though this sort of thing is generally found out pretty quickly
    when it does happen). It is up to you, as a systems administrator, DevOps person,
    jack-of-all-trades for your company, to work out what a container is doing, and
    if it's what you need.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 人们也可能是恶意的，上传的容器可能确实做了他们所说的事情，同时又利用您计算机的整个核心来挖掘比特币（尽管当这种事情发生时，通常会很快被发现）。作为系统管理员、DevOps人员、公司的万金油，您需要弄清楚容器在做什么，以及它是否符合您的需求。
- en: 'I follow some basic principles here:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 我遵循一些基本原则：
- en: 'Check whether the `Dockerfile` and source are freely available:'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查`Dockerfile`和源是否免费提供：
- en: Usually, repositories on Docker Hub are triggered builds from GitLab or other
    source code hosting sites, meaning that you can check the code behind the container
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通常，Docker Hub上的存储库是从GitLab或其他源代码托管站点触发的构建，这意味着您可以检查容器背后的代码
- en: 'Check the number of downloads of the container:'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查容器的下载次数：
- en: While not an indicator of quality, since frequently the first image of a piece
    of software is the most popular, it's generally a good example of the thousand-eyes
    principle. If thousands of people are using it, there's a higher likelihood that
    nothing malicious is hidden in the container (though there's still a chance).
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虽然这并不是质量的指标，因为经常软件的第一个镜像是最受欢迎的，但它通常是千里眼原则的一个很好的例子。如果成千上万的人在使用它，那么它隐藏在容器中的恶意内容的可能性更高（尽管仍有可能）。
- en: 'Check to see whether it''s an official project''s Docker container:'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查是否为官方项目的Docker容器：
- en: Projects such as Redis, Kibana, and Swift all have official Docker containers,
    so generally I'd go with their offering above others.
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 像Redis、Kibana和Swift这样的项目都有官方的Docker容器，所以通常我会选择它们的产品而不是其他的。
- en: There may also be containers from the project that aren't tagged as official
    and still bear the creator's moniker. Those sit firmly above Jane Bloggs containers
    in my books.
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该项目可能还有未标记为官方的容器，仍然带有创建者的名字。在我看来，这些容器明显优于Jane Bloggs的容器。
- en: That's not to say that unofficial ones are bad, or that they don't cover a slightly
    different need, but, nine times out of ten, I've found this not to be the case.
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这并不是说非官方的容器不好，或者它们不满足稍微不同的需求，但是，十有八九，我发现情况并非如此。
- en: Can you just build it yourself?
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您能自己构建吗？
- en: Assuming that the `Dockerfile` is licensed freely, you could just lift it off
    GitLab and stick it into your build server to create an image of your own. At
    least that way, you know that what you see is what you get at the end of the process
    (assuming you're not downloading software as part of the build, from some dodgy
    third-party repository you've never heard of).
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 假设`Dockerfile`是免费许可的，您可以从GitLab上将其复制到您的构建服务器上，以创建自己的镜像。至少这样，您知道在过程结束时您看到的就是您得到的（假设您没有从您从未听说过的一些可疑第三方存储库中下载软件作为构建的一部分）。
- en: All that said – and it sounds like I'm being very down on homespun containers –
    Docker has won the war of container supremacy because of its market mind share
    and its ease-of-use (if it's building containers or the simplicity of finding
    them).
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此 - 听起来我对自制容器非常不满 - Docker已经赢得了容器至高无上的战争，因为它在市场上占据了主导地位，并且易于使用（无论是构建容器还是找到它们的简单性）。
- en: Docker Hub means that even if I have no local repositories configures, but I
    do have Docker installed, I can soon be running a web server on an Alpine container,
    that plugs into a MariaDB container, atop Gentoo.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Hub意味着即使我没有本地存储库配置，但我安装了Docker，我很快就可以在Alpine容器上运行一个Web服务器，它连接到一个MariaDB容器，位于Gentoo之上。
- en: This container could then feed logs into a containerized Elasticsearch instance,
    running on Slackware, on the exact same host, in about ten minutes.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，该容器可以将日志馈送到一个容器化的Elasticsearch实例，运行在Slackware上，就在同一主机上，大约十分钟内完成。
- en: There's more...
  id: totrans-280
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'You can also search from the command line, if you feel so inclined:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你愿意的话，你也可以从命令行搜索：
- en: '![](img/5af54ef9-20f8-4d9a-91f4-80fc5d4482b5.png)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5af54ef9-20f8-4d9a-91f4-80fc5d4482b5.png)'
- en: I'll be honest, I never do this, and it's mostly because everyone carries a
    browser around in their pocket these days. However, I know that some people out
    there are purists.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 说实话，我从来不这样做，主要是因为现在每个人都随身携带一个浏览器。然而，我知道有些人是纯粹主义者。
- en: What is virtualization?
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是虚拟化？
- en: If you've opened this book randomly on this page, then you might now know what
    virtualization actually is. If you've done the normal thing, and started at the
    beginning, then there's an equally good chance you already understand that you've
    been using virtualization for almost all of this book.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你随机翻开这本书的这一页，那么你现在可能知道虚拟化实际上是什么。如果你按照正常的方式，从头开始阅读，那么你很可能已经明白你几乎在整本书中都在使用虚拟化。
- en: Virtualization is the act of virtualizing (I know right?) one machine inside
    another machine. Unlike a container, though, we visualize everything from the
    USB controllers to the floppy drive (seriously).
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟化是在一个机器内部虚拟化（我知道对吧？）另一台机器的行为。不像容器，我们从USB控制器到软盘驱动器（说真的）都进行了可视化。
- en: This concept is not new, but the technology marches on.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 这个概念并不新鲜，但技术在不断发展。
- en: For our examples, you've probably done the same thing I did and resorted to
    Vagrant with VirtualBox. I chose to go this route because VirtualBox is everywhere,
    with versions available for macOS, Linux, and Windows (along with others!). This
    has great advantages, but also disadvantages.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的例子，你可能和我一样，转而使用了带有VirtualBox的Vagrant。我选择这种方式是因为VirtualBox随处可见，适用于macOS、Linux和Windows（以及其他操作系统！）。这有很大的优势，但也有劣势。
- en: Virtualization, by its very nature, is closely tied to the software and hardware
    of the box it's run on. With this in mind, you might understand why enterprises
    generally choose to not use VirtualBox everywhere (despite having Windows and
    Linux machines), but instead use HyperV and KVM respectively... they're more native.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟化本质上与其运行的主机的软件和硬件密切相关。考虑到这一点，你可能会理解为什么企业通常选择不在所有地方使用VirtualBox（尽管有Windows和Linux机器），而是分别使用HyperV和KVM……它们更本地化。
- en: In Linux land, the virtualization software of choice is **KVM** (**Kernel Virtual
    Machine**).
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux领域，虚拟化软件的选择是**KVM**（**Kernel Virtual Machine**）。
- en: 'Siderant: KVM is a terrible name for a product or piece of software. It already
    had a meaning before Kernel Virtual Machine was decided upon, and data center
    engineers the world over have been cursing this particular three letter acronym
    since its inception. Keyboard Video Mouse was a standard, and, in my head, I still
    picture a DC crash-cart when I hear those letters.'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 旁白：KVM是一个糟糕的产品或软件名称。在决定使用Kernel Virtual Machine之前，它已经有了一个含义，全世界的数据中心工程师自从它诞生以来一直在诅咒这个特定的三个字母缩写。键盘视频鼠标是一个标准，在我脑海中，当我听到这些字母时，我仍然想象着数据中心的崩溃车。
- en: Getting ready
  id: totrans-292
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this section, we're going to be looking at some basic differences between
    containers and virtualization.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将研究容器和虚拟化之间的一些基本区别。
- en: We're going to use our Ubuntu VM, and our CentOS one, for the first time.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首次使用我们的Ubuntu虚拟机和CentOS虚拟机。
- en: 'Log on to your CentOS and Ubuntu VMs:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 登录到你的CentOS和Ubuntu虚拟机：
- en: '[PRE51]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: How to do it...
  id: totrans-297
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到…
- en: In our container steps, we looked briefly at the fact that the kernel that was
    being run was the same on the host VM as it was inside the container.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的容器步骤中，我们简要地看到了在主机虚拟机上运行的内核与容器内部运行的内核是相同的。
- en: 'For this step, we''re going to run the same command on both of our VMs and
    compare the output:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一步中，我们将在我们的两个虚拟机上运行相同的命令并比较输出：
- en: '[PRE52]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Our Ubuntu box is running kernel 4.15.0, and our CentOS box, version 3.10.0.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的Ubuntu系统正在运行内核4.15.0，而我们的CentOS系统正在运行版本3.10.0。
- en: Therein is the first advantage of containers, which are able to run completely
    different versions of the Linux kernel.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是容器的第一个优势，它们能够运行完全不同版本的Linux内核。
- en: 'The second advantage in this vein is the fact that virtual machines don''t
    have to be the same operating system as their host: you can emulate a Windows,
    FreeBSD, or even macOS machine on a Linux box, and mostly any combination of the
    same.'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 在这方面的第二个优势是虚拟机不必与其主机相同的操作系统：你可以在Linux主机上模拟Windows、FreeBSD，甚至macOS机器，以及几乎任何相同的组合。
- en: macOS is a bit of a special case (isn't it always?) because there are license
    problems and you have to do it in a very specific fashion, but it can be done.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: macOS有点特殊（它总是这样吗？）因为存在许可问题，你必须以非常特定的方式进行操作，但是可以做到。
- en: Let's look at something else that's a little bit cool.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看另一件有点酷的事情。
- en: 'On our CentOS VM, I''ve listed the disks:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的CentOS虚拟机上，我列出了磁盘：
- en: '[PRE53]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: These aren't physical drives, they're virtual, and, as a result, you can screw
    up their configuration as many times as you like without damaging your host's
    booting potential.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 这些不是物理驱动器，它们是虚拟的，因此你可以无限次地搞乱它们的配置，而不会损坏主机的引导潜力。
- en: This is one thing I hark on about all the time, mostly since I completely hosed
    the installation I had on my laptop by running a bunch of Ansible in a container.
    This Ansible, though I didn't know it at the time, messed around with disk partitions
    and layout quite forcefully, and, in the case of containers, the devices listed
    in `/dev/` are the devices on your machine, meaning that I'd most excellently
    destroyed my local install. Thankfully, I worked out what had happened before
    I rebooted, and was able to save the work I needed before reinstalling, but I
    didn't do that again. I also changed the tests to use Vagrant and Virtual Machines
    instead...
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我一直在抱怨的一件事情，主要是因为我曾经在容器中运行了一堆Ansible，完全搞砸了我在笔记本电脑上的安装。这个Ansible，尽管当时我并不知道，强制性地改变了磁盘分区和布局，并且在容器的情况下，列在`/dev/`中的设备是你机器上的设备，这意味着我已经彻底毁掉了我的本地安装。幸运的是，我在重启之前弄清楚了发生了什么，并且能够在重新安装之前保存需要的工作，但我再也不这样做了。我还改变了测试，使用Vagrant和虚拟机代替……
- en: Now, obviously, there are disadvantages too—you're basically running an entire
    machine, meaning that they have to boot (though you can get this down to a few
    seconds) and will be inherently slower than most containers to start up.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，显然也有缺点——你基本上是在运行整个机器，这意味着它们必须启动（尽管你可以将它缩短到几秒钟），并且启动速度比大多数容器慢。
- en: You might also only need one program to be installed (such as Steam on a Windows
    VM), but you get the other guff along for the ride, meaning that if you want it
    or not, you'll get Edge browser, Paint, and those annoying folders in the `Documents`
    section that are titled `Music`, `Videos`, and `Pictures` even, inexplicably,
    on server installations.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能也只需要安装一个程序（比如在Windows虚拟机上安装Steam），但你会得到其他东西，意味着无论你想要还是不想要，你都会得到Edge浏览器、画图和那些烦人的文件夹，比如`文档`部分中的`音乐`、`视频`和`图片`，甚至在服务器安装中也是如此。
- en: How it works...
  id: totrans-312
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: It works on modern computers by taking advantage of CPU features, for the most
    part.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 它在现代计算机上运行，主要是利用CPU的特性。
- en: When you emulate your hardware, using either VirtualBox or KVM, what you're
    really doing is creating a whole separate set of instructions for the CPU to process. If
    we emulate VMs on top of CPUs that aren't aware of them natively, and can't deal
    with their instructions at near-native speeds, you have to emulate even the CPU,
    which can be costly and slow (more on this later).
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 当你模拟你的硬件时，无论是使用VirtualBox还是KVM，你真正做的是为CPU创建一整套独立的指令。如果我们在不原生支持VM的CPU上模拟VM，并且无法以接近原生速度处理它们的指令，你必须甚至模拟CPU，这可能是昂贵和缓慢的（稍后详细介绍）。
- en: Generally, CPUs from the last decade will have either AMD-V (in the case of
    AMD) or VT-x (in the case of Intel), which means that your VMs will be nearly
    indistinguishable from your host machine in terms of raw processing speed.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，过去十年的CPU将具有AMD-V（在AMD的情况下）或VT-x（在Intel的情况下），这意味着你的虚拟机在原始处理速度方面几乎无法与主机机器区分开来。
- en: There's also **full virtualization** and **paravirtualization**, the former
    of which means emulating everything (like, say, emulating an aarch64 processor
    atop an x86_64 processor) and the latter of which means that, while the execution
    of processes is segregated, the actual processor being used is the same one as
    the host (what we talked about before in terms of CPUs being virtualization-aware).
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 还有**完全虚拟化**和**半虚拟化**，前者意味着模拟一切（比如，在x86_64处理器上模拟aarch64处理器），后者意味着，虽然进程的执行是分离的，但实际使用的处理器与主机是相同的（我们之前讨论过的CPU虚拟化感知）。
- en: There's more...
  id: totrans-317
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There's even more cool things you can do with VMs that just aren't possible
    with containers.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 使用虚拟机还有更多酷炫的功能，这些功能在容器中是不可能的。
- en: Say you're a gamer, and you really don't like using Windows, but begrudgingly
    admit that you really want to play Civilization with your friends, all of whom
    are avid Windows fanatics. You can do it (sort of) from within Linux.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你是一个玩家，你真的不喜欢使用Windows，但勉强承认你真的想和你的朋友一起玩文明，他们都是狂热的Windows迷。你可以（在某种程度上）在Linux内部做到这一点。
- en: Okay okay, so it's a bit disingenuous to suggest you're doing it from within
    Linux, but there's a method here.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，好吧，这样说有点不诚实，暗示你是在Linux内部进行操作，但这里有一个方法。
- en: You start a VM, install Windows (legally), and then connect your graphics card
    to your VM...
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 你启动一个虚拟机，安装Windows（合法），然后将你的显卡连接到你的虚拟机...
- en: What?
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 什么？
- en: Yes!
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 是的！
- en: With PCI-passthrough, it's perfectly possible to give a graphics card to a virtual
    machine, plug a monitor in the back, and then do all your gaming on a separate
    screen (using the same mouse and keyboard).
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 通过PCI-passthrough，完全可以将显卡分配给虚拟机，将显示器插入背面，然后在单独的屏幕上进行所有游戏（使用相同的鼠标和键盘）。
- en: Progress!
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 进展！
- en: Starting a QEMU machine with our VM
  id: totrans-326
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动一个带有我们的虚拟机的QEMU机器
- en: In this section, we're going to start a VM inside our VM and attempt to connect
    to it.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将在我们的虚拟机内启动一个虚拟机，并尝试连接到它。
- en: Be forewarned. You will probably think that the elements of this section are
    slow. This is not the fault of your machine, or your own configuration—this is
    the fault of physics and the fact that we don't have consumer-grade quantum computing
    yet.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意。你可能会认为本节的元素很慢。这不是你的机器或你自己的配置的错，这是物理的错，也是我们尚未拥有消费级量子计算的事实。
- en: Getting ready
  id: totrans-329
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备好了
- en: 'SSH to your Ubuntu VM:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: SSH到你的Ubuntu虚拟机：
- en: '[PRE54]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Install the appropriate components for running virtual machines on Ubuntu:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ubuntu上安装运行虚拟机的适当组件：
- en: '[PRE55]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: How to do it...
  id: totrans-334
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We''re going to download an Alpine ISO and attempt an installation inside a
    virtual machine (inside our virtual machine):'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将下载一个Alpine ISO并尝试在虚拟机内进行安装（在我们的虚拟机内）：
- en: '[PRE56]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: I chose Alpine for this because it's tiny, fitting into 32 MB.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择Alpine是因为它很小，只有32MB。
- en: 'Next, we need to create a virtual disk on which to install our OS:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建一个虚拟磁盘来安装我们的操作系统：
- en: '[PRE57]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Now, we can use QEMU to boot our ISO atop our virtual drive:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用QEMU在我们的虚拟驱动器上启动我们的ISO：
- en: '[PRE58]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'With any luck, you should see something like the following:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的话，你应该能看到以下内容：
- en: '![](img/9fb5b5b4-7578-419b-9698-0d4ea89aa886.png)'
  id: totrans-343
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9fb5b5b4-7578-419b-9698-0d4ea89aa886.png)'
- en: 'At the command-line prompt, you should be able to log in as the root user (there''s
    no password by default):'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令行提示符下，你应该能够以root用户登录（默认情况下没有密码）：
- en: '[PRE59]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Alpine functions like something approaching a live CD, so we can now go ahead
    and run through a quick installation to the local drive:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: Alpine的功能类似于一个接近实时CD的东西，所以我们现在可以继续进行快速安装到本地驱动器：
- en: '[PRE60]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'You''ll be asked some standard questions. Mostly, you can just answer with
    the defaults, but for the sake of completeness, here''s what I did:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 你会被问到一些标准问题。大多数情况下，你可以用默认答案，但为了完整起见，这是我做的：
- en: Keyboard: `gb`
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 键盘：`gb`
- en: Keyboard variant: `gb`
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 键盘变体：`gb`
- en: Hostname: `[default (localhost)]`
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机名：`[默认（localhost）]`
- en: Interface: `[default (eth0)]`
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接口：`[默认（eth0）]`
- en: IP address: `[default (dhcp)]`
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IP地址：`[默认（dhcp）]`
- en: Manual network configuration: `[default (no)]`
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动网络配置：`[默认（否）]`
- en: 'Password: Random'
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码：随机
- en: Time zone: `[default (UTC)]`
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时区：`[默认（UTC）]`
- en: Proxy: `[default (none)]`
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代理：`[默认（无）]`
- en: Mirror: `3` (UK, you may find one closer to you)
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 镜像：`3`（英国，你可能会找到更接近你的）
- en: SSH server: `[default (openssh)]`
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SSH服务器：`[默认（openssh）]`
- en: Disk to use: `sda`
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要使用的磁盘：`sda`
- en: How to use: `sys`
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用方法：`sys`
- en: Erase and continue: `y`
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 擦除并继续：`y`
- en: Once completed, you'll have an installed Alpine Linux VM inside your Ubuntu
    VM.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，你将在你的Ubuntu虚拟机内安装了Alpine Linux虚拟机。
- en: 'Power down the Alpine installation:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭Alpine安装：
- en: '[PRE61]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'You''ll find yourself back inside your Ubuntu VM. Now, we''re going to boot
    Alpine again, but this time we''re going to omit the ISO file and the `-boot`
    parameter:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现自己又回到了你的Ubuntu虚拟机。现在，我们将再次启动Alpine，但这次我们将省略ISO文件和`-boot`参数：
- en: '[PRE62]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: As I said at the start, all of these steps can take a long time to complete,
    depending on the age of your computer.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我在开头所说的，所有这些步骤都可能需要很长时间才能完成，这取决于你的计算机的年龄。
- en: 'Once booted, you''ll find yourself back in your Alpine installation, this time
    booted from our virtual drive:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 启动后，你会发现自己又回到了Alpine安装界面，这次是从我们的虚拟驱动器启动的：
- en: '[PRE63]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: To terminate your session, either power off the VM again or hit *Ctrl* + *A*,
    and then *X*.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 要终止会话，要么再次关闭虚拟机，要么按下*Ctrl* + *A*，然后按下*X*。
- en: How it works...
  id: totrans-372
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Breaking down what we're doing here step by step, we started out by downloading
    an ISO image from the Alpine website. This is the easiest thing to explain, as
    we're effectively using the ISO as a source of truth for our installation. You
    can also do things such as pass `/dev/cdrom` through to your VM, should you wish
    to use the physical drive in your machine (and you live in 2009).
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 逐步分解我们在这里所做的事情，我们首先从Alpine网站下载了一个ISO映像。这是最容易解释的事情，因为我们实际上是使用ISO作为我们安装的真相来源。你也可以做一些其他的事情，比如将`/dev/cdrom`传递给你的虚拟机，如果你希望使用你机器上的物理驱动器（并且你生活在2009年）。
- en: Once we had our ISO image, we then created a file-based block device to install
    atop. This is so that we can segment one installation from another, and even move
    the installation from machine to machine should we wish. There are other solutions
    that don't involve using files – you could partition an LVM setup, giving some
    of the space to your VM, or you could attach a physical disk and give the entire
    thing to the installation.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了ISO映像，我们就创建了一个基于文件的块设备来安装。这样我们可以将一个安装与另一个安装分开，甚至可以将安装从一台机器移动到另一台机器。还有其他不涉及使用文件的解决方案-你可以对LVM设置进行分区，将一些空间分配给你的虚拟机，或者你可以连接一个物理磁盘，并将整个磁盘分配给安装。
- en: We used `qemu-img` to create the file, but there's no reason you couldn't have
    used another tool such as `fallocate` to accomplish the same thing.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`qemu-img`创建文件，但你也可以使用其他工具，比如`fallocate`来完成同样的工作。
- en: 'Next, we booted our VM using the following command:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用以下命令启动了我们的虚拟机：
- en: '[PRE64]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Breaking this down, we have the following:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我们有以下内容：
- en: '[PRE65]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'This is the QEMU architecture that we want to emulate. I stuck with x86_64
    for this, as it''s the most common and it''s the architecture that the ISO we
    downloaded expects to find. We could have used `qemu-system-aarch64` if we so
    desired, and provided we had the appropriate disc image:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们想要模拟的QEMU架构。我选择了x86_64，因为它是最常见的架构，也是我们下载的ISO期望找到的架构。如果我们愿意的话，我们也可以使用`qemu-system-aarch64`，并且提供适当的磁盘映像：
- en: '[PRE66]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Here, we''re passing QEMU a drive to use, specifically the `example-disk` file
    that we just created, and the format it was created in:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们向QEMU传递了一个要使用的驱动器，具体是我们刚刚创建的`example-disk`文件，以及它创建的格式：
- en: '[PRE67]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'We specifically tell QEMU that we want to use the ISO we downloaded:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 我们明确告诉QEMU我们要使用我们下载的ISO：
- en: '[PRE68]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'We want to boot, specifically from the CD-ROM rather than the virtual drive:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要从CD-ROM而不是虚拟驱动器启动：
- en: '[PRE69]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: We're on a server here, connected over SSH, so we can't use a graphical output
    for our VM. This option redirects serial input and output to the console.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里是一个通过SSH连接的服务器，所以我们不能为我们的虚拟机使用图形输出。这个选项将串行输入和输出重定向到控制台。
- en: There's more...
  id: totrans-389
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There's nothing stopping you from using your QEMU-driver VM as a full-fledged
    machine, aside from the speed.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 除了速度之外，没有什么能阻止你将QEMU驱动的虚拟机用作完整的机器。
- en: 'You can install packages, and even run things such as `htop`:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以安装软件包，甚至运行`htop`之类的东西：
- en: '[PRE70]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '![](img/9e5f8e7c-10a6-43e1-93e1-db890fa186a5.png)'
  id: totrans-393
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9e5f8e7c-10a6-43e1-93e1-db890fa186a5.png)'
- en: See also
  id: totrans-394
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You might have noticed a lot of options that we didn't use here, and QEMU's
    system tools are capable of quite a lot. Typically, people don't build VMs using
    QEMU directly – they rely on shinier and more user-friendly tools to do the job
    for them.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能注意到了很多我们没有使用的选项，QEMU的系统工具功能非常强大。通常，人们不直接使用QEMU构建虚拟机，他们依赖更亮眼和更用户友好的工具来完成工作。
- en: On servers, Virsh is a good choice (covered later in this chapter) and, on desktop
    machines, **Virtual Machine Manager (virt-manager)** is a very commonly installed
    package that also lets you connect to remote (headless) servers to set up VMs
    using clicky buttons.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器上，Virsh是一个不错的选择（本章后面会介绍），在桌面机器上，**虚拟机管理器（virt-manager）**是一个非常常见的安装包，它还可以让你连接到远程（无头）服务器，使用点击按钮设置虚拟机。
- en: Using virsh and virt-install
  id: totrans-397
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用virsh和virt-install
- en: '`virsh` and `virt-install` are good tools for individuals who are getting started
    with VMs on Linux. It sounds a bit old hat now, but if you can do something well
    on the command line, you''ll wonder why you ever needed a clicky-button GUI to
    do the job for you.'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '`virsh`和`virt-install`对于刚开始在Linux上使用虚拟机的人来说是很好的工具。现在听起来有点老土，但如果你能在命令行上做得很好，你会想知道为什么你以前需要一个点击按钮的GUI来帮你完成工作。'
- en: When we talk about clients in this way, what we're referring to are frontends
    to the `libvirt` library, which is a C toolkit that was designed to make interacting
    with the kernel's virtualization functionality easier.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们这样谈论客户端时，我们指的是`libvirt`库的前端，它是一个设计用来使与内核的虚拟化功能交互更容易的C工具包。
- en: '`virsh` and `virt-install` talk to `libvirt`, which, in turn, talks to the
    kernel.'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '`virsh`和`virt-install`与`libvirt`通信，而`libvirt`又与内核通信。'
- en: Getting ready
  id: totrans-401
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'SSH to your Ubuntu VM, and then install the `virtinst`, `libvirt-clients`,
    `libvirt-bin`, and `libvirt-daemon` packages:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: SSH到您的Ubuntu VM，然后安装`virtinst`、`libvirt-clients`、`libvirt-bin`和`libvirt-daemon`软件包：
- en: '[PRE71]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: How to do it...
  id: totrans-404
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: First, we're going to use the `virt-install` tool that we've installed to create
    our VM, and then we're going to probe it with `virsh`.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将使用我们安装的`virt-install`工具创建VM，然后我们将使用`virsh`对其进行探测。
- en: Creating the VM is the simple step; it's the heartache that comes with maintaining
    machines that's the real drag.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 创建VM是简单的步骤；真正麻烦的是维护机器时带来的痛苦。
- en: virt-install
  id: totrans-407
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: virt-install
- en: To begin, let's use the Alpine ISO we downloaded previously to spin up and install
    a virtual machine.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们使用之前下载的Alpine ISO来启动和安装虚拟机。
- en: 'If you haven''t got the ISO from the previous section, here''s the command
    to download it again:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有从上一节获得ISO，这是重新下载它的命令：
- en: '[PRE72]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Let''s use `fallocate` this time to create a block device:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 这次让我们使用`fallocate`创建一个块设备：
- en: '[PRE73]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Now, let''s use a single line to provision our domain (domain being the collective
    term used here for the machine and other bits):'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用一行命令来配置我们的域（域是这里用于机器和其他部分的集体术语）：
- en: '[PRE74]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: We're using `virtio26` as the OS variant here because there isn't an explicit
    `alpine` option. Instead, this tells `virt-install` that the OS we're installing
    is using a kernel later than 2.6, and it supports VirtIO devices (for disks, networking,
    and so on). This results in us having a functioning VM, which is nice.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里使用`virtio26`作为OS变体，因为没有明确的`alpine`选项。相反，这告诉`virt-install`我们正在安装的操作系统使用的是2.6之后的内核，并且支持VirtIO设备（用于磁盘、网络等）。这使我们拥有一个正常运行的VM，这很好。
- en: Assuming this goes to plan, you should again see the Alpine boot sequence.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 假设一切顺利，您应该再次看到Alpine的引导顺序。
- en: Use the `root` user and blank password to log in, and then run through the install
    process, as we did in the previous section (installing to the vda device).
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`root`用户和空密码登录，然后按照上一节的步骤进行安装（安装到vda设备）。
- en: Disconnect from the console once the install has finished with *Ctrl* + *]*.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，使用*Ctrl* + *]*从控制台断开连接。
- en: virsh
  id: totrans-419
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: virsh
- en: It's perfectly possible to use Virsh as a series of commands on the command
    line, in the traditional Unix style of `<command>` `<flag>` `<argument>` that
    we've seen previously.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 完全可以像我们之前看到的传统Unix风格的命令行上的一系列命令一样使用Virsh。
- en: However, it's also perfectly acceptable to use Virsh interactively, in its own
    mode.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，使用Virsh进行交互也是完全可以接受的，它有自己的模式。
- en: 'Start the Virsh Terminal by using the following:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令启动Virsh终端：
- en: '[PRE75]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Now, we''re going to interact with the machine we created a moment before.
    Start by listing it on the command line:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将与我们刚刚创建的机器进行交互。首先在命令行上列出它：
- en: '[PRE76]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: By default, this command will show you running domains.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，此命令将显示正在运行的域。
- en: 'If we connect to our VM and hit *Enter* a couple of times, we can interact
    with our install:'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们连接到我们的VM并连续按*Enter*几次，我们可以与我们的安装进行交互：
- en: '[PRE77]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Hop out of the VM again with *Ctrl* + *]*.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 再次使用*Ctrl* + *]*退出VM。
- en: 'Let''s build on the bare-bones domain that we have, starting by taking a look
    at what `virt-install` has given us with `dominfo`:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在我们拥有的基本域上进行构建，首先看看`virt-install`通过`dominfo`给我们的东西：
- en: '[PRE78]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Now here''s the fun bit – we haven''t actually rebooted our VM yet, following
    the install, so let''s issue that using `virsh`:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这是有趣的部分-我们实际上还没有在安装后重新启动我们的VM，所以让我们使用`virsh`来发出命令：
- en: '[PRE79]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Yes, destroy is a confusing word here, but it's because the actual state of
    the VM is ephemeral. The data is safe on the drive. The actual configuration is
    part of the domain so that when we issue the `destroy` and `start` commands, we're
    not really deleting anything. I dislike the terminology, but it's just something
    you learn to live with.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，销毁在这里是一个令人困惑的词，但这是因为VM的实际状态是短暂的。数据在驱动器上是安全的。实际配置是域的一部分，所以当我们发出`destroy`和`start`命令时，我们实际上并没有删除任何东西。我不喜欢这个术语，但这只是你学会接受的东西。
- en: 'Now, we can console connect to our VM, again from `virsh` (this bit, again,
    can take some time):'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以再次从`virsh`连接到我们的VM控制台（这一部分可能需要一些时间）：
- en: '[PRE80]'
  id: totrans-436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: And, at any time, we can disconnect using *Ctrl* + *]*.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，随时可以使用*Ctrl* + *]*断开连接。
- en: Virsh is full of tricks, my favorite of which is the easy way to edit the configuration
    XML of your domain.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: Virsh充满了技巧，我最喜欢的是轻松编辑域的配置XML的方法。
- en: 'Issue an `edit` command as follows:'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 发出以下`edit`命令：
- en: '[PRE81]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'You should be dropped into the editor you selected and presented with the configuration
    file for your VM:'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该进入您选择的编辑器，并看到您的VM的配置文件：
- en: '![](img/e8f22a38-a1a7-47c6-a008-a97db952c3d2.png)'
  id: totrans-442
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e8f22a38-a1a7-47c6-a008-a97db952c3d2.png)'
- en: This is sort of the additional way of doing things. If you're comfortable editing
    files directly, this might be your jam more than using the command line (and,
    in my experience, there are a couple of options that are just not possible to
    do without delving into this file).
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 这在某种程度上是另一种做事情的方式。如果您习惯直接编辑文件，这可能比使用命令行更适合您（根据我的经验，有一些选项是不可能不深入研究这个文件就无法完成的）。
- en: 'There are also a couple more things before we leave the world of `virsh`, the
    first of which is the `version` command:'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 在离开`virsh`世界之前，还有一些事情，首先是`version`命令：
- en: '[PRE82]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: It's a great way to work out the version of the hypervisor you're connected
    to, the `libvirt` library version, and the API.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个很好的方法来确定您连接到的hypervisor版本，`libvirt`库版本和API。
- en: 'You can also check the vCPU count:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以检查vCPU计数：
- en: '[PRE83]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Then, you can adjust the numbers:'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以调整数字：
- en: '[PRE84]'
  id: totrans-450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'We also know from `dominfo` that we gave our VM 512 MiB of memory, so let''s
    lower that to make space for other VMs:'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还从`dominfo`中知道我们给了我们的VM 512 MiB的内存，所以让我们降低它以腾出其他VM的空间：
- en: '[PRE85]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: We could up it too, but not beyond the max memory setting that the VM already
    has (in this state, at least).
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以提高它，但不能超过VM已经设置的最大内存（至少在这种状态下）。
- en: How it works...
  id: totrans-454
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As hinted at previously, when you create a VM using `virt-install`, what you're
    actually doing is writing an initial XML file that contains the recipe for how
    the VM looks and acts.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 正如之前所暗示的，当你使用`virt-install`创建一个虚拟机时，实际上你正在编写一个包含虚拟机外观和行为的初始 XML 文件。
- en: This file actually exists at `/etc/libvirt/qemu/ex-alpine-2.xml` and can be
    read in the same way as any other file on the system (`virsh` just makes it easier,
    like `systemctl cat`).
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件实际上存在于`/etc/libvirt/qemu/ex-alpine-2.xml`，可以像系统上的任何其他文件一样读取（`virsh`只是让它更容易，就像`systemctl
    cat`一样）。
- en: When we use tools such as `virt-install`, `virt-viewer`, or any of the `virt-*`
    suite, we're taking a lot of typing and copying of files out of the equation.
    You can write a runbook that recreates an environment with just a few one-line
    commands. Virsh then exists to query your setup and get some basic information
    about the solutions you've spun up.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用诸如`virt-install`、`virt-viewer`或任何`virt-*`套件时，我们可以省去很多打字和文件复制。你可以编写一个运行簿，只需几条命令就可以重新创建一个环境。然后，Virsh存在于查询你的设置并获取有关你已经启动的解决方案的一些基本信息。
- en: 'We can use something like `virsh autostart` to start a VM on boot, as follows:'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`virsh autostart`之类的东西在启动时启动一个虚拟机，如下所示：
- en: '[PRE86]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: By doing this, we're enabling the script located at `/usr/lib/libvirt/libvirt-guests.sh` to
    start the VM during boot.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，我们使位于`/usr/lib/libvirt/libvirt-guests.sh`的脚本能够在启动时启动虚拟机。
- en: 'This script, in turn, is triggered by a `systemd` unit:'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本又被一个`systemd`单元触发：
- en: '[PRE87]'
  id: totrans-462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: There's more...
  id: totrans-463
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Take a look at the rest of the `virt` suite:'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 看看`virt`套件的其他部分：
- en: '[PRE88]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: There's a tool for everything, and everything's got a tool.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 每件事都有一个工具，而每个工具都有一个工具。
- en: When you get a few minutes, take a look at `virt-clone` and `virt-viewer` –
    they're my favorites.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 当你有几分钟的时候，看一下`virt-clone`和`virt-viewer` - 它们是我最喜欢的。
- en: Comparing the benefits of local installs, containers, and VMs
  id: totrans-468
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比较本地安装、容器和虚拟机的优势
- en: We're going to take a look at some obvious advantages and disadvantages to local
    installations, containers, and VMs, as well as deciding when it might be ideal
    to use one or the other.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看一下本地安装、容器和虚拟机的一些明显的优缺点，以及在何时使用其中一种可能是理想的。
- en: Getting ready
  id: totrans-470
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: If you want to follow along in this section, ensure that you've got Docker installed
    and set up, as well as having QEMU tools enabled (both from the previous sections).
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在本节中跟着做，确保你已经安装并设置好了Docker，并且启用了QEMU工具（都是从前面的部分）。
- en: 'SSH to your Ubuntu VM:'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: SSH 到你的 Ubuntu 虚拟机：
- en: '[PRE89]'
  id: totrans-473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Now, you might want to install Vagrant inside our Vagrant VM (for the VM examples
    that follow):'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可能想在我们的 Vagrant VM 中安装 Vagrant（用于接下来的 VM 示例）：
- en: '[PRE90]'
  id: totrans-475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Once you've added yourself to the appropriate groups, log out of your VirtualBox
    VM and back in, prior to moving into this section.
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你把自己添加到适当的组中，就退出你的VirtualBox虚拟机，然后再进入这一部分。
- en: How to do it...
  id: totrans-477
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: From your command line, let's start an Nginx instance.
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 从命令行开始，让我们启动一个 Nginx 实例。
- en: You could go about this in one of three ways.
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用三种方式之一来解决这个问题。
- en: Use `apt` to install Nginx from the default repositories
  id: totrans-480
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`apt`从默认存储库安装 Nginx
- en: Use Docker to pull the official Nginx image from Docker Hub
  id: totrans-481
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Docker 从 Docker Hub 拉取官方 Nginx 镜像
- en: Set up a VM and install Nginx inside it, using port forwarding from the host
  id: totrans-482
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置一个虚拟机并在其中安装Nginx，使用主机的端口转发
- en: 'These could be done in the following fashion:'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 这些可以以以下方式完成：
- en: '[PRE91]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: I used a `Vagrantfile` here because it's what we've used throughout this book,
    but there are other ways we could go about spinning up a VM. This also might not
    work if there are already other VMs running inside your VM (from the previous
    section) and could just be far too slow to work at all.
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里使用了一个`Vagrantfile`，因为这是我们在本书中一直使用的，但我们还可以以其他方式启动一个虚拟机。如果在你的虚拟机中已经运行了其他虚拟机（来自上一节），这也可能行不通，而且可能太慢而根本无法工作。
- en: What are the advantages and disadvantages to these different methods?
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 这些不同方法的优缺点是什么？
- en: Local Nginx install
  id: totrans-487
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本地 Nginx 安装
- en: First, the local install. This is the simplest method, as we're simply installing
    software that is readily available from the default Ubuntu repository.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 首先是本地安装。这是最简单的方法，因为我们只是安装了默认Ubuntu存储库中readily可用的软件。
- en: 'Pros:'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 优点：
- en: It comes configured in an Ubuntu fashion (that is, some Ubuntu defaults, such
    as start scripts) and it is pretty much guaranteed to work with your setup
  id: totrans-490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它以Ubuntu的方式进行配置（即一些Ubuntu默认设置，比如启动脚本），并且几乎可以保证与你的设置兼容
- en: It installs extremely quickly
  id: totrans-491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它安装非常快
- en: It will also be kept up to date as long as the repository is kept up to date,
    and other software installed from the same location should interact with it in
    a native fashion, avoiding things like manual pointing of dependencies
  id: totrans-492
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只要存储库保持最新，它也会保持最新，从同一位置安装的其他软件应该以本地方式与它交互，避免手动指定依赖关系之类的事情
- en: It'll obviously be fast, and thus able to utilize whatever your box grants it
  id: totrans-493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这显然会很快，并且能够利用你的主机提供的任何东西
- en: You can generally expect reasonable help with issues too, be it on the official
    forums, or if you have a specific support contract with Ubuntu (they may start
    by assuming you've installed things from their default repositories)
  id: totrans-494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你通常可以期待在官方论坛上或者如果你与Ubuntu有特定的支持合同（他们可能会假设你已经从他们的默认存储库安装了东西），在问题上得到合理的帮助。
- en: 'Cons:'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 缺点：
- en: You can't install multiple versions of Nginx easily; though it's certainly possible,
    it's more work
  id: totrans-496
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你不能轻松地安装多个版本的Nginx；虽然这是可能的，但需要更多的工作
- en: You can't easily delete all of your configuration and files without something
    potentially getting left behind (making a reinstall a faff)
  id: totrans-497
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你不能轻易删除所有的配置和文件，否则可能会留下一些东西（导致重新安装很麻烦）
- en: Nginx isn't as segregated as it could be from the rest of the system
  id: totrans-498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nginx与系统的其他部分没有那么分离
- en: Docker Nginx install
  id: totrans-499
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker Nginx 安装
- en: Moving on, we next set up an Nginx Docker container, forwarding a port as we
    did.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们在一个 Nginx Docker 容器中设置一个端口转发。
- en: 'The positives here are as follows:'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的优点如下：
- en: It's quick to start up your instance
  id: totrans-502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动你的实例很快
- en: Multiple instances can be started with no worry of cross contamination
  id: totrans-503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以启动多个实例，而不必担心交叉污染
- en: The processes are reasonably segregated from the host machine (though exploits
    can and do happen)
  id: totrans-504
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些进程与主机机器相对分离（尽管可能会发生漏洞）
- en: Containers can be torn down and redeployed in a heartbeat, with no worry that
    lingering files might cause you problems
  id: totrans-505
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器可以在瞬间被拆除和重新部署，而不必担心残留的文件可能会给您带来问题
- en: 'Some negatives are as follows:'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 一些消极的方面如下：
- en: You have to download the container first
  id: totrans-507
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您必须先下载容器
- en: Mapping ports (when not defined explicitly) results in a randomly NAT'd port,
    rather than port `80` by default
  id: totrans-508
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 映射端口（未明确定义时）会导致随机NAT'd端口，而不是默认的端口`80`
- en: You might end up with an OS in the container that isn't the same as the host
    OS (there can be internal security compliance issues with this)
  id: totrans-509
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可能最终得到的容器中的操作系统与主机操作系统不同（这可能会导致内部安全合规性问题）
- en: You've now effectively got two sources of truth for software running on your
    system
  id: totrans-510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在，您在系统上运行的软件实际上有了两个真实来源
- en: Configuration within the container isn't consistent – you have to explicitly
    save a container's state if you modify it
  id: totrans-511
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器内的配置不一致-如果您修改了容器，必须明确保存容器的状态
- en: Debugging becomes slightly more awkward
  id: totrans-512
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试变得稍微更加麻烦
- en: No init system (usually) if you do need one for things such as service file
    testing
  id: totrans-513
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您需要进行诸如服务文件测试之类的操作，通常没有init系统
- en: VM Nginx install
  id: totrans-514
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 虚拟机Nginx安装
- en: There's a small consideration to take into account here, and that's the fact
    we're running a VM inside a VM, but it highlights a few problems.
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个小考虑因素，那就是我们在虚拟机内运行了一个虚拟机，但这突显了一些问题。
- en: 'Some positives are:'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 一些积极的方面是：
- en: It has pretty much complete OS segregation (except for some vulnerabilities
    like Meltdown)
  id: totrans-517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它几乎完全隔离了操作系统（除了一些像熔断这样的漏洞）
- en: Good control over resource allocation for the VM
  id: totrans-518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于虚拟机的资源分配有很好的控制
- en: Ability to tear down and spin up on a whim
  id: totrans-519
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随心所欲地拆除和启动
- en: If you need to specifically make hardware changes to account for software requirements,
    VMs are the only way to do this easily
  id: totrans-520
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您需要根据软件要求进行硬件更改，虚拟机是唯一容易实现这一点的方法
- en: 'Some negatives are:'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 一些消极的方面是：
- en: VMs can be slower than containers, and there's a lot of factors you have to
    account for (such as if your server is already a VM)
  id: totrans-522
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟机可能比容器慢，而且您必须考虑很多因素（例如，如果您的服务器已经是虚拟机）
- en: You're running an entirely separate OS and kernel, for the sake of one program
    (in this example)
  id: totrans-523
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了一个程序（在这个例子中），您正在运行一个完全独立的操作系统和内核
- en: VMs usually take up more space, owing to the disk space needed for the rest
    of the OS
  id: totrans-524
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于需要用于其他操作系统的磁盘空间，虚拟机通常占用更多空间
- en: You have to manage the updates for another machine, besides the host
  id: totrans-525
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除了主机之外，您还必须管理另一台机器的更新
- en: You need to keep an eye on resource segregation, which can mean extra monitoring
    (this is especially true if you do things such as specific CPU pinning)
  id: totrans-526
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您需要密切关注资源隔离，这可能意味着额外的监控（特别是如果您做一些诸如特定CPU固定的事情）
- en: How it works...
  id: totrans-527
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它的工作原理...
- en: This isn't an attempt to dissuade you from choosing any particular method of
    installing your software, and there's plenty of reasons for choosing one method
    over the other.
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是要劝阻您选择任何特定的软件安装方法，选择一种方法而不是另一种方法有很多原因。
- en: I've worked in environments where I had to primarily use a VM, and not wanting
    the headache of using a VM inside a VM, I've tested software by using containers
    instead.
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 我曾在主要使用虚拟机的环境中工作，不想使用虚拟机内的虚拟机，我通过使用容器而不是虚拟机来测试软件。
- en: Likewise, as mentioned previously, I've screwed up host installations by making
    hardware configuration changes inside a Docker container, resulting in a host
    system that would never boot again.
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，正如之前提到的，我曾通过在Docker容器内进行硬件配置更改而搞砸了主机安装，导致主机系统永远无法再次启动。
- en: Speaking from experience, you'll quickly get tired of managing different methods
    of installation, and having used systems where some things were installed from
    default repositories, some from Snaps, some from Flatpak, and some utilizing Docker
    containers, it gets really old, really fast.
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 根据经验，您很快就会厌倦管理不同的安装方法，并且在某些系统中，有些东西是从默认存储库安装的，有些是从Snaps安装的，有些是从Flatpak安装的，有些是利用Docker容器，这些都变得非常陈旧，非常快。
- en: In the example we looked at here, I would be hard pressed to not choose Docker
    on a web server, specifically because of the management capabilities it offers.
    I could easily install multiple instances of Nginx and be relatively confident
    they'd never know that another instance existed, without having to segregate configuration
    files in a weird and wonderful fashion.
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我很难不选择在Web服务器上使用Docker，特别是因为它提供的管理功能。我可以轻松安装多个Nginx实例，并且相对有信心它们永远不会知道另一个实例的存在，而无需以奇特而奇妙的方式隔离配置文件。
- en: It's never simple.
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 这从来都不是简单的。
- en: 'Also, it''s worth remembering that because we used Vagrant in our VM and `libvirt`
    underneath, we can see our VM with Virsh:'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，值得记住的是，因为我们在虚拟机中使用了Vagrant和`libvirt`，我们可以用Virsh看到我们的虚拟机：
- en: '[PRE92]'
  id: totrans-535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'We can also see our container with docker:'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以用docker看到我们的容器：
- en: '[PRE93]'
  id: totrans-537
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Brief comparison of virtualization options (VMware, proxmox, and more)
  id: totrans-538
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 虚拟化选项的简要比较（VMware、proxmox等）
- en: When it comes to virtualization, everyone has their favorite solution.
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 在虚拟化方面，每个人都有自己喜欢的解决方案。
- en: You should know about two options by now, those being VirtualBox (which we've
    been using throughout this book) and QEMU/KVM. However, these aren't the only
    options available to you, should you want to run virtual machines on your server,
    just as containers aren't limited to Docker.
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您现在应该知道两个选项，即VirtualBox（我们在本书中一直在使用）和QEMU/KVM。但是，这并不是您可用的唯一选项，如果您想在服务器上运行虚拟机，就像容器不仅限于Docker一样。
- en: 'Here, we''re going to run through a few other options, most of which you''ll
    probably come across in your career at some point:'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将介绍一些其他选项，其中大部分您可能在职业生涯中的某个时候都会遇到：
- en: VMware ESXi
  id: totrans-542
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VMware ESXi
- en: Proxmox
  id: totrans-543
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Proxmox
- en: OpenStack
  id: totrans-544
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenStack
- en: Getting ready
  id: totrans-545
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Open your web browser of choice.
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 打开您选择的网络浏览器。
- en: How to do it...
  id: totrans-547
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到…
- en: We're going to look at some of the options available to us, in a section dedicated
    to each.
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看一些可供我们选择的选项，每个选项都有一个专门的部分。
- en: VMware ESXi
  id: totrans-549
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VMware ESXi
- en: One of the various offerings from VMware (now a subsidiary of Dell) ESXi isn't
    Linux; it's a dedicated "OS" that sits atop your hardware, and virtual machines
    can be configured atop ESXi.
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: VMware的各种产品之一（现在是戴尔的子公司）ESXi不是Linux；它是一个专用的“操作系统”，位于硬件之上，虚拟机可以配置在ESXi之上。
- en: It is a licensed product, and it isn't open source, but it fits in well with
    the VMware management offerings that they have alongside the hypervisor itself
    (for example, you can easily have several hypervisors in a pool, which are managed
    by a centralized box).
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种许可产品，不是开源的，但它与VMware管理产品很好地配合（例如，您可以轻松地在一个集群中拥有多个由集中式服务器管理的虚拟机）。
- en: 'In terms of pros, VMware ESXi offers you the following:'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 就优点而言，VMware ESXi为您提供以下内容：
- en: A dedicated hypervisor, designed to do one job, and do it well
  id: totrans-553
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 专用的虚拟化程序，专门设计用于执行一项任务，并且执行得很好
- en: Easy setup – a few clicks and you've got a box installed
  id: totrans-554
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 易于设置-点击几下，您就可以安装好一个盒子
- en: A wide range of hardware support, including a range of servers
  id: totrans-555
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括一系列服务器在内的广泛硬件支持
- en: Easy-to-use software and understandable menus (in this author's opinion)
  id: totrans-556
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 易于使用的软件和易于理解的菜单（在本作者看来）
- en: 'In terms of cons, you might consider the following:'
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 就缺点而言，您可能会考虑以下几点：
- en: VMware ESXi isn't open source; this may or may not impact your decision
  id: totrans-558
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VMware ESXi不是开源的；这可能会影响您的决定
- en: As a dedicated virtual machine server, ESXi can't do anything else of note
  id: totrans-559
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为专用的虚拟机服务器，ESXi不能做任何其他值得注意的事情。
- en: It can get expensive as an offering, and while support can be bought and agreements
    signed, you might go for a free offering based entirely on budget
  id: totrans-560
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为一种产品，它可能会变得昂贵，虽然可以购买支持并签署协议，但您可能会选择完全基于预算的免费产品
- en: 'VMware is available from [https://www.vmware.com/products/esxi-and-esx.html](https://www.vmware.com/products/esxi-and-esx.html):'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: VMware可以从[https://www.vmware.com/products/esxi-and-esx.html](https://www.vmware.com/products/esxi-and-esx.html)获得：
- en: '![](img/26a21fbb-86bf-4db1-b667-6f27cab36ac1.png)'
  id: totrans-562
  prefs: []
  type: TYPE_IMG
  zh: '![](img/26a21fbb-86bf-4db1-b667-6f27cab36ac1.png)'
- en: On a personal note, I admit to having used VMware products many times, for various
    jobs, and it does exactly what it says on the tin, with very little flourish on
    top. It handles things such as VM failover gracefully, in the right circumstances,
    and it's simple enough that anyone can be put in front of the console and navigate
    around easily (though I wasn't a massive fan of their first attempts at a web-based
    GUI).
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 就个人而言，我承认曾多次使用VMware产品，用于各种工作，它确实如广告中所说的那样，没有太多华丽的东西。在适当的情况下，它可以优雅地处理诸如虚拟机故障转移之类的事情，而且它非常简单，任何人都可以放在控制台前轻松地进行导航（尽管我不是他们首次尝试基于Web的GUI的铁杆粉丝）。
- en: Proxmox Virtual Environment
  id: totrans-564
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Proxmox虚拟环境
- en: Another dedicated hypervisor install, Proxmox (VE), is a Linux-based (Debian,
    specifically) operating system that, again, has a wide range of hardware support
    and a friendly GUI to get you started.
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个专用的虚拟化程序安装，Proxmox（VE），是一个基于Linux（具体来说是Debian）的操作系统，同样具有广泛的硬件支持和友好的GUI，让您轻松上手。
- en: This open source solution is ideal for a home-lab environment, and scales up
    to large installations well, meaning that you can deploy the same solution for
    your developers and your production rollout.
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 这个开源解决方案非常适合家庭实验室环境，并且可以很好地扩展到大型安装，这意味着您可以为开发人员和生产部署部署相同的解决方案。
- en: 'In terms of pros, you might think about the following:'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: 就优点而言，您可能会考虑以下几点：
- en: The fact it's open source, which again, may influence your decision
  id: totrans-568
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是开源的，这可能再次影响您的决定
- en: The fact it's free (as in beer), with the option of paid support and training
  id: totrans-569
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是免费的（就像啤酒一样），并提供付费支持和培训的选项
- en: The knowledge that it's based on known and well-supported technologies, such
    as KVM and QEMU
  id: totrans-570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它基于已知和得到良好支持的技术，如KVM和QEMU
- en: The fact it supports containers, as well as virtual machines
  id: totrans-571
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它支持容器以及虚拟机
- en: 'In terms of negatives, you could consider the following:'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 就负面方面而言，您可能会考虑以下几点：
- en: The install base, and the fact it's not as well-known as VMware ESXi and others
    (though this might influence you as a positive, too)
  id: totrans-573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装基础和事实上它并不像VMware ESXi和其他产品那样出名（尽管这也可能对您产生积极的影响）
- en: As a dedicated virtualization install, your Proxmox server won't do much of
    anything else (like ESXi)
  id: totrans-574
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为专用的虚拟化安装，您的Proxmox服务器不会做任何其他重要的事情（如ESXi）
- en: 'Proxmox Virtual Environment is available at [https://www.proxmox.com/en/downloads](https://www.proxmox.com/en/downloads):'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: Proxmox Virtual Environment可以在[https://www.proxmox.com/en/downloads](https://www.proxmox.com/en/downloads)获得：
- en: '![](img/6bce4ecb-af3b-4130-a14c-7aeaa5eebe6c.png)'
  id: totrans-576
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6bce4ecb-af3b-4130-a14c-7aeaa5eebe6c.png)'
- en: Proxmox Virtualization Homepage
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: Proxmox虚拟化主页
- en: Again, speaking from personal experience, I've set up three node Proxmox clusters
    with automatic failover with relative ease, and everyone I've spoken to that uses
    Proxmox seems to appreciate what a nice solution it is in a pinch, while knowing
    it can extend further when needed.
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，根据个人经验，我相对轻松地设置了三个节点的Proxmox集群，并实现了自动故障转移，我与使用Proxmox的每个人交谈时似乎都很欣赏它在紧要关头是一个多么好的解决方案，同时又知道在需要时它可以进一步扩展。
- en: OpenStack
  id: totrans-579
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpenStack
- en: The new kid on the block, OpenStack, is a collection of technologies that, when
    added together, make a solution that rivals any of the bigger virtualization environment
    providers.
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStack是新生力量，是一系列技术的集合，当它们组合在一起时，可以与任何更大的虚拟化环境提供者相媲美。
- en: It can be a virtual machine host, container host, file storage provider, block
    storage provider, and it has a rapid development cycle that keeps new features
    constantly coming in.
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以成为虚拟机主机、容器主机、文件存储提供者、块存储提供者，并且它具有快速的开发周期，不断推出新功能。
- en: Unlike the other two solutions on this list, OpenStack is the name given to
    a few different software components.
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 与此列表上的其他两种解决方案不同，OpenStack是赋予几种不同软件组件的名称。
- en: 'For the pros, give some thought to the following:'
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 对于优点，考虑以下几点：
- en: OpenStack has an enthusiastic and dedicated community behind it
  id: totrans-584
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenStack有一个热情洋溢且专注的社区支持
- en: The components are open source and worked on by people all over the globe
  id: totrans-585
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些组件是开源的，由全球各地的人共同开发
- en: Many companies offer OpenStack solutions and offer different levels of support
  id: totrans-586
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多公司提供OpenStack解决方案并提供不同级别的支持
- en: If you know OpenStack well, you won't be out of work for the next fifty years
    (conjecture)
  id: totrans-587
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你对OpenStack很了解，你未来五十年不会失业（推测）
- en: 'In terms of cons, I might get some hate mail for this:'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 在缺点方面，我可能会因此收到一些恶意邮件：
- en: OpenStack has a rapid development cycle, meaning that you generally get left
    behind if you don't stay on top of updates
  id: totrans-589
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenStack有一个快速的开发周期，这意味着如果你不及时更新就会被落下
- en: OpenStack sits atop whatever distribution of Linux you want it to, meaning that
    you have to manage the underlying OS as well in a lot of cases
  id: totrans-590
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenStack可以安装在你想要的任何Linux发行版上，这意味着在许多情况下你也必须管理底层操作系统
- en: Certainly in places where I've seen OpenStack being used, it almost takes a
    dedicated OpenStack team to keep on top of management
  id: totrans-591
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我看到OpenStack被使用的地方，几乎需要一个专门的OpenStack团队来保持管理的最新状态
- en: It's not easy to set up in a usable fashion, in a pinch (though development
    environments do exist)
  id: totrans-592
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要以可用的方式设置它并不容易，尽管开发环境确实存在
- en: There are multiple schools of thought on what makes a good OpenStack deployment
  id: totrans-593
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有多种关于什么是一个好的OpenStack部署的观点
- en: It's a right pain when you come to an OpenStack solution that's been neglected
  id: totrans-594
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你遇到一个被忽视的OpenStack解决方案时，这真是一件让人头疼的事
- en: 'If you want to give OpenStack a go (and I would encourage you to do so), the
    Getting Started guide can be found here: [https://wiki.openstack.org/wiki/Getting_Started](https://wiki.openstack.org/wiki/Getting_Started).'
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想尝试OpenStack（我鼓励你这样做），可以在这里找到入门指南：[https://wiki.openstack.org/wiki/Getting_Started](https://wiki.openstack.org/wiki/Getting_Started)。
- en: 'There''s also a start page, including links to the devstack dev environment:'
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个起始页面，包括指向devstack开发环境的链接：
- en: '![](img/9e96ca1d-b327-4cb8-95b9-2dae73c252ec.png)'
  id: totrans-597
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9e96ca1d-b327-4cb8-95b9-2dae73c252ec.png)'
- en: Personal thought – I know some incredibly intelligent people that love OpenStack
    and swear by it, but it's an area that requires a lot of love and attention, along
    with dedication.
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: 个人想法-我认识一些非常聪明的人，他们热爱OpenStack并对其赞不绝口，但这是一个需要大量关注和专注的领域。
- en: How it works...
  id: totrans-599
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: There are different ways to do the same thing. This is true for most experiences,
    and it's especially true in the Unix and Unix-like (Linux) world.
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种做同样事情的方式。这对大多数经验来说都是真的，尤其是在Unix和类Unix（Linux）世界中更是如此。
- en: Here, we have three good examples of software and solutions that allow you to
    control virtual machine deployment in a mostly user-friendly fashion, even though
    you might think that all of these solutions are much more complex than you require.
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有三个很好的软件和解决方案的例子，它们允许你以大多数用户友好的方式控制虚拟机部署，尽管你可能认为所有这些解决方案都比你需要的复杂得多。
- en: I mention them here because it's good to know these options are out there, and
    even if you start your journey by installing VMs locally on an Ubuntu installation
    (using VirtualBox or KVM and Libvirt), you might wish to expand to something grander
    in the future.
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里提到它们是因为知道这些选择是存在的很好，并且即使你开始时通过在Ubuntu安装上本地安装虚拟机（使用VirtualBox或KVM和Libvirt），你可能希望将来扩展到更宏伟的东西。
- en: Another option to consider is public cloud offerings, and while I'll talk about
    these in greater detail later, it's worth noting that there are several providers
    out there who'll take away the headache of managing the underlying software and
    let you simply install and break VMs.
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个要考虑的选择是公共云服务，虽然我稍后会详细讨论这些，但值得注意的是有几家提供商可以帮你摆脱管理底层软件的麻烦，让你只需安装和创建虚拟机。
- en: If you don't have the hardware or the resources, or even the budget, you can
    use public cloud providers for pennies by the hour.
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有硬件或资源，甚至没有预算，你可以按小时使用公共云服务。
- en: Take a look at Scaleway, Digital Ocean, and AWS (specifically, their Lightsail
    offering).
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 看看Scaleway，Digital Ocean和AWS（特别是他们的Lightsail产品）。
- en: Roundup - containers and virtualization
  id: totrans-606
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结-容器和虚拟化
- en: A short few years ago, there was a movement in the Linux community. Containers
    were suddenly everywhere, and making fantastical promises about what was possible
    in an ephemeral and ever-changing world. Containers were going to solve every
    problem you'd ever face with software, they were going to fix every security problem
    you'd ever fought, and they were going to tuck you in at night while feeding your
    pets.
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 短短几年前，Linux社区出现了一个运动。容器突然无处不在，并对在一个瞬息万变的世界中可能发生的事情做出了奇妙的承诺。容器将解决你在软件方面所面临的每一个问题，它们将解决你曾经遇到的每一个安全问题，并且它们将在夜晚哄你入睡并喂养你的宠物。
- en: We know now that while containers are great, and they are indeed an excellent
    solution in a lot of circumstances, they aren't the be-all and end-all. There
    will still be situations where software atop a bare-metal machine will be best,
    or instances where a VM just makes more sense than a container, and you know what?
    That's okay.
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在知道，虽然容器很棒，它们确实是许多情况下的一个很好的解决方案，但它们并不是万能的。仍然会有一些情况，软件在裸机上运行会更好，或者虚拟机比容器更合理，你知道吗？那没关系。
- en: If you want to, don't let me dissuade you from trying to get your own pet project
    working in a container – it's definitely a good learning experience, and you may
    find that it actually is the best way to lift and shift your installation, but
    don't get carried away.
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想的话，不要让我劝阻你尝试在容器中运行你自己的项目-这绝对是一个很好的学习经验，你可能会发现这实际上是提升和转移你的安装的最佳方式，但不要得意忘形。
- en: VMs will always have their place too, and while a lot of testing, deployments,
    and dev environments have gone the way of serverless container deployments, a
    good local VM can still offer a nice way to work, especially if you want to understand
    how certain software interacts with the OS as a whole (be it a monolithic application,
    or lots of little applications that make up one program).
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机始终会有它们的位置，虽然很多测试、部署和开发环境已经转向无服务器容器部署的方式，但一个良好的本地虚拟机仍然可以提供一个不错的工作方式，特别是如果你想了解某些软件如何与整个操作系统交互（无论是一个单片应用程序，还是许多组成一个程序的小应用程序）。
- en: At the end of the day, it's like most things in our world. Just because you
    can do something in one way, doesn't necessarily mean it's the best way to do
    it; in the same vein, that doesn't make your proposed solution bad, and it could
    be perfectly functional for what you need—it's just handy to be aware of all the
    options.
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: 归根结底，这就像我们世界上的大多数事情一样。仅仅因为你可以用一种方式做某事，并不一定意味着这是最好的方式；同样，这并不意味着你提出的解决方案不好，它可能完全适合你的需求——只是了解所有选项会很方便。
- en: I sincerely wish I could fit more exploration in this book, and look deeper
    into the different ways and means of managing and maintaining both VMs and containers,
    but this is not a book about either of those things – it's supposed to be a general
    peek into the world of Linux administration.
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: 我真诚地希望我能在这本书中进行更多的探索，并深入了解管理和维护虚拟机和容器的不同方式和方法，但这不是一本关于这些东西的书——它应该是对Linux管理世界的一个概览。
- en: Remember holy wars? I've also met people who are against the very idea of containers,
    deeming them variously "difficult" and "pointless" solutions. If you take up this
    mantle and fight this corner, be prepared to lose, because the army of container
    proponents is bigger than the opponents at this point by a wide margin.
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得圣战吗？我也遇到过一些人反对容器的概念，认为它们是各种各样的“困难”和“毫无意义”的解决方案。如果你站在这一边并为之奋斗，要做好失败的准备，因为目前容器支持者的军队比反对者大得多。
