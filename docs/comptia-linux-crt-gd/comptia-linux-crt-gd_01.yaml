- en: Configuring the Hardware Settings
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置硬件设置
- en: This chapter covers viewing interrupts. It focuses on `/proc/interrupts`, CPU
    info viewing (`/proc/cpuinfo`), and viewing the physical memory installed. It
    also looks at `/proc/meminfo`, the `free` command, viewing swap memory, and adding
    and removing additional swap memory using the `dd`, `mkswap`, `swapon`, and `swapoff`
    commands. The raid status (`viewing/proc/mdstat`) is outlined, as is the devices
    directory `/dev`, the `/proc` virtual directory, the `lsmod` command and usage,
    the `modprobe` command and its usage, and the `lspci` command and usage. The `/proc`
    directory is a virtual filesystem that is created upon boot up which stores various
    items of hardware information about a system.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了查看中断。它专注于`/proc/interrupts`，CPU信息查看（`/proc/cpuinfo`），查看已安装的物理内存。它还查看了`/proc/meminfo`，`free`命令，查看交换内存，以及使用`dd`，`mkswap`，`swapon`和`swapoff`命令添加和删除额外的交换内存。RAID状态（`查看/proc/mdstat`）也有概述，还有设备目录`/dev`，`/proc`虚拟目录，`lsmod`命令和用法，`modprobe`命令及其用法，以及`lspci`命令和用法。`/proc`目录是一个虚拟文件系统，在启动时创建，用于存储有关系统的各种硬件信息。
- en: First, let's get all of the smokescreens out of the picture. Navigating through
    the various directories and using these commands is very informative, and allows
    you to retrieve hardware information in a Linux environment.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们把所有的干扰因素排除在外。浏览各个目录并使用这些命令非常有益，可以让您在Linux环境中获取硬件信息。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Viewing CPU, RAM, and swap info
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看CPU，RAM和交换信息
- en: Interrupts and devices
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中断和设备
- en: Modules
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块
- en: Viewing CPU, RAM, and swap info
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看CPU，RAM和交换信息
- en: Let's take a look at how we can view CPU, RAM, and swap info on a Linux system.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何在Linux系统上查看CPU，RAM和交换信息。
- en: 'First, we will focus our attention on gaining information on a CPU, so we will
    look at the `/proc/cpuinfo` file. We can garner detailed information about the
    CPU, ranging from the vendor ID, the CPU family, the model name, the CPU rate
    in MHZ, its cache size, and the number of cores, to name a few. Here is an excerpt
    from running the `cat` command alongside `/proc/cpuinfo`:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将专注于获取有关CPU的信息，因此我们将查看`/proc/cpuinfo`文件。我们可以从中获取有关CPU的详细信息，包括供应商ID，CPU系列，型号名称，CPU速率（以MHZ为单位），其缓存大小以及核心数量等。以下是运行`cat`命令并与`/proc/cpuinfo`一起的摘录：
- en: '![](img/00005.jpeg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00005.jpeg)'
- en: 'Some more information is given here about the CPU:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 关于CPU还提供了更多信息：
- en: '![](img/00006.jpeg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00006.jpeg)'
- en: From the preceding output, we can see detailed information pertaining to the
    CPU that we ran the `cat /proc/cpuinfo` command against.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的输出中，我们可以看到有关我们运行`cat /proc/cpuinfo`命令的CPU的详细信息。
- en: Next, let's take a look at how we can gather information on the amount of physical
    memory, the **Random Access Memory** (**RAM**), installed in a system. We will
    focus on two commands, the `cat /proc/meminfo` and the `free` commands.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看如何收集有关系统中安装的**随机存取内存**（**RAM**）的物理内存量的信息。我们将专注于两个命令，即`cat /proc/meminfo`和`free`命令。
- en: 'Using the Linux system for demonstration once again, we will look at the output
    of the `/cat /proc/meminfo` command:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 再次使用Linux系统进行演示，我们将查看`/cat /proc/meminfo`命令的输出：
- en: '![](img/00007.jpeg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00007.jpeg)'
- en: 'Some more memory usage information is shown in the following screenshot:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了更多的内存使用信息：
- en: '![](img/00008.jpeg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00008.jpeg)'
- en: From the preceding output, we can see some important fields, namely the first
    three fields (`MemTotal`, `MemFree`, and `MemAvailable`), which reflect the current
    status of our physical memory (RAM).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的输出中，我们可以看到一些重要的字段，即前三个字段（`MemTotal`，`MemFree`和`MemAvailable`），它们反映了我们物理内存（RAM）的当前状态。
- en: 'Now let''s look at another command, the `free` command. This command will give
    us the memory information in a more human-readable format. Using our test Linux
    system, we will run the `free` command:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们再看另一个命令，即`free`命令。这个命令将以更易读的格式给出内存信息。使用我们的测试Linux系统，我们将运行`free`命令：
- en: '![](img/00009.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00009.jpeg)'
- en: 'Running the `free` command on its own yields the preceding results in kilobytes.
    We can tag some options onto the `free` command to be even more explicit. Here
    is a list of options that we can use with the `free` command, using an Ubuntu
    distro:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 仅运行`free`命令将以KB为单位给出前面的结果。我们可以在`free`命令上添加一些选项以使其更加明确。以下是我们可以在Ubuntu发行版上使用的`free`命令的选项列表：
- en: '![](img/00010.jpeg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00010.jpeg)'
- en: 'These are some more options that we can pass with the `free` command on an
    Ubuntu distro:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们可以在Ubuntu发行版上使用`free`命令的一些选项：
- en: '![](img/00011.jpeg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00011.jpeg)'
- en: 'Similarly, if we take a look at the main page of the `free` command on a CentOS
    7 distribution, we can see similar options:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果我们在CentOS 7发行版上查看`free`命令的主页面，我们可以看到类似的选项：
- en: '![](img/00012.jpeg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00012.jpeg)'
- en: 'Some more options that we can pass with the `free` command on a CentOS 7 distro
    are shown in the following screenshot:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在CentOS 7发行版上，我们可以使用`free`命令传递的一些其他选项如下所示：
- en: '![](img/00013.jpeg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00013.jpeg)'
- en: 'Let''s try a few of the options with the `free` command:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试一些`free`命令的选项：
- en: '![](img/00014.jpeg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00014.jpeg)'
- en: 'The preceding output is by far one of the most commonly used options (`-h`)
    with the `free` command. We can even take it a step further by tagging on the
    (`-g`) option to display the total amount of physical memory in gigabytes:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的输出是`free`命令中最常用的选项之一（`-h`）。我们甚至可以进一步使用（`-g`）选项来显示以GB为单位的物理内存总量：
- en: '![](img/00015.jpeg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00015.jpeg)'
- en: 'We can even see the low and high memory statistics by using yet another fantastic
    option, the (`-l`) option:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以使用另一个很棒的选项（`-l`）来查看低内存和高内存的统计信息：
- en: '![](img/00016.jpeg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00016.jpeg)'
- en: 'In the preceding screenshot, we are not just shown the RAM information, but
    also our swap memory. It is displayed in the last row. We can use another command
    if we prefer to see only the swap memory. We can use the `swapon` command:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们不仅显示了RAM信息，还显示了我们的交换内存。它显示在最后一行。如果我们只想看到交换内存，我们可以使用另一个命令`swapon`：
- en: '![](img/00017.jpeg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00017.jpeg)'
- en: 'Here are some options that can be used with the `swapon` command from the main
    page of `swapon` on an Ubuntu distro:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在Ubuntu发行版上`swapon`主页上可以使用的一些选项：
- en: '![](img/00018.jpeg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00018.jpeg)'
- en: 'Some more options that can be passed with the `swapon` command on an Ubuntu
    distro are shown in the following screenshot:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ubuntu发行版上，`swapon`命令可以传递更多选项，如下截图所示：
- en: '![](img/00019.jpeg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00019.jpeg)'
- en: 'Here are some options that can be used with the `swapon` command from the main
    page of `swapon` on a CentOS 7 distro:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在CentOS 7发行版上`swapon`主页上可以使用的一些选项：
- en: '![](img/00020.jpeg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00020.jpeg)'
- en: 'Some more options that can be passed with the `swapon` command on a CentOS
    7 distro are shown in the following screenshot:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在CentOS 7发行版上，`swapon`命令可以传递更多选项，如下截图所示：
- en: '![](img/00021.jpeg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00021.jpeg)'
- en: 'We can also see swap information from within the `/proc` directory, specifically
    in `/proc/swaps`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以从`/proc`目录中查看交换信息，具体在`/proc/swaps`中：
- en: '![](img/00022.jpeg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00022.jpeg)'
- en: From the preceding output, we can see that the swap space is using the `/dev/sda4`
    partition. Now, if for some reason we run out of physical memory and we have maxed
    out our swap space, then we can either add more physical memory or add more swap
    space. So, let's focus on the steps to add more swap space.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的输出中，我们可以看到交换空间正在使用`/dev/sda4`分区。现在，如果由于某种原因我们的物理内存用完了，并且我们已经用完了交换空间，那么我们可以添加更多物理内存或添加更多交换空间。因此，让我们专注于添加更多交换空间的步骤。
- en: 'We will need to create a blank file using the `dd` command. Note that you need
    root access to run this command at the shell:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用`dd`命令创建一个空白文件。请注意，您需要root访问权限才能在shell中运行此命令：
- en: '[PRE0]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'From the preceding output, we can see that we got a `Permission denied` message,
    so let''s switch to the root and try to rerun that command:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的输出中，我们可以看到收到了`Permission denied`的消息，所以让我们切换到root并尝试重新运行该命令：
- en: '[PRE1]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'There we go; we''ve just created a `swap` file using the name `myswapfile.` Now
    we need to run the `mkswap` command and call the `swap` file that we just created
    at the shell:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚使用名称`myswapfile`创建了一个`swap`文件。现在我们需要运行`mkswap`命令，并在shell中调用我们刚刚创建的`swap`文件：
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, the last step is to turn on the `swap` file so that the system uses it
    as needed:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，最后一步是打开`swap`文件，以便系统根据需要使用它：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We''ve got that warning message telling us about insecure permissions. We will
    discuss permissions in a later chapter. For now, we will continue to use the existing
    permissions. The last step is to verify that the `swap` file is indeed available
    to our system:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们收到了一个关于不安全权限的警告消息。我们将在后面的章节中讨论权限。现在，我们将继续使用现有的权限。最后一步是验证`swap`文件确实可供我们的系统使用：
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And, voila, we now have the newly created `swap` file at our system''s disposal.
    We can also run the `free` command, and we will now find that the swap memory
    has increased by one gigabyte:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的系统已经可以使用新创建的`swap`文件。我们还可以运行`free`命令，现在会发现交换内存增加了1GB：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In order for the changes to be safe upon reboot, you will need to add an entry
    in `/etc/fstab`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使更改在重新启动时安全，您需要在`/etc/fstab`中添加一个条目。
- en: 'Should we no longer want to use a `swap` file, we can use the `swapoff` command
    to remove `myswapfile` from the swap memory. Here is how we would accomplish this
    at the shell:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不再想使用`swap`文件，我们可以使用`swapoff`命令将`myswapfile`从交换内存中删除。以下是我们在shell中如何完成这个任务：
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now let''s rerun the `swapon` command followed by the `free` command to verify
    that `myswapfile` is indeed removed from swap usage:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们重新运行`swapon`命令，然后运行`free`命令来验证`myswapfile`确实已从交换使用中移除：
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'As we can see, `myswapfile` is no longer available for use as swap memory.
    Here are the options we can use with the `swapoff` command on an Ubuntu distro:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，`myswapfile`不再可用于作为交换内存使用。以下是在Ubuntu发行版上可以与`swapoff`命令一起使用的选项：
- en: '![](img/00023.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00023.jpeg)'
- en: 'Some more options that can be passed with the `swapoff` command are shown in
    the following screenshot:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`swapoff`命令可以传递更多选项，如下截图所示：'
- en: '![](img/00024.jpeg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00024.jpeg)'
- en: 'Here are the options we can use with the `swapoff` command on a CentOS 7 distro:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在CentOS 7发行版上`swapoff`命令可以使用的选项：
- en: '![](img/00025.jpeg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00025.jpeg)'
- en: 'Some more options that can be passed with the `swapoff` command are shown in
    the following screenshot:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`swapoff`命令可以传递更多选项，如下截图所示：'
- en: '![](img/00026.jpeg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00026.jpeg)'
- en: Interrupts and devices
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 中断和设备
- en: 'Now let''s switch gears and look at the **Interrupt Requests** (**IRQs**) and
    devices that are available in our Linux system. You can think of an interrupt
    as a service hotline that we would use whenever we need a particular item. We
    would ring a service hotline. The theory remains the same for devices within a
    Linux system; whenever it requires the CPU''s attention, it sends out signals
    via interrupts. Traditional 32-bit architectures support up to 16 interrupts:
    0–15\. Newer architectures support far more than 16 interrupts.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们转换方向，看看我们的Linux系统中可用的**中断请求**（**IRQs**）和设备。您可以将中断视为我们在需要特定物品时使用的服务热线。我们会打电话给服务热线。对于Linux系统中的设备，理论仍然是一样的；每当它需要CPU的注意时，它会通过中断发送信号。传统的32位架构支持多达16个中断：0-15。更新的架构支持的中断远远超过16个。
- en: 'Let''s take a look at the `/proc` directory once again, homing in on `/proc/interrupts`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次查看`/proc`目录，重点关注`/proc/interrupts`：
- en: '![](img/00027.jpeg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00027.jpeg)'
- en: 'More interrupts are shown in the following screenshot:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了更多的中断：
- en: '![](img/00028.jpeg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00028.jpeg)'
- en: 'Some more interrupts are shown in the following screenshot:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了更多的中断：
- en: '![](img/00029.jpeg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00029.jpeg)'
- en: From the preceding output, we can see that there are far more interrupts available.
    The output is read from left to right, where left represents the interrupt number,
    and moving to the right indicates the devices or services that are using the interrupts.
    We can see that the timer is using interrupt `0`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的输出中，我们可以看到有更多的中断可用。输出从左到右读取，左边表示中断号，向右移动表示正在使用中断的设备或服务。我们可以看到定时器正在使用中断`0`。
- en: 'Now, let''s turn our attention to devices. When we work with devices in a Linux
    system, the devices are represented by files. This enables us to communicate with
    the actual hardware in the system. There are some commonly used devices, such
    as hard disk, DVDs, and USBs, to name a few. Hard disks are represented as `sd(n)`; for
    example: `/dev/sda`, `/dev/sdb`, `/dev/sdc`, and so on. Hard disk partitions are
    represented in the form of `sd(n)`; for example: `/dev/sda1`, `/dev/sda2`, `/dev/sdb1`,
    and so on. Similarly, floppy disks are represented as `fd.` There are some special
    use-case files, such as `/dev/null`, `/dev/zero`, and `/dev/tty*`. You would use
    `/dev/null` when you want to send output from another command and the output is
    not needed. This is known as redirecting. `/dev/zero` is used in conjunction with
    the `dd` command that we covered earlier, for creating blank files. `/dev/tty*`
    is used for remote logins. Let''s take a look at how devices are shown in the
    Linux environment.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们把注意力转向设备。在Linux系统中使用设备时，设备被表示为文件。这使我们能够与系统中的实际硬件进行通信。有一些常用的设备，比如硬盘、DVD和USB等。硬盘被表示为`sd(n)`；例如：`/dev/sda`、`/dev/sdb`、`/dev/sdc`等。硬盘分区以`sd(n)`的形式表示；例如：`/dev/sda1`、`/dev/sda2`、`/dev/sdb1`等。同样，软盘被表示为`fd.`。还有一些特殊用途的文件，比如`/dev/null`、`/dev/zero`和`/dev/tty*`。当你想要从另一个命令发送输出并且不需要输出时，你会使用`/dev/null`。这被称为重定向。`/dev/zero`与我们之前介绍的`dd`命令一起使用，用于创建空文件。`/dev/tty*`用于远程登录。让我们看看Linux环境中如何显示设备。
- en: 'We will take a look at `/proc/devices` using our test Linux system:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用我们的测试Linux系统查看`/proc/devices`：
- en: '![](img/00030.jpeg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00030.jpeg)'
- en: 'From the preceding output, the hard disk and partition are represented in the
    format of `/dev/sdXY`, where `X` represents the hard disk and `Y` represents the
    partition. We can tell the `ls` command to filter the output to only the hard
    disk and partition information:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的输出中，硬盘和分区以`/dev/sdXY`的格式表示，其中`X`表示硬盘，`Y`表示分区。我们可以告诉`ls`命令将输出过滤为仅包含硬盘和分区信息：
- en: '[PRE8]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Modules
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块
- en: Have you ever wondered what happened to the term *drivers* in a Linux environment?
    Well, wonder no more. Most people coming from a Microsoft Windows background are
    accustomed to interacting with hardware through the use of drivers. Well, in Linux,
    we refer to drivers as modules. It's not as scary as it sounds. We load and unload
    modules whenever we are working with a piece of hardware. For example, when we
    plug in a USB drive, a module is loaded into the backend and is unloaded automatically
    when we remove the USB drive. It's that flexible.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否曾经想过在Linux环境中*驱动程序*发生了什么？好吧，不用再想了。大多数来自Microsoft Windows背景的人习惯于通过驱动程序与硬件进行交互。在Linux中，我们将驱动程序称为模块。这并不像听起来那么可怕。每当我们使用一块硬件时，我们都会加载和卸载模块。例如，当我们插入USB驱动器时，模块会被加载到后台，并在我们移除USB驱动器时自动卸载。就是这么灵活。
- en: 'Let''s take a look at how we can view the modules that are installed in the
    Linux system, using the `lsmod` command:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看如何使用`lsmod`命令查看安装在Linux系统中的模块：
- en: '![](img/00031.jpeg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00031.jpeg)'
- en: 'More modules that are available for use are shown in the following screenshot:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了更多可用的模块：
- en: '![](img/00032.jpeg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00032.jpeg)'
- en: From the preceding output, we can see that a number of modules are available
    for use in this Linux system. We read the output from left to right, where we
    see a `0` value under the `Used by` column. It means that the module is not currently
    in use.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的输出，我们可以看到在这个Linux系统中有许多模块可供使用。我们从左到右读取输出，在`Used by`列下看到一个`0`值。这意味着该模块目前未被使用。
- en: 'Now let''s look at the process to remove a module using the `rmmod` command.
    We will remove the `usbhid` module, since it''s not currently in use. We can quickly
    verify this is not in use by using `lsmod | grep usbhid`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看使用`rmmod`命令删除模块的过程。我们将删除`usbhid`模块，因为它目前没有在使用。我们可以通过使用`lsmod | grep usbhid`快速验证这一点：
- en: '[PRE9]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Great! Let''s go ahead and remove that module using the `rmmod` command:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！让我们继续使用`rmmod`命令删除该模块：
- en: '[PRE10]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'There we go; the `usbhid` module is no longer loaded in the Linux system. It
    still, however, resides there because it was compiled in the kernel. There are
    only a few options to pass with `rmmod`. Here, they are on an Ubuntu distro:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，`usbhid`模块现在已经不再加载在Linux系统中。但是，它仍然驻留在那里，因为它已经编译进内核了。在Ubuntu发行版上，`rmmod`只有几个选项：
- en: '![](img/00033.jpeg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00033.jpeg)'
- en: 'Similarly, here are the options to pass with the `rmmod` on a CentOS 7 distro:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，在CentOS 7发行版上使用`rmmod`的选项如下：
- en: '![](img/00034.jpeg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00034.jpeg)'
- en: 'In order for us to reinstall this `usbhid` module, we will use another popular
    command, `insmod`. Let''s see how `insmod` works at the shell:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 为了重新安装`usbhid`模块，我们将使用另一个常用命令`insmod`。让我们看看`insmod`在shell中是如何工作的：
- en: '[PRE11]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now, based on the preceding output, it may seem to be contradictory that the
    `insmod` command is unable to find the `usbhid` module. Don't worry, this module
    is compiled in the kernel. That being said, we can use yet another helpful command,
    `modprobe`. This by far, is more popular than `insmod`, as `modprobe` actually
    calls `insmod` in the backend whenever we add a module using `modprobe`. Interestingly
    enough, `modprobe` can be used to remove module(s) too. It does this by calling
    `rmmod` in the backend.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，根据前面的输出，似乎有些矛盾，`insmod`命令无法找到`usbhid`模块。别担心，这个模块已经编译进内核了。也就是说，我们可以使用另一个有用的命令`modprobe`。这个命令比`insmod`更受欢迎，因为`modprobe`在我们使用`modprobe`添加模块时实际上在后台调用`insmod`。有趣的是，`modprobe`也可以用来移除模块。它通过在后台调用`rmmod`来实现这一点。
- en: We can use `insmod` itself to install the `usbhid` module. The only catch is
    that you have to specify the absolute path to the module. `mobprobe`, on the other
    hand, uses the modules directory, namely `/lib/modules/$(KERNEL_RELEASE)/`, for
    modules, and loads modules based on the rules defined in the `/etc/modprobe.d/`
    directory.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`insmod`本身来安装`usbhid`模块。唯一的问题是，您必须指定模块的绝对路径。另一方面，`mobprobe`使用模块目录，即`/lib/modules/$(KERNEL_RELEASE)/`，用于模块，并根据`/etc/modprobe.d/`目录中定义的规则加载模块。
- en: So, let's use `modprobe` to install the `usbhid` module at the shell.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们使用`modprobe`在shell中安装`usbhid`模块。
- en: '[PRE12]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We used the (`-v`) option with `modprobe` because, by default, it will not
    show what is happening in the background. As you can see, `modprobe` is indeed
    calling `insmod` in the backend. Now we can remove this `usbhid` module using
    `modprobe`, and we will see that it is indeed calling `rmmod` in the backend:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`modprobe`命令中使用了`-v`选项，因为默认情况下它不会显示后台发生的情况。正如您所看到的，`modprobe`确实在后台调用`insmod`。现在我们可以使用`modprobe`删除这个`usbhid`模块，我们会看到它确实在后台调用`rmmod`：
- en: '[PRE13]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: From the preceding output, it is evident that `modprobe` is indeed calling `rmmod`
    to remove a module.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的输出可以明显看出，`modprobe`确实在后台调用`rmmod`来移除模块。
- en: 'Here are some options that can be used with the `modprobe` command on an Ubuntu
    distro:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在Ubuntu发行版上可以与`modprobe`命令一起使用的一些选项：
- en: '![](img/00035.jpeg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00035.jpeg)'
- en: 'More options that can be passed with the `modprobe` command are shown in the
    following screenshot:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`modprobe`命令可以传递的一些其他选项如下截图所示：'
- en: '![](img/00036.jpeg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00036.jpeg)'
- en: 'Some more options that can be passed with the `modprobe` command are shown in
    the following screenshot:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`modprobe`命令可以传递的一些其他选项如下截图所示：'
- en: '![](img/00037.jpeg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00037.jpeg)'
- en: 'And here are some options that can be used with the `modprobe` command on a
    CentOS 7 distro:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在CentOS 7发行版上可以与`modprobe`命令一起使用的一些选项：
- en: '![](img/00038.jpeg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00038.jpeg)'
- en: 'Some more options that can be passed with the `modprobe` command are shown
    in the following screenshot:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`modprobe`命令可以传递的一些其他选项如下截图所示：'
- en: '![](img/00039.jpeg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00039.jpeg)'
- en: 'More options that can be passed with the `modprobe` command are shown in the
    following screenshot:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`modprobe`命令可以传递的更多选项如下截图所示：'
- en: '![](img/00040.jpeg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00040.jpeg)'
- en: Summary
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we focused on hardware settings, looking at the CPU, RAM, and
    swap information in the various directories. We used a variety of commands. Also,
    we touched on IRQs and the various interrupts available in a Linux system. We
    then looked at devices, in the context of files. Finally, we worked with modules.
    We saw the various modules currently available in a Linux system, and learned
    the steps to install and remove a module.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们关注硬件设置，查看了各个目录中的CPU、RAM和交换信息。我们使用了各种命令。此外，我们还涉及了Linux系统中可用的各种中断和中断。然后，我们查看了设备，以文件的形式。最后，我们使用了模块。我们看到了Linux系统中当前可用的各种模块，并学习了安装和移除模块的步骤。
- en: In the next chapter, we will focus on the process of booting the system. Moreover,
    the various boot managers will be covered. This is another critical aspect for
    every Linux engineer to get to grips with. Simply put, without a boot manager,
    the system won't be able to boot unless we boot off some form of media. Gaining
    the knowledge will put you, as a Linux engineer, ahead of other so-called engineers.
    You will be at a greater advantage regarding certification after completing the
    next chapter. I hope to see you soon.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将专注于系统引导过程。此外，将介绍各种引导管理器。这对于每个Linux工程师来说都是另一个关键方面。简而言之，没有引导管理器，系统将无法引导，除非我们从某种媒体引导。掌握这些知识将使您作为Linux工程师处于领先地位。完成下一章后，您将在认证方面具有更大的优势。希望很快能见到您。
- en: Questions
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which directory is created as a virtual file system?
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个目录被创建为虚拟文件系统？
- en: A. `/dev`
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: A. `/dev`
- en: B. `/lib`
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: B. `/lib`
- en: C. `/proc`
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: C. `/proc`
- en: D. None of the above
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: D. 以上都不是
- en: What is the command to view the CPU info?
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看CPU信息的命令是什么？
- en: A. `less /proc`
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: A. `less /proc`
- en: B. `more /proc`
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: B. `more /proc`
- en: C. `cat /proc`
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: C. `cat /proc`
- en: D. `cat /proc/cpuinfo`
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: D. `cat /proc/cpuinfo`
- en: What is the command to view RAM inside the `/proc` directory?
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看`/proc`目录中的RAM的命令是什么？
- en: A. `tail /proc/free`
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: A. `tail /proc/free`
- en: B. `less /proc/free`
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: B. `less /proc/free`
- en: C. `cat /proc/meminfo`
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: C. `cat /proc/meminfo`
- en: D. `cat /proc/RAM`
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: D. `cat /proc/RAM`
- en: Which option with the `free` command displays the memory info in a friendly
    format?
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`free`命令的哪个选项以友好的格式显示内存信息？'
- en: A. `free -F`
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: A. `free -F`
- en: B. `free -L`
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: B. `free -L`
- en: C. `free -h`
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: C. `free -h`
- en: D. `free –free`
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: D. `free –free`
- en: What command is used to tell the system that a file is a `swap` file?
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于告诉系统文件是`swap`文件的命令是什么？
- en: A. `doswap`
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: A. `doswap`
- en: B. `format swap`
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: B. `format swap`
- en: C. `mkswap`
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: C. `mkswap`
- en: D. `swap`
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: D. `swap`
- en: What command is used to activate a `swap` file?
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用哪个命令来激活`swap`文件？
- en: A. `Swap`
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: A. `Swap`
- en: B. `onSwap`
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: B. `onSwap`
- en: C. `swap`
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: C. `swap`
- en: D. `swapon`
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: D. `swapon`
- en: What command is used to display the swap partition info?
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示交换分区信息的命令是什么？
- en: A. `mkswap`
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: A. `mkswap`
- en: B. `swapon`
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: B. `swapon`
- en: C. `swap`
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: C. `swap`
- en: D. `swapoff`
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: D. `swapoff`
- en: Which devices file can redirect messages to be sent for discard?
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个设备文件可以重定向消息以发送到丢弃？
- en: A. `/dev/discard`
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: A. `/dev/discard`
- en: B. `/dev/null`
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: B. `/dev/null`
- en: C. `/dev/redirect`
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: C. `/dev/redirect`
- en: D. `None of the above`
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: D. `以上都不是`
- en: What command is used to display currently available modules in a Linux system?
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于显示Linux系统中当前可用模块的命令是什么？
- en: A. `insmod`
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: A. `insmod`
- en: B. `depmod`
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: B. `depmod`
- en: C. `rmmod`
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: C. `rmmod`
- en: D. `lsmod`
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: D. `lsmod`
- en: What command is used to install a module without having to specify the absolute
    path?
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用哪个命令来安装模块，而不必指定绝对路径？
- en: A. `rmmod`
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: A. `rmmod`
- en: B. `modules`
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: B. `modules`
- en: C. `modrm`
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: C. `modrm`
- en: D. `modprobe`
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: D. `modprobe`
- en: Further reading
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: This website will give you all of the necessary information about the current
    CompTIA Linux+ certification: [https://www.comptia.org/](https://www.comptia.org/)
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该网站将为您提供有关当前CompTIA Linux+认证的所有必要信息：[https://www.comptia.org/](https://www.comptia.org/)
- en: This website will give you details relating to LPI exams, specifically the LPIC
    - Level 1 that you earn by passing both CompTIA Linux+ exams: [http://www.lpi.org/](http://www.lpi.org/)
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个网站将为您提供与LPI考试相关的详细信息，特别是通过通过CompTIA Linux+考试获得的LPIC - Level 1：[http://www.lpi.org/](http://www.lpi.org/)
- en: This last website gives you details about the various Linux kernels available: [https://www.kernel.org/](https://www.kernel.org/)
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个网站提供了各种可用的Linux内核的详细信息：[https://www.kernel.org/](https://www.kernel.org/)
