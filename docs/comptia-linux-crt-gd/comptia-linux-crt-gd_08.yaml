- en: Performing File Management
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行文件管理
- en: In the previous chapter, we dealt with package management within the Red Hat
    world. Particularly, we covered the `yum`, `dnf`, `rpm`, and `yumex` utilities.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们处理了Red Hat世界中的软件包管理。特别是，我们涵盖了`yum`，`dnf`，`rpm`和`yumex`实用程序。
- en: In this chapter, our focus will shift toward file management. We will look at
    ways to work in the shell. We will work on creating, modifying, and removing files.
    Additionally, we will work with directories, illustrating how to create, move,
    and remove a directory. Next, we will touch upon performing searches for files
    and directories. Finally, we will cover pipes and redirects.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们的重点将转向文件管理。我们将探讨在shell中工作的方法。我们将致力于创建，修改和删除文件。此外，我们将使用目录，演示如何创建，移动和删除目录。接下来，我们将涉及对文件和目录进行搜索。最后，我们将涵盖管道和重定向。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Viewing and moving files and directories in the CLI
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在CLI中查看和移动文件和目录
- en: Creating, copying, moving, renaming, and removing files
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建，复制，移动，重命名和删除文件
- en: Creating and removing directories
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和删除目录
- en: Finding files and directories
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找文件和目录
- en: Pipes and redirects
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管道和重定向
- en: Viewing and moving files and directories in the CLI
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在CLI中查看和移动文件和目录
- en: 'First, you will need to be familiar with working in the CLI. Throughout the
    previous chapters, we interacted with the shell. Now, we want to become efficient
    in the CLI. When we first open a Terminal, we are placed into the user''s home
    directory, as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要熟悉在CLI中的工作。在前几章中，我们与shell进行了交互。现在，我们希望在CLI中变得高效。当我们首次打开终端时，我们被放置在用户的主目录中，如下所示：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the preceding output, we''re being placed into the home directory of the
    user `philip`. This can be confirmed by issuing the print working directory (`pwd`)
    command, as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述输出中，我们被放置到用户`philip`的主目录中。可以通过发出打印工作目录（`pwd`）命令来确认这一点，如下所示：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the preceding output, we''ve confirmed that we are indeed in the `/home/philip`
    directory. But, it gets even more interesting. There are various directories inside
    of `/home/philip`. We can confirm this by using the lists (`ls`) command, as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述输出中，我们确认了我们确实在`/home/philip`目录中。但是，更有趣的是。`/home/philip`内有各种目录。我们可以通过使用列表（`ls`）命令来确认这一点，如下所示：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The directories (folders) listed in the preceding output are created for each
    user in the system. Now, the way in which the directories are displayed doesn''t
    really tell us a lot. To dig deeper, we can issue the `ls` command once again;
    this time, we will pass the `-l` option. The `-l` option exposes things such as
    the file type, user permissions, group permissions, user ownership, group ownership,
    size, and date last modified, as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 上述输出中列出的目录（文件夹）是为系统中的每个用户创建的。现在，目录的显示方式并没有告诉我们很多。为了深入了解，我们可以再次发出`ls`命令；这次，我们将传递`-l`选项。`-l`选项会显示文件类型，用户权限，组权限，用户所有权，组所有权，大小和上次修改日期等信息，如下所示：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We can get some useful information from the preceding output. For instance,
    there are permissions for each directory; we can also see the ownership and size.
    Adding to this, in Linux, we have what are known as hidden files/folders. They
    are not displayed by default when we perform a listing; to get them, we have to
    add on the `-a` option:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从上述输出中获得一些有用的信息。例如，每个目录都有权限；我们还可以看到所有权和大小。此外，在Linux中，我们有所谓的隐藏文件/文件夹。当我们执行列表时，默认情况下不会显示它们；要获取它们，我们必须添加`-a`选项：
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Awesome! This way, we can tell whether a file or directory is hidden; these
    files/directories begin with a period in front of the name of the file or folder.
    In order to move between directories, we use the `cd` command. Change directory
    or `cd` allows us to navigate the Linux filesystem. So, let''s move on to `/home/philip/Documents`.
    We use the following command:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！这样，我们可以知道文件或目录是否被隐藏；这些文件/目录的名称前面有一个句点。为了在目录之间移动，我们使用`cd`命令。更改目录或`cd`允许我们导航Linux文件系统。所以，让我们继续到`/home/philip/Documents`。我们使用以下命令：
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'There is another way to move between directories. The first method that we
    used is known as the absolute path; this means that we specified the complete
    path to the directory. The next method for moving between the directories is specifying
    the relative path, as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一种在目录之间移动的方法。我们使用的第一种方法称为绝对路径；这意味着我们指定了到目录的完整路径。在目录之间移动的下一种方法是指定相对路径，如下所示：
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You have to be in the parent directory of the child directory for the relative
    method to work.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 相对方法要求您必须在子目录的父目录中才能工作。
- en: 'Once we''re in the child directory, we can perform the `ls` command, as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们进入子目录，我们可以执行`ls`命令，如下所示：
- en: '[PRE7]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Currently, they is no content in this directory. In order to move back up to
    the parent directory, we can use the `cd` command, as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当前，该目录中没有内容。为了返回到父目录，我们可以使用`cd`命令，如下所示：
- en: '[PRE8]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the preceding output, we specified the path. This method will always work.
    We can also use the `cd` command in another manner, as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述输出中，我们指定了路径。这种方法总是有效的。我们还可以以另一种方式使用`cd`命令，如下所示：
- en: '[PRE9]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the preceding method, we used a double period. The double period indicates
    the parent directory. If we had specified a single period, the following would
    have been the outcome:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述方法中，我们使用了双点。双点表示父目录。如果我们指定了一个单点，结果将如下所示：
- en: '[PRE10]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The single period references the current directory itself. The following method
    can be used in a directory, regardless of where you are:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 单点引用当前目录本身。无论您在哪里，都可以使用以下方法：
- en: '[PRE11]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The tilde (`~`) character will always bring us back to the home directory of
    the user. To illustrate this, we will go to the `/etc` directory, as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 波浪号（`~`）字符将始终将我们带回用户的主目录。为了说明这一点，我们将进入`/etc`目录，如下所示：
- en: '[PRE12]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, we will issue the `cd` command once again, passing the tilde (`~`):'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将再次发出`cd`命令，传递波浪号（`~`）：
- en: '[PRE13]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Awesome job! You can now see the power of the tilde (`~`) character. At the
    very top of the filesystem hierarchy lies the root. We usually refer to the root
    as `/`; this is not to be confused with the `/root` directory. The latter is the
    home directory of the root user. From the `/`, every other directory is created.
    We can get to the `/` as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！您现在可以看到波浪号（`~`）字符的威力。在文件系统层次结构的顶部是根目录。我们通常将根目录称为`/`；这不应与`/root`目录混淆。后者是root用户的主目录。从`/`开始创建所有其他目录。我们可以这样进入`/`：
- en: '[PRE14]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the preceding output, we are placed at the root of the filesystem. We can
    view this directory in a similar way to the other directories, as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述输出中，我们位于文件系统的根目录。我们可以以类似的方式查看此目录，如下所示：
- en: '[PRE15]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You''ll notice that we have some familiar directories here, such as `/home` and
    `/dev`. Interestingly, we can see the `/root` directory listed. We can change
    to that directory and perform a listing, as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到这里有一些熟悉的目录，比如`/home`和`/dev`。有趣的是，我们可以看到列出了`/root`目录。我们可以切换到该目录并执行列表，如下所示：
- en: '[PRE16]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We got the preceding error due to the fact that we do not have permission to
    view the `/root` directory. Let''s authenticate as the root user and retry, as
    follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们没有权限查看`/root`目录，所以出现了上述错误。让我们以root用户的身份进行身份验证并重试，如下所示：
- en: '[PRE17]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Voila! We are placed into the `/root` directory. This time, when we do a listing,
    we will notice right off the bat that this is not the `/` directory:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 看吧！我们现在位于`/root`目录。这一次，当我们列出时，我们会立刻注意到这不是`/`目录：
- en: '[PRE18]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Based on the preceding output, navigating the directory structure is fairly
    intuitive.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 根据上述输出，浏览目录结构相当直观。
- en: Creating, copying, moving, renaming, and removing files
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建、复制、移动、重命名和删除文件
- en: This section sounds like a mouthful. Not to worry; it covers the techniques
    for creating and removing files. It also covers the methods for copying and renaming
    files.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分听起来有点复杂。不用担心；它涵盖了创建和删除文件的技术。它还涵盖了复制和重命名文件的方法。
- en: 'There are various files that we use on a daily basis. We can do an `ls` on
    the `/home/philip/Documents/NewTest` directory, as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们每天使用各种文件。我们可以在`/home/philip/Documents/NewTest`目录上执行`ls`命令，如下所示：
- en: '[PRE19]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Currently, they aren''t any files inside of this directory. In Linux, we can
    create a file from the shell; we can use the `touch` command to accomplish this:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，该目录内没有任何文件。在Linux中，我们可以从shell中创建文件；我们可以使用`touch`命令来实现这一点：
- en: '[PRE20]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The file was created using some default permissions. Notably, the `-rw-rw-r--` object
    stands for the user (`-rw`), the group (`-rw`), and the other (`-r--`). The first
    dash (`-`) is referencing the file type. In this case, it''s a regular file. The
    (`rw-`) means that the user/owner has read and write permissions. The second set
    of `rw-` means that the group also has read and execute permissions. Lastly, the
    `r--` means that the other (everyone else) has read permissions. Also, the part
    which states `philip philip` refers to the owner of the file and the group that
    the file belongs to. We can change these permissions for this file by using the
    `chmod` command. Let''s suppose that we want to give the others (everyone else)
    read and write permissions. We can do so as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件是使用一些默认权限创建的。特别地，`-rw-rw-r--`表示用户（`-rw`）、组（`-rw`）和其他人（`-r--`）。第一个破折号（`-`）是文件类型的引用。在这种情况下，它是一个常规文件。(`rw-`)表示用户/所有者具有读取和写入权限。第二组`rw-`表示组也具有读取和执行权限。最后，`r--`表示其他人（所有其他人）具有读取权限。另外，`philip
    philip`部分指的是文件的所有者和文件所属的组。我们可以使用`chmod`命令更改此文件的权限。假设我们想要给其他人（所有其他人）读取和写入权限。我们可以这样做：
- en: '[PRE21]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Great! We can now see the other permission says `rw-`. There is another way
    to change the permissions, rather than using `o+w`. We can use the numerical value.
    I will change the other back to `r--` by using the numerical format, as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们现在可以看到其他权限为`rw-`。除了使用`o+w`之外，还有另一种更改权限的方法，那就是使用数字值。我将使用数字格式将其他人改回`r--`，如下所示：
- en: '[PRE22]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We can read the preceding code as follows: in the `664`, `6` is equal to read
    and write, `6` is equal to read and write, and `4` is equal to read. The first
    digit is a placeholder for the user. The second digit is a placeholder for the
    group, and the last digit is a placeholder for the other. To further illustrate
    this, we can take off the read and leave the write for the group permissions,
    as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将上述代码解读如下：在`664`中，`6`等于读取和写入，`6`等于读取和写入，`4`等于读取。第一个数字是用户的占位符。第二个数字是组的占位符，最后一个数字是其他的占位符。为了进一步说明这一点，我们可以去掉读取并保留写入组权限，如下所示：
- en: '[PRE24]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Similarly, we can add on permissions by increasing the value. Let''s pick the
    others; we will give the others the read and execute permissions, as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，我们可以通过增加数值来添加权限。让我们选择其他人；我们将给其他人读取和执行权限，如下所示：
- en: '[PRE25]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Wonderful! We can even give all of the permissions (read, write, and execute)
    for the user, the group, or the others in a single command. Let''s start with
    the user, as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们甚至可以在单个命令中为用户、组或其他人提供所有权限（读取、写入和执行）。让我们从用户开始，如下所示：
- en: '[PRE26]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now, we can see that the user has read, write, and execute permissions. I got
    the value of `7` by adding read equal to `4`, write equal to `2`, and execute
    equal to `1`. We will now give the group all of the permissions, as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以看到用户具有读取、写入和执行权限。我通过将读取等于`4`、写入等于`2`和执行等于`1`相加得到值`7`。我们现在将给组所有权限，如下所示：
- en: '[PRE27]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Awesome job! We can also remove all of the permissions for the user, group,
    or others in a single command. Let''s remove the permissions (read, write, and
    execute) for the others, as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们还可以在单个命令中删除用户、组或其他人的所有权限。让我们删除其他人的权限（读取、写入和执行），如下所示：
- en: '[PRE28]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Placing a zero (`0`) negates all of the permissions for the particular section
    (user, group, or others). You can see the power of permissions. Similarly, we
    can use letters, as seen previously. The `u` means user, `g` means group, and
    `o` means others. We can remove the execute permission from the group as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 放置零（`0`）会取消特定部分（用户、组或其他）的所有权限。您可以看到权限的强大。同样，我们可以使用字母，就像之前看到的那样。`u`表示用户，`g`表示组，`o`表示其他。我们可以按如下方式从组中删除执行权限：
- en: '[PRE29]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: We can use either a plus (`+`) symbol (to add a permission) or a minus (`-`)
    symbol (to remove a permission). We can also copy a file from one location to
    another, or inside the same location. A different name will have to be given if
    the destination for the file is inside the same location as the source.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用加号（`+`）符号（添加权限）或减号（`-`）符号（删除权限）。我们还可以将文件从一个位置复制到另一个位置，或者在同一个位置内部。如果文件的目的地在与源相同的位置内部，则必须给出不同的名称。
- en: 'The `cp` command is used for copying. We will make a copy of the file and place
    it in `/home/philip/Documents/`, as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`cp`命令用于复制。我们将复制文件并将其放在`/home/philip/Documents/`中，如下所示：'
- en: '[PRE30]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Excellent!
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！
- en: Directories have a `d` in front of their permissions.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 目录的权限前面有一个`d`。
- en: 'We can also move a file; the `mv` command is used for moving files. Let''s
    move `/home/philip/Documents/NewFile` and place it inside `/home/philip/Documents/NewTest`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以移动文件；`mv`命令用于移动文件。让我们移动`/home/philip/Documents/NewFile`并将其放在`/home/philip/Documents/NewTest`中：
- en: '[PRE31]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The method that we used was to specify a period (`.`) for the location. This
    indicates the current working directory; so, instead of typing out the full destination
    path, we can use the period (`.`).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的方法是为位置指定一个句点（`.`）。这表示当前工作目录；因此，我们可以使用句点（`.`）而不是键入完整的目标路径。
- en: 'We can also rename a file by using the `mv` command. Let''s rename the `NewFile`:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`mv`命令重命名文件。让我们重命名`NewFile`：
- en: '[PRE32]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Voila! We can also rename a file and place it in another directory, as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！我们还可以重命名文件并将其放在另一个目录中，如下所示：
- en: '[PRE33]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The file is no longer inside the present directory, but is now inside the `/home/philip/Documents`
    directory:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件不再位于当前目录中，而是位于`/home/philip/Documents`目录中：
- en: '[PRE34]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Great! We can also remove a file by using the `rm` command. Let''s remove the
    `/home/philip/Documents/NewTest/OurFile`, as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们还可以使用`rm`命令删除文件。让我们删除`/home/philip/Documents/NewTest/OurFile`，如下所示：
- en: '[PRE35]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Creating and removing directories
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和删除目录
- en: 'We can create directories by using another popular command. The `mkdir` command
    can be used to create a directory. Let''s do a listing, using the `ls` command,
    as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用另一个常用命令来创建目录。`mkdir`命令可用于创建目录。让我们使用`ls`命令进行列表，如下所示：
- en: '[PRE37]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Now, let''s create our own directory inside of `/home/philip`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在`/home/philip`内创建自己的目录：
- en: '[PRE38]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'In the preceding code, our new directory is listed at the bottom. You''ll also
    notice that we used the `ll` command; this is just an alias for the `ls -l` command.
    This can be verified quickly by using the `which` command, as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们的新目录列在底部。您还会注意到我们使用了`ll`命令；这只是`ls -l`命令的别名。可以通过使用`which`命令快速验证这一点，如下所示：
- en: '[PRE39]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Great job! We can move into our newly created directory by using the `cd` command:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！我们可以使用`cd`命令进入我们新创建的目录：
- en: '[PRE40]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Next, suppose that we have created a directory and have made a typo. Not to
    worry; we can leverage the `mv` command, which has the ability to rename a directory.
    Let''s attempt to rename the `/home/Test` directory:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，假设我们已经创建了一个目录并且打错了字。不用担心；我们可以利用`mv`命令，它可以重命名目录。让我们尝试重命名`/home/Test`目录：
- en: '[PRE41]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'We are encountering this error due to the fact that we are inside the directory.
    Let''s try the command with the `-v` option:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们遇到这个错误是因为我们在目录内。让我们尝试带有`-v`选项的命令：
- en: '[PRE42]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'To get around this, we need to navigate out of the directory, and then retry
    the `mv` command, as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们需要跳出目录，然后重新尝试`mv`命令，如下所示：
- en: '[PRE43]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Awesome! Now, the `NewTest` file no longer exists inside of `/home/philip/Documents/`;
    this can be shown by executing the following:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在，`NewTest`文件不再存在于`/home/philip/Documents/`中；这可以通过执行以下命令来显示：
- en: '[PRE44]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'We can also rename a directory by using the `mv` command. The trick is to specify
    a directory name when we call the `mv` command, as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`mv`命令重命名目录。诀窍是在调用`mv`命令时指定目录名称，如下所示：
- en: '[PRE45]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Renaming a directory is that simple. We can also change the permissions on
    a directory. Let''s remove the read, write, and execute permissions from the group,
    as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 重命名目录就是这么简单。我们还可以更改目录的权限。让我们从组中删除读取、写入和执行权限，如下所示：
- en: '[PRE46]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Awesome! The `-R` option tells the `chmod` command to apply the permissions
    to everything that resides inside of the `/home/philip/ReName` directory. When
    we are finished with a directory, we can remove it. The `rmdir` command is used
    to remove directories. Let''s remove the `/home/philip/ReName` directory, as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！`-R`选项告诉`chmod`命令将权限应用于`/home/philip/ReName`目录内的所有内容。当我们完成一个目录时，我们可以删除它。`rmdir`命令用于删除目录。让我们删除`/home/philip/ReName`目录，如下所示：
- en: '[PRE47]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Based on the preceding code, no errors were encountered. This might not be
    the case in your environment. Most often, you will either have files or other
    directories that reside in the directory that you are attempting to remove. Let''s
    quickly create a directory and place three files inside it. Then, we will attempt
    to remove the directory:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 基于前面的代码，没有遇到错误。在你的环境中可能不是这样。通常情况下，您要么有文件，要么有其他目录位于您试图删除的目录中。让我们快速创建一个目录，并在其中放置三个文件。然后，我们将尝试删除该目录：
- en: '[PRE49]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Now, we will retry the `rm` command and look at the differences:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将重试`rm`命令并查看差异：
- en: '[PRE50]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Lo and behold, we encountered an error. This is common when a directory is
    not empty. We can work around it quite easily; this time, we will use the `rm`
    command with `-r`, which means to delete everything that follows. We can also
    add the `-v` option, which will show the details of any potential permissions
    issues:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 瞧，我们遇到了一个错误。当目录不为空时，这是很常见的。我们可以很容易地解决这个问题；这次，我们将使用带有`-r`的`rm`命令，这意味着删除其后的所有内容。我们还可以添加`-v`选项，它将显示任何潜在权限问题的详细信息：
- en: '[PRE51]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Great!
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！
- en: You can use `-f` to delete an entire directory without being prompted for confirmation.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`-f`删除整个目录，而无需确认。
- en: Finding files and directories
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找文件和目录
- en: 'Often, we are searching for files and directories from the GUI. We can also
    perform searches in the shell. First, we can use the `find` command; let''s look
    for files that have a `.conf` extension. The search function would be as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们会在图形用户界面中搜索文件和目录。我们也可以在shell中执行搜索。首先，我们可以使用`find`命令；让我们搜索具有`.conf`扩展名的文件。搜索功能如下：
- en: '[PRE52]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Now, if you encounter these errors, it''s an indication that you need some
    advanced permissions. Let''s try the search once again, as the root user:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您遇到这些错误，这表明您需要一些高级权限。让我们再次尝试搜索，作为root用户：
- en: '[PRE53]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Awesome! We can even broaden the area where we want to perform a search. Let''s
    search the entire filesystem, as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们甚至可以扩大我们想要执行搜索的区域。让我们搜索整个文件系统，如下所示：
- en: '[PRE54]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Some output has been omitted for brevity throughout the chapter.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 出于简洁起见，本章中省略了一些输出。
- en: 'We can also search based on a part of a name. Let''s look for any file that
    begins with `gru`:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以根据名称的一部分进行搜索。让我们搜索以`gru`开头的任何文件：
- en: '[PRE55]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'In the preceding output, we searched inside of the `/boot` directory. Empty
    files are often just sitting inside of a directory, without being used. We can
    search for empty files by using the `find` command. The `-type` option is passed
    to specify what we''re searching for:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的输出中，我们在`/boot`目录中进行了搜索。空文件通常只是静静地放在目录中，没有被使用。我们可以使用`find`命令来搜索空文件。传递`-type`选项以指定我们要搜索的内容：
- en: '[PRE56]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Awesome job! But, wait; we can do some housekeeping by passing the `-delete`
    option, to remove any files that the `find` command has returned from our search.
    We can do so as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！但是，等等；我们可以通过传递`-delete`选项来进行一些清理，以删除`find`命令从我们的搜索中返回的任何文件。我们可以这样做：
- en: Be careful when using the `-delete` option, as it will remove the files, and
    even the directories, in some cases. Always back up your data before running `find`
    with the `-delete` option.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`-delete`选项时要小心，因为它会在某些情况下删除文件，甚至删除目录。在运行带有`-delete`选项的`find`之前，始终备份数据。
- en: '[PRE57]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: In the preceding output, you will notice that `/home/philip/Documents/RenameFile`,
    in addition to `/home/philip/Documents`, has been removed. Be very cautious whenever
    you pass the `-delete` option. Although in our case, we are using a lab environment,
    be sure to keep this in mind in your real systems. Perform a backup before attempting
    to pass the `-delete` option.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的输出中，您会注意到`/home/philip/Documents/RenameFile`以及`/home/philip/Documents`已被删除。每当您传递`-delete`选项时都要非常小心。尽管在我们的情况下，我们正在使用实验环境，请务必记住这一点。在尝试传递`-delete`选项之前备份数据。
- en: 'We can also search for a file or directory based on permissions. Yes! We would
    pass the `-readable`, `-writable`, and `-executable` options with the `find` command.
    It would look as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以根据权限搜索文件或目录。是的！我们将使用`find`命令传递`-readable`、`-writable`和`-executable`选项。它将如下所示：
- en: '[PRE58]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Awesome job! You can see that the result of the `find` command matches the
    listing for files with the `read` permission. Likewise, we can search for the
    files and directories with execute permissions, as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！您可以看到`find`命令的结果与具有`read`权限的文件的列表匹配。同样，我们可以搜索具有执行权限的文件和目录，如下所示：
- en: '[PRE59]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: In the preceding output, only the files with execute permissions for the others
    are displayed.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的输出中，只显示了其他人具有执行权限的文件。
- en: 'Adding to this, we can search for files and directories with write permissions,
    as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以搜索具有写权限的文件和目录，如下所示：
- en: '[PRE60]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Great job! The results came back empty, because none of the files or directories
    have write permissions for the others. Similarly, we can search using numbers.
    We could look for execute permissions, as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！结果为空，因为没有文件或目录对其他人有写权限。同样，我们可以使用数字进行搜索。我们可以搜索执行权限，如下所示：
- en: '[PRE61]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'In the preceding output, only directories with execute permissions are displayed.
    We can search for files and directories with write permissions, as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的输出中，只显示具有执行权限的目录。我们可以搜索具有写权限的文件和目录，如下所示：
- en: '[PRE62]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Interestingly enough, the results came back as expected, because the others
    do not have write permissions. Likewise, we can search for write permissions for
    groups, as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，结果如预期般返回，因为其他人没有写权限。同样，我们可以搜索组的写权限，如下所示：
- en: '[PRE63]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Awesome! The results are empty, because the groups do not have write permissions.
    Lastly, we can search for write permissions for the user; this will yield the
    following:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！结果为空，因为组没有写权限。最后，我们可以搜索用户的写权限；这将产生以下结果：
- en: '[PRE65]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Great job! The syntax is `-perm`, followed by the user (the first digit), the
    group (the second digit), and the others (the last digit).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！语法是`-perm`，后跟用户（第一个数字）、组（第二个数字）和其他人（最后一个数字）。
- en: 'Another popular method for searching files and directories is to use the `locate`
    command. The `locate` utility is faster in terms of results, as compared to the
    `find` utility; this is due to the fact that the `locate` command uses a database
    to perform lookups. The database is called `mlocate`. We can perform a simple
    search of a file we have created, as follows:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索文件和目录的另一种流行方法是使用`locate`命令。`locate`实用程序在结果方面比`find`实用程序更快，这是因为`locate`命令使用数据库来执行查找。数据库称为`mlocate`。我们可以执行对我们创建的文件的简单搜索，如下所示：
- en: '[PRE66]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'In the preceding output, the `locate` command is unaware of the specified file.
    Not to worry; we simply have to update the database, as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的输出中，`locate` 命令不知道指定的文件。不用担心；我们只需要更新数据库，如下所示：
- en: '[PRE67]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'If you run into this error, it means that you need to run the command as the
    root user, as follows:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如果遇到这个错误，这意味着您需要以 root 用户身份运行命令，如下所示：
- en: '[PRE68]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'That''s more like it! We can also search by extensions. To do so, we can use
    a wildcard, as follows:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！我们也可以按扩展名搜索。为此，我们可以使用通配符，如下所示：
- en: '[PRE69]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'In the preceding output, only the results with lowercase names are displayed;
    we can fix this by passing `-i`, which tells the `locate` command to ignore the
    case:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的输出中，只显示了小写名称的结果；我们可以通过传递 `-i` 来解决这个问题，这告诉 `locate` 命令忽略大小写：
- en: '[PRE70]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'In this case, the results are the same, due to the fact that the files are
    in lowercase. We can also control how the output is displayed; we can pass the
    `--null` option, as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，由于文件是小写，结果是相同的。我们还可以控制输出的显示方式；我们可以传递 `--null` 选项，如下所示：
- en: '[PRE71]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'In the preceding output, we can see the desired results. Finally, we can view
    information about the database; to do so, we can use the `-S` option:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的输出中，我们可以看到期望的结果。最后，我们可以查看有关数据库的信息；为此，我们可以使用 `-S` 选项：
- en: '[PRE72]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Great job! In addition to the size, we can also see the location of the database.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！除了大小，我们还可以看到数据库的位置。
- en: Pipes and redirects
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管道和重定向
- en: Often, when we are viewing output from various commands, the output is a bit
    fuzzy. Fear no more; we have what is known as pipes and redirects. Basically,
    when working with pipes (`|`), we take the output of a command and pass it as
    the input of another command. Redirects (`>`, `<`, `>>`, `2>`, and `2>&1`) are
    similar to taking output from a command, but this time, we send it to a location,
    such as a file or another location, to name a few.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当我们查看各种命令的输出时，输出有点模糊。不用担心；我们有所谓的管道和重定向。基本上，当使用管道 (`|`) 时，我们获取一个命令的输出并将其作为另一个命令的输入。重定向
    (`>`, `<`, `>>`, `2>`, 和 `2>&1`) 类似于从命令获取输出，但这次我们将其发送到一个位置，比如一个文件或另一个位置，等等。
- en: 'To begin, let''s use the `ls` command; the code is as follows:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们使用 `ls` 命令；代码如下：
- en: '[PRE73]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'We can view the output one page at a time by bringing in yet another powerful
    command—the `less` command:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过引入另一个强大的命令——`less` 命令，一页一页地查看输出：
- en: '[PRE74]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'In order to exit the `less` command, we can use the `q` on the keyboard. The
    benefit of using the `less` command is the fact that we can move back and forward,
    as opposed to the `more` command, which can only move forward. We can also use
    the pipe (`|`) character to pass values that another command is expecting. We
    can use the `wc` command to illustrate this, as follows:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 为了退出 `less` 命令，我们可以在键盘上使用 `q`。使用 `less` 命令的好处在于我们可以前后移动，而不是 `more` 命令，它只能向前移动。我们还可以使用管道
    (`|`) 字符传递另一个命令期望的值。我们可以使用 `wc` 命令来说明这一点，如下所示：
- en: '[PRE75]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: In the preceding output, we took the output from the `ls` command and passed
    it as the input to the `wc` command. The `wc` command is used for the word count;
    the `-w` option is used to display the total words.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的输出中，我们获取了 `ls` 命令的输出并将其作为 `wc` 命令的输入。`wc` 命令用于计算单词数；`-w` 选项用于显示总单词数。
- en: 'Next, we can use redirects in a number of ways; in Linux, we have three types
    of streams, as follows:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以以多种方式使用重定向；在Linux中，我们有三种类型的流，如下所示：
- en: STDIN = input `<`
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准输入 = 输入 `<`
- en: STDOUT = output ``>``
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准输出 = 输出 ``>``
- en: STDERR = standard error `2>`
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准错误 = 标准错误 `2>`
- en: 'Also, we can mix and match the streams, as you will see later in this section. Let''s
    start with STDIN; we can use the `wc` command and call the input from a file,
    as follows:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以混合和匹配流，稍后在本节中您将看到。让我们从标准输入开始；我们可以使用 `wc` 命令并从文件中调用输入，如下所示：
- en: '[PRE76]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Awesome! The word count of `/boot/grub2/grub.cfg` is passed to the `wc` command.
    Moving on to STDOUT, we can get the output of a command and store it to a file.
    Let''s use the `ls` command, as follows:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！`/boot/grub2/grub.cfg` 的字数被传递给 `wc` 命令。继续进行标准输出，我们可以获取命令的输出并将其存储到文件中。让我们使用
    `ls` 命令，如下所示：
- en: '[PRE77]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'In the preceding output, we did a listing of `/etc/init.d/` and saved the output
    to `/home/philip/Documents/ls.txt`. This can be verified as follows:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的输出中，我们列出了 `/etc/init.d/` 并将输出保存到了 `/home/philip/Documents/ls.txt`。可以通过以下方式进行验证：
- en: '[PRE78]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Now, suppose that we use the `ls` command for another directory; this will
    overwrite the existing content of `/home/philip/Documents/ls.txt`:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我们使用 `ls` 命令来查看另一个目录；这将覆盖 `/home/philip/Documents/ls.txt` 的现有内容：
- en: '[PRE79]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'As you can see, the proof is in the pudding. A way around this would be to
    tell the STDOUT that we want to append the output, instead of overwriting it:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，事实就在眼前。解决这个问题的方法是告诉标准输出我们想要追加输出，而不是覆盖它：
- en: '[PRE80]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'There we go! So, we use `>>` to append data to an existing file. Next, we can
    combine the results of the STDIN of a command and send it to the STDOUT. That
    would look as follows:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 好了！所以，我们使用 `>>` 将数据追加到现有文件中。接下来，我们可以将命令的标准输入结果与标准输出合并。如下所示：
- en: '[PRE81]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Great job! We can also redirect STDERR to a file. Let''s use the file command,
    as follows:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！我们还可以将标准错误重定向到一个文件。让我们使用文件命令，如下所示：
- en: '[PRE82]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'In the preceding output, it appears as though the command worked. Well, the
    truth of the matter is that the listing for `/tmp` worked, but the error for the
    file `TestFileWithError` was not displayed. The error was sent to `/home/philip/Documents/STDERR.txt`.
    This can be verified as follows:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的输出中，似乎命令已经执行。事实上，`/tmp` 的列表已经显示，但是文件 `TestFileWithError` 的错误没有被显示出来。错误被发送到了
    `/home/philip/Documents/STDERR.txt`。可以通过以下方式进行验证：
- en: '[PRE83]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Awesome job! We can also combine the STDOUT with the STDERR, in a single file.
    This is accomplished by telling the shell that we would like to store the STDERR,
    along with the STDOUT, inside the file `2>&1`. This can be done as follows:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！我们还可以将标准输出与标准错误合并到一个文件中。这是通过告诉 shell 我们想要将标准错误与标准输出一起存储在文件 `2>&1` 中实现的。可以这样做：
- en: '[PRE84]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'In the preceding output, we can see the error at the beginning of the file,
    followed by the listing of the `/tmp`. Finally, it''s possible to display the
    output of a command and simultaneously redirect the output to a file; this is
    made possible by yet another powerful command—the `tee` command. The following
    shows the `tee` command in action:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的输出中，我们可以看到文件开头的错误，然后是`/tmp`的列表。最后，可以显示命令的输出并同时将输出重定向到文件；这是由另一个强大的命令——`tee`命令实现的。以下显示了`tee`命令的使用：
- en: '[PRE85]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: In the preceding output, you can see the power of the `tee` command.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的输出中，您可以看到`tee`命令的强大之处。
- en: Summary
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter was very detailed. I must say that I had a lot of fun working on
    this chapter. We covered the filesystem structure. You learned how to navigate
    the filesystem using the `cd` command. Then, we looked at how to identify the
    working directory. After that, we covered the method for viewing the contents
    of a directory. Adding to that, we exposed hidden files and directories within
    directories that weren't displayed by default.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章非常详细。我必须说我在这一章的工作中玩得很开心。我们涵盖了文件系统结构。您学会了如何使用`cd`命令导航文件系统。然后，我们看了如何识别工作目录。之后，我们介绍了查看目录内容的方法。除此之外，我们还揭示了默认情况下未显示的目录中的隐藏文件和目录。
- en: 'Next, we covered how to create a file in the shell. Furthermore, you saw the
    various permissions for a file and how to change these permissions. Following
    this, we moved on to directories inside a Linux environment. The various methods
    to create, move, rename, and remove a directory were explored. The next topic
    involved techniques to search for files and directories. First, we worked with
    the `find` command extensively. Next, the `locate` command was explored. Finally,
    we worked with pipes and redirects, within the context of the shell environment.
    You saw how you can leverage the output of a command and pass it as the input
    for another command. You then saw how to redirect to and from a file, including
    STDOUT and STDERR. Finally, we took a look at another powerful command: the `tee`
    command.'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们讨论了如何在shell中创建文件。此外，您还了解了文件的各种权限以及如何更改这些权限。接着，我们转向了Linux环境中的目录。我们探讨了创建、移动、重命名和删除目录的各种方法。下一个主题涉及搜索文件和目录的技术。首先，我们广泛使用了`find`命令。接下来，我们探讨了`locate`命令。最后，我们在shell环境的背景下使用了管道和重定向。您看到了如何利用命令的输出并将其作为另一个命令的输入。然后，您看到了如何重定向到文件，包括STDOUT和STDERR。最后，我们看了另一个强大的命令：`tee`命令。
- en: In the next chapter, we will look at processes in the context of the shell environment.
    Particularly, we will look at a technique to manage processes. Some popular commands
    will be covered, such as `top`, `service`, and `systemctl`, used for identifying
    and managing processes. The next chapter will be concise, in the sense that we
    will focus on the methods that are essential for every Linux engineer to be aware
    of when working inside a shell environment. The skill set that you will gain will
    foster even more confidence as you progress in your path to certification.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将在shell环境的背景下研究进程。特别是，我们将研究一种管理进程的技术。将涵盖一些流行的命令，如`top`，`service`和`systemctl`，用于识别和管理进程。下一章将简洁明了，我们将专注于在shell环境中工作时每个Linux工程师都应该了解的方法。您将获得的技能将在您迈向认证之路上增加更多的信心。
- en: Questions
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which of the following directories is the `root` directory?
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个目录是`root`目录？
- en: A. `/root/`
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: A. `/root/`
- en: B. `/root`
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: B. `/root`
- en: C. `/home/root`
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: C. `/home/root`
- en: D. `/`
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: D. `/`
- en: Which of the following commands is used to change to another directory?
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个命令用于切换到另一个目录？
- en: A. `pwd`
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: A. `pwd`
- en: B. `chage`
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: B. `chage`
- en: C. `cd`
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: C. `cd`
- en: D. `change dir`
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: D. `change dir`
- en: Which of the following commands will print the current working directory?
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个命令将打印当前工作目录？
- en: A. `print dir`
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: A. `print dir`
- en: B. `pwd`
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: B. `pwd`
- en: C. `display`
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: C. `display`
- en: D. `cd`
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: D. `cd`
- en: Which of the following commands is used to print the content of a directory?
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个命令用于打印目录的内容？
- en: A. `ls`
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: A. `ls`
- en: B. `which`
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: B. `which`
- en: C. `whereis`
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: C. `whereis`
- en: D. `cat`
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: D. `cat`
- en: Which of the following options can be used to display file and directory permissions,
    using the `ls` command?
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个选项可以用于使用`ls`命令显示文件和目录的权限？
- en: A. `-r`
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: A. `-r`
- en: B. `-b`
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: B. `-b`
- en: C. `-a`
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: C. `-a`
- en: D. `-l`
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: D. `-l`
- en: Which of the following options can be used to display hidden files and directories,
    with the `ls` command?
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个选项可以用于使用`ls`命令显示隐藏文件和目录？
- en: A. `-l`
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: A. `-l`
- en: B. `-b`
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: B. `-b`
- en: C. `-a`
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: C. `-a`
- en: D. `-u`
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: D. `-u`
- en: Which of the following commands is used to remove a directory, even when it's
    not empty?
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个命令用于删除一个目录，即使它不是空的？
- en: A. `rmdir`
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: A. `rmdir`
- en: B. `rm`
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: B. `rm`
- en: C. `remove`
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: C. `remove`
- en: D. `mv`
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: D. `mv`
- en: Which of the following options are used to find and remove empty files and directories,
    with the `find` command?
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个选项用于查找并删除空文件和目录，使用`find`命令？
- en: A. `empty -remove`
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: A. `empty -remove`
- en: B. `-empty -clean`
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: B. `-empty -clean`
- en: C. `-empty -delete`
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: C. `-empty -delete`
- en: D. `-empty -cycle`
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: D. `-empty -cycle`
- en: Which of the following commands is used to update the database that the `locate`
    command uses?
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个命令用于更新`locate`命令使用的数据库？
- en: A. `updatelocate`
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: A. `updatelocate`
- en: B. `updatedatabase`
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: B. `updatedatabase`
- en: C. `locateupdate`
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: C. `locateupdate`
- en: D. `updatedb`
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: D. `updatedb`
- en: Which of the following commands displays the output of a command and simultaneously
    saves the results to a file?
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个命令显示命令的输出并同时将结果保存到文件中？
- en: A. `less`
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: A. `less`
- en: B. `more`
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: B. `more`
- en: C. `wc`
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: C. `wc`
- en: D. `tee`
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: D. `tee`
- en: Further reading
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: You can get more information about various distributions about files manipulation
    at: [https://unix.stackexchange.com](https://unix.stackexchange.com)
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在以下网站获取有关文件操作的各种发行版的更多信息：[https://unix.stackexchange.com](https://unix.stackexchange.com)
- en: For a lot of useful tips and best practices from users in the Linux community,
    refer to: [https://journalxtras.com](https://journalxtras.com)
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要获取来自Linux社区用户的许多有用的技巧和最佳实践，请参阅：[https://journalxtras.com](https://journalxtras.com)
- en: For general information that relates to various commands that work on both CentOS
    and Ubuntu, and for the ability to post your questions for other community members
    to respond to, refer to [https://www.linuxquestions.org](https://www.linuxquestions.org)
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关适用于CentOS和Ubuntu的各种命令的一般信息，以及发布问题供其他社区成员回答的能力，请参考[https://www.linuxquestions.org](https://www.linuxquestions.org)。
