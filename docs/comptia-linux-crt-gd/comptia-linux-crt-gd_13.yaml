- en: Automating Tasks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化任务
- en: In the previous chapter, we covered a wide array of techniques for managing
    user and group accounts. First, we investigated the various directories from which
    the new user's home directories are populated. Next, we dealt with user account
    creation. Also, we looked at the various configuration files where the user passwords
    are kept. Finally, our focus was on the groups. We covered the steps for creating
    a group, and adding, removing, and assigning a password for a group.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们涵盖了管理用户和组帐户的各种技术。首先，我们调查了新用户的主目录来自哪些目录。接下来，我们处理了用户帐户的创建。此外，我们查看了用户密码保存的各种配置文件。最后，我们关注了组。我们介绍了创建组的步骤，以及添加、删除和为组分配密码。
- en: In this chapter, our focus switches to automation, particularly automating tasks.
    We will cover scheduling of tasks using various methods. We often work with various
    tasks on a daily basis, rather than having to run the tasks manually and repetitively
    over a period of time; it's good practice to implement some type of additional
    automation, and we will be looking at permissions regarding execution of tasks.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们的重点转向自动化，特别是自动化任务。我们将涵盖使用各种方法进行任务调度。我们经常在日常工作中处理各种任务，而不是手动和重复地在一段时间内运行任务；实施某种额外的自动化是一个好的实践，我们将关注任务执行权限。
- en: 'In this chapter we will be covering the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: The `at`, `atq`, and `arm` commands
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`at`，`atq`和`arm`命令'
- en: The `crontab` file and `anacron` command
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`crontab`文件和`anacron`命令'
- en: Permissions for tasks using configuration files
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用配置文件进行任务权限
- en: Managing automation using the at, atq, and atrm commands
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`at`，`atq`和`atrm`命令管理自动化
- en: In this section, we will cover some common methods for automating various type
    of tasks within a Linux system. First, we will cover the `at` command. Next, we
    will work with handling queues using the `atq` command. Finally, we will finish
    off this section with the technique used for removing jobs, using the `atrm` command.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍在Linux系统中自动化各种类型任务的常见方法。首先，我们将介绍`at`命令。接下来，我们将使用`atq`命令处理队列。最后，我们将以使用`atrm`命令删除作业的技术结束本节。
- en: The at command
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: at命令
- en: 'The `at` command schedules a task to run at a fixed time; it runs once. You
    can schedule a simple task such as appending some output to a file or as complex
    as backing up a database. The basic syntax for starting the `at` utility is as
    follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`at`命令安排一个任务在固定时间运行；它只运行一次。您可以安排一个简单的任务，比如将一些输出附加到文件，或者像备份数据库这样复杂的任务。启动`at`实用程序的基本语法如下：'
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We can see the `at` command in action using our Fedora 28 system; we simply
    type `at` without specifying any option:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到`at`命令在我们的Fedora 28系统上的运行情况；我们只需输入`at`而不指定任何选项：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Based on the preceding command, without specifying a time, the `at` utility
    will return `Garbled time`. Here is how we specify the time:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的命令，如果不指定时间，`at`实用程序将返回`Garbled time`。这是我们如何指定时间的方法：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Based on the preceding output, as soon as we enter a date (in this case we
    entered a time in the format HH:MM) it launches the `at` utility and we are presented
    with a `warning: commands will be executed using /bin/sh` warning; this tells
    us which shell the `at` utility is going to use when it is executed. From here,
    we can type any command that we would like to run at the specified time. An example
    might be this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '根据前面的输出，一旦输入日期（在这种情况下，我们输入了格式为HH:MM的时间），它就会启动`at`实用程序，并出现`warning: commands
    will be executed using /bin/sh`的警告；这告诉我们`at`实用程序在执行时将使用哪个shell。从这里，我们可以输入任何我们想在指定时间运行的命令。例如：'
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'It may seem that nothing has changed; for the changes to be saved we would
    have to tell the `at` utility that we have finished entering our commands. This
    is done using the *Ctrl* + *D* combination:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来似乎没有什么改变；要保存更改，我们必须告诉`at`实用程序我们已经完成输入命令。这是使用*Ctrl* + *D*组合完成的：
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Based on the preceding output, the `at` utility has scheduled a task to run
    at `18:10` from the present time. Another way to schedule a task with the `at`
    utility is to specify the time in the 12-hour format. Here is how we accomplish
    this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的输出，`at`实用程序已经安排了一个任务在当前时间的`18:10`运行。使用`at`实用程序安排任务的另一种方法是以12小时制指定时间。这是我们如何做到的：
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Awesome! Based on the preceding output, we have specified the time using a
    12-hour format, by tagging on `PM`. This tells the `at` utility to execute the
    job at `9:00 PM` from the current time. Also, we can specify the time using a
    keyword. For instance, we can say `tomorrow`, ` noon tomorrow`,  `next week`, ` next
    Monday`, `fri`, to name a few. Here is how this would look:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！根据前面的输出，我们已经使用12小时制指定了时间，通过添加`PM`。这告诉`at`实用程序在当前时间从`9:00 PM`执行作业。此外，我们还可以使用关键词指定时间。例如，我们可以说`tomorrow`，`noon
    tomorrow`，`next week`，`next Monday`，`fri`等等。这是它的样子：
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Great! Based on the preceding output, the `at` utility has used the current
    date to calculate when it will be executed. Also, `<EOT>` is the result of pressing
    *Ctrl* + *D*. Another way to specify when to run the `at` utility is to use a
    combination of keywords. We could, for example, specify `now + 4 weeks`, `now
    + 6 years`, `now + 25 minutes`, and so on. Here is how this looks:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒！根据前面的输出，`at`实用程序已经使用当前日期来计算何时执行。此外，`<EOT>`是按下*Ctrl* + *D*的结果。指定运行`at`实用程序的另一种方法是使用关键词的组合。例如，我们可以指定`now
    + 4 weeks`，`now + 6 years`，`now + 25 minutes`等等。这是它的样子：
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Excellent! Based on the preceding output, we can see that the `at` utility
    uses the current date and time to base its calculations. Also, we can specify
    the year to see its calculation too:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！根据前面的输出，我们可以看到`at`实用程序使用当前日期和时间进行计算。此外，我们还可以指定年份来查看其计算：
- en: '[PRE8]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Great job! Based on the preceding output, the `at` utility is going to run
    this task 25 years from the present time. We can see a list of some common options
    that can be passed with the `at` utility, we pass the `-help` option:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒！根据前面的输出，`at`实用程序将在当前时间的25年后运行此任务。我们可以看到一些可以与`at`实用程序一起传递的常见选项列表，我们传递`-help`选项：
- en: '[PRE9]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The atq command
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: atq命令
- en: 'Thus far, we have been creating a number of tasks to be executed using the
    `at` utility. It would be nice to keep a track of what is scheduled to run using
    the `at` command; the `atq` command does just that. To see how this works, we
    can run the `atq` command:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在使用`at`实用程序创建一些要执行的任务。跟踪使用`at`命令安排运行的任务将是很好的；`atq`命令正是这样做的。要了解其工作原理，我们可以运行`atq`命令：
- en: '[PRE10]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Based on the preceding output, we have two jobs listed to be run by the `at`
    utility. When we run the `atq` command as the root user, all jobs are listed to
    be run by the `at` command; this is different when we run the `at` command as
    a standard user. Only the user jobs will be listed. Here is how this would look:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的输出，我们列出了两个要由`at`实用程序运行的作业。当我们以root用户身份运行`atq`命令时，所有作业都将由`at`命令列出；当我们以标准用户身份运行`at`命令时，只有用户作业将被列出。这是它的外观：
- en: '[PRE11]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Based on the preceding output, the user is unaware of the jobs that the root
    user has scheduled using the `at` command. Also, we can view the queue using the
    `at` command; we pass the `-l` option:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的输出，用户不知道根用户使用`at`命令安排的作业。此外，我们可以使用`at`命令查看队列；我们传递`-l`选项：
- en: '[PRE12]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Awesome! Based on the preceding command, we can see that the output is identical
    to that of the `atq` command. This is due to the fact that the `-l` option used
    with the `at` command is simply an alias of the `atq` command.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒！根据前面的命令，我们可以看到输出与`atq`命令的输出相同。这是因为`at`命令与`atq`命令一起使用的`-l`选项只是`atq`命令的别名。
- en: The atrm command
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: atrm命令
- en: 'It''s nice to have the ability to schedule jobs to be run using the `at` utility.
    However, we need some form of control over the jobs scheduled. If we''ve decided
    to cancel a job, we can use the `atrm` command. The `atrm` command is used for
    canceling a job before it is executed by the `at` utility. For instance, we schedule
    a reboot using the `at` utility:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`at`实用程序安排运行作业是很好的。但是，我们需要对安排的作业有一定的控制。如果我们决定取消作业，可以使用`atrm`命令。`atrm`命令用于取消`at`实用程序执行之前的作业。例如，我们使用`at`实用程序安排了一次重启：
- en: '[PRE13]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Based on the preceding command, we have specified to reboot the system in five
    minutes using the `at` command. Now if for some reason we want to cancel this
    job, we can use the `atrm` command. We would do this:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的命令，我们已经指定使用`at`命令在五分钟内重新启动系统。现在，如果出于某种原因我们想要取消此作业，我们可以使用`atrm`命令。我们会这样做：
- en: '[PRE14]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Great! Based on the preceding command, we used the `atq` command to list the
    scheduled jobs; we then used the `atrm` command and specified the job ID to remove
    it. Also, we can remove a job using the `at` utility; to do so, we pass the `-r`
    or `-d` option:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 很好！根据前面的命令，我们使用`atq`命令列出了计划的作业；然后我们使用`atrm`命令并指定作业ID来删除它。此外，我们可以使用`at`实用程序删除作业；为此，我们传递`-r`或`-d`选项：
- en: '[PRE15]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Great! Based on the preceding output, we can see that the job with ID `4` was
    removed using the `-r` option of the `at` command. The `-d` option of the `at`
    command works the same way:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 很好！根据前面的输出，我们可以看到使用`at`命令的`-r`选项删除了ID为`4`的作业。`at`命令的`-d`选项的工作方式相同：
- en: '[PRE16]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Managing automation using cron, crontab, and anacron
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用cron、crontab和anacron进行自动化管理
- en: In this section, we will cover some techniques for managing tasks that normally
    require being run more than once. First, we will begin with the various `cron`
    directories. Next, we will work with `crontab`. Finally, we will then cover `anacron`.
    The highlight will the fact that they are not a replacement for each other, but
    rather they play key roles in managing tasks within a Linux system.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍一些管理任务的技术，这些任务通常需要运行多次。首先，我们将从各种`cron`目录开始。接下来，我们将使用`crontab`。最后，我们将介绍`anacron`。重点是它们不是彼此的替代品，而是在Linux系统中管理任务中扮演关键角色。
- en: Cron
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Cron
- en: As we saw earlier, the `at` utility only runs a task once. There are times when
    we need to run a task multiple times. It is cumbersome having to be present to
    type a task with the `at` utility each time we want to execute a given job. For
    instance, backups, this is one of the most common tasks that most Linux admins
    are responsible for carrying out.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前看到的，`at`实用程序只运行一次任务。有时我们需要多次运行任务。每次要执行给定的作业时，必须亲自输入`at`实用程序的任务，这很麻烦。例如，备份，这是大多数Linux管理员负责执行的最常见任务之一。
- en: 'In light of these circumstances, we can use the `cron` utility, more specifically
    the `/etc/cron.*` directories; we place our task, which we would like to be run.
    The jobs could be run hourly, daily, or monthly. Cron uses the `crond` daemon.
    In Ubuntu, the `cron` daemon is called `cron` or `cron.service` , whereas in Fedora
    28, the `cron` daemon is called `crond` or `crond.service`. We can check the status
    of the `cron` daemon on Ubuntu as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于这些情况，我们可以使用`cron`实用程序，更具体地说是`/etc/cron.*`目录；我们放置我们想要运行的任务。作业可以每小时，每天或每月运行。Cron使用`crond`守护程序。在Ubuntu中，`cron`守护程序称为`cron`或`cron.service`，而在Fedora
    28中，`cron`守护程序称为`crond`或`crond.service`。我们可以按以下方式在Ubuntu上检查`cron`守护程序的状态：
- en: '[PRE17]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Based on the preceding output, the `cron` daemon called `cron.service`. Let''s
    check in Fedora 28 for the `cron` daemon:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的输出，`cron`守护程序称为`cron.service`。让我们在Fedora 28中检查`cron`守护程序：
- en: '[PRE18]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Great! As can be seen in Fedora 28, the cron service is called `crond.service`.
    Next, let''s take a look at the `cron` directories:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 很好！如在Fedora 28中所示，cron服务称为`crond.service`。接下来，让我们看看`cron`目录：
- en: '[PRE19]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Based on the preceding output, there are no tasks scheduled to be run every
    hour. However, we will place a number of tasks in the `/etc/cron.daily` directory:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的输出，没有计划每小时运行的任务。但是，我们将在`/etc/cron.daily`目录中放置一些任务：
- en: '[PRE20]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Based on the preceding output, there are a number of tasks, such as `passwd`,
    `dpkg`, `mlocate`, to name a few, which are scheduled to run daily. Likewise,
    we can look inside `/etc/cron.monthly`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的输出，有许多任务，如`passwd`、`dpkg`、`mlocate`等，每天都有安排运行。同样，我们可以查看`/etc/cron.monthly`内部：
- en: '[PRE21]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Awesome! We can take a deeper look at one of the scheduled task. Let''s look
    at the `/etc/cron.daily/passwd` task:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们可以更深入地查看一个已安排的任务。让我们看看`/etc/cron.daily/passwd`任务：
- en: '[PRE22]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Based on the preceding output, we can see the task is written as a script.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的输出，我们可以看到任务被写成脚本。
- en: Crontab
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Crontab
- en: 'As we''ve just seen, we can place our tasks in their respective `/etc/cron.*`
    directory. This then gets executed every hour, day, or monthly. However, we can
    get even more flexibility; instead of placing our scripts in the `/etc/cron.*`
    directory, we can place our script inside `crontab` itself. We can explore the
    `/etc/crontab` file:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们刚才看到的，我们可以将任务放在各自的`/etc/cron.*`目录中。然后每小时、每天或每月执行一次。但是，我们可以获得更灵活性；我们可以将脚本放在`/etc/cron.*`目录中，而不是将脚本放在`crontab`本身中。我们可以查看`/etc/crontab`文件：
- en: '[PRE23]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Excellent! We can see in the preceding output that the scripts we have covered
    are in the last part; they get executed by `crontab`. We can add our own entry
    inside `crontab`. We pass the `-e` option with `crontab`; this means to enter
    edit mode:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们可以看到前面的输出中，我们涵盖的脚本在最后部分；它们由`crontab`执行。我们可以在`crontab`中添加我们自己的条目。我们使用`-e`选项与`crontab`一起，这意味着进入编辑模式：
- en: '[PRE24]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now, we have to specify which editor to use; we will accept the default:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要指定使用哪个编辑器；我们将接受默认值：
- en: '![](img/00147.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00147.jpeg)'
- en: 'Awesome! Based on the preceding screenshot, we have some guidelines on how
    to define an entry. Let''s define our own entry:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！根据前面的截图，我们有一些关于如何定义条目的指导方针。让我们定义自己的条目：
- en: '![](img/00148.jpeg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00148.jpeg)'
- en: 'Based on the preceding screenshot, we have defined our entry to be run every
    half of a minute, every day; the `ls` command will be run against the `/boot`
    directory, and this will then append its output and save it to `/home/philip/Documents/ls_crontab`.
    The syntax for defining the time is as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的截图，我们已经定义了我们的条目，每半分钟运行一次，每天运行一次；`ls`命令将针对`/boot`目录运行，并将其输出追加保存到`/home/philip/Documents/ls_crontab`。定义时间的语法如下：
- en: '[PRE25]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Once we''ve finished creating our entry, we need to write our changes; we''re
    using the nano editor so we press *Ctrl* + *O* to write the changes:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 完成条目创建后，我们需要写入更改；我们使用nano编辑器，所以按下*Ctrl* + *O*来写入更改：
- en: '![](img/00149.jpeg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00149.jpeg)'
- en: 'Now, the `crontab` file will be generated for the user as can be seen as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`crontab`文件将为用户生成，如下所示：
- en: '[PRE26]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Based on the preceding output, we can see our entry at the bottom. Once 30
    minutes have elapsed, our file will be generated, and we can see the output:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的输出，我们可以看到我们的条目在底部。30分钟后，我们的文件将生成，我们可以看到输出：
- en: '[PRE27]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Awesome, we will wait another 30 minutes, and we will see the output appended:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了，我们将再等待30分钟，然后查看追加的输出：
- en: '[PRE28]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Excellent! Note that a standard user would not see the `crontab` job for the
    root user:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！请注意，标准用户看不到root用户的`crontab`作业：
- en: '[PRE29]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'However, the root user can see entries for any user by passing the `-u` option:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，root用户可以通过使用`-u`选项查看任何用户的条目：
- en: '[PRE30]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Awesome!
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！
- en: Anacron
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Anacron
- en: 'Interestingly, Anacron is not meant as a replacement for `cron` , but instead
    it''s meant to be used in scenarios where the environment involves the system
    being off some of the time. Furthermore, Anacron does not expect the system to
    be on at all times. For instance, laptops are shut down from time to time. Another
    distinct feature of Anacron is the fact that the duration is defined in days or
    monthly and not hours or minutes. If you have a job to be executed at a certain
    time and the system is off, rest assured when the system is powered up Anacron
    will execute the job. We can take a look at the `anacrontab` file:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，Anacron并不是作为`cron`的替代品，而是用于系统有时关闭的情况。此外，Anacron并不期望系统一直开启。例如，笔记本电脑会不时关闭。Anacron的另一个显著特点是持续时间以天或月为单位，而不是以小时或分钟为单位。如果有一个工作需要在特定时间执行，而系统关闭了，放心，当系统启动时，Anacron会执行该工作。我们可以查看`anacrontab`文件：
- en: '[PRE31]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Based on the preceding output, we can see some `cron` entries inside the `anacrontab`
    file. We can see that `anacron` compliments `cron` and it does not replace `cron`.
    The way we read an entry in the `anacrontab` file is as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的输出，我们可以看到`anacrontab`文件中有一些`cron`条目。我们可以看到`anacron`是`cron`的补充，而不是替代`cron`。我们读取`anacrontab`文件中的条目的方式如下：
- en: '[PRE32]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We can get information on the jobs in the `/var/spool/anacron` directory:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在`/var/spool/anacron`目录中获取有关作业的信息：
- en: '[PRE33]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Awesome! We can look inside one of these files and we see the last time the
    job was run:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们可以查看其中一个文件，看到作业上次运行的时间：
- en: '[PRE34]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Great! Based on the preceding output, we can see the timestamp when the job
    was executed. To see the jobs which `anacron` is handling in foreground, we can
    use the `-d` option with `anacron`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！根据前面的输出，我们可以看到作业执行的时间戳。要查看`anacron`在前台处理的作业，我们可以使用`anacron`的`-d`选项：
- en: '[PRE35]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Based on the preceding output, currently there are no jobs being executed.
    We can create an entry by editing the `/etc/anacrontab` file:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的输出，当前没有正在执行的作业。我们可以通过编辑`/etc/anacrontab`文件创建一个条目：
- en: '[PRE36]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Based on the preceding output, we now see a new entry for our custom entry.
    We can look inside the file:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的输出，我们现在看到了我们自定义条目的新条目。我们可以查看文件内部：
- en: '[PRE37]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Based on the preceding output, the file is empty because the job has not yet
    been run. We can text for a syntax error in the `anacrontab` file by passing the
    `-T` option with `anacron`:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的输出，文件是空的，因为作业尚未运行。我们可以通过使用`anacron`的`-T`选项在`anacrontab`文件中检查语法错误：
- en: '[PRE38]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Based on the preceding output, no syntax error was found. We can update the
    timestamp for the jobs without running the jobs, by using the `-u` option:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的输出，没有发现语法错误。我们可以使用`-u`选项更新作业的时间戳，而不运行作业：
- en: '[PRE39]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'We didn''t see any output because the timestamps were updated in the background.
    We can add the `-d` option, and we will see what is happening in the foreground:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有看到任何输出，因为时间戳是在后台更新的。我们可以添加`-d`选项，然后我们将看到前台发生的情况：
- en: '[PRE40]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Awesome! We can execute the job immediately by passing the `-f` option with
    `anacron`:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们可以通过使用`anacron`的`-f`选项立即执行作业：
- en: '[PRE41]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Based on the preceding output, anacron is attempting to execute the jobs; however,
    it has to wait until the delay has elapsed for each job. Here is where the power
    of `-n` shines; it will ignore the delay set:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的输出，anacron正在尝试执行作业；但是它必须等待每个作业的延迟时间。这就是`-n`的威力所在；它会忽略设置的延迟：
- en: '[PRE42]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Excellent! Now, we can check the `/home/philip/Documents` for the `ls_anacron`
    file:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！现在，我们可以检查`/home/philip/Documents`中的`ls_anacron`文件：
- en: '[PRE43]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Great! We can look inside the `ls_anacron` file:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！我们可以查看`ls_anacron`文件的内容：
- en: '[PRE44]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Perfect!
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 完美！
- en: Permissions for tasks using configuration files
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用配置文件的任务权限
- en: 'We can restrict access to the `at` and `cron` utilities using `/etc/at.allow`,
    `/etc/at.deny`, `/etc/cron.allow` and `/etc/cron.deny`. If the files don''t exist
    then we can create them; the `/etc/at.allow` and `/etc/cron.allow` files are sufficient.
    For the `/etc/at.allow` file, we do the following:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`/etc/at.allow`、`/etc/at.deny`、`/etc/cron.allow`和`/etc/cron.deny`来限制对`at`和`cron`实用程序的访问。如果这些文件不存在，我们可以创建它们；`/etc/at.allow`和`/etc/cron.allow`文件就足够了。对于`/etc/at.allow`文件，我们执行以下操作：
- en: '[PRE45]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Awesome! Now, only these users will be allowed to execute jobs using `at` or
    `cron`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在，只有这些用户可以使用`at`或`cron`来执行作业。
- en: Summary
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we dealt with automation at the command line. We touched on
    the `at` utility, focusing on creating a job that runs once. Next, our focus was
    the usage of the `atq` utility and how it displays all scheduled jobs that the
    `at` utility will run. Also, we saw how to leverage an option with the `at` utility
    to enable us to view the job queue. Following this, we looked at the `atrm` utility,
    the primary focus being the ability to remove a scheduled job. In addition to
    this, we also saw the possibility of stopping a job by using the `at` command
    and passing an option. We then covered `cron` , focusing on the various `cron`
    directories; each plays a vital role in terms of automating tasks. Next, we worked
    with `crontab`; we saw the breakdown of the syntax, and we then created a custom
    entry in `crontab`. Following this, we worked with `anacron`. We saw the use case
    of `anacron` and how it complements `cron`. We then created our own custom entry
    and executed the jobs in order to gain a better understanding of `anacron`. Finally,
    we looked at restrictions in terms of automation; primarily, we looked at restricting
    access to the `at` and `cron` utilities.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了命令行上的自动化。我们涉及了`at`实用程序，重点是创建一个只运行一次的作业。接下来，我们关注了`atq`实用程序以及它如何显示`at`实用程序将运行的所有预定作业。此外，我们还看到了如何利用`at`实用程序的一个选项来使我们能够查看作业队列。接着，我们看了`atrm`实用程序，主要关注了删除预定作业的能力。除此之外，我们还看到了使用`at`命令和传递选项来停止作业的可能性。然后我们讨论了`cron`，重点是各种`cron`目录；每个目录在自动化任务方面都发挥着重要作用。接下来，我们使用了`crontab`；我们看到了语法的细节，然后在`crontab`中创建了一个自定义条目。在此之后，我们使用了`anacron`。我们看到了`anacron`的用例以及它如何补充`cron`。然后我们创建了我们自己的自定义条目，并执行了作业，以便更好地理解`anacron`。最后，我们看了自动化方面的限制；主要是限制对`at`和`cron`实用程序的访问。
- en: In the next chapter, our focus will be on time management, particularly, maintaining
    the system time and performing logging, both local and remote. The next chapter
    is of utmost importance to anyone working within a networking environment who
    deals with monitoring on a daily basis. I invite you to come and join me for another
    exciting chapter.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们的重点将放在时间管理上，特别是维护系统时间和执行日志记录，包括本地和远程。下一章对于任何在网络环境中工作并且每天都需要进行监视的人来说都是非常重要的。我邀请你来加入我，一起来体验另一个激动人心的章节。
- en: Questions
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What will be the output if no option is passed with the `at` command?
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果在`at`命令中没有传递选项，将会输出什么？
- en: A. Invalid syntax
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: A. 无效的语法
- en: B. Garbled time
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: B. 混乱的时间
- en: C. No output
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: C. 没有输出
- en: D. None of the above
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: D. 以上都不是
- en: Which is a valid `at` command?
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个是有效的`at`命令？
- en: A. at 9:00 AM next next
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: A. 在下下个早上9:00
- en: B. at 9:00 AM tonite tonite
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: B. 在今晚9:00
- en: C. At 9:00 AM next Monday
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: C. 在下周一的早上9:00
- en: D. None of the above
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: D. 以上都不是
- en: Which does `<EOT>` mean in the `at` utility?
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`at`实用程序中，`<EOT>`是什么意思？
- en: A. End of Time
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: A. 时间结束
- en: B. *CTRL*+ *D* was pressed
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: B. 按下了*CTRL*+ *D*
- en: C. *CTRL* + *X *was pressed
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: C. 按下了*CTRL* + *X*
- en: D. None of the above
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: D. 以上都不是
- en: Which option prints a queue using the `at` command?
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个选项使用`at`命令打印队列？
- en: A. `-a`
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: A. `-a`
- en: B. `-c`
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: B. `-c`
- en: C. `-d`
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: C. `-d`
- en: D. `-l`
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: D. `-l`
- en: Which option removes a job using the `at` command?
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个选项使用`at`命令删除作业？
- en: A. `-a`
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: A. `-a`
- en: B. `-c`
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: B. `-c`
- en: C. `-a`
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: C. `-a`
- en: D. `-r`
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: D. `-r`
- en: Which other command can be used to print the job queue created with the `at`
    command?
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`at`命令可以打印创建的作业队列的哪个其他命令？
- en: A. `atrm`
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: A. `atrm`
- en: B. `atc`
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: B. `atc`
- en: C. `atq`
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: C. `atq`
- en: D. `atr`
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: D. `atr`
- en: Which option runs a job every minute using `crontab`?
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个选项可以使用`crontab`每分钟运行一个作业？
- en: A. `1/30 * * * *`
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: A. `1/30 * * * *`
- en: B. `*/20 * * * *`
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: B. `*/20 * * * *`
- en: C. `*****`
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: C. `*****`
- en: D. `****1`
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: D. `****1`
- en: Which option is used to open `crontab` and start making changes?
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个选项用于打开`crontab`并开始进行更改？
- en: A. `-a`
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: A. `-a`
- en: B. `-e`
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: B. `-e`
- en: C.  `-b`
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: C. `-b`
- en: D. `-c`
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: D. `-c`
- en: Which word can represent 7 in anacron?
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个单词可以代表anacron中的7？
- en: A. `@daily`
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: A. `@daily`
- en: B. `@monthly`
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: B. `@monthly`
- en: C. `@weekly`
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: C. `@weekly`
- en: D. `@sunday`
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: D. `@sunday`
- en: Which option forces `anacron` to run jobs before their schedule?
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个选项强制`anacron`在其计划之前运行作业？
- en: A. `-f`
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: A. `-f`
- en: B. `-e`
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: B. `-e`
- en: C. `-c`
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: C. `-c`
- en: D. `-a`
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: D. `-a`
- en: Further reading
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: This site gives useful information about the `at` utility: [https://linuxconfig.org](https://linuxconfig.org)
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个网站提供了关于`at`实用程序的有用信息：[https://linuxconfig.org](https://linuxconfig.org)
- en: This site gives useful information about `cron` : [https://code.tutsplus.com](https://code.tutsplus.com)
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个网站提供了关于`cron`的有用信息：[https://code.tutsplus.com](https://code.tutsplus.com)
- en: This site gives useful information about `anacron` : [https://linux.101hacks.com](https://linux.101hacks.com)
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该网站提供关于`anacron`的有用信息：[https://linux.101hacks.com](https://linux.101hacks.com)
