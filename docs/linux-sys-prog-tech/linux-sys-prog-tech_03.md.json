["```\n    #include <stdio.h>\n    #include <math.h>\n    int main(void)\n    {\n    \u00a0\u00a0\u00a0\u00a0int years = 15; /* The number of years you will \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0* keep the money in the bank \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0* account */\n    \u00a0\u00a0\u00a0\u00a0int savings = 99000; /* The inital amount */\n    \u00a0\u00a0\u00a0\u00a0float interest = 1.5; /* The interest in % */\n    \u00a0\u00a0\u00a0\u00a0printf(\"The total savings after %d years \" \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"is %.2f\\n\", years, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0savings * pow(1+(interest/100), years));\n    \u00a0\u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```\n    $> gcc -lm interest.c -o interest\n    ```", "```\n    $> ./interest\n    The total savings after 15 years is 123772.95\n    ```", "```\n    int isprime(long int number);\n    ```", "```\n    int isprime(long int number)\n    {\n    \u00a0\u00a0\u00a0long int j;\n    \u00a0\u00a0\u00a0int prime = 1;\n\n    \u00a0\u00a0\u00a0/* Test if the number is divisible, starting \n    \u00a0\u00a0\u00a0\u00a0* from 2 */\n    \u00a0\u00a0\u00a0for(j=2; j<number; j++)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* Use the modulo operator to test if the \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0* number is evenly divisible, i.e., a \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0* prime number */\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(number%j == 0)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0prime = 0;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0if(prime == 1)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 0;\n    \u00a0\u00a0\u00a0}\n    }\n    ```", "```\n    $> gcc -Wall -Wextra -pedantic -fPIC -c prime.c\n    $> ls -l prime.o \n    -rw-r--r-- 1 jake jake 1296 nov 28 19:18 prime.o\n    ```", "```\n    $> gcc -shared -Wl,-soname,libprime.so -o \\\n    > libprime.so prime.o\n    ```", "```\n    #include <stdio.h>\n    #include <stdlib.h>\n    #include <string.h>\n    #include \"prime.h\"\n    int main(int argc, char *argv[])\n    {\n    \u00a0\u00a0\u00a0long int num;\n    \u00a0\u00a0\u00a0/* Only one argument is accepted */\n    \u00a0\u00a0\u00a0if (argc != 2)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fprintf(stderr, \"Usage: %s number\\n\", \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0argv[0]);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0/* Only numbers 0-9 are accepted */\n    \u00a0\u00a0\u00a0if ( strspn(argv[1], \"0123456789\") != \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0strlen(argv[1]) )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fprintf(stderr, \"Only numeric values are \"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"accepted\\n\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0num = atol(argv[1]); /* String to long */\n    \u00a0\u00a0\u00a0if (isprime(num)) /* Check if num is a prime */\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"%ld is a prime\\n\", num);\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"%ld is not a prime\\n\", num);\n    \u00a0\u00a0\u00a0}\n\n    \u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```\n    $> gcc -L${PWD} -lprime is-it-a-prime.c \\\n    > -o is-it-a-prime\n    ```", "```\n    $> export LD_LIBRARY_PATH=${PWD}:${LD_LIBRARY_PATH}\n    ```", "```\n    ldd program. If we examine the is-it-a-prime program, we'll see that it depends upon our libprime.so library. There are also other dependencies, such as libc.so.6, which is the standard C library:\n\n    ```", "```\n\n    ```", "```\n    #include <stdio.h>\n    int main(void)\n    {\n    \u00a0\u00a0\u00a0\u00a0printf(\"Hello, world\\n\");\n    }\n    ```", "```\n    $> gcc -std=c89 no-return.c -o no-return\n    ```", "```\n    $> ./no-return \n    Hello, world\n    $> echo $?\n    13\n    ```", "```\n    $> gcc -Wall -Wextra -pedantic -std=c89 \\\n    > no-return.c -o no-return\n    no-return.c: In function 'main':\n    no-return.c:6:1: warning: control reaches end of non-void function [-Wreturn-type]\n     }\n     ^\n    ```", "```\n    $> gcc -Wall -Wextra -pedantic -std=c99 \\\n    > no-return.c -o no-return\n    ```", "```\n    $> ./no-return \n    Hello, world\n    $> echo $?\n    0\n    ```", "```\n    #include <stdio.h>\n    int main(void)\n    {\n    \u00a0\u00a0\u00a0\u00a0for (int i = 10; i>0; i--)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"%d\\n\", i);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```\n    $> gcc -std=c99 for-test.c -o for-test\n    ```", "```\n    $> ./for-test \n    10\n    9\n    8\n    7\n    6\n    5\n    4\n    3\n    2\n    1\n    ```", "```\n    $> gcc -std=c89 for-test.c -o for-test\n    for-test.c: In function 'main':\n    for-test.c:5:5: error: 'for' loop initial declarations are only allowed in C99 or C11 mode\n    \u00a0\u00a0\u00a0\u00a0\u00a0for (int i = 10; i>0; i--)\n    \u00a0\u00a0\u00a0\u00a0\u00a0^~~\n    ```", "```\n    #include <stdio.h>\n    int main(void)\n    {\n    \u00a0\u00a0\u00a0\u00a0// A C99 comment\n    \u00a0\u00a0\u00a0\u00a0printf(\"hello, world\\n\");\n    \u00a0\u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```\n    $> gcc -std=c99 comments.c -o comments\n    ```", "```\n    $> gcc -std=c89 comments.c -o comments\n    comments.c: In function 'main':\n    comments.c:5:5: error: C++ style comments are not allowed in ISO C90\n    \u00a0\u00a0\u00a0\u00a0\u00a0// A C99 comment\n    \u00a0\u00a0\u00a0\u00a0\u00a0^\n    comments.c:5:5: error: (this will be reported only once per input file)\n    ```", "```\n    #include <unistd.h>\n    int main(void)\n    {\n    \u00a0\u00a0\u00a0\u00a0write(1, \"hello, world\\n\", 13);\n    \u00a0\u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```\n    $> gcc -Wall -Wextra -pedantic -std=c99 \\\n    > sys-write.c -o sys-write\n    ```", "```\n    $> ./sys-write \n    hello, world\n    ```", "```\n    #include <stdio.h>\n    int main(void)\n    {\n    \u00a0\u00a0\u00a0\u00a0fputs(\"hello, world\\n\", stdout);\n    \u00a0\u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```\n    $> gcc -Wall -Wextra -pedantic -std=c99 \\\n    > write-chars.c -o write-chars\n    ```", "```\n    $> ./write-chars \n    hello, world\n    ```", "```\n    #include <stdio.h>\n    #include <unistd.h>\n    #include <sys/types.h>\n    #include <sys/sysinfo.h>\n    int main(void)\n    {\n    \u00a0\u00a0\u00a0char cwd[100] = { 0 }; /* for current dir */\n    \u00a0\u00a0\u00a0struct sysinfo si; /* for system information */\n    \u00a0\u00a0\u00a0getcwd(cwd, 100); /* get current working dir */\n    \u00a0\u00a0\u00a0sysinfo(&si); /* get system information \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0* (linux only) */\n\n    \u00a0\u00a0\u00a0printf(\"Your user ID is %d\\n\", getuid());\n    \u00a0\u00a0\u00a0printf(\"Your effective user ID is %d\\n\", \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0geteuid());\n    \u00a0\u00a0\u00a0printf(\"Your current working directory is %s\\n\", \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cwd);\n    \u00a0\u00a0\u00a0printf(\"Your machine has %ld megabytes of \" \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"total RAM\\n\", si.totalram / 1024\u00a0\u00a0/ 1024);\n    \u00a0\u00a0\u00a0printf(\"Your machine has %ld megabytes of \"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"free RAM\\n\", si.freeram / 1024 / 1024);\n    \u00a0\u00a0\u00a0printf(\"Currently, there are %d processes \"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"running\\n\", si.procs);\n    \u00a0\u00a0\u00a0printf(\"This process ID is %d\\n\", getpid());\n    \u00a0\u00a0\u00a0printf(\"The parent process ID is %d\\n\", \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0getppid());\n    \u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```\n    $> gcc -Wall -Wextra -pedantic -std=c99 my-sys.c -o \\\n    > my-sys\n    ```", "```\n    $> ./my-sys \n    Your user ID is 1000\n    Your effective user ID is 1000\n    Your current working directory is /mnt/localnas_disk2/linux-sys/ch3/code\n    Your machine has 31033 megabytes of total RAM\n    Your machine has 6117 megabytes of free RAM\n    Currently, there are 2496 processes running\n    This process ID is 30421\n    The parent process ID is 11101\n    ```", "```\n    $> man 2 sysinfo\n    ```", "```\n    #include <sys/sysinfo.h>\n    int sysinfo(struct sysinfo *info);\n    ```", "```\n    sys/types.h and unistd.h. We also see that the function returns a value of type pid_t.\n    ```", "```\n    pid_t data type is used for *process IDs* and *process group IDs*, but that doesn't tell us what kind of data type it actually is. So, let's continue to scroll down until we find a subheading saying blksize_t, pid_t, and ssize_t shall be signed integer types.\" Mission accomplished\u2014now, we know that it's a signed integer type and that we can use the %d formatting operator to print it.\n    ```", "```\n    $> man unistd.h\n    ```", "```\n    #include <string.h>\n    #include <stdio.h>\n    int main(void)\n    {\n    \u00a0\u00a0\u00a0\u00a0char a[] = \"Hello\";\n    \u00a0\u00a0\u00a0\u00a0char *b;\n    \u00a0\u00a0\u00a0\u00a0b = strdup(a);\n    \u00a0\u00a0\u00a0\u00a0printf(\"b = %s\\n\", b);\n    \u00a0\u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```\n    $> gcc -Wall -Wextra -pedantic -std=c99 \\\n    > str-posix.c -o str-posix\n    str-posix.c: In function 'main':\n    str-posix.c:8:9: warning: implicit declaration of function 'strdup'; did you mean 'strcmp'? [-Wimplicit-function-declaration]\n    \u00a0\u00a0\u00a0\u00a0\u00a0b = strdup(a);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0^~~~~~\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0strcmp\n    str-posix.c:8:7: warning: assignment to 'char *' from 'int' makes pointer from integer without a cast [-Wint-conversion]\n    \u00a0\u00a0\u00a0\u00a0\u00a0b = strdup(a);\n    ```", "```\n    $> ./str-posix \n    Segmentation fault\n    ```", "```\n    $> ./str-posix\n    b = Hello\n    ```", "```\n    #define _XOPEN_SOURCE 700\n    ```", "```\n    $> gcc -Wall -Wextra -pedantic -std=c99 \\\n    > str-posix.c -o str-posix\n    ```", "```\n    $> ./str-posix \n    b = Hello\n    ```", "```\n    $> gcc -Wall -Wextra -pedantic -std=c99 \\\n    > -D_XOPEN_SOURCE=700 str-posix.c -o str-posix\n    ```", "```\n    $> ./str-posix \n    b = Hello\n    ```", "```\n    $> gcc -Wall -Wextra -pedantic -std=c99 \\\n    > -D_POSIX_C_SOURCE=200809L str-posix.c -o str-posix\n    ```", "```\n    $> gcc -Wall -Wextra -pedantic str-posix.c \\ \n    > -o str-posix\n    ```", "```\n    $> ./str-posix \n    b = Hello\n    ```", "```\n    #include <stdio.h>\n    int main(void)\n    {\n    \u00a0\u00a0\u00a0#ifdef __STDC_VERSION__\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"Standard C version: %ld\\n\", \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__STDC_VERSION__);\n    \u00a0\u00a0\u00a0#endif\n    \u00a0\u00a0\u00a0#ifdef _XOPEN_SOURCE\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"XOPEN_SOURCE: %d\\n\", \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_XOPEN_SOURCE);\n    \u00a0\u00a0\u00a0#endif\n    \u00a0\u00a0\u00a0#ifdef _POSIX_C_SOURCE\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"POSIX_C_SOURCE: %ld\\n\", \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_POSIX_C_SOURCE);\n    \u00a0\u00a0\u00a0#endif\n    \u00a0\u00a0\u00a0#ifdef _GNU_SOURCE\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"GNU_SOURCE: %d\\n\", \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_GNU_SOURCE);\n    \u00a0\u00a0\u00a0#endif\n    \u00a0\u00a0\u00a0#ifdef _BSD_SOURCE\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"BSD_SOURCE: %d\\n\", _BSD_SOURCE);\n    \u00a0\u00a0\u00a0#endif\n    \u00a0\u00a0\u00a0#ifdef _DEFAULT_SOURCE\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"DEFAULT_SOURCE: %d\\n\", \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_DEFAULT_SOURCE);\n    \u00a0\u00a0\u00a0#endif\n    \u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```\n    $> gcc -Wall -Wextra -pedantic which-c.c -o which-c\n    $> ./which-c \n    Standard C version: 201710\n    POSIX_C_SOURCE: 200809\n    DEFAULT_SOURCE: 1\n    ```", "```\n    $> gcc -Wall -Wextra -pedantic -std=c99 \\\n    > which-c.c -o which-c\n    $> ./which-c \n    Standard C version: 199901\n    ```", "```\n    $> gcc -Wall -Wextra -pedantic -std=c99 \\\n    > -D_XOPEN_SOURCE=600 which-c.c -o which-c\n    $> ./which-c \n    Standard C version: 199901\n    XOPEN_SOURCE: 600\n    POSIX_C_SOURCE: 200112\n    ```", "```\n#ifdef _XOPEN_SOURCE\n```", "```\n\u00a0\u00a0\u00a0\u00a0printf(\"XOPEN_SOURCE: %d\\n\", _XOPEN_SOURCE);\n```", "```\n#endif\n```", "```\n    #include \"cube.h\"\n    #define NUMBER 4\n    int main(void)\n    {\n    \u00a0\u00a0\u00a0\u00a0return cube(NUMBER);\n    }\n    ```", "```\n    int cube(int n)\n    {\n    \u00a0\u00a0\u00a0\u00a0return n*n*n;\n    }\n    ```", "```\n    int cube(int n);\n    ```", "```\n    $> gcc -Wall -Wextra -pedantic -std=c99 \\\n    > cube-prog.c cube-func.c -o cube\n    ```", "```\n    $> ./cube \n    $> echo $?\n    64\n    ```", "```\n    $> rm cube\n    ```", "```\n    $> gcc -E -P cube-prog.c -o cube-prog.i\n    $> gcc -E -P cube-func.c -o cube-func.i\n    ```", "```\n    cube-func.i. Nothing has changed here:\n\n    ```", "```\n\n    ```", "```\n    $> gcc -S cube-prog.i -o cube-prog.s\n    $> gcc -S cube-func.i -o cube-func.s\n    ```", "```\n    \t.file\t\"cube-prog.i\"\n    \t.text\n    \t.globl\tmain\n    \t.type\tmain, @function\n    main:\n    .LFB0:\n    \t.cfi_startproc\n    \tpushq\t%rbp\n    \t.cfi_def_cfa_offset 16\n    \t.cfi_offset 6, -16\n    \tmovq\t%rsp, %rbp\n    \t.cfi_def_cfa_register 6\n    \tmovl\t$4, %edi\n    \tcall\tcube@PLT\n    \tpopq\t%rbp\n    \t.cfi_def_cfa 7, 8\n    \tret\n    \t.cfi_endproc\n    .LFE0:\n    \t.size\tmain, .-main\n    \t.ident\t\"GCC: (Debian 8.3.0-6) 8.3.0\"\n    \t.section\t.note.GNU-stack,\"\",@progbits\n    ```", "```\n    \t.file\t\"cube-func.i\"\n    \t.text\n    \t.globl\tcube\n    \t.type\tcube, @function\n    cube:\n    .LFB0:\n    \t.cfi_startproc\n    \tpushq\t%rbp\n    \t.cfi_def_cfa_offset 16\n    \t.cfi_offset 6, -16\n    \tmovq\t%rsp, %rbp\n    \t.cfi_def_cfa_register 6\n    \tmovl\t%edi, -4(%rbp)\n    \tmovl\t-4(%rbp), %eax\n    \timull\t-4(%rbp), %eax\n    \timull\t-4(%rbp), %eax\n    \tpopq\t%rbp\n    \t.cfi_def_cfa 7, 8\n    \tret\n    \t.cfi_endproc\n    .LFE0:\n    \t.size\tcube, .-cube\n    \t.ident\t\"GCC: (Debian 8.3.0-6) 8.3.0\"\n    \t.section\t.note.GNU-stack,\"\",@progbits\n    ```", "```\n    $> gcc -c cube-prog.s -o cube-prog.o\n    $> gcc -c cube-func.s -o cube-func.o\n    ```", "```\n    $> file cube-prog.o cube-prog.o: ELF 64-bit LSB relocatable, x86-64, version 1 (SYSV), not stripped $> file cube-func.o cube-func.o: ELF 64-bit LSB relocatable, x86-64, version 1 (SYSV), not stripped\n    ```", "```\n    $> gcc cube-prog.o cube-func.o -o cube\n    ```", "```\n    $> file cube\n    cube: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=53054824b4a495b7941cbbc95b550e7670481943, not stripped\n    ```", "```\n    $> ./cube \n    $> echo $?\n    64\n    ```", "```\n    #include <stdio.h>\n    #include <stdlib.h>\n    #include <string.h>\n    #define PI 3.14159\n    int main(void)\n    {\n    \u00a0\u00a0\u00a0char radius[20] = { 0 };\n    \u00a0\u00a0\u00a0while(fgets(radius, sizeof(radius), stdin) \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0!= NULL)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* Check if radius is numeric \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0* (and do conversion) */\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if( strspn(radius,\"0123456789.\\n\") == \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0strlen(radius) )\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"%.5f\\n\", PI*(atof(radius)*2) );\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* If radius is NOT numeric, print error \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0* and return */\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fprintf(stderr, \"Found non-numeric \"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"value\\n\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```\n    $> make circumference\n    cc\u00a0\u00a0\u00a0\u00a0\u00a0circumference.c\u00a0\u00a0\u00a0-o circumference\n    ```", "```\n    $> make circumference\n    make: 'circumference' is up to date\n    ```", "```\n    #define PI 3.14159265\n    ```", "```\n    $> make circumference\n    cc\u00a0\u00a0\u00a0\u00a0\u00a0circumference.c\u00a0\u00a0\u00a0-o circumference\n    ```", "```\n    $> ./circumference \n    5\n    31.41593\n    10\n    62.83185\n    103.3\n    649.05304\n    *Ctrl*+*D*\n    ```", "```\n    CC=gcc\n    CFLAGS=-Wall -Wextra -pedantic -std=c99\n    ```", "```\n    $> make circumference\n    gcc -Wall -Wextra -pedantic -std=c99\u00a0\u00a0\u00a0\u00a0circumference.c\u00a0\u00a0\u00a0-o circumference\n    ```", "```\n    $> ./circumference \n    5\n    31.41590\n    10\n    62.83180\n    15\n    94.24770\n    *Ctrl*+*D*\n    ```", "```\n    CC=gcc\n    CFLAGS=-Wall -Wextra -pedantic -std=c99\n    cube: cube.h cube-prog.c cube-func.c\n    \u00a0\u00a0\u00a0\u00a0$(CC) $(CFLAGS) -o cube cube-prog.c cube-func.c\n    ```", "```\n    $> make\n    gcc -Wall -Wextra -pedantic -std=c99 -o cube cube-prog.c cube-func.c\n    ```", "```\n    $> ./cube \n    $> echo $?\n    64\n    ```", "```\n    $> make\n    make: 'cube' is up to date.\n    ```", "```\n    #define NUMBER 2\n    ```", "```\n    $> make\n    gcc -Wall -Wextra -pedantic -std=c99 -o cube cube-prog.c cube-func.c\n    ```", "```\n    $> ./cube \n    $> echo $?\n    8\n    ```", "```\n    $> rm cube\n    ```", "```\n    $> mv cube.h cube.p\n    ```", "```\n    $> make\n    make: *** No rule to make target 'cube.h', needed by 'cube'.\u00a0\u00a0Stop.\n    ```", "```\n$(CC) $(CFLAGS) -o cube cube-prog.c cube-func.c\n```", "```\n    #define _XOPEN_SOURCE 700\n    #include <stdio.h>\n    #include <unistd.h>\n    #include \"area.h\"\n    int main(int argc, char *argv[])\n    {\n    \u00a0\u00a0\u00a0\u00a0int opt;\n    \u00a0\u00a0\u00a0\u00a0/* Sanity check number of options */\n    \u00a0\u00a0\u00a0\u00a0if (argc != 2)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printHelp(stderr, argv[0]);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0/* Parse command-line options */\u00a0\u00a0\u00a0\u00a0\n    \u00a0\u00a0\u00a0\u00a0while ((opt = getopt(argc, argv, \"crth\")) != -1)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0switch(opt)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case 'c':\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (circle() == -1)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printHelp(stderr, argv[0]);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case 'r':\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (rectangle() == -1)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printHelp(stderr, argv[0]);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case 't':\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (triangle() == -1)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printHelp(stderr, argv[0]);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case 'h':\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printHelp(stdout, argv[0]);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 0;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0default:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printHelp(stderr, argv[0]);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    ```", "```\n    void printHelp(FILE *stream, char progname[]);\n    int circle(void);\n    int rectangle(void);\n    int triangle(void);\n    ```", "```\n    #include <stdio.h>void printHelp(FILE *stream, char progname[ ])\n    {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fprintf(stream, \"\\nUsage: %s [-c] [-t] [-r] \"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"[-h]\\n\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"-c calculates the area of a circle\\n\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"-t calculates the area of a triangle\\n\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"-r calculates the area of a rectangle\\n\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"-h shows this help\\n\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Example: %s -t\\n\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Enter the height and width of the \"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"triangle: 5 9\\n\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"22.500\\n\", progname, progname);\n    }\n    ```", "```\n    #define _XOPEN_SOURCE 700\n    #include <math.h>\n    #include <stdio.h>\n    int circle(void)\n    {\n    \u00a0\u00a0\u00a0\u00a0float radius;\n    \u00a0\u00a0\u00a0\u00a0printf(\"Enter the radius of the circle: \");\n    \u00a0\u00a0\u00a0\u00a0if (scanf(\"%f\", &radius))\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"%.3f\\n\", M_PI*pow(radius, 2));\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return -1;\n    \u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\n    }\n    ```", "```\n    #include <stdio.h>\n    int rectangle(void)\n    {\n    \u00a0\u00a0\u00a0\u00a0float length, width;\n    \u00a0\u00a0\u00a0\u00a0printf(\"Enter the length and width of \"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"the rectangle: \");\n    \u00a0\u00a0\u00a0\u00a0if (scanf(\"%f %f\", &length, &width))\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"%.3f\\n\", length*width);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return -1;\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```\n    #include <stdio.h>\n    int triangle(void)\n    {\n    \u00a0\u00a0\u00a0\u00a0float height, width;\n    \u00a0\u00a0\u00a0\u00a0printf(\"Enter the height and width of \"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"the triangle: \");\n    \u00a0\u00a0\u00a0\u00a0if (scanf(\"%f %f\", &height, &width))\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"%.3f\\n\", height*width/2);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return -1;\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```\n    CC=gcc\n    CFLAGS=-std=c99 -Wall -Wextra -pedantic\n    LIBS=-lm\n    OBJS=area.o help.o rectangle.o triangle.o circle.o\n    DEPS=area.h\n    bindir=/usr/local/bin\n    area: $(OBJS)\n    \t$(CC) -o area $(OBJS) $(LIBS)\n    area.o: $(DEPS)\n    clean:\n    \trm area $(OBJS)\n    install: area\n    \tinstall -g root -o root area $(bindir)/area\n    uninstall: $(bindir)/area\n    \trm $(bindir)/area\n    ```", "```\n    $> make\n    gcc -std=c99 -Wall -Wextra -pedantic\u00a0\u00a0\u00a0-c -o area.o area.c\n    gcc -std=c99 -Wall -Wextra -pedantic\u00a0\u00a0\u00a0-c -o help.o help.c\n    gcc -std=c99 -Wall -Wextra -pedantic\u00a0\u00a0\u00a0-c -o rectangle.o rectangle.c\n    gcc -std=c99 -Wall -Wextra -pedantic\u00a0\u00a0\u00a0-c -o triangle.o triangle.c\n    gcc -std=c99 -Wall -Wextra -pedantic\u00a0\u00a0\u00a0-c -o circle.o circle.c\n    gcc -o area area.o help.o rectangle.o triangle.o circle.o -lm\n    ```", "```\n    $> ./area -c\n    Enter the radius of the circle: 9\n    254.469\n    $> ./area -t\n    Enter the height and width of the triangle: 9 4\n    18.000\n    $> ./area -r\n    Enter the length and width of the rectangle: 5.5 4.9\n    26.950\n    $> ./area -r\n    Enter the length and width of the rectangle: abcde \n    Usage: ./area [-c] [-t] [-r] [-h]\n    -c calculates the area of a circle\n    -t calculates the area of a triangle\n    -r calculates the area of a rectangle\n    -h shows this help\n    Example: ./area -t\n    Enter the height and width of the triangle: 5 9\n    22.500\n    ```", "```\n    $> touch circle.c\n    ```", "```\n    $> make\n    gcc -std=c99 -Wall -Wextra -pedantic\u00a0\u00a0\u00a0-c -o circle.o circle.c\n    gcc -o area area.o help.o rectangle.o triangle.o circle.o -lm\n    ```", "```\n    $> sudo make install\n    install -g root -o root area /usr/local/bin/area\n    ```", "```\n    $> sudo make uninstall\n    rm /usr/local/bin/area\n    ```", "```\n    $> make clean\n    rm area area.o help.o rectangle.o triangle.o circle.o\n    ```", "```\nOBJS=area.o help.o rectangle.o triangle.o circle.o\n```"]