["```\n$> git clone https://github.com/PacktPublishing/Linux-System-Programming-Techniques.git\n```", "```\n    $> sudo apt update\n    ```", "```\n    $> sudo apt install git\n    ```", "```\n    $> sudo dnf install git\n    ```", "```\n    $> sudo apt-get update\n    ```", "```\n    $> sudo apt-get install build-essential\n    ```", "```\n    $> sudo dnf group install 'Development Tools'\n    ```", "```\n    $> gcc --version\n    gcc (Debian 8.3.0-6) 8.3.0\n    Copyright (C) 2018 Free Software Foundation, Inc.\n    This is free software; see the source for copying conditions.\u00a0\u00a0There is NO\n    warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n    $> make --version\n    GNU Make 4.2.1\n    Built for x86_64-pc-linux-gnu\n    Copyright (C) 1988-2016 Free Software Foundation, Inc.\n    License GPLv3+: GNU GPL version 3 or later http://gnu.org/licenses/gpl.html\n    This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law.\n    ```", "```\n    #include <stdio.h>\n    int main(void)\n    {\n    \u00a0\u00a0\u00a0\u00a0printf(\"Hello, world!\\n\");\n    \u00a0\u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```\n    $> gcc first-example.c\n    ```", "```\n    $> ./a.out\n    Hello, world!\n    ```", "```\n    $> gcc first-example.c -o first-example\n    ```", "```\n    $> ./first-example\n    Hello world!\n    ```", "```\n    $> rm first-example\n    $> make first-example\n    cc\u00a0\u00a0\u00a0\u00a0\u00a0first-example.c\u00a0\u00a0\u00a0-o first-example\n    ```", "```\n    $> ./first-example\n    Hello, world!\n    ```", "```\n    $> sudo apt-get update\n    ```", "```\n    $> sudo apt-get install gdb valgrind\n    ```", "```\n    $> sudo dnf install gdb valgrind\n    ```", "```\n    $> gdb --version\n    GNU gdb (Debian 8.2.1-2+b3) 8.2.1\n    Copyright (C) 2018 Free Software Foundation, Inc.\n    License GPLv3+: GNU GPL version 3 or later http://gnu.org/licenses/gpl.html\n    This is free software: you are free to change and redistribute it.\n    There is NO WARRANTY, to the extent permitted by law.\n    $> valgrind --version\n    valgrind-3.14.0\n    ```", "```\n    #include <stdio.h>\n    #include <stdlib.h>\n    void printhelp(char progname[]);\n    int main(int argc, char *argv[])\n    {\n    \u00a0\u00a0\u00a0\u00a0int i;\n    \u00a0\u00a0\u00a0\u00a0int sum = 0;\n    \u00a0\u00a0\u00a0\u00a0/* Simple sanity check */\n    \u00a0\u00a0\u00a0\u00a0if (argc == 1)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printhelp(argv[0]);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0for (i=1; i<argc; i++)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sum = sum + atoi(argv[i]);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0printf(\"Total sum: %i\\n\", sum);\n    \u00a0\u00a0\u00a0\u00a0return 0;\n    }\n    void printhelp(char progname[])\n    {\n    \u00a0\u00a0\u00a0\u00a0printf(\"%s integer ...\\n\", progname);\n    \u00a0\u00a0\u00a0\u00a0printf(\"This program takes any number of \" \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"integer values and sums them up\\n\");\n    }\n    ```", "```\n    $> gcc sum.c -o sum\n    ```", "```\n    $> ./sum\n    ./sum integer \u2026\n    This program takes any number of integer values and sums them up\n    ```", "```\n    $> echo $?\n    1\n    ```", "```\n    $> ./sum 45 55 12\n    Total sum: 112\n    ```", "```\n    $> echo $?\n    0\n    ```", "```\n    #define _XOPEN_SOURCE 500\n    #include <stdio.h>\n    #include <stdlib.h>\n    #include <unistd.h>\n    void printhelp(char progname[]);\n    int main(int argc, char *argv[])\n    {\n    \u00a0\u00a0\u00a0\u00a0int i, opt, sum;\n    \u00a0\u00a0\u00a0\u00a0/* Simple sanity check */\n    \u00a0\u00a0\u00a0\u00a0if (argc == 1)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printhelp(argv[0]);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```\n    \u00a0\u00a0\u00a0\u00a0/* Parse command-line options */\n    \u00a0\u00a0\u00a0\u00a0while ((opt = getopt(argc, argv, \"smh\")) != -1)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0switch (opt)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case 's': /* sum the integers */\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sum = 0;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (i=2; i<argc; i++)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sum = sum + atoi(argv[i]);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case 'm': /* multiply the integers */\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sum = 1;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (i=2; i<argc; i++)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sum = sum * atoi(argv[i]);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case 'h': /* -h for help */\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printhelp(argv[0]);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 0;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0default: /* in case of invalid options*/\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printhelp(argv[0]);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0printf(\"Total: %i\\n\", sum);\n    \u00a0\u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```\n    void printhelp(char progname[])\n    {\n    \u00a0\u00a0\u00a0\u00a0printf(\"%s [-s] [-m] integer ...\\n\", progname);\n    \u00a0\u00a0\u00a0\u00a0printf(\"-s sums all the integers\\n\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"-m multiplies all the integers\\n\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"This program takes any number of integer \"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"values and either add or multiply them.\\n\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"For example: %s -m 5 5 5\\n\", progname);\n    } \n    ```", "```\n    $> make new-sum\n    cc\u00a0\u00a0\u00a0\u00a0\u00a0new-sum.c\u00a0\u00a0\u00a0-o new-sum\n    ```", "```\n    $> ./new-sum\n    ./new-sum [-s] [-m] integer ...\n    -s sums all the integers\n    -m multiplies all the integers\n    This program takes any number of integer values and either add or multiply them.\n    For example: ./new-sum -m 5 5 5\n    $> ./new-sum -s 5 5 5\n    Total: 15\n    $> ./new-sum -m 5 5 5\n    Total: 125\n    ```", "```\n#define _XOPEN_SOURCE 500\n```", "```\nwhile ((opt = getopt(argc, argv, \"smh\")) != -1)\n```", "```\n$> whatis getopt \n```", "```\ngetopt (1) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- parse command options (enhanced) \n```", "```\ngetopt (3) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- Parse command-line options\n```", "```\n$> whatis creat \n```", "```\ncreat (2) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- open and possibly create a file\n```", "```\n$> whatis opendir \n```", "```\nopendir (3) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- open a directory\n```"]