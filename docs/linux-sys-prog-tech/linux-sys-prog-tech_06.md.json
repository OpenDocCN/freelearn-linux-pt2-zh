["```\n|- systemd (1)\n```", "```\n\u00a0\u00a0\\- login (6384)\n```", "```\n\u00a0\u00a0\u00a0\u00a0\\- bash (6669)\n```", "```\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\\- more testfile.txt (7184)\n```", "```\n    $> echo $$\n    18817\n    ```", "```\n    $> pstree -A -p -s $$\n    systemd(1)---tmux (4050)---bash(18817)---pstree(18845)\n    ```", "```\n    $> sleep 120 &\n    [1] 21902\n    $> sleep 120 &\n    [2] 21907\n    $> sleep 120 &\n    [3] 21913\n    $> pstree -A -p -s $$\n    systemd(1)---tmux (4050)---bash(18817)-+-pstree(21919)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0|-sleep(21902)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0|-sleep(21907)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0`-sleep(21913)\n    ```", "```\n    Ctrl+Alt+F3\n    login: \n    Ctrl+Alt+F7\n    $> ps ax | grep tty3\n    9124 tty3\u00a0\u00a0\u00a0\u00a0\u00a0Ss+\u00a0\u00a0\u00a0\u00a00:00 /sbin/agetty -o -p -- \\u --\n    noclear tty3 linux\n    Ctrl+Alt+F3\n    login: jake\n    Password: \n    $> \n    Ctrl+Alt+F7\n    $> ps ax | grep 9124\n    9124 tty3\u00a0\u00a0\u00a0\u00a0\u00a0Ss\u00a0\u00a0\u00a0\u00a0\u00a00:00 /bin/login -p \u2013\n    ```", "```\n    $> sleep 300 &\n    [1] 30200\n    $> man ls &\n    [2] 30210\n    ```", "```\n    $> jobs\n    [1]-\u00a0\u00a0Running\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sleep 300 &\n    [2]+\u00a0\u00a0Stopped\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0man ls\n    ```", "```\n    $> fg 2\n    ```", "```\n    sleep 300\n    Ctrl+Z\n    [1]+\u00a0\u00a0Stopped\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sleep 300\n    ```", "```\n    $> sleep 300\n    Ctrl+Z\n    [1]+\u00a0\u00a0Stopped\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sleep 300\n    $> jobs\n    [1]+\u00a0\u00a0Stopped\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sleep 300\n    ```", "```\n    $> bg 1\n    [1]+ sleep 300 &\n    $> jobs\n    [1]+\u00a0\u00a0Running\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sleep 300 &\n    ```", "```\n    $> pgrep -f \"sleep 300\"\n    4822\n    ```", "```\n    $> kill 4822\n    $> Enter\n    [1]+\u00a0\u00a0Terminated\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sleep 300\n    ```", "```\n    $> sleep 300 &\n    [1] 6526\n    $> pkill -f \"sleep 300\"\n    [1]+\u00a0\u00a0Terminated\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sleep 300\n    ```", "```\n    $> kill -L\n    ```", "```\n    $> sleep 120 &\n    [1] 16392\n    $> kill -19 16392\n     [1]+\u00a0\u00a0Stopped\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sleep 120\n    $> jobs\n    [1]+\u00a0\u00a0Stopped\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sleep 120\n    ```", "```\n    $> kill -CONT 16392\n    $> jobs\n    [1]+\u00a0\u00a0Running\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sleep 120 &\n    ```", "```\n    $> kill -9 16392\n    $> Enter\n    [1]+\u00a0\u00a0Killed\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sleep 120\n    ```", "```\n    #define _POSIX_C_SOURCE 200809L\n    #include <stdio.h>\n    #include <sys/types.h>\n    #include <signal.h>\n    #include <unistd.h>\n    void sigHandler(int sig);\n    int main(void)\n    {\n    ```", "```\n    \u00a0\u00a0\u00a0\u00a0pid_t pid; /* to store our pid in */\n    \u00a0\u00a0\u00a0\u00a0pid = getpid(); /* get the pid */\n    \u00a0\u00a0\u00a0\u00a0struct sigaction action; /* for sigaction */\n    \u00a0\u00a0\u00a0\u00a0sigset_t set; /* signals we want to ignore */\n    \u00a0\u00a0\u00a0\u00a0printf(\"Program running with PID %d\\n\", pid);\n    \u00a0\u00a0\u00a0\u00a0/* prepare sigaction() */\n    \u00a0\u00a0\u00a0\u00a0action.sa_handler = sigHandler;\n    \u00a0\u00a0\u00a0\u00a0sigfillset(&action.sa_mask);\n    \u00a0\u00a0\u00a0\u00a0action.sa_flags = SA_RESTART;\n    ```", "```\n    \u00a0\u00a0\u00a0\u00a0/* register two signal handlers, one for USR1\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0and one for USR2 */\n    \u00a0\u00a0\u00a0\u00a0sigaction(SIGUSR1, &action, NULL);\n    \u00a0\u00a0\u00a0\u00a0sigaction(SIGUSR2, &action, NULL);\n    ```", "```\n    \u00a0\u00a0\u00a0\u00a0/* create a \"signal set\" for sigprocmask() */\n    \u00a0\u00a0\u00a0\u00a0sigemptyset(&set);\n    \u00a0\u00a0\u00a0\u00a0sigaddset(&set, SIGINT);\n    \u00a0\u00a0\u00a0\u00a0/* block SIGINT and run an infinite loop */\n    \u00a0\u00a0\u00a0\u00a0sigprocmask(SIG_BLOCK, &set, NULL);\n    \u00a0\u00a0\u00a0\u00a0/* infinite loop to keep the program running */\n    \u00a0\u00a0\u00a0\u00a0for (;;)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sleep(10);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0sigprocmask(SIG_UNBLOCK, &set, NULL);\n    \u00a0\u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```\n    void sigHandler(int sig)\n    {\n    \u00a0\u00a0\u00a0\u00a0if (sig == SIGUSR1)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"Received USR1 signal\\n\");\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0else if (sig == SIGUSR2)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"Received USR2 signal\\n\");\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```\n    $> make signals\n    gcc -Wall -Wextra -pedantic -std=c99\u00a0\u00a0\u00a0\u00a0signals.c\u00a0\u00a0\u00a0-o\n     signals\n    ```", "```\n    $> ./signals &\n    [1] 25831\n    $> Program running with PID 25831\n    $> kill -USR1 25831\n    Received USR1 signal\n    $> kill -USR1 25831\n    Received USR1 signal\n    $> kill -USR2 25831\n    $> kill -USR2 25831\n    Received USR2 signal\n    $> Ctrl+C\n    ^C\n    $> kill -USR1 25831\n    Received USR1 signal\n    $> kill -TERM 25831\n    $> ENTER \n    [1]+\u00a0\u00a0Terminated\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0./signals\n    ```", "```\n    #include <stdio.h>\n    #include <unistd.h>\n    #include <errno.h>\n    #include <sys/types.h>\n    int main(void)\n    {\n    \u00a0\u00a0\u00a0printf(\"My PID is %d\\n\", getpid());\n    \u00a0\u00a0\u00a0printf(\"Hit enter to continue \");\n    \u00a0\u00a0\u00a0getchar(); /* wait for enter key */\n    \u00a0\u00a0\u00a0printf(\"Executing /usr/bin/less...\\n\");\n    \u00a0\u00a0\u00a0/* execute less using execl and error check it */\n    \u00a0\u00a0\u00a0if ( execl(\"/usr/bin/less\", \"less\", \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"/etc/passwd\", (char*)NULL) == -1 )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Can't execute program\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```\n    $> make execdemo\n    gcc -Wall -Wextra -pedantic -std=c99\u00a0\u00a0\u00a0\u00a0execdemo.c\u00a0\u00a0\u00a0-o execdemo\n    ```", "```\n    $> ./execdemo\n    My PID is 920\n    Hit enter to continue\n    ```", "```\n    $> pstree -A -p -s 920\n    systemd(1)---tmux(4050)---bash(18817)---execdemo(920)\n    ```", "```\n    $> pstree -A -p -s 920\n    systemd(1)---tmux(4050)---bash(18817)---less(920)\n    ```", "```\n    #include <stdio.h>\n    #include <sys/types.h>\n    #include <unistd.h>\n    int main(void)\n    {\n    \u00a0\u00a0\u00a0pid_t pid;\n    \u00a0\u00a0\u00a0printf(\"My PID is %d\\n\", getpid());\n    \u00a0\u00a0\u00a0/* fork, save the PID, and check for errors */\n    \u00a0\u00a0\u00a0if ( (pid = fork()) == -1 )\n    \u00a0\u00a0\u00a0{ \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Can't fork\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0if (pid == 0)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* if pid is 0 we are in the child process */\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"Hello from the child process!\\n\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sleep(120);\n    \u00a0\u00a0\u00a0}\n\n    \u00a0\u00a0\u00a0else if(pid > 0)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* if pid is greater than 0 we are in \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0* the parent */\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"Hello from the parent process! \"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"My child has PID %d\\n\", pid);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sleep(120);\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fprintf(stderr, \"Something went wrong \"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"forking\\n\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```\n    $> make forkdemo\n    gcc -Wall -Wextra -pedantic -std=c99\u00a0\u00a0\u00a0\u00a0forkdemo.c\u00a0\u00a0\u00a0\n    -o forkdemo\n    ```", "```\n    $> ./forkdemo \n    My PID is 21764\n    Hello from the parent process! My child has PID 21765\n    Hello from the child process!\n    ```", "```\n    $> pstree -A -p -s 21764\n    systemd(1)---tmux(4050)---bash(18817)---\n    forkdemo(21764)---forkdemo(21765)\n    ```", "```\n    #include <stdio.h>\n    #include <unistd.h>\n    #include <sys/types.h>\n    #include <string.h>\n    #include <sys/wait.h>\n    int main(void)\n    {\n    \u00a0\u00a0\u00a0pid_t pid;\n    \u00a0\u00a0\u00a0int status;\n    \u00a0\u00a0\u00a0/* Get and print my own pid, then fork\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0and check for errors */\n    \u00a0\u00a0\u00a0printf(\"My PID is %d\\n\", getpid());\n    \u00a0\u00a0\u00a0if ( (pid = fork()) == -1 )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Can't fork\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0if (pid == 0)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* If pid is 0 we are in the child process,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0from here we execute 'man ls' */\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if ( execl(\"/usr/bin/man\", \"man\", \"ls\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(char*)NULL) == -1 )\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Can't exec\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0else if(pid > 0)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* In the parent we must wait for the child\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0to exit with waitpid(). Afterward, the\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0child exit status is written to 'status' */\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0waitpid(pid, &status, 0);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"Child executed with PID %d\\n\", pid);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"Its return status was %d\\n\", status);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"Its return status was %d\\n\", status);\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fprintf(stderr, \"Something went wrong \"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"forking\\n\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```\n    $> make my-fork\n    gcc -Wall -Wextra -pedantic -std=c99\u00a0\u00a0\u00a0\u00a0my-fork.c\u00a0\u00a0\u00a0-o\n    my-fork\n    ```", "```\n    $> echo $$\n    18817\n    ```", "```\n    $> pstree -A -p -s 18817\n    systemd(1)---tmux(4050)---bash(18817)---my-fork(5849)-\n    --man(5850)---pager(5861)\n    ```", "```\n    My PID is 5849\n    Child executed with PID 5850\n    Its return status was 0\n    ```", "```\n    #include <stdio.h>\n    #include <stdlib.h>\n    int main(void)\n    {\n    \u00a0\u00a0\u00a0if ( (system(\"man ls\")) == -1 )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fprintf(stderr, \"Error forking or reading \"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"status\\n\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```\n    $> make sysdemo\n    gcc -Wall -Wextra -pedantic -std=c99\u00a0\u00a0\u00a0\u00a0sysdemo.c\u00a0\u00a0\u00a0-o\n    sysdemo\n    ```", "```\n    $> echo $$\n    957\n    ```", "```\n    $> ./sysdemo\n    ```", "```\n    $> pstree -A -p -s 957\n    systemd(1)---tmux(4050)---bash(957)---sysdemo(28274)--\n    -sh(28275)---man(28276)---pager(28287)\n    ```", "```\nexecl(\"/bin/sh\", \"sh\", \"-c\", command, (char *) 0);\n```", "```\n    #include <stdio.h>\n    #include <sys/types.h>\n    #include <unistd.h>\n    #include <stdlib.h>\n    int main(void)\n    {\n    \u00a0\u00a0\u00a0pid_t pid;\n    \u00a0\u00a0\u00a0printf(\"My PID is %d\\n\", getpid());\n    \u00a0\u00a0\u00a0/* fork, save the PID, and check for errors */\n    \u00a0\u00a0\u00a0if ( (pid = fork()) == -1 )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Can't fork\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0if (pid == 0)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* if pid is 0 we are in the child process */\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"Hello and goodbye from the child!\\n\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0exit(0);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* if pid is greater than 0 we are in \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0* the parent */\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"Hello from the parent process! \"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"My child had PID %d\\n\", pid);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sleep(120);\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0else \n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fprintf(stderr, \"Something went wrong \"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"forking\\n\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```\n    $> make create-zombie\n    gcc -Wall -Wextra -pedantic -std=c99\u00a0\u00a0\u00a0\u00a0create-\n    zombie.c\u00a0\u00a0\u00a0-o create-zombie\n    ```", "```\n    $> ./create-zombie\n    My PID is 2429\n    Hello from the parent process! My child had PID 2430\n    Hello and goodbye from the child!\n    ```", "```\n    $> ps a | grep 2430\n    \u00a0\u00a02430 pts/18\u00a0\u00a0\u00a0Z+\u00a0\u00a0\u00a0\u00a0\u00a00:00 [create-zombie] <defunct>\n    \u00a0\u00a02824 pts/34\u00a0\u00a0\u00a0S+\u00a0\u00a0\u00a0\u00a0\u00a00:00 grep 2430\n    ```", "```\n    $> ps a | grep 2430\n    \u00a0\u00a03364 pts/34\u00a0\u00a0\u00a0S+\u00a0\u00a0\u00a0\u00a0\u00a00:00 grep 2430\n    ```", "```\n    #include <stdio.h>\n    #include <sys/types.h>\n    #include <unistd.h>\n    #include <stdlib.h>\n    #include <sys/wait.h>\n    int main(void)\n    {\n    \u00a0\u00a0\u00a0pid_t pid;\n    \u00a0\u00a0\u00a0int status;\n    \u00a0\u00a0\u00a0printf(\"My PID is %d\\n\", getpid());\n    \u00a0\u00a0\u00a0/* fork, save the PID, and check for errors */\n    \u00a0\u00a0\u00a0if ( (pid = fork()) == -1 )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Can't fork\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0if (pid == 0)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* if pid is 0 we are in the child process */\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"Hello and goodbye from the child!\\n\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0exit(0);\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0else if(pid > 0)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* if pid is greater than 0 we are in \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0* the parent */\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"Hello from the parent process! \"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"My child had PID %d\\n\", pid);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0waitpid(pid, &status, 0); /* wait for child */\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sleep(120);\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fprintf(stderr, \"Something went wrong \"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"forking\\n\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```\n    $> make no-zombie\n    gcc -Wall -Wextra -pedantic -std=c99\u00a0\u00a0\u00a0\u00a0no-zombie.c\u00a0\u00a0\n    -o no-zombie\n    ```", "```\n    $> ./no-zombie\n    My PID is 22101\n    Hello from the parent process! My child had PID 22102\n    Hello and goodbye from the child!\n    ```", "```\n    $> ps a | grep 22102\n    22221 pts/34\u00a0\u00a0\u00a0S+\u00a0\u00a0\u00a0\u00a0\u00a00:00 grep 22102\n    ```", "```\n    #include <stdio.h>\n    #include <sys/types.h>\n    #include <unistd.h>\n    #include <stdlib.h>\n    int main(void)\n    {\n    \u00a0\u00a0\u00a0pid_t pid;\n    \u00a0\u00a0\u00a0printf(\"Parent PID is %d\\n\", getpid());\n    \u00a0\u00a0\u00a0/* fork, save the PID, and check for errors */\n    \u00a0\u00a0\u00a0if ( (pid = fork()) == -1 )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Can't fork\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0if (pid == 0)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* if pid is 0 we are in the child process */\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"I am the child and will run for \"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"5 minutes\\n\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sleep(300);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0exit(0);\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0else if(pid > 0)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* if pid is greater than 0 we are in \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0* the parent */\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"My child has PID %d\\n\" \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"I, the parent, will exit when you \"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"press enter\\n\", pid);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0getchar();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 0;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fprintf(stderr, \"Something went wrong \"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"forking\\n\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```\n    $> make orphan\n    gcc -Wall -Wextra -pedantic -std=c99\u00a0\u00a0\u00a0\u00a0orphan.c\u00a0\u00a0\u00a0-o\n     orphan\n    ```", "```\n    $> ./orphan\n    My PID is 13893\n    My child has PID 13894\n    I, the parent, will exit when you press enter\n    I am the child and will run for 2 minutes\n    ```", "```\n    $> pstree -A -p -s 13894\n    systemd(1)---tmux(4050)---bash(18817)---orphan(13893)-\n    --orphan(13894)\n    ```", "```\n    $> pstree -A -p -s 13894\n    systemd(1)---orphan(13894)\n    ```", "```\n    $> ps jp 13894\n    PPID PID PGID\u00a0\u00a0SID\u00a0\u00a0\u00a0TTY\u00a0\u00a0TPGID STAT UID TIME COMMAND\n    1\u00a0\u00a013894 13893 18817 pts/18 18817 S 1000 0:00 ./orphan\n    ```", "```\n    #include <stdio.h>\n    #include <unistd.h>\n    #include <stdlib.h>\n    #include <sys/types.h>\n    #include <sys/stat.h>\n    #include <time.h>\n    #include <fcntl.h>\n    int main(void)\n    {\n    \u00a0\u00a0\u00a0pid_t pid;\n    \u00a0\u00a0\u00a0FILE *fp;\n    \u00a0\u00a0\u00a0time_t now; /* for the current time */\n    \u00a0\u00a0\u00a0const char pidfile[] = \"/var/run/my-daemon.pid\";\n    \u00a0\u00a0\u00a0const char daemonfile[] = \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"/tmp/my-daemon-is-alive.txt\";\n    \u00a0\u00a0\u00a0if ( (pid = fork()) == -1 )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Can't fork\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    ```", "```\n    \u00a0\u00a0\u00a0else if ( (pid != 0) )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0exit(0);\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0/* the parent process has exited, so this is the\n    \u00a0\u00a0\u00a0\u00a0* child. create a new session to lose the \n    \u00a0\u00a0\u00a0\u00a0* controlling terminal */\n    \u00a0\u00a0\u00a0setsid();\n    ```", "```\n    \u00a0\u00a0\u00a0/* fork again, creating a grandchild, \n    \u00a0\u00a0\u00a0\u00a0* the actual daemon */\n    \u00a0\u00a0\u00a0if ( (pid = fork()) == -1 )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Can't fork\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0/* the child process which will exit */\n    \u00a0\u00a0\u00a0else if ( pid > 0 )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* open pid-file for writing and error \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0* check it */\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if ( (fp = fopen(pidfile, \"w\")) == NULL )\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Can't open file for writing\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* write pid to file */\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fprintf(fp, \"%d\\n\", pid); \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fclose(fp); /* close the file pointer */\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0exit(0);\n    \u00a0\u00a0\u00a0}\n    ```", "```\n    \u00a0\u00a0\u00a0umask(022); /* set the umask to something ok */\n    \u00a0\u00a0\u00a0chdir(\"/\"); /* change working directory to / */\n    \u00a0\u00a0\u00a0/* open the \"daemonfile\" for writing */\n    \u00a0\u00a0\u00a0if ( (fp = fopen(daemonfile, \"w\")) == NULL )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Can't open daemonfile\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    ```", "```\n    \u00a0\u00a0\u00a0/* from here, we don't need stdin, stdout or, \n    \u00a0\u00a0\u00a0\u00a0* stderr anymore, so let's close them all, \n    \u00a0\u00a0\u00a0\u00a0* then re-open them to /dev/null */\n    \u00a0\u00a0\u00a0close(STDIN_FILENO);\n    \u00a0\u00a0\u00a0close(STDOUT_FILENO);\n    \u00a0\u00a0\u00a0close(STDERR_FILENO);\n    \u00a0\u00a0\u00a0open(\"/dev/null\", O_RDONLY); /* 0 = stdin */\n    \u00a0\u00a0\u00a0open(\"/dev/null\", O_WRONLY); /* 1 = stdout */\n    \u00a0\u00a0\u00a0open(\"/dev/null\", O_RDWR); /* 2 = stderr */\n    ```", "```\n    \u00a0\u00a0\u00a0/* here we start the daemons \"work\" */\n    \u00a0\u00a0\u00a0for (;;)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* get the current time and write it to the\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"daemonfile\" that we opened above */\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0time(&now);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fprintf(fp, \"Daemon alive at %s\", \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ctime(&now));\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fflush(fp); /* flush the stream */\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sleep(30);\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```\n    $> make my-daemon\n    gcc -Wall -Wextra -pedantic -std=c99\u00a0\u00a0\u00a0\u00a0my-daemon.c\u00a0\u00a0\n    -o my-daemon\n    ```", "```\n    $> sudo ./my-daemon\n    ```", "```\n    $> cat /var/run/my-daemon.pid \n    5508\n    ```", "```\n    $> ps jp 5508\n    PPID PID PGID SID TTY TPGID STAT UID TIME COMMAND\n    1\u00a0\u00a0\u00a05508 5508 5508?\u00a0\u00a0\u00a0-1\u00a0\u00a0\u00a0\u00a0Ss\u00a0\u00a0\u00a0\u00a00\u00a0\u00a00:00 ./my-daemon\n    $> pstree -A -p -s 5508\n    systemd(1)---my-daemon(5508)\n    ```", "```\n    $> cat /tmp/my-daemon-is-alive.txt \n    Daemon alive at Sun Nov 22 23:25:45 2020\n    Daemon alive at Sun Nov 22 23:26:15 2020\n    Daemon alive at Sun Nov 22 23:26:45 2020\n    Daemon alive at Sun Nov 22 23:27:15 2020\n    Daemon alive at Sun Nov 22 23:27:45 2020\n    Daemon alive at Sun Nov 22 23:28:15 2020\n    Daemon alive at Sun Nov 22 23:28:45 2020\n    ```", "```\n    $> sudo kill 5508\n    ```", "```\n    #include <sys/types.h>\n    #include <sys/stat.h>\n    #include <time.h>\n    #include <fcntl.h>\n    #include <signal.h>\n    void sigHandler(int sig);\n    /* moved these variables to the global scope\n    \u00a0\u00a0\u00a0since they need to be access/deleted/closed\n    \u00a0\u00a0\u00a0from the signal handler */\n    FILE *fp;\n    const char pidfile[] = \"/var/run/my-daemon.pid\";\n    int main(void)\n    {\n    \u00a0\u00a0\u00a0pid_t pid;\n    \u00a0\u00a0\u00a0time_t now; /* for the current time */\n    \u00a0\u00a0\u00a0struct sigaction action; /* for sigaction */\n    \u00a0\u00a0\u00a0const char daemonfile[] = \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"/tmp/my-daemon-is-alive.txt\";\n    \u00a0\u00a0\u00a0if ( (pid = fork()) == -1 )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Can't fork\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0else if ( (pid != 0) )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0exit(0);\n    \u00a0\u00a0\u00a0}\n    ```", "```\n    \u00a0\u00a0\u00a0/* the parent process has exited, which makes \n    \u00a0\u00a0\u00a0\u00a0* the rest of the code the child process */\n    \u00a0\u00a0\u00a0setsid(); /* create a new session to lose the \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0controlling terminal */\n\n    \u00a0\u00a0\u00a0/* fork again, creating a grandchild, the \n    \u00a0\u00a0\u00a0\u00a0* actual daemon */\n    \u00a0\u00a0\u00a0if ( (pid = fork()) == -1 )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Can't fork\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0/* the child process which will exit */\n    \u00a0\u00a0\u00a0else if ( pid > 0 )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* open pid-file for writing and check it */\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if ( (fp = fopen(pidfile, \"w\")) == NULL )\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Can't open file for writing\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* write pid to file */\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fprintf(fp, \"%d\\n\", pid); \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fclose(fp); /* close the file pointer */\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0exit(0);\n    \u00a0\u00a0\u00a0}\n    ```", "```\n    \u00a0\u00a0\u00a0umask(022); /* set the umask to something ok */\n    \u00a0\u00a0\u00a0chdir(\"/\"); /* change working directory to / */\n    \u00a0\u00a0\u00a0/* open the \"daemonfile\" for writing */\n    \u00a0\u00a0\u00a0if ( (fp = fopen(daemonfile, \"w\")) == NULL )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Can't open daemonfile\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0/* from here, we don't need stdin, stdout or, \n    \u00a0\u00a0\u00a0\u00a0* stderr anymore, so let's close them all, \n    \u00a0\u00a0\u00a0\u00a0* then re-open them to /dev/null */\n    \u00a0\u00a0\u00a0close(STDIN_FILENO);\n    \u00a0\u00a0\u00a0close(STDOUT_FILENO);\n    \u00a0\u00a0\u00a0close(STDERR_FILENO);\n    \u00a0\u00a0\u00a0open(\"/dev/null\", O_RDONLY); /* 0 = stdin */\n    \u00a0\u00a0\u00a0open(\"/dev/null\", O_WRONLY); /* 1 = stdout */\n    \u00a0\u00a0\u00a0open(\"/dev/null\", O_RDWR); /* 2 = stderr */\n    ```", "```\n    /* prepare for sigaction */\n    \u00a0\u00a0\u00a0action.sa_handler = sigHandler;\n    \u00a0\u00a0\u00a0sigfillset(&action.sa_mask);\n    \u00a0\u00a0\u00a0action.sa_flags = SA_RESTART;\n    \u00a0\u00a0\u00a0/* register the signals we want to handle */\n    \u00a0\u00a0\u00a0sigaction(SIGTERM, &action, NULL);\n    \u00a0\u00a0\u00a0sigaction(SIGINT, &action, NULL);\n    \u00a0\u00a0\u00a0sigaction(SIGQUIT, &action, NULL);\n    \u00a0\u00a0\u00a0sigaction(SIGABRT, &action, NULL);\n    \u00a0\u00a0\u00a0/* here we start the daemons \"work\" */\n    \u00a0\u00a0\u00a0for (;;)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* get the current time and write it to the\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"daemonfile\" that we opened above */\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0time(&now);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fprintf(fp, \"Daemon alive at %s\", \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ctime(&now));\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fflush(fp); /* flush the stream */\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sleep(30);\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```\n    void sigHandler(int sig)\n    {\n    \u00a0\u00a0\u00a0\u00a0int status = 0;\n    \u00a0\u00a0\u00a0\u00a0if ( sig == SIGTERM || sig == SIGINT \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0|| sig == SIGQUIT \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0|| sig == SIGABRT )\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* remove the pid-file */\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if ( (unlink(pidfile)) == -1 )\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0status = 1;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if ( (fclose(fp)) == EOF )\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0status = 1;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0exit(status); /* exit with the status set*/\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0else /* some other signal */\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0exit(1);\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```\n    $> make my-daemon-v2\n    gcc -Wall -Wextra -pedantic -std=c99\u00a0\u00a0\u00a0\u00a0my-daemon-v2.c\n    -o my-daemon-v2\n    ```", "```\n    $> sudo ./my-daemon-v2 \n    ```", "```\n    $> cat /var/run/my-daemon.pid \n    22845\n    ```", "```\n    $> ps jp 22845\n    \u00a0\u00a0PPID\u00a0\u00a0\u00a0PID\u00a0\u00a0PGID\u00a0\u00a0\u00a0SID TTY TPGID STAT UID TIME\n    COMMAND\n    \u00a0\u00a0\u00a0\u00a01 22845 22845 22845 ?\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-1 Ss\u00a0\u00a0\u00a0\u00a0\u00a00 0:00 ./my\n    daemon-v2\n    ```", "```\n    $> sudo kill 22845\n    ```", "```\n    $> cat /var/run/my-daemon.pid \n    cat: /var/run/my-daemon.pid: No such file or directory\n    ```"]