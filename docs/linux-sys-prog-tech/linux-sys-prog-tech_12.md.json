["```\n$> sudo apt-get install gdb valgrind\n```", "```\n$> sudo dnf install gdb valgrind\n```", "```\n    #include <stdio.h>\n    int main(void)\n    {\n    \u00a0\u00a0\u00a0int x;\n    \u00a0\u00a0\u00a0int y = 5;\n    \u00a0\u00a0\u00a0char text[20] = \"Hello, world\";\n    \u00a0\u00a0\u00a0for (x = 1; y < 100; x++)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0y = (y*3)-x;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0printf(\"%s\\n\", text);\n    \u00a0\u00a0\u00a0printf(\"y = %d\\n\", y);\n    \u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```\n    CC=gcc\n    CFLAGS=-g -Wall -Wextra -pedantic -std=c99\n    ```", "```\n    $> make loop\n    gcc -g -Wall -Wextra -pedantic -std=c99\u00a0\u00a0\u00a0\u00a0loop.c\u00a0\u00a0\u00a0-o loop\n    ```", "```\n    $> ./loop \n    Hello, world\n    y = 117\n    ```", "```\n    $> gdb ./loop\n    ```", "```\n    (gdb) run\n    Starting program: /home/jack/ch12/code/loop \n    Hello, world\n    y = 117\n    [Inferior 1 (process 10467) exited normally]\n    ```", "```\n    (gdb) break 1\n    Breakpoint 1 at 0x55555555514d: file loop.c, line 6.\n    ```", "```\n    $> (gdb) run\n    Starting program: /home/jack/ch12/code/loop\n    Breakpoint 1, main () at loop.c:6\n    6\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int y = 5;\n    ```", "```\n    $> (gdb) watch y\n    Hardware watchpoint 2: y\n    ```", "```\n    (gdb) next\n    Hardware watchpoint 2: y\n    Old value = 0\n    New value = 5\n    main () at loop.c:7\n    7\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0char text[20] = \"Hello, world\";\n    (gdb) next\n    8\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (x = 1; y < 100; x++)\n    (gdb) next\n    10\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0y = (y*3)-x;\n    ```", "```\n    (gdb) next\n    Hardware watchpoint 2: y\n    Old value = 5\n    New value = 14\n    main () at loop.c:8\n    8\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (x = 1; y < 100; x++)\n    (gdb) next\n    10\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0y = (y*3)-x;\n    (gdb) next\n    Hardware watchpoint 2: y\n    Old value = 14\n    New value = 40\n    main () at loop.c:8\n    8\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (x = 1; y < 100; x++)\n    (gdb) next\n    10\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0y = (y*3)-x;\n    (gdb) next\n    Hardware watchpoint 2: y\n    Old value = 40\n    New value = 117\n    8\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (x = 1; y < 100; x++)\n    ```", "```\n    (gdb) print text\n    $1 = \"Hello, world\\000\\000\\000\\000\\000\\000\\000\"\n    (gdb) print x\n    $2 = 3\n    ```", "```\n    (gdb) next\n    12\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"%s\\n\", text);\n    (gdb) next\n    Hello, world\n    13\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"y = %d\\n\", y);\n    (gdb) next\n    y = 117\n    14\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 0;\n    (gdb) next\n    15\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    (gdb) next\n    Watchpoint 2 deleted because the program has left the block in which its expression is valid.\n    __libc_start_main (main=0x555555555145 <main>, argc=1, argv=0x7fffffffdbe8, \n    \u00a0\u00a0\u00a0\u00a0init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, \n    \u00a0\u00a0\u00a0\u00a0stack_end=0x7fffffffdbd8) at ../csu/libc-start.c:342\n    342\u00a0\u00a0\u00a0\u00a0\u00a0../csu/libc-start.c: No such file or directory.\n    (gdb) next\n    [Inferior 1 (process 14779) exited normally]\n    (gdb) quit\n    ```", "```\n    #include <stdio.h>\n    #include <stdlib.h>\n    float area(float radius);\n    int main(int argc, char *argv[])\n    {\n    \u00a0\u00a0\u00a0float number;\n    \u00a0\u00a0\u00a0float answer;\n    \u00a0\u00a0\u00a0if (argc != 2)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fprintf(stderr, \"Type the radius of a \"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"circle\\n\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0number = atof(argv[1]);\n    \u00a0\u00a0\u00a0answer = area(number);\n    \u00a0\u00a0\u00a0printf(\"The area of a circle with a radius of \"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"%.2f is %.2f\\n\", number, answer);\n    \u00a0\u00a0\u00a0return 0;\n    }\n    float area(float radius)\n    {\n    \u00a0\u00a0\u00a0static float pi = 3.14159;\n    \u00a0\u00a0\u00a0return pi*radius*radius;\n    }\n    ```", "```\n    $> make area-of-circle\n    gcc -g -Wall -Wextra -pedantic -std=c99\u00a0\u00a0\u00a0\u00a0area-of-circle.c\u00a0\u00a0\u00a0-o area-of-circle\n    ```", "```\n    $> ./area-of-circle 9\n    The area of a circle with a radius of 9.00 is 254.47\n    ```", "```\n    $> gdb ./area-of-circle\n    ```", "```\n    (gdb) break main\n    Breakpoint 1 at 0x1164: file area-of-circle.c, line 9.\n    ```", "```\n    (gdb) run 9\n    Starting program: /home/jack/ch12/code/area-of-circle 9\n    Breakpoint 1, main (argc=2, argv=0x7fffffffdbd8) at area-of-circle.c:9\n    9\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (argc != 2)\n    ```", "```\n    (gdb) next\n    15\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0number = atof(argv[1]);\n    ```", "```\n    (gdb) step\n    atof (nptr=0x7fffffffdfed \"9\") at atof.c:27\n    27\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0atof.c: No such file or directory.\n    (gdb) finish\n    Run till exit from #0\u00a0\u00a0atof (nptr=0x7fffffffdfed \"9\") at atof.c:27\n    main (argc=2, argv=0x7fffffffdbd8) at area-of-circle.c:15\n    15\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0number = atof(argv[1]);\n    Value returned is $1 = 9\n    ```", "```\n    (gdb) next\n    16\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0answer = area(number);\n    (gdb) step\n    area (radius=9) at area-of-circle.c:25\n    25\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return pi*radius*radius;\n    (gdb) finish\n    Run till exit from #0\u00a0\u00a0area (radius=9) at area-of-circle.c:25\n    0x00005555555551b7 in main (argc=2, argv=0x7fffffffdbd8) at area-of-circle.c:16\n    16\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0answer = area(number);\n    Value returned is $2 = 254.468796\n    ```", "```\n    (gdb) next\n    17\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"The area of a circle with a radius of \"\n    (gdb) next\n    The area of a circle with a radius of 9.00 is 254.47\n    19\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 0;\n    (gdb) next\n    20\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    (gdb) next\n    __libc_start_main (main=0x555555555155 <main>, argc=2, argv=0x7fffffffdbd8, \n    \u00a0\u00a0\u00a0\u00a0init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, \n    \u00a0\u00a0\u00a0\u00a0stack_end=0x7fffffffdbc8) at ../csu/libc-start.c:342\n    342\u00a0\u00a0\u00a0\u00a0\u00a0../csu/libc-start.c: No such file or directory.\n    (gdb) next\n    [Inferior 1 (process 2034) exited normally]\n    (gdb) quit\n    ```", "```\n    #include <stdio.h>\n    #include <string.h>\n    int main(void)\n    {\n    \u00a0\u00a0\u00a0\u00a0char text[20];\n    \u00a0\u00a0\u00a0\u00a0memset(text, 'x', 20);\n    \u00a0\u00a0\u00a0\u00a0strcpy(text, \"Hello\");\n    \u00a0\u00a0\u00a0\u00a0printf(\"%s\\n\", text);\n    \u00a0\u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```\n    $> make memtest\n    gcc -g -Wall -Wextra -pedantic -std=c99\u00a0\u00a0\u00a0\u00a0memtest.c\u00a0\u00a0\u00a0-o memtest\n    ```", "```\n    $> ./memtest \n    Hello\n    ```", "```\n    $> gdb ./memtest\n    ```", "```\n    (gdb) break main\n    Breakpoint 1 at 0x114d: file memtest.c, line 6.\n    (gdb) run\n    Starting program: /mnt/localnas_disk2/linux-sys/ch12/code/memtest \n    Breakpoint 1, main () at memtest.c:6\n    warning: Source file is more recent than executable.\n    6\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0memset(text, 'x', 20);\n    (gdb) next\n    7\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0strcpy(text, \"Hello\");\n    (gdb) next\n    8\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"%s\\n\", text);\n    (gdb) x/20bd text\n    0x7fffffffdae0: 72\u00a0\u00a0\u00a0101\u00a0\u00a0108\u00a0\u00a0108\u00a0\u00a0111\u00a0\u00a00\u00a0\u00a0\u00a0\u00a0120\u00a0\u00a0120\n    0x7fffffffdae8: 120\u00a0\u00a0120\u00a0\u00a0120\u00a0\u00a0120\u00a0\u00a0120\u00a0\u00a0120\u00a0\u00a0120\u00a0\u00a0120\n    0x7fffffffdaf0: 120\u00a0\u00a0120\u00a0\u00a0120\u00a0\u00a0120\n    ```", "```\n    $> make memtest\n    gcc -g -Wall -Wextra -pedantic -std=c99\u00a0\u00a0\u00a0\u00a0memtest.c\u00a0\u00a0\u00a0-o memtest\n    ```", "```\n    $> gdb ./memtest\n    ```", "```\n    (gdb) break main\n    Breakpoint 1 at 0x114d: file memtest.c, line 6.\n    (gdb) run\n    Starting program: /home/jack/ch12/code/memtest \n    Breakpoint 1, main () at memtest.c:6\n    6\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0memset(text, 'x', 20);\n    (gdb) next\n    7\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0strcpy(text, \"Hello\");\n    (gdb) next\n    8\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"%s\\n\", text);\n    ```", "```\n    (gdb) x/20bd text\n    0x7fffffffdae0: 72\u00a0\u00a0\u00a0101\u00a0\u00a0108\u00a0\u00a0108\u00a0\u00a0111\u00a0\u00a00\u00a0\u00a0\u00a0\u00a0120\u00a0\u00a0120\n    0x7fffffffdae8: 120\u00a0\u00a0120\u00a0\u00a0120\u00a0\u00a0120\u00a0\u00a0120\u00a0\u00a0120\u00a0\u00a0120\u00a0\u00a0120\n    0x7fffffffdaf0: 120\u00a0\u00a0120\u00a0\u00a0120\u00a0\u00a0120\n    ```", "```\n    (gdb) set text[5] = 'y'\n    (gdb) set text[19] = '\\0'\n    (gdb) x/20bd text\n    0x7fffffffdae0: 72\u00a0\u00a0\u00a0101\u00a0\u00a0108\u00a0\u00a0108\u00a0\u00a0111\u00a0\u00a0121\u00a0\u00a0120\u00a0\u00a0120\n    0x7fffffffdae8: 120\u00a0\u00a0120\u00a0\u00a0120\u00a0\u00a0120\u00a0\u00a0120\u00a0\u00a0120\u00a0\u00a0120\u00a0\u00a0120\n    0x7fffffffdaf0: 120\u00a0\u00a0120\u00a0\u00a0120\u00a0\u00a00\n    ```", "```\n    (gdb) continue\n    Continuing.\n    Helloyxxxxxxxxxxxxx\n    [Inferior 1 (process 4967) exited normally]\n    (gdb) quit\n    ```", "```\n    #include <sys/types.h>\n    #include <unistd.h>\n    #include <sys/wait.h>\n    int main(void)\n    {\n    \u00a0\u00a0\u00a0pid_t pid;\n    \u00a0\u00a0\u00a0printf(\"My PID is %d\\n\", getpid());\n    \u00a0\u00a0\u00a0/* fork, save the PID, and check for errors */\n    \u00a0\u00a0\u00a0if ( (pid = fork()) == -1 )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Can't fork\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0if (pid == 0)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* if pid is 0 we are in the child process */\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"Hello from the child process!\\n\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for(int i = 0; i<10; i++)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"Counter in child: %d\\n\", i);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0else if(pid > 0)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* parent process */\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"My child has PID %d\\n\", pid);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0wait(&pid);\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```\n    $> make forking\n    gcc -g -Wall -Wextra -pedantic -std=c99\u00a0\u00a0\u00a0\u00a0forking.c\u00a0\u00a0\u00a0-o forking\n    ```", "```\n    $> ./forking \n    My PID is 9868\n    My child has PID 9869\n    Hello from the child process!\n    Counter in child: 0\n    Counter in child: 1\n    Counter in child: 2\n    Counter in child: 3\n    Counter in child: 4\n    Counter in child: 5\n    Counter in child: 6\n    Counter in child: 7\n    Counter in child: 8\n    Counter in child: 9\n    ```", "```\n    $> gdb ./forking\n    ```", "```\n    (gdb) break main\n    Breakpoint 1 at 0x118d: file forking.c, line 9.\n    (gdb) run\n    Starting program: /home/jack/ch12/code/forking \n    Breakpoint 1, main () at forking.c:9\n    9\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"My PID is %d\\n\", getpid());\n    (gdb) next\n    My PID is 10568\n    11\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if ( (pid = fork()) == -1 )\n    (gdb) next\n    [Detaching after fork from child process 10577]\n    Hello from the child process!\n    Counter in child: 0\n    Counter in child: 1\n    Counter in child: 2\n    Counter in child: 3\n    Counter in child: 4\n    Counter in child: 5\n    Counter in child: 6\n    Counter in child: 7\n    Counter in child: 8\n    Counter in child: 9\n    16\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (pid == 0)\n    (gdb) continue\n    Continuing.\n    My child has PID 10577\n    [Inferior 1 (process 10568) exited normally]\n    (gdb) quit\n    ```", "```\n    $> gdb ./forking\n    ```", "```\n    (gdb) break main\n    Breakpoint 1 at 0x118d: file forking.c, line 9.\n    (gdb) set follow-fork-mode child\n    (gdb) run\n    Starting program: /home/jack/ch12/code/forking \n    Breakpoint 1, main () at forking.c:9\n    9\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"My PID is %d\\n\", getpid());\n    ```", "```\n    (gdb) next\n    My PID is 11561\n    11\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if ( (pid = fork()) == -1 )\n    (gdb) next\n    [Attaching after process 11561 fork to child process 11689]\n    [New inferior 2 (process 11689)]\n    [Detaching after fork from parent process 11561]\n    [Inferior 1 (process 11561) detached]\n    My child has PID 11689\n    [Switching to process 11689]\n    main () at forking.c:11\n    11\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if ( (pid = fork()) == -1 )\n    ```", "```\n    (gdb) next\n    16\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (pid == 0)\n    (gdb) next\n    19\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"Hello from the child process!\\n\");\n    (gdb) next\n    Hello from the child process!\n    20\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for(int i = 0; i<10; i++)\n    (gdb) next\n    22\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"Counter in child: %d\\n\", i);\n    (gdb) next\n    Counter in child: 0\n    20\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for(int i = 0; i<10; i++)\n    (gdb) next\n    22\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"Counter in child: %d\\n\", i);\n    (gdb) next\n    Counter in child: 1\n    20\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for(int i = 0; i<10; i++)\n    (gdb) next\n    22\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"Counter in child: %d\\n\", i);\n    (gdb) continue\n    Continuing.\n    Counter in child: 2\n    Counter in child: 3\n    Counter in child: 4\n    Counter in child: 5\n    Counter in child: 6\n    Counter in child: 7\n    Counter in child: 8\n    Counter in child: 9\n    [Inferior 2 (process 11689) exited normally]\n    ```", "```\n    $> gcc -g -Wall -Wextra -pedantic -std=c99 \\\n    > -lpthread first-threaded.c -o first-threaded\n    ```", "```\n    $> ./first-threaded 990233331 9902343047\n    ........\n    990233331 is not a prime number\n    ...............................................................................\n    9902343047 is a prime number\n    Done!\n    ```", "```\n    $> gdb ./first-threaded\n    ```", "```\n    (gdb) break main\n    Breakpoint 1 at 0x11e4: file first-threaded.c, line 17.\n    (gdb) run 990233331 9902343047\n    Starting program: /home/jack/ch12/code/first-threaded 990233331 9902343047\n    [Thread debugging using libthread_db enabled]\n    Using host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\n    Breakpoint 1, main (argc=3, argv=0x7fffffffdbb8) at first-threaded.c:17\n    17\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if ( argc != 3 )\n    ```", "```\n    (gdb) next\n    23\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0number1 = atoll(argv[1]);\n    (gdb) next\n    24\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0number2 = atoll(argv[2]);\n    (gdb) next\n    25\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pthread_attr_init(&threadattr);\n    (gdb) next\n    26\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pthread_create(&tid_progress, &threadattr, \n    (gdb) next\n    [New Thread 0x7ffff7dad700 (LWP 19182)]\n    28\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pthread_create(&tid_prime1, &threadattr, \n    (gdb) next\n    [New Thread 0x7ffff75ac700 (LWP 19183)]\n    30\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pthread_create(&tid_prime2, &threadattr,\n    ```", "```\n    (gdb) info threads\n    \u00a0\u00a0Id\u00a0\u00a0\u00a0Target Id\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Frame \n    * 1\u00a0\u00a0\u00a0\u00a0Thread 0x7ffff7dae740 (LWP 19175) \"first-threaded\" main (argc=3, argv=0x7fffffffdbb8)\n    \u00a0\u00a0\u00a0\u00a0at first-threaded.c:30\n    \u00a0\u00a02\u00a0\u00a0\u00a0\u00a0Thread 0x7ffff7dad700 (LWP 19182) \"first-threaded\" 0x00007ffff7e77720 in __GI___nanosleep\n    \u00a0\u00a0\u00a0\u00a0(requested_time=requested_time@entry=0x7ffff7dacea0, \n    \u00a0\u00a0\u00a0\u00a0remaining=remaining@entry=0x7ffff7dacea0) at ../sysdeps/unix/sysv/linux/nanosleep.c:28\n    \u00a0\u00a03\u00a0\u00a0\u00a0\u00a0Thread 0x7ffff75ac700 (LWP 19183) \"first-threaded\" 0x000055555555531b in isprime (\n    \u00a0\u00a0\u00a0\u00a0arg=0x7fffffffdac8) at first-threaded.c:52\n    ```", "```\n    (gdb) thread 3\n    [Switching to thread 3 (Thread 0x7ffff75ac700 (LWP 19183))]\n    #0\u00a0\u00a00x000055555555531b in isprime (arg=0x7fffffffdac8) at first-threaded.c:52\n    52\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(number%j == 0)\n    ```", "```\n    (gdb) print number\n    $1 = 990233331\n    (gdb) print j\n    $2 = 13046\n    (gdb) next\n    .[New Thread 0x7ffff6dab700 (LWP 19978)]\n    47\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for(j=2; j<number; j++)\n    (gdb) next\n    .52\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(number%j == 0)\n    (gdb) next \n    .47\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for(j=2; j<number; j++)\n    (gdb) continue\n    Continuing.\n    .........\n    990233331 is not a prime number\n    [Thread 0x7ffff75ac700 (LWP 19183) exited]\n    ...............................................................................\n    9902343047 is a prime number\n    Done!\n    [Thread 0x7ffff6dab700 (LWP 19978) exited]\n    [Thread 0x7ffff7dad700 (LWP 19182) exited]\n    [Inferior 1 (process 19175) exited normally]\n    ```", "```\n    #include <stdio.h>\n    #include <stdlib.h>\n    #include <string.h>\n    int main(void)\n    {\n    \u00a0\u00a0\u00a0\u00a0char *c;\n    \u00a0\u00a0\u00a0\u00a0c = calloc(sizeof(char), 20);\n    \u00a0\u00a0\u00a0\u00a0strcpy(c, \"Hello!\");\n    \u00a0\u00a0\u00a0\u00a0printf(\"%s\\n\", c);\n    \u00a0\u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```\n    $> make leak\n    gcc -g -Wall -Wextra -pedantic -std=c99\u00a0\u00a0\u00a0\u00a0leak.c\u00a0\u00a0\u00a0-o leak\n    ```", "```\n    $> ./leak \n    Hello!\n    ```", "```\n    $> valgrind ./leak \n    ==9541== Memcheck, a memory error detector\n    ==9541== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n    ==9541== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info\n    ==9541== Command: ./leak\n    ==9541== \n    Hello!\n    ==9541== \n    ==9541== HEAP SUMMARY:\n    ==9541==\u00a0\u00a0\u00a0\u00a0\u00a0in use at exit: 20 bytes in 1 blocks\n    ==9541==\u00a0\u00a0\u00a0total heap usage: 2 allocs, 1 frees, 1,044 bytes allocated\n    ==9541== \n    ==9541== LEAK SUMMARY:\n    ==9541==\u00a0\u00a0\u00a0\u00a0definitely lost: 20 bytes in 1 blocks\n    ==9541==\u00a0\u00a0\u00a0\u00a0indirectly lost: 0 bytes in 0 blocks\n    ==9541==\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0possibly lost: 0 bytes in 0 blocks\n    ==9541==\u00a0\u00a0\u00a0\u00a0still reachable: 0 bytes in 0 blocks\n    ==9541==\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0suppressed: 0 bytes in 0 blocks\n    ==9541== Rerun with --leak-check=full to see details of leaked memory\n    ==9541== \n    ==9541== For counts of detected and suppressed errors, rerun with: -v\n    ==9541== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n    ```", "```\n    $>\u00a0\u00a0valgrind ./leak \n    ==10354== Memcheck, a memory error detector\n    ==10354== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n    ==10354== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info\n    ==10354== Command: ./leak\n    ==10354== \n    Hello!\n    ==10354== \n    ==10354== HEAP SUMMARY:\n    ==10354==\u00a0\u00a0\u00a0\u00a0\u00a0in use at exit: 0 bytes in 0 blocks\n    ==10354==\u00a0\u00a0\u00a0total heap usage: 2 allocs, 2 frees, 1,044 bytes allocated\n    ==10354== \n    ==10354== All heap blocks were freed -- no leaks are possible\n    ==10354== \n    ==10354== For counts of detected and suppressed errors, rerun with: -v\n    ==10354== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n    ```", "```\n    #include <stdio.h>\n    #include <string.h>\n    #include <stdlib.h>\n    int main(void)\n    {\n    \u00a0\u00a0\u00a0\u00a0char *c;\n    \u00a0\u00a0\u00a0\u00a0c = calloc(sizeof(char), 20);\n    \u00a0\u00a0\u00a0\u00a0strcpy(c, \"Hello, how are you doing?\");\n    \u00a0\u00a0\u00a0\u00a0printf(\"%s\\n\", c);\n    \u00a0\u00a0\u00a0\u00a0free(c);\n    \u00a0\u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```\n    $> make overflow\n    gcc -g -Wall -Wextra -pedantic -std=c99\u00a0\u00a0\u00a0\u00a0overflow.c\u00a0\u00a0\u00a0-o overflow\n    ```", "```\n    $> ./overflow \n    Hello, how are you doing\n    ```", "```\n    c buffer, especially the text *4 bytes after a block of size 20 alloc'd*. That means that we have written 4 bytes of data *after* the 20 bytes we allocated. There are more lines like these, and they all point us toward the overflow.\n    ```"]