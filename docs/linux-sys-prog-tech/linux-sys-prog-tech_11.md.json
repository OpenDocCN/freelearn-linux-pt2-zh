["```\nCC=gcc\n```", "```\nCFLAGS=-Wall -Wextra -pedantic -std=c99 -lpthread\n```", "```\n    #include <stdio.h>\n    #include <stdlib.h>\n    #include <unistd.h>\n    #include <pthread.h>\n    void *isprime(void *arg);\n    void *progress(void *arg);\n    int main(int argc, char *argv[])\n    {\n    \u00a0\u00a0\u00a0long long number1;\n    \u00a0\u00a0\u00a0long long number2;\n    \u00a0\u00a0\u00a0pthread_t tid_prime1;\n    \u00a0\u00a0\u00a0pthread_t tid_prime2;\n    \u00a0\u00a0\u00a0pthread_t tid_progress;\n    \u00a0\u00a0\u00a0pthread_attr_t threadattr;\n    \u00a0\u00a0\u00a0if ( argc != 3 )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fprintf(stderr, \"Please supply two numbers.\\n\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Example: %s 9 7\\n\", argv[0]);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0number1 = atoll(argv[1]);\n    \u00a0\u00a0\u00a0number2 = atoll(argv[2]);\n    ```", "```\n    \u00a0\u00a0\u00a0pthread_attr_init(&threadattr);\n    \u00a0\u00a0\u00a0pthread_create(&tid_progress, &threadattr, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0progress, NULL); \n    \u00a0\u00a0\u00a0pthread_detach(tid_progress);\n    \u00a0\u00a0\u00a0pthread_create(&tid_prime1, &threadattr, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0isprime, &number1);\n    \u00a0\u00a0\u00a0pthread_create(&tid_prime2, &threadattr, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0isprime, &number2);\n    ```", "```\n    \u00a0\u00a0\u00a0pthread_join(tid_prime1, NULL);\n    \u00a0\u00a0\u00a0pthread_join(tid_prime2, NULL);\n    \u00a0\u00a0\u00a0pthread_attr_destroy(&threadattr);\n    \u00a0\u00a0\u00a0if ( pthread_cancel(tid_progress) != 0 )\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fprintf(stderr, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Couldn't cancel progress thread\\n\");\n    \u00a0\u00a0\u00a0printf(\"Done!\\n\");\n    \u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```\n    void *isprime(void *arg)\n    {\n    \u00a0\u00a0\u00a0long long int number = *((long long*)arg);\n    \u00a0\u00a0\u00a0long long int j;\n    \u00a0\u00a0\u00a0int prime = 1;\n\n    \u00a0\u00a0\u00a0/* Test if the number is divisible, starting \n    \u00a0\u00a0\u00a0\u00a0* from 2 */\n    \u00a0\u00a0\u00a0for(j=2; j<number; j++)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* Use the modulo operator to test if the \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0* number is evenly divisible, i.e., a \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0* prime number */\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(number%j == 0)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0prime = 0;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0if(prime == 1)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"\\n%lld is a prime number\\n\", \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0number);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return NULL;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"\\n%lld is not a prime number\\n\", \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0number);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return NULL;\n    \u00a0\u00a0\u00a0}\n    }\n    ```", "```\n    void *progress(void *arg)\n    {\n    \u00a0\u00a0\u00a0while(1)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sleep(1);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\".\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fflush(stdout);\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0return NULL;\n    }\n    ```", "```\n    $> make first-threaded\n    gcc -Wall -Wextra -pedantic -std=c99 -lpthread\u00a0\u00a0\u00a0\u00a0first-threaded.c\u00a0\u00a0\u00a0-o first-threaded\n    first-threaded.c: In function 'progress':\n    first-threaded.c:71:22: warning: unused parameter 'arg' [-Wunused-parameter]\n     void *progress(void *arg)\n    ```", "```\n    $> ./first-threaded 990233331 9902343047\n    ..........\n    990233331 is not a prime number\n    ...............................................................................\n    9902343047 is a prime number\n    Done!\n    ```", "```\nlong long int number = *((long long*)arg);\n```", "```\nlong long int *number_ptr = (long long*)arg;\n```", "```\nlong long int number = *number_ptr;\n```", "```\n    #include <stdio.h>\n    #include <stdlib.h>\n    #include <unistd.h>\n    #include <pthread.h>\n    #include <stdint.h>\n    void *isprime(void *arg);\n    void *progress(void *arg);\n    int main(int argc, char *argv[])\n    {\n    \u00a0\u00a0\u00a0long long number1;\n    \u00a0\u00a0\u00a0long long number2;\n    \u00a0\u00a0\u00a0pthread_t tid_prime1;\n    \u00a0\u00a0\u00a0pthread_t tid_prime2;\n    \u00a0\u00a0\u00a0pthread_t tid_progress;\n    \u00a0\u00a0\u00a0pthread_attr_t threadattr;\n    \u00a0\u00a0\u00a0void *prime1Return;\n    \u00a0\u00a0\u00a0void *prime2Return;\n    \u00a0\u00a0\u00a0if ( argc != 3 )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fprintf(stderr, \"Please supply two numbers.\\n\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Example: %s 9 7\\n\", argv[0]);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0number1 = atoll(argv[1]);\n    \u00a0\u00a0\u00a0number2 = atoll(argv[2]);\n    \u00a0\u00a0\u00a0pthread_attr_init(&threadattr);\n    \u00a0\u00a0\u00a0pthread_create(&tid_progress, &threadattr, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0progress, NULL);\u00a0\u00a0\n    \u00a0\u00a0\u00a0pthread_detach(tid_progress);\n    \u00a0\u00a0\u00a0pthread_create(&tid_prime1, &threadattr, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0isprime, &number1);\n    \u00a0\u00a0\u00a0pthread_create(&tid_prime2, &threadattr, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0isprime, &number2);\n    ```", "```\n    \u00a0\u00a0\u00a0pthread_join(tid_prime1, &prime1Return);\n    \u00a0\u00a0\u00a0if (\u00a0\u00a0(uintptr_t)prime1Return == 1 )\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"\\n%lld is a prime number\\n\", \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0number1);\n    \u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"\\n%lld is not a prime number\\n\", \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0number1);\n\n    \u00a0\u00a0\u00a0pthread_join(tid_prime2, &prime2Return);\u00a0\u00a0\u00a0\n    \u00a0\u00a0\u00a0if ( (uintptr_t)prime2Return == 1 )\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"\\n%lld is a prime number\\n\", \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0number2);\n    \u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"\\n%lld is not a prime number\\n\", \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0number2);\n\n    \u00a0\u00a0\u00a0pthread_attr_destroy(&threadattr);\n    \u00a0\u00a0\u00a0if ( pthread_cancel(tid_progress) != 0 )\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fprintf(stderr, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Couldn't cancel progress thread\\n\");\n    \u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```\n    void *isprime(void *arg)\n    {\n    \u00a0\u00a0\u00a0long long int number = *((long long*)arg);\n    \u00a0\u00a0\u00a0long long int j;\n    \u00a0\u00a0\u00a0int prime = 1;\n\n    \u00a0\u00a0\u00a0/* Test if the number is divisible, starting \n    \u00a0\u00a0\u00a0\u00a0* from 2 */\n    \u00a0\u00a0\u00a0for(j=2; j<number; j++)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* Use the modulo operator to test if the \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0* number is evenly divisible, i.e., a \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0* prime number */\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(number%j == 0)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0prime = 0;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0if(prime == 1)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return (void*)1;\n    \u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return (void*)0;\n    }\n    void *progress(void *arg)\n    {\n    \u00a0\u00a0\u00a0while(1)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sleep(1);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\".\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fflush(stdout);\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0return NULL;\n    }\n    ```", "```\n    $> make second-threaded\n    gcc -Wall -Wextra -pedantic -std=c99 -lpthread\u00a0\u00a0\u00a0\u00a0second-threaded.c\u00a0\u00a0\u00a0-o second-threaded\n    second-threaded.c: In function 'progress':\n    second-threaded.c:79:22: warning: unused parameter 'arg' [-Wunused-parameter]\n     void *progress(void *arg)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0~~~~~~^~~\n    ```", "```\n    $> ./second-threaded 9902343047 99023117\n    ......................................................................................\n    9902343047 is a prime number\n    99023117 is not a prime number\n    $> ./second-threaded 99023117 9902343047\n    .\n    99023117 is not a prime number\n    .......................................................................................\n    9902343047 is a prime number\n    ```", "```\n    #include <stdio.h>\n    #include <pthread.h>\n    void *add(void *arg);\n    long long int i = 0;\n    int main(void)\n    {\n    \u00a0\u00a0\u00a0pthread_attr_t threadattr;\n    \u00a0\u00a0\u00a0pthread_attr_init(&threadattr);\n    \u00a0\u00a0\u00a0pthread_t tid_add1, tid_add2, tid_add3, \n    \u00a0\u00a0\u00a0\u00a0\u00a0tid_add4, tid_add5;\n    \u00a0\u00a0\u00a0pthread_create(&tid_add1, &threadattr, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0add, NULL);\n    \u00a0\u00a0\u00a0pthread_create(&tid_add2, &threadattr, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0add, NULL);\n    \u00a0\u00a0\u00a0pthread_create(&tid_add3, &threadattr, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0add, NULL);\n    \u00a0\u00a0\u00a0pthread_create(&tid_add4, &threadattr, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0add, NULL);\n    \u00a0\u00a0\u00a0pthread_create(&tid_add5, &threadattr, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0add, NULL);\n    \u00a0\u00a0\u00a0pthread_join(tid_add1, NULL);\n    \u00a0\u00a0\u00a0pthread_join(tid_add2, NULL);\n    \u00a0\u00a0\u00a0pthread_join(tid_add3, NULL);\n    \u00a0\u00a0\u00a0pthread_join(tid_add4, NULL);\n    \u00a0\u00a0\u00a0pthread_join(tid_add5, NULL);\n    \u00a0\u00a0\u00a0printf(\"Sum is %lld\\n\", i);\n    \u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```\n    void *add(void *arg)\n    {\n    \u00a0\u00a0\u00a0for (long long int j = 1; j <= 1000000000; j++)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i = i + 1;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0return NULL;\n    }\n    ```", "```\n    $> make race\n    gcc -Wall -Wextra -pedantic -std=c99 -lpthread\u00a0\u00a0\u00a0\u00a0race.c\u00a0\u00a0\u00a0-o race\n    race.c: In function 'add':\n    race.c:35:17: warning: unused parameter 'arg' [-Wunused-parameter]\n     void *add(void *arg)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0~~~~~~^~~\n    ```", "```\n    $> ./race \n    Sum is 1207835374\n    $> ./race \n    Sum is 1132939275\n    $> ./race \n    Sum is 1204521570\n    ```", "```\n    $> time ./race\n    Sum is 1188433970\n    real\u00a0\u00a0\u00a0\u00a00m20,195s\n    user\u00a0\u00a0\u00a0\u00a01m31,989s\n    sys\u00a0\u00a0\u00a0\u00a0\u00a00m0,020s\n    ```", "```\n    #include <stdio.h>\n    #include <pthread.h>\n    void *add(void *arg);\n    long long int i = 0;\n    pthread_mutex_t i_mutex;\n    int main(void)\n    {\n    \u00a0\u00a0\u00a0pthread_attr_t threadattr;\n    \u00a0\u00a0\u00a0pthread_attr_init(&threadattr);\n    \u00a0\u00a0\u00a0pthread_t tid_add1, tid_add2, tid_add3, \n    \u00a0\u00a0\u00a0\u00a0\u00a0tid_add4, tid_add5;\n    \u00a0\u00a0\u00a0if ( (pthread_mutex_init(&i_mutex, NULL)) != 0 )\n    \u00a0\u00a0\u00a0{\n    fprintf(stderr, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Couldn't initialize mutex\\n\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0pthread_create(&tid_add1, &threadattr, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0add, NULL);\n    \u00a0\u00a0\u00a0pthread_create(&tid_add2, &threadattr, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0add, NULL);\n    \u00a0\u00a0\u00a0pthread_create(&tid_add3, &threadattr, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0add, NULL);\n    \u00a0\u00a0\u00a0pthread_create(&tid_add4, &threadattr, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0add, NULL);\n    \u00a0\u00a0\u00a0pthread_create(&tid_add5, &threadattr, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0add, NULL);\n    \u00a0\u00a0\u00a0pthread_join(tid_add1, NULL);\n    \u00a0\u00a0\u00a0pthread_join(tid_add2, NULL);\n    \u00a0\u00a0\u00a0pthread_join(tid_add3, NULL);\n    \u00a0\u00a0\u00a0pthread_join(tid_add4, NULL);\n    \u00a0\u00a0\u00a0pthread_join(tid_add5, NULL);\n    ```", "```\n    \u00a0\u00a0\u00a0printf(\"Sum is %lld\\n\", i);\n    \u00a0\u00a0\u00a0if ( (pthread_mutex_destroy(&i_mutex)) != 0 )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fprintf(stderr, \"Couldn't destroy mutex\\n\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```\n    void *add(void *arg)\n    {\n    \u00a0\u00a0\u00a0for (long long int j = 1; j <= 1000000000; j++)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pthread_mutex_lock(&i_mutex);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i = i + 1;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pthread_mutex_unlock(&i_mutex);\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0return NULL;\n    }\n    ```", "```\n    $> make locking\n    gcc -Wall -Wextra -pedantic -std=c99 -lpthread\u00a0\u00a0\u00a0\u00a0locking.c\u00a0\u00a0\u00a0-o locking\n    locking.c: In function 'add':\n    locking.c:47:17: warning: unused parameter 'arg' [-Wunused-parameter]\n     void *add(void *arg)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0~~~~~~^~~\n    ```", "```\n    $> time ./locking \n    Sum is 5000000000\n    real\u00a0\u00a0\u00a0\u00a05m23,647s\n    user\u00a0\u00a0\u00a0\u00a08m24,596s\n    sys\u00a0\u00a0\u00a0\u00a0\u00a016m11,407s\n    ```", "```\n    #include <stdio.h>\n    int main(void)\n    {\n    \u00a0\u00a0\u00a0long long int i = 0;\n    \u00a0\u00a0\u00a0for (int x = 1; x <= 5; x++)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (long long int j = 1; j <= 1000000000; j++)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i = i + 1;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0printf(\"Sum is %lld\\n\", i);\n    \u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```\n    $> make non-threaded\n    gcc -Wall -Wextra -pedantic -std=c99 -lpthread\u00a0\u00a0\u00a0\u00a0non-threaded.c\u00a0\u00a0\u00a0-o non-threaded\n    $> time ./non-threaded \n    Sum is 5000000000\n    real\u00a0\u00a0\u00a0\u00a00m10,345s\n    user\u00a0\u00a0\u00a0\u00a00m10,341s\n    sys\u00a0\u00a0\u00a0\u00a0\u00a00m0,000s\n    ```", "```\n    void *add(void *arg)\n    {\n    \u00a0\u00a0\u00a0long long int j = 1;\n    \u00a0\u00a0\u00a0while(j < 1000000000)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0j = j + 1;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0pthread_mutex_lock(&i_mutex);\n    \u00a0\u00a0\u00a0i = i + j;\n    \u00a0\u00a0\u00a0pthread_mutex_unlock(&i_mutex);\n    \u00a0\u00a0\u00a0return NULL;\n    }\n    ```", "```\n    $> make efficient\n    gcc -Wall -Wextra -pedantic -std=c99 -lpthread\u00a0\u00a0\u00a0\u00a0efficient.c\u00a0\u00a0\u00a0-o efficient\n    efficient.c: In function 'add':\n    efficient.c:47:17: warning: unused parameter 'arg' [-Wunused-parameter]\n     void *add(void *arg)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0~~~~~~^~~\n    ```", "```\n    $ time ./efficient \n    Sum is 5000000000\n    real\u00a0\u00a0\u00a0\u00a00m1,954s\n    user\u00a0\u00a0\u00a0\u00a00m8,858s\n    sys\u00a0\u00a0\u00a0\u00a0\u00a00m0,004s\n    ```", "```\n    #include <stdio.h>\n    #include <stdlib.h>\n    #include <unistd.h>\n    #include <pthread.h>\n    #include <stdint.h>\n    void *isprime(void *arg);\n    void *progress(void *arg);\n    pthread_mutex_t lock;\n    pthread_cond_t ready;\n    pthread_t primeid = 0;\n    int main(int argc, char *argv[])\n    {\n    \u00a0\u00a0\u00a0long long number1;\n    \u00a0\u00a0\u00a0long long number2;\n    \u00a0\u00a0\u00a0pthread_t tid_prime1;\n    \u00a0\u00a0\u00a0pthread_t tid_prime2;\n    \u00a0\u00a0\u00a0pthread_t tid_progress;\n    \u00a0\u00a0\u00a0pthread_attr_t threadattr;\n    \u00a0\u00a0\u00a0void *prime1Return;\n    \u00a0\u00a0\u00a0void *prime2Return;\n    ```", "```\n    \u00a0\u00a0\u00a0if ( (pthread_mutex_init(&lock, NULL)) != 0 )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fprintf(stderr, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Couldn't initialize mutex\\n\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0if ( (pthread_cond_init(&ready, NULL)) != 0 )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fprintf(stderr, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Couldn't initialize condition variable\\n\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    ```", "```\n    \u00a0\u00a0\u00a0if ( argc != 3 )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fprintf(stderr, \"Please supply two numbers.\\n\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Example: %s 9 7\\n\", argv[0]);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0number1 = atoll(argv[1]);\n    \u00a0\u00a0\u00a0number2 = atoll(argv[2]);\n    \u00a0\u00a0\u00a0pthread_attr_init(&threadattr);\n    \u00a0\u00a0\u00a0pthread_create(&tid_progress, &threadattr, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0progress, NULL);\u00a0\u00a0\n    \u00a0\u00a0\u00a0pthread_detach(tid_progress);\n    \u00a0\u00a0\u00a0pthread_create(&tid_prime1, &threadattr, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0isprime, &number1);\n    \u00a0\u00a0\u00a0pthread_create(&tid_prime2, &threadattr, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0isprime, &number2);\n    ```", "```\n    \u00a0\u00a0\u00a0pthread_mutex_lock(&lock);\n    \u00a0\u00a0\u00a0for (int i = 0; i < 2; i++)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while (primeid == 0)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pthread_cond_wait(&ready, &lock);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (primeid == tid_prime1)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pthread_join(tid_prime1, &prime1Return);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (\u00a0\u00a0(uintptr_t)prime1Return == 1 )\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"\\n%lld is a prime number\\n\", \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0number1);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"\\n%lld is not a prime number\\n\", \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0number1);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0primeid = 0;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pthread_join(tid_prime2, &prime2Return);\u00a0\u00a0\u00a0\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if ( (uintptr_t)prime2Return == 1 )\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"\\n%lld is a prime number\\n\", \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0number2);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"\\n%lld is not a prime number\\n\", \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0number2);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0primeid = 0;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0pthread_mutex_unlock(&lock);\n    \u00a0\u00a0\u00a0pthread_attr_destroy(&threadattr);\n    \u00a0\u00a0\u00a0if ( pthread_cancel(tid_progress) != 0 )\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fprintf(stderr, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Couldn't cancel progress thread\\n\");\n\n    \u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```\n    void *isprime(void *arg)\n    {\n    \u00a0\u00a0\u00a0long long int number = *((long long*)arg);\n    \u00a0\u00a0\u00a0long long int j;\n    \u00a0\u00a0\u00a0int prime = 1;\n\n    \u00a0\u00a0\u00a0for(j=2; j<number; j++)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(number%j == 0)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0prime = 0;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0pthread_mutex_lock(&lock);\n    \u00a0\u00a0\u00a0primeid = pthread_self();\n    \u00a0\u00a0\u00a0pthread_cond_signal(&ready);\n    \u00a0\u00a0\u00a0pthread_mutex_unlock(&lock);\n    \u00a0\u00a0\u00a0if(prime == 1)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return (void*)1;\n    \u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return (void*)0;\n    }\n    ```", "```\n    void *progress(void *arg)\n    {\n    \u00a0\u00a0\u00a0while(1)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sleep(1);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\".\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fflush(stdout);\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0return NULL;\n    }\n    ```", "```\n    $> make cond-var\n    gcc -Wall -Wextra -pedantic -std=c99 -lpthread\u00a0\u00a0\u00a0\u00a0cond-var.c\u00a0\u00a0\u00a0-o cond-var\n    cond-var.c: In function 'progress':\n    cond-var.c:114:22: warning: unused parameter 'arg' [-Wunused-parameter]\n     void *progress(void *arg)\n    ```", "```\n    $> ./cond-var 990231117 9902343047\n    ........\n    990231117 is not a prime number\n    ................................................................................\n    9902343047 is a prime number\n    $> ./cond-var 9902343047 990231117\n    ........\n    990231117 is not a prime number\n    ...............................................................................\n    9902343047 is a prime number\n    ```"]