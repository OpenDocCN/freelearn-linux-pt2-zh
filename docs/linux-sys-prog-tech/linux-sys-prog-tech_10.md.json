["```\n    #define _XOPEN_SOURCE 500\n    #include <stdio.h>\n    #include <sys/types.h>\n    #include <signal.h>\n    #include <getopt.h>\n    #include <string.h>\n    #include <linux/limits.h>\n    void printUsage(char progname[], FILE *fp);\n    int main(int argc, char *argv[])\n    {\n    \u00a0\u00a0\u00a0FILE *fp;\n    \u00a0\u00a0\u00a0FILE *procfp;\n    \u00a0\u00a0\u00a0int pid, opt;\n    \u00a0\u00a0\u00a0int killit = 0;\n    \u00a0\u00a0\u00a0char procpath[PATH_MAX] = { 0 };\n    \u00a0\u00a0\u00a0char cmdline[PATH_MAX] = { 0 };\n    \u00a0\u00a0\u00a0const char pidfile[] = \"/var/run/my-daemon.pid\";\n    \u00a0\u00a0\u00a0const char daemonPath[] = \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"/usr/local/sbin/my-daemon-v2\";\n    ```", "```\n    \u00a0\u00a0\u00a0/* Parse command-line options */\n    \u00a0\u00a0\u00a0while ((opt = getopt(argc, argv, \"kh\")) != -1)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0switch (opt)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case 'k': /* kill the daemon */\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0killit = 1;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case 'h': /* help */\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printUsage(argv[0], stdout);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 0;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0default: /* in case of invalid options */\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printUsage(argv[0], stderr);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0}\n    ```", "```\n    \u00a0\u00a0\u00a0if ( (fp = fopen(pidfile, \"r\")) == NULL )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Can't open PID-file (daemon isn't \"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"running?)\");\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0/* read the pid (and check if we could read an \n    \u00a0\u00a0\u00a0\u00a0* integer) */\n    \u00a0\u00a0\u00a0if ( (fscanf(fp, \"%d\", &pid)) != 1 )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fprintf(stderr, \"Can't read PID from %s\\n\", \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pidfile);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0/* build the /proc path */\n    \u00a0\u00a0\u00a0sprintf(procpath, \"/proc/%d/cmdline\", pid);\n    \u00a0\u00a0\u00a0/* open the /proc path */\n    \u00a0\u00a0\u00a0if ( (procfp = fopen(procpath, \"r\")) == NULL )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Can't open /proc path\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\" (no /proc or wrong PID?)\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0/* read the cmd line path from proc */\n    \u00a0\u00a0\u00a0fscanf(procfp, \"%s\", cmdline); \n    ```", "```\n    \u00a0\u00a0\u00a0/* check that the PID matches the cmdline */\n    \u00a0\u00a0\u00a0if ( (strncmp(cmdline, daemonPath, PATH_MAX)) \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0!= 0 )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fprintf(stderr, \"PID %d doesn't belong \"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"to %s\\n\", pid, daemonPath);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    ```", "```\n    \u00a0\u00a0\u00a0if ( killit == 1 )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if ( (kill(pid, SIGTERM)) == 0 )\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"Successfully terminated \" \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"my-daemon-v2\\n\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Couldn't terminate my-daemon-v2\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"The daemon is running with PID %d\\n\", \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pid);\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```\n    void printUsage(char progname[], FILE *fp)\n    {\n    \u00a0\u00a0\u00a0fprintf(fp, \"Usage: %s [-k] [-h]\\n\", progname);\n    \u00a0\u00a0\u00a0fprintf(fp, \"If no options are given, a status \"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"message is displayed.\\n\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"-k will terminate the daemon.\\n\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"-h will display this usage help.\\n\");\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n    }\n    ```", "```\n    $> make my-daemon-ctl\n    gcc -Wall -Wextra -pedantic -std=c99\u00a0\u00a0\u00a0\u00a0my-daemon ctl.c\u00a0\u00a0\u00a0-o my-daemon-ctl\n    ```", "```\n    $> sudo systemctl disable my-daemon\n    $> sudo systemctl stop my-daemon\n    ```", "```\n    $> make my-daemon-v2\n    gcc -Wall -Wextra -pedantic -std=c99\u00a0\u00a0\u00a0\u00a0my-daemon-v2.c\u00a0\u00a0\u00a0-o my-daemon-v2\n    ```", "```\n    $> sudo ./my-daemon-v2\n    ```", "```\n    $> ./my-daemon-ctl \n    The daemon is running with PID 17802 and cmdline ./my-daemon-v2\n    $> ./my-daemon-ctl -k\n    Couldn't terminate daemon: Operation not permitted\n    $> sudo ./my-daemon-ctl -k\n    Successfully terminated daemon\n    ```", "```\n    $> ./my-daemon-ctl \n    Can't open PID-file (daemon isn't running?): No such file or directory\n    ```", "```\n    #define _POSIX_C_SOURCE\u00a0\u00a0200809L\n    #include <stdio.h>\n    #include <unistd.h>\n    #include <fcntl.h>\n    #include <errno.h>\n    #define MAX 128\n    int main(void)\n    {\n    \u00a0\u00a0\u00a0int pipefd[2] = { 0 };\n    \u00a0\u00a0\u00a0pid_t pid;\n    \u00a0\u00a0\u00a0char line[MAX];\n    ```", "```\n    \u00a0\u00a0\u00a0if ( (pipe(pipefd)) == -1 )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Can't create pipe\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\n    \u00a0\u00a0\u00a0if ( (pid = fork()) == -1 )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Can't fork\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    ```", "```\n    \u00a0\u00a0\u00a0if (pid > 0)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* inside the parent */\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0close(pipefd[0]); /* close the read end */\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dprintf(pipefd[1], \"Hello from parent\");\n    \u00a0\u00a0\u00a0}\n    ```", "```\n    \u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* inside the child */\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0close(pipefd[1]); /* close the write end */\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0read(pipefd[0], line, MAX-1);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"%s\\n\", line); /* print message from\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0* the parent */\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```\n    $> make pipe-example\n    gcc -Wall -Wextra -pedantic -std=c99\u00a0\u00a0\u00a0\u00a0pipe-example.c\u00a0\u00a0\u00a0-o pipe-example\n    ```", "```\n    $> ./pipe-example \n    Hello from parent\n    ```", "```\n    $> mkfifo /tmp/my-fifo\n    ```", "```\n    $> file /tmp/my-fifo \n    /tmp/my-fifo: fifo (named pipe)\n    $> ls -l /tmp/my-fifo \n    prw-r--r-- 1 jake jake 0 jan 10 20:03 /tmp/my-fifo\n    ```", "```\n    $> uptime -p > /tmp/my-fifo\n    ```", "```\n    $> cat < /tmp/my-fifo \n    up 5 weeks, 6 days, 2 hours, 11 minutes\n    ```", "```\n    $> cat < /tmp/my-fifo\n    ```", "```\n    $> uptime -p > /tmp/my-fifo\n    ```", "```\n    $> echo \"Hello from terminal 1\" > /tmp/my-fifo\n    ```", "```\n    $> cat < /tmp/my-fifo\n    Hello from terminal 3\n    Hello from terminal 1\n    Hello from terminal 2\n    ```", "```\n    #define _XOPEN_SOURCE 700\n    #include <stdio.h>\n    #include <unistd.h>\n    #include <sys/types.h>\n    #include <sys/stat.h>\n    #include <unistd.h>\n    #include <fcntl.h>\n    #include <signal.h>\n    #include <stdlib.h>\n    #include <errno.h>\n    void cleanUp(int signum);\n    int fd; /* the FIFO file descriptor */\n    const char fifoname[] = \"/tmp/my-2nd-fifo\";\n    ```", "```\n    int main(int argc, char *argv[])\n    {\n    \u00a0\u00a0\u00a0struct sigaction action; /* for sigaction */\n    \u00a0\u00a0\u00a0if ( argc != 2 )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fprintf(stderr, \"Usage: %s 'the message'\\n\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0argv[0]);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    ```", "```\n    \u00a0\u00a0\u00a0/* prepare for sigaction and register signals\n    \u00a0\u00a0\u00a0\u00a0* (for cleanup when we exit) */\n    \u00a0\u00a0\u00a0action.sa_handler = cleanUp;\n    \u00a0\u00a0\u00a0sigfillset(&action.sa_mask);\n    \u00a0\u00a0\u00a0action.sa_flags = SA_RESTART;\n    \u00a0\u00a0\u00a0sigaction(SIGTERM, &action, NULL);\n    \u00a0\u00a0\u00a0sigaction(SIGINT, &action, NULL);\n    \u00a0\u00a0\u00a0sigaction(SIGQUIT, &action, NULL);\n    \u00a0\u00a0\u00a0sigaction(SIGABRT, &action, NULL);\n    \u00a0\u00a0\u00a0sigaction(SIGPIPE, &action, NULL);\n    ```", "```\n    \u00a0\u00a0\u00a0if ( (mkfifo(fifoname, 0644)) != 0 )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Can't create FIFO\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0if ( (fd = open(fifoname, O_WRONLY)) == -1)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Can't open FIFO\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    ```", "```\n    \u00a0\u00a0\u00a0while(1)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dprintf(fd, \"%s\\n\", argv[1]);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sleep(1);\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0/* just in case, but we shouldn't reach this */\n    \u00a0\u00a0\u00a0close(fd);\n    \u00a0\u00a0\u00a0unlink(fifoname);\n    \u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```\n    void cleanUp(int signum)\n    {\n    \u00a0\u00a0\u00a0if (signum == SIGPIPE)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"The receiver stopped receiving\\n\");\n    \u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"Aborting...\\n\");\n    \u00a0\u00a0\u00a0if ( (close(fd)) == -1 )\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Can't close file descriptor\");\n    \u00a0\u00a0\u00a0if ( (unlink(fifoname)) == -1)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Can't remove FIFO\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0exit(1);\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0exit(0);\n    }\n    ```", "```\n    $> make fifo-sender\n    gcc -Wall -Wextra -pedantic -std=c99\u00a0\u00a0\u00a0\u00a0fifo-sender.c\u00a0\u00a0\u00a0-o fifo-sender\n    ```", "```\n    $> ./fifo-sender 'Hello everyone, how are you?'\n    ```", "```\n    $> cat < /tmp/my-2nd-fifo \n    Hello everyone, how are you?\n    Hello everyone, how are you?\n    Hello everyone, how are you?\n    *Ctrl**+**P* \n    ```", "```\n    $> cat < /tmp/my-2nd-fifo\n    ```", "```\n    Ctrl+C\n    ^CAborting...\n    ```", "```\n    #include <stdio.h>\n    int main(void)\n    {\n    \u00a0\u00a0\u00a0\u00a0FILE *fp;\n    \u00a0\u00a0\u00a0\u00a0signed char c;\n    \u00a0\u00a0\u00a0\u00a0const char fifoname[] = \"/tmp/my-2nd-fifo\";\n    \u00a0\u00a0\u00a0\u00a0if ( (fp = fopen(fifoname, \"r\")) == NULL )\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Can't open FIFO\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0while ( (c = getc(fp)) != EOF )\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0putchar(c);\n    \u00a0\u00a0\u00a0\u00a0fclose(fp);\n    \u00a0\u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```\n    $> make fifo-receiver\n    gcc -Wall -Wextra -pedantic -std=c99\u00a0\u00a0\u00a0\u00a0fifo-receiver.c\u00a0\u00a0\u00a0-o fifo-receiver\n    ```", "```\n    $> ./fifo-sender 'Hello from the sender'\n    ```", "```\n    fifo-sender will also abort, just like when we used the cat command to receive the data.\n    ```", "```\n    #include <stdio.h>\n    #include <mqueue.h>\n    #include <fcntl.h>\n    #include <sys/stat.h>\n    #include <sys/types.h>\n    #include <string.h>\n    #define MAX_MSG_SIZE 2048\n    int main(int argc, char *argv[])\n    {\n    \u00a0\u00a0\u00a0int md; /* msg queue descriptor */\n    \u00a0\u00a0\u00a0/* attributes for the message queue */\n    \u00a0\u00a0\u00a0struct mq_attr msgattr;\n    \u00a0\u00a0\u00a0msgattr.mq_maxmsg = 10;\n    \u00a0\u00a0\u00a0msgattr.mq_msgsize = MAX_MSG_SIZE;\n    ```", "```\n    \u00a0\u00a0\u00a0if ( argc != 2)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fprintf(stderr, \"Usage: %s 'my message'\\n\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0argv[0]);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    ```", "```\n    \u00a0\u00a0\u00a0md = mq_open(\"/my_queue\", O_CREAT|O_RDWR, 0644, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&msgattr); \n    \u00a0\u00a0\u00a0if ( md == -1 )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Creating message queue\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0if ( (mq_send(md, argv[1], strlen(argv[1]), 1))\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0== -1 )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Message queue send\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0mq_close(md);\n    \u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```\n    $> gcc -Wall -Wextra -pedantic -std=c99 -lrt \\\n    > msg-sender.c -o msg-sender\n    ```", "```\n    $> ./msg-sender \"The first message to the queue\"\n    $> ./msg-sender \"The second message\"\n    $> ./msg-sender \"And another message\"\n    ```", "```\n    #include <stdio.h>\n    #include <mqueue.h>\n    #include <fcntl.h>\n    #include <sys/stat.h>\n    #include <sys/types.h>\n    #include <stdlib.h>\n    #include <string.h>\n    int main(void)\n    {\n    \u00a0\u00a0\u00a0int md; /* msg queue descriptor */\n    \u00a0\u00a0\u00a0char *buffer;\n    \u00a0\u00a0\u00a0struct mq_attr msgattr;\n    ```", "```\n    \u00a0\u00a0\u00a0md = mq_open(\"/my_queue\", O_RDONLY);\n    \u00a0\u00a0\u00a0if (md == -1 )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Open message queue\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    ```", "```\n    \u00a0\u00a0\u00a0if ( (mq_getattr(md, &msgattr)) == -1 )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Get message attribute\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0buffer = calloc(msgattr.mq_msgsize, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sizeof(char));\n    \u00a0\u00a0\u00a0if (buffer == NULL)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fprintf(stderr, \"Couldn't allocate memory\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    ```", "```\n    \u00a0\u00a0\u00a0printf(\"%ld messages in queue\\n\", \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0msgattr.mq_curmsgs);\n    \u00a0\u00a0\u00a0for (int i = 0; i<msgattr.mq_curmsgs; i++)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if ( (mq_receive(md, buffer, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0msgattr.mq_msgsize, NULL)) == -1 )\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Message receive\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"%s\\n\", buffer);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0memset(buffer, '\\0', msgattr.mq_msgsize);\n    \u00a0\u00a0\u00a0}\n    ```", "```\n    \u00a0\u00a0\u00a0free(buffer);\n    \u00a0\u00a0\u00a0mq_close(md);\n    \u00a0\u00a0\u00a0mq_unlink(\"/my_queue\");\n    \u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```\n    $> gcc -Wall -Wextra -pedantic -std=c99 -lrt \\\n    > msg-reveiver.c -o msg-reveiver\n    ```", "```\n    $> ./msg-reveiver \n    3 messages in queue\n    The first message to the queue\n    The second message\n    And another message\n    ```", "```\n    $> ./msg-reveiver \n    Open message queue: No such file or directory\n    ```", "```\n    #include <stdio.h>\n    #include <sys/mman.h>\n    #include <sys/types.h>\n    #include <sys/stat.h>\n    #include <sys/wait.h>\n    #include <fcntl.h>\n    #include <unistd.h>\n    #include <string.h>\n    #define DATASIZE 128\n    int main(void)\n    {\n    \u00a0\u00a0\u00a0char *addr;\n    \u00a0\u00a0\u00a0int status;\n    \u00a0\u00a0\u00a0pid_t pid;\n    \u00a0\u00a0\u00a0const char startmsg[] = \"Hello, we are running\";\n    \u00a0\u00a0\u00a0const char childmsg[] = \"Hello from child\";\n    \u00a0\u00a0\u00a0const char parentmsg[] = \"New msg from parent\";\n    ```", "```\n    \u00a0\u00a0\u00a0addr = mmap(NULL, DATASIZE, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0PROT_WRITE | PROT_READ, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0MAP_SHARED | MAP_ANONYMOUS, -1, 0);\n    \u00a0\u00a0\u00a0if (addr == MAP_FAILED)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Memory mapping failed\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    ```", "```\n    \u00a0\u00a0\u00a0memcpy(addr, startmsg, strlen(startmsg) + 1);\n    \u00a0\u00a0\u00a0printf(\"Parent PID is %d\\n\", getpid());\n    \u00a0\u00a0\u00a0printf(\"Original message: %s\\n\", addr);\n    \u00a0\u00a0\u00a0if ( (pid = fork()) == -1 )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Can't fork\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    ```", "```\n    \u00a0\u00a0\u00a0if (pid == 0)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* child */\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0memcpy(addr, childmsg, strlen(childmsg) + 1);\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0else if(pid > 0)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* parent */\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0waitpid(pid, &status, 0);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"Child executed with PID %d\\n\", pid);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"Message from child: %s\\n\", addr);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0memcpy(addr, parentmsg, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0strlen(parentmsg) + 1);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"Parent message: %s\\n\", addr);\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0munmap(addr, DATASIZE);\n    \u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```\n    $> gcc -Wall -Wextra -std=gnu11 -lrt \\\n    > shm-parent-child.c -o shm-parent-child\n    ```", "```\n    $> ./shm-parent-child \n    Parent PID is 9683\n    Original message: Hello, we are running\n    Child executed with PID 9684\n    Message from child: Hello from child\n    Parent message: New msg from parent\n    ```", "```\n    #include <stdio.h>\n    #include <sys/mman.h>\n    #include <sys/types.h>\n    #include <sys/stat.h>\n    #include <fcntl.h>\n    #include <unistd.h>\n    #include <string.h>\n    #define DATASIZE 128\n    int main(void)\n    {\n    \u00a0\u00a0\u00a0int fd;\n    \u00a0\u00a0\u00a0float *addr;\n    \u00a0\u00a0\u00a0const char memid[] = \"/my_memory\";\n    \u00a0\u00a0\u00a0const float numbers[3] = { 3.14, 2.718, 1.202};\n    \u00a0\u00a0\u00a0/* create shared memory file descriptor */\n    \u00a0\u00a0\u00a0if ( (fd = shm_open(memid, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0O_RDWR | O_CREAT, 0600)) == -1)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Can't open memory fd\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    ```", "```\n    \u00a0\u00a0\u00a0/* truncate memory to DATASIZE */\n    \u00a0\u00a0\u00a0if ( (ftruncate(fd, DATASIZE)) == -1 )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Can't truncate memory\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    ```", "```\n    \u00a0\u00a0\u00a0/* map memory using our file descriptor */\n    \u00a0\u00a0\u00a0addr = mmap(NULL, DATASIZE, PROT_WRITE, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0MAP_SHARED, fd, 0);\n    \u00a0\u00a0\u00a0if (addr == MAP_FAILED)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Memory mapping failed\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0/* copy data to memory */\n    \u00a0\u00a0\u00a0memcpy(addr, numbers, sizeof(numbers));\n    \u00a0\u00a0\u00a0/* wait for enter */\n    \u00a0\u00a0\u00a0printf(\"Hit enter when finished \");\n    \u00a0\u00a0\u00a0getchar();\n    \u00a0\u00a0\u00a0/* clean up */\n    \u00a0\u00a0\u00a0munmap(addr, DATASIZE);\n    \u00a0\u00a0\u00a0shm_unlink(memid);\n    \u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```\n    $> gcc -Wall -Wextra -std=gnu11 -lrt write-memory.c \\\n    > -o write-memory\n    ```", "```\n    #include <stdio.h>\n    #include <sys/mman.h>\n    #include <sys/types.h>\n    #include <sys/stat.h>\n    #include <fcntl.h>\n    #include <unistd.h>\n    #include <string.h>\n    #define DATASIZE 128\n    int main(void)\n    {\n    \u00a0\u00a0\u00a0int fd;\n    \u00a0\u00a0\u00a0float *addr;\n    \u00a0\u00a0\u00a0const char memid[] = \"/my_memory\";\n    \u00a0\u00a0\u00a0float numbers[3];\n    \u00a0\u00a0\u00a0/* open memory file descriptor */\n    \u00a0\u00a0\u00a0fd = shm_open(memid, O_RDONLY, 0600);\n    \u00a0\u00a0\u00a0if (fd == -1)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Can't open file descriptor\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0/* map shared memory */\n    \u00a0\u00a0\u00a0addr = mmap(NULL, DATASIZE, PROT_READ, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0MAP_SHARED, fd, 0);\n    \u00a0\u00a0\u00a0if (addr == MAP_FAILED)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Memory mapping failed\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0/* read the memory and print the numbers */\n    \u00a0\u00a0\u00a0memcpy(numbers, addr, sizeof(numbers));\n    \u00a0\u00a0\u00a0for (int i = 0; i<3; i++)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"Number %d: %.3f\\n\", i, numbers[i]);\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```\n    $> gcc -Wall -Wextra -std=gnu11 -lrt read-memory.c \\\n    > -o read-memory\n    ```", "```\n    $> ./write-memory \n    Hit enter when finished\n    ```", "```\n    $> ls -l /dev/shm/my_memory \n    -rw------- 1 jake jake 128 jan 18 19:19 /dev/shm/my_memory\n    ```", "```\n    $> ./read-memory \n    Number 0: 3.140\n    Number 1: 2.718\n    Number 2: 1.202\n    ```", "```\n    ./write-memory \n    Hit enter when finished Enter\n    $> ls -l /dev/shm/my_memory\n    ls: cannot access '/dev/shm/my_memory': No such file or directory\n    ```", "```\n    #define _XOPEN_SOURCE 700\n    #include <stdio.h>\n    #include <sys/types.h>\n    #include <sys/socket.h>\n    #include <sys/un.h>\n    #include <string.h>\n    #include <unistd.h>\n    #include <signal.h>\n    #include <stdlib.h>\n    #include <errno.h>\n    #define MAXLEN 128\n    void cleanUp(int signum);\n    const char sockname[] = \"/tmp/my_1st_socket\";\n    int connfd;\n    int datafd;\n    ```", "```\n    int main(void)\n    {\n    \u00a0\u00a0\u00a0int ret;\n    \u00a0\u00a0\u00a0struct sockaddr_un addr;\n    \u00a0\u00a0\u00a0char buffer[MAXLEN];\n    \u00a0\u00a0\u00a0struct sigaction action;\n    \u00a0\u00a0\u00a0/* prepare for sigaction */\n    \u00a0\u00a0\u00a0action.sa_handler = cleanUp;\n    \u00a0\u00a0\u00a0sigfillset(&action.sa_mask);\n    \u00a0\u00a0\u00a0action.sa_flags = SA_RESTART;\n    \u00a0\u00a0\u00a0/* register the signals we want to handle */\n    \u00a0\u00a0\u00a0sigaction(SIGTERM, &action, NULL);\n    \u00a0\u00a0\u00a0sigaction(SIGINT, &action, NULL);\n    \u00a0\u00a0\u00a0sigaction(SIGQUIT, &action, NULL);\n    \u00a0\u00a0\u00a0sigaction(SIGABRT, &action, NULL);\n    \u00a0\u00a0\u00a0sigaction(SIGPIPE, &action, NULL);\n    ```", "```\n    \u00a0\u00a0\u00a0/* create socket file descriptor */\n    \u00a0\u00a0\u00a0connfd = socket(AF_UNIX, SOCK_SEQPACKET, 0);\n    \u00a0\u00a0\u00a0if ( connfd == -1 )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Create socket failed\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0/* set address family and socket path */\n    \u00a0\u00a0\u00a0addr.sun_family = AF_UNIX;\n    \u00a0\u00a0\u00a0strcpy(addr.sun_path, sockname);\n    \u00a0\u00a0\u00a0/* bind the socket (we must cast our sockaddr_un\n    \u00a0\u00a0\u00a0\u00a0* to sockaddr) */\n    \u00a0\u00a0\u00a0if ( (bind(connfd, (const struct sockaddr*)&addr, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sizeof(struct sockaddr_un))) == -1 )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Binding socket failed\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    ```", "```\n    \u00a0\u00a0\u00a0/* prepare for accepting connections */\n    \u00a0\u00a0\u00a0if ( (listen(connfd, 20)) == -1 )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Listen error\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0/* accept connection and create new file desc */\n    \u00a0\u00a0\u00a0datafd = accept(connfd, NULL, NULL);\n    \u00a0\u00a0\u00a0if (datafd == -1 )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Accept error\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0printf(\"Client connected\\n\");\n    ```", "```\n    \u00a0\u00a0\u00a0while(1) /* main loop */\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while(1) /* receive message, line by line */\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ret = read(datafd, buffer, MAXLEN);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if ( ret == -1 )\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Error reading line\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cleanUp(1);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if ( ret == 0 )\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"Client disconnected\\n\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cleanUp(1);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"Message: %s\\n\", buffer);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0/* write a confirmation message */\n    \u00a0\u00a0\u00a0write(datafd, \"Message received\\n\", 18);\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```\n    void cleanUp(int signum)\n    {\n    \u00a0\u00a0\u00a0printf(\"Quitting and cleaning up\\n\");\n    \u00a0\u00a0\u00a0close(connfd);\n    \u00a0\u00a0\u00a0close(datafd);\n    \u00a0\u00a0\u00a0unlink(sockname);\n    \u00a0\u00a0\u00a0exit(0);\n    }\n    ```", "```\n    $> make unix-server\n    gcc -Wall -Wextra -pedantic -std=c99\u00a0\u00a0\u00a0\u00a0unix-server.c\u00a0\u00a0\u00a0-o unix-server\n    unix-server.c: In function 'cleanUp':\n    unix-server.c:94:18: warning: unused parameter 'signum' [-Wunused-parameter]\n     void cleanUp(int signum)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0~~~~^~~~~~\n    ```", "```\n    $> ./unix-server\n    ```", "```\n    $> ls -l /tmp/my_1st_socket \n    srwxr-xr-x 1 jake jake 0 jan 19 18:35 /tmp/my_1st_socket\n    $> file /tmp/my_1st_socket \n    /tmp/my_1st_socket: socket\n    ```", "```\n    ./unix-server\n    Ctrl+C\n    Quitting and cleaning up\n    $> file /tmp/my_1st_socket \n    /tmp/my_1st_socket: cannot open `/tmp/my_1st_socket' (No such file or directory)\n    ```", "```\n    #define _XOPEN_SOURCE 700\n    #include <stdio.h>\n    #include <sys/types.h>\n    #include <sys/socket.h>\n    #include <sys/un.h>\n    #include <string.h>\n    #include <unistd.h>\n    #include <signal.h>\n    #include <stdlib.h>\n    #include <errno.h>\n    #define MAXLEN 128\n    int main(void)\n    {\n    \u00a0\u00a0\u00a0const char sockname[] = \"/tmp/my_1st_socket\";\n    \u00a0\u00a0\u00a0int fd;\n    \u00a0\u00a0\u00a0struct sockaddr_un addr;\n    \u00a0\u00a0\u00a0char sendbuffer[MAXLEN];\n    \u00a0\u00a0\u00a0char recvbuffer[MAXLEN];\n    \u00a0\u00a0\u00a0/* create socket file descriptor */\n    \u00a0\u00a0\u00a0fd = socket(AF_UNIX, SOCK_SEQPACKET, 0);\n    \u00a0\u00a0\u00a0if ( fd == -1 )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Create socket failed\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0/* set address family and socket path */\n    \u00a0\u00a0\u00a0addr.sun_family = AF_UNIX;\n    \u00a0\u00a0\u00a0strcpy(addr.sun_path, sockname);\n    ```", "```\n    \u00a0\u00a0\u00a0/* connect to the server */\n    \u00a0\u00a0\u00a0if ( (connect(fd, (const struct sockaddr*) &addr, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sizeof(struct sockaddr_un))) == -1 )\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Can't connect\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fprintf(stderr, \"The server is down?\\n\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0}\n    ```", "```\n    \u00a0\u00a0\u00a0while(1) /* main loop */\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* send message to server */\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"Message to send: \");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fgets(sendbuffer, sizeof(sendbuffer), stdin);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sendbuffer[strcspn(sendbuffer, \"\\n\")] = '\\0';\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if ( (write(fd, sendbuffer, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0strlen(sendbuffer) + 1)) == -1 )\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Couldn't write\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* read response from server */\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if ( (read(fd, recvbuffer, MAXLEN)) == -1 )\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perror(\"Can't read\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"Server said: %s\\n\", recvbuffer);\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```\n    $> make unix-client\n    gcc -Wall -Wextra -pedantic -std=c99\u00a0\u00a0\u00a0\u00a0unix-client.c\u00a0\u00a0\u00a0-o unix-client\n    ```", "```\n    $> ./unix-client \n    Can't connect: No such file or directory\n    The server is down?\n    ```", "```\n    $> ./unix-server\n    ```", "```\n    $> ./unix-client \n    Message to send:\n    ```", "```\n    $> ./unix-client \n    Message to send: Hello, how are you?\n    Server said: Message received\n    Message to send: Testing 123\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n    Server said: Message received\n    Message to send: Ctrl+C\n    ```", "```\n    Client connected\n    Message: Hello, how are you?\n    Message: Testing 123\n    Client disconnected\n    Quitting and cleaning up\n    ```"]