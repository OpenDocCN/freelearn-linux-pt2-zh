["```\n#!/bin/bash\n# Filename: shell_library.sh\n# Description: Demonstrating creation of library in shell\n\n# Declare global variables\ndeclare is_regular_file\ndeclare is_directory_file\n\n# Function to check file type\nfunction file_type()\n{\n  is_regular_file=0\n  is_directory_file=0\n  if [ -f $1 ]\n  then\n    is_regular_file=1\n  elif [ -d $1 ]\n  then\n    is_directory_file=1\n  fi\n}\n\n# Printing regular file detail\nfunction print_file_details()\n{\n   echo \"Filename - $1\"\n   echo \"Line count - `cat $1 | wc -l`\"\n   echo \"Size - `du -h $1 | cut -f1`\"\n   echo \"Owner - `ls -l $1 | tr -s ' '|cut -d ' ' -f3`\"\n   echo \"Last modified date - `ls -l $1 | tr -s ' '|cut -d ' ' -f6,7`\"\n}\n\n# Printing directory details\nfunction print_directory_details()\n{\n   echo \"Directory Name - $1\"\n   echo \"File Count in directory - `ls $1|wc -l`\"\n   echo \"Owner - `ls -ld $1 | tr -s ' '|cut -d ' ' -f3`\"\n   echo \"Last modified date - `ls -ld $1 | tr -s ' '|cut -d ' ' -f6,7`\"\n}\n```", "```\n$ source  shell_library.sh\n\n```", "```\n$ . shell_library.sh\n\n```", "```\n$ file_type /usr/bin\n$ echo $is_directory_file\n1\n$ echo $is_regular_file\n0\n$ if [ $is_directory_file -eq 1 ]; then print_directory_details /usr/bin; fi\nDirectory Name - /usr/bin\nFile Count in directory - 2336\nOwner - root\nLast modified date - Jul 12\n```", "```\n#!/bin/bash\n# Filename: shell_library_usage.sh\n# Description: Demonstrating shell library usage in shell script\n\n# Print details of all files/directories in a directory\necho \"Enter path of directory\"\nread dir\n\n# Loading shell_library.sh module\n. $PWD/shell_library.sh\n\n# Check if entered pathname is a directory\n# If directory, then print files/directories details inside it\nfile_type $dir\nif [ $is_directory_file -eq 1 ]\nthen\n   pushd $dir > /dev/null       # Save current directory and cd to $dir\n   for file in `ls`\n   do\n     file_type $file\n     if [ $is_directory_file -eq 1 ]\n     then\n       print_directory_details $file\n       echo\n     elif [ $is_regular_file -eq 1 ]\n     then\n       print_file_details $file\n       echo\n     fi\n   done\nfi\n```", "```\n$ sh  shell_library_usage.sh\t# Few outputs from /usr directory\nEnter path of directory\n/usr\nDirectory Name - bin\nFile Count in directory - 2336\nOwner - root\nLast modified date - Jul 12\n\nDirectory Name - games\nFile Count in directory - 0\nOwner - root\nLast modified date - Aug 16\n\nDirectory Name - include\nFile Count in directory - 172\nOwner - root\nLast modified date - Jul 12\n\nDirectory Name - lib\nFile Count in directory - 603\nOwner - root\nLast modified date - Jul 12\n\nDirectory Name - lib64\nFile Count in directory - 3380\nOwner - root\nLast modified date - Jul 12\n\nDirectory Name - libexec\nFile Count in directory - 170\nOwner - root\nLast modified date - Jul 7\n```", "```\n<script_file> arg1 arg2 arg3 \u2026 argN\n\n```", "```\n#!/bin/bash\n# Filename: command_line_arg.sh\n# Description: Accessing command line parameters in shell script\n\n# Printing first, second and third command line parameters\"\necho \"First command line parameter = $1\"\necho \"Second command line parameter = $2\"\necho \"Third command line parameter = $3\" \n```", "```\n$  sh command_line_arg.sh Linux Shell Scripting\nFirst command line parameter = Linux\nSecond command line parameter = Shell\nThird command line parameter = Scripting\n```", "```\n#!/bin/bash\n# Filename: command_line_arg2.sh\n# Description: Creating directories in /tmp\n\n# Check if at least 1 argument is passed in command line\nif [ $# -lt 1 ]\nthen\n  echo \"Specify minimum one argument to create directory\"\n  exit 1\nelse\n  pushd /tmp > /dev/null\n  echo \"Directory to be created are: $@\"\n  mkdir $@      # Accessing all command line arguments\nfi\n```", "```\n$  sh command_line_arg2.sh a b\nDirectory to be created are: a b\n$  sh command_line_arg2.sh\nSpecify minimum one argument to create directory\n\n```", "```\n#!/bin/bash\n# Filename: shift_argument.sh\n# Description: Usage of shift shell builtin\n\necho \"Length of command line arguments = $#\"\necho \"Arguments are:\"\necho \"\\$1 = $1, \\$2 = $2, \\$3 = $3, \\$4 = $4, \\$5 = $5, \\$6 = $6\"\necho \"Shifting arguments by 3\"\nshift 3\necho \"Length of command line arguments after 3 shift = $#\"\necho \"Arguments after 3 shifts are\"\necho \"\\$1 = $1, \\$2 = $2, \\$3 = $3, \\$4 = $4, \\$5 = $5, \\$6 = $6\"\n```", "```\n$ sh shift_argument.sh a b c d e f\nLength of command line arguments = 6\nArguments are:\n$1 = a, $2 = b, $3 = c, $4 = d, $5 = e, $6 = f\nShifting arguments by 3\nLength of command line arguments after 3 shift = 3\nArguments after 3 shifts are\n$1 = d, $2 = e, $3 = f, $4 = , $5 = , $6 = \n\n```", "```\n#!/bin/bash\n# Filename: myprint.sh\n# Description: Showing how to create command line options in shell script\n\nfunction display_help()\n{\n  echo \"Usage: myprint [OPTIONS] [arg ...]\"\n  echo \"--help  Display help\"\n  echo \"--version       Display version of script\"\n  echo  \"--print        Print arguments\"\n}\n\nfunction display_version()\n{\n  echo \"Version of shell script application is 0.1\"\n}\n\nfunction myprint()\n{\n  echo \"Arguments are: $*\"\n}\n\n# Parsing command line arguments\n\nif [ \"$1\" != \"\" ]\nthen\n   case $1 in\n        --help ) \n             display_help\n             exit 1\n            ;;\n        --version )\n             display_version\n             exit 1\n             ;;\n        --print )\n             shift\n             myprint $@\n             exit 1\n            ;;\n    *)\n    display_help\n    exit 1\n   esac\nfi\n```", "```\n$ sh myprint.sh --help\nUsage: myprint [OPTIONS] [arg ...]\n--help      Display help\n--version     Display version of script\n--print         Print arguments\n$ sh myprint.sh --version\nVersion of shell script application is 0.1\n$ sh myprint.sh --print Linux Shell Scripting\nArguments are: Linux Shell Scripting\n```", "```\n#!/bin/bash\n# Filename: buggy_script.sh\n# Description: Demonstrating a buggy script\n\na=12 b=8\nif [ a -gt $b ]\nthen\n  echo \"a is greater than b\"\nelse\n  echo \"b is greater than a\"\nfi\n```", "```\n$ sh buggy_script.sh \nbuggy_script.sh: line 6: [: a: integer expression expected\nb is greater than a\n\n```", "```\n#!/bin/bash\n# Filename: debugging_using_echo.sh\n# Description: Debugging using echo\n\na=12 b=8\necho \"if [ a -gt $b ]\"\nexit\nif [ a -gt $b ]\nthen\n  echo \"a is greater than b\"\nelse\n  echo \"b is greater than a\"\nfi\n```", "```\n$ sh debugging_using_echo.sh\nif [ a -gt 8 ]\n\n```", "```\n#!/bin/bash\n# Filename : debug_entire_script.sh\n# Description: Debugging entire shell script using -x\n\n# Creating diretcories in /tmp\ndir1=/tmp/$1\ndir2=/tmp/$2\nmkdir $dir1 $dir2\nls -ld $dir1\nls -ld $dir2\nrmdir $dir1\nrmdir $dir2\n```", "```\n$ sh debug_entire_script.sh pkg1\nmkdir: cannot create directory '/tmp/': File exists\ndrwxrwxr-x. 2 skumari skumari 40 Jul 14 01:47 /tmp/pkg1\ndrwxrwxrwt. 23 root root 640 Jul 14 01:47 /tmp/\nrmdir: failed to remove '/tmp/': Permission denied\n\n```", "```\n$ sh -x debug_entire_script.sh pkg1\n+ dir1=/tmp/pkg1\n+ dir2=/tmp/\n+ mkdir /tmp/pkg1 /tmp/\nmkdir: cannot create directory '/tmp/': File exists\n+ ls -ld /tmp/pkg1\ndrwxrwxr-x. 2 skumari skumari 40 Jul 14 01:47 /tmp/pkg1\n+ ls -ld /tmp/\ndrwxrwxrwt. 23 root root 640 Jul 14 01:47 /tmp/\n+ rmdir /tmp/pkg1\n+ rmdir /tmp/\nrmdir: failed to remove '/tmp/': Permission denied\n\n```", "```\n$ sh -xv debug_entire_script.sh pkg1\n#!/bin/bash\n# Filename : debug_entire_script.sh\n# Description: Debugging entire shell script using -x\n\n# Creating diretcories in /tmp\ndir1=/tmp/$1\n+ dir1=/tmp/pkg1\ndir2=/tmp/$2\n+ dir2=/tmp/\nmkdir $dir1 $dir2\n+ mkdir /tmp/pkg1 /tmp/\nmkdir: cannot create directory '/tmp/': File exists\nls -ld $dir1\n+ ls -ld /tmp/pkg1\ndrwxrwxr-x. 2 skumari skumari 40 Jul 14 01:47 /tmp/pkg1\nls -ld $dir2\n+ ls -ld /tmp/\ndrwxrwxrwt. 23 root root 640 Jul 14 01:47 /tmp/\nrmdir $dir1\n+ rmdir /tmp/pkg1\nrmdir $dir2\n+ rmdir /tmp/\nrmdir: failed to remove '/tmp/': Permission denied\n```", "```\n$  sh  debug_entire_script.sh pkg1 pkg2\ndrwxrwxr-x. 2 skumari skumari 40 Jul 14 01:50 /tmp/pkg1\ndrwxrwxr-x. 2 skumari skumari 40 Jul 14 01:50 /tmp/pkg2\n\n```", "```\nset -x  (Start debugging from here)\nset +x  (End debugging here)\n```", "```\n#!/bin/bash\n# Filename: eval.sh\n# Description: Evaluating arithmetic expression\n\na=23\nb=6\nexpr $a + $b\nexpr $a - $b\nexpr $a * $b\n```", "```\n$ sh eval.sh\n29\n17\nexpr: syntax error\n```", "```\n#!/bin/bash\n# Filename: partial_debugging.sh\n# Description: Debugging part of script of eval.sh\n\na=23\nb=6\nexpr $a + $b\n\nexpr $a - $b\n\nset -x\nexpr $a * $b\nset +x\n```", "```\n$  sh partial_debugging.sh\n29\n17\n+ expr 23 eval.sh partial_debugging.sh 6\nexpr: syntax error\n+ set +x\n```", "```\n#!/bin/bash\n# Filename: eval_modified.sh\n# Description: Evaluating arithmetic expression\n\na=23\nb=6\nexpr $a + $b\nexpr $a - $b\nexpr $a \\* $b\n```", "```\n$  sh eval_modified.sh \n29\n17\n138\n```", "```\n$ ls -R /dir1/dir2/dir3/dir4/dir5/dir6\n\n```", "```\n$ gr[TAB]      # Nothing happens\n$ gre[TAB]      # Autocompletes to grep\n$ grep[TAB][TAB]  # Lists commands installed in system and starts with grep\ngrep            grep-changelog  grepdiff \n\n```", "```\n$ ls /u[TAB]/sh[TAB]/man\n\n```", "```\n$ ls /usr/share/man\n\n```", "```\n$ complete -p\n\n```", "```\ncomplete cat  # No completion output\ncomplete -F _longopt grep  # Completion as files from current directory\ncomplete -d pushd  # Completion as directories from current directory\ncomplete -c which  # Completion as list of all available commands\n\n```", "```\n$ grep [TAB][TAB]\n\n```", "```\n$ complete -c which [TAB][TAB]\n Display all 3205 possibilities? (y or n)\n\n```", "```\n$ complete which\n$ which [TAB][TAB]  # No auto completion option will be shown\n\n```", "```\n$ ls ~/[TAB][TAB]    # Displays directories and file as  auto-completion\nfile1.sh file2.txt dir1/ dir2/ dir3/\n$ complete -d ls\n$ ls ~/[TAB][TAB]    # Displays only directory name as  auto-completion\ndir1/ dir2/ dir3/\n\n```", "```\ncomplete -r command_name\n\n```", "```\n$ complete | grep which  # Viewing bash completion specification for which\ncomplete -c which\n$ complete -r which     # Removed bash completion specification for which\n$ complete | grep which  # No output\n\n```", "```\n$ complete -r\n$ complete\n\n```", "```\n$ dnf up[TAB][TAB]\nupdate      updateinfo  update-to   upgrade     upgrade-to \n$ apt-get up[TAB][TAB]\nupdate upgrade\n\n```", "```\n#!/bin/bash\n# Filename: bash_completion_example.sh\n# Description: Example demonstrating bash completion feature for command options\n\nfunction help()\n{\n  echo \"Usage: print [OPTIONS] [arg ...]\"\n  echo \"-h|--help    Display help\"\n  echo \"-v|--version Display version of script\"\n  echo \"-p|--print     Print arguments\"\n}\n\nfunction version()\n{\n  echo \"Version of shell script application is 0.1\"\n}\n\nfunction print()\n{\n  echo \"Arguments are: $*\"\n}\n\n# Parsing command line arguments\n\nwhile [ \"$1\" != \"\" ]\ndo\n   case $1 in\n        -h | --help ) \n             help\n             exit 1\n            ;;\n        -v | --version )\n             version\n             exit 1\n             ;;\n        -p | --print )\n             shift\n             print $@\n             exit 1\n            ;;\n    *)\n    help\n    exit 1\n   esac\ndone\n```", "```\n$ chmod +x bash_completion_example.sh\t# Adding execute permission to script\n$ ./bash_completion_example.sh --help\nUsage: print [OPTIONS] [arg ...]\n-h|--help    Display help\n-v|--version Display version of script\n-p|--print     Print arguments\n\n```", "```\n# Filename: bash_completion_example\n# Description: Bash completion for bash_completion_example.sh\n\n_bash_completion_example()\n{\n    # Declaring local variables\n    local cur prev opts\n    # An array variable storing the possible completions\n    COMPREPLY=()\n    # Save current word typed on command line in  cur variable\n    cur=\"${COMP_WORDS[COMP_CWORD]}\"\n    # Saving previous word typed on command line in prev variable\n    prev=\"${COMP_WORDS[COMP_CWORD-1]}\"\n    # Save all options provided by application in variable opts\n    opts=\"-h -v -p --help --verbose --print\"\n\n    # Checking \"${cur} == -*\" means that perform completion only if current\n    # word starts with a dash (-), which suggest that user is trying to complete an option.\n    # Variable COMPREPLY contains the match of the current word \"${cur}\" against the list\n    if [[ ${cur} == -* ]] ; then\n        COMPREPLY=( $(compgen -W \"${opts}\" -- ${cur}) )\n        return 0\n    fi\n}\n\n# Register _bash_completion_example to provide completion\n# on running script bash_completion_example.sh\ncomplete -F _bash_completion_example ./bash_completion_example.sh\n```", "```\n$ source ./bash_completion_example\nNow,  execute shell script:\n$ ./bash_completion_example.sh -[TAB][TAB]\n-h         --help     -p         --print    -v         --verbose\n$ ./bash_completion_example.sh --[TAB][TAB]\n--help     --print    --verbose\n$  ./bash_completion_example.sh \u2013-p[TAB]\n\n```"]