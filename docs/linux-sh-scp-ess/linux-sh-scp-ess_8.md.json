["```\nat [Option] specified_time\n\n```", "```\n$ at 14:00\nwarning: commands will be executed using /bin/sh\nat> df > ~/file_system_usage.log\nat> <EOT>\njob 33 at Mon Sep 21 14:00:00 2015\n\n```", "```\n$ at -c 33  # Lists content of job 33\n\n```", "```\n# at -v 4am\nMon Sep 21 04:00:00 2015\n\nwarning: commands will be executed using /bin/sh\nat> reboot\nat> <EOT>\njob 34 at Mon Sep 21 04:00:00 2015\n\n```", "```\n$ cat  loggedin_user_detail.sh\n#!/bin/bash\n# Filename: loggedin_user_detail.sh\n# Description: Collecting information of loggedin users\n\nusers_log_file=~/users_log_file.log\necho \"List of logged in users list at time 'date'\" > $users_log_file\nusers=('who | cut -d' ' -f1 | sort | uniq')\necho ${users[*]} >> $users_log_file\n\nfor i in ${users[*]}\ndo\n echo \"Processes owned by user $i\" >> $users_log_file\n ps u -u $i >> $users_log_file\n echo\ndone\n$ chmod +x  loggedin_user_detail.sh  # Provide execute permission\n\n```", "```\n$at -f loggedin_user_detail.sh 4pm + 1 week\nwarning: commands will be executed using /bin/sh\njob 42 at Sun Sep 27 16:00:00 2015\n\n```", "```\n$ atq\n33      Mon Sep 21 14:00:00 2015 a skumari\n42      Sun Sep 27 16:00:00 2015 a skumari\n\n```", "```\n$ sudo atq\n34      Mon Sep 21 04:00:00 2015 a root\n33      Mon Sep 21 14:00:00 2015 a skumari\n42      Sun Sep 27 16:00:00 2015 a skumari\n\n```", "```\n# atrm 34\n$ sudo atq    # Updated lists of tasks\n 33      Mon Sep 21 14:00:00 2015 a skumari\n 42      Sun Sep 27 16:00:00 2015 a skumari\n# at 1am\nwarning: commands will be executed using /bin/sh\n at> reboot\n at> <EOT>\njob 47 at Mon Sep 21 01:00:00 2015\n$ sudo atq\n 33      Mon Sep 21 14:00:00 2015 a skumari\n 42      Sun Sep 27 16:00:00 2015 a skumari\n 47      Mon Sep 21 01:00:00 2015 a root\n\n```", "```\n#!/bin/sh\n# Filename: firefox_memcheck.sh\n# Desription: Resatrts application firefix if memory usage is more than 30%\n\npid='pidof firefox' # Get pid of firefox\nif [ $pid -gt 1 ]\nthen\n  # Get current memory usage of firefox\n  current_mem_usage='ps -u --pid $pid| tail -n1 | tr -s ' ' | cut -d ' ' -f 4'\n  # Check if firefox memory  usage is more than 30% or not\n  if [ $(echo \"$current_mem_usage > 30\" | bc) -eq 1 ]\n  then\n    kill $pid   # Kill firefox if memory usage is > 30%\n    firefox &   # Launch firefox\n  fi\nfi\n```", "```\n20 7 * * 0 foo command\n\n```", "```\n30 20,22 * * * command\n\n```", "```\n35 7-11 * * 0-3 command\n\n```", "```\n20-45/4 8 9 4 * command\n\n```", "```\ncrontab [-u user] file\ncrontab [-u user] [option]\n\n```", "```\n$ crontab -l\nno crontab for foo\n\n```", "```\n# crontab -l\nno crontab for root\n\n```", "```\n$ sudo crontab -l\n\n```", "```\n$ crontab -e\n\n```", "```\nno crontab for foo - using an empty one\ncrontab: installing new crontab\n```", "```\n$ crontab -l\n\n```", "```\n# crontab -e\n\n```", "```\n$ sudo crontab -e\n\n```", "```\n# crontab -l\n\n```", "```\n# crontab -u foo -e  # Modifying crontab of user foo as root\n\n```", "```\n# crontab -u foo -l\n\n```", "```\n# ls /var/spool/cron\nroot  foo\n\n```", "```\n# crontab -i -r\ncrontab: really delete root's crontab? Y\n\n```", "```\n# crontab -l\nno crontab for root\n\n#  ls /var/spool/cron\nfoo\n\n```", "```\n# crontab -r -i -u foo\ncrontab: really delete foo's crontab? n\n\n```", "```\n# crontab -r -i -u foo\ncrontab: really delete foo's crontab? Y\n\n```", "```\n$  crontab -l\nno crontab for foo\n\n```", "```\n$ systemctl list-unit-files | head -n 12\n\n```", "```\n$ systemctl list-unit-files --type=service | head -n 10\n\n```", "```\n$ systemctl status -l NetworkManager.service \n\n```", "```\n$ systemctl status sshd.service\n\n```", "```\n$ systemctl is-active sshd.service \nunknown\n$ systemctl is-active NetworkManager.service\nactive\n\n```", "```\n# systemctl enable sshd.service\n\n```", "```\n# systemctl disable sshd.service\n\n```", "```\n$ systemctl is-enabled sshd.service\ndisabled\n$ systemctl is-enabled NetworkManager.service\nenabled\n\n```", "```\n$ systemctl is-active sshd.service\nunknown\n\n```", "```\n$ ssh foo@localhost  # Doing ssh to same machine  # Doing ssh to same machine\n ssh: connect to host localhost port 22: Connection refused\n\n```", "```\n# systemctl start sshd.service \n$ systemctl is-active sshd.service\nactive\n\n```", "```\n$ ssh foo@localhost\nLast login: Fri Sep 25 23:10:21 2015 from 192.168.1.101\n\n```", "```\n#  systemctl restart sshd.service\n\n```", "```\n# systemctl stop sshd.service\n$ systemctl is-active sshd.service\nunknown\n\n```", "```\n# journalctl\n\n```", "```\n$ journalctl -f\n\n```", "```\n$ journalctl -b\n\n```", "```\n$  journalctl --since \"1 hour ago\" --until now\n\n```", "```\n$ journalctl --since 2015-07-01\n\n```", "```\n$ journalctl --since \"2015-08-07 19:23:00\" --until \"2015-08-09 7:00:00\" \n\n```", "```\nprint \"Hello World\"\n```", "```\n#!/bin/bash\n# Filename: python_print.sh\n# Description: Embeding python in shell script\n\n# Printing using Python\npython -c 'print \"Hello World\"'\n```", "```\n$ sh python_print.sh\nHello World\n\n```", "```\n python -  <<EOF\n# Python code\nEOF\n```", "```\n#!/bin/bash\n# Filename: mail_fetch.sh\n# Description: Fetching unread email from gmail by embedding python in shell script\n\n# Enter username and password of your gmail account\necho Enter your gmail username:\nread USER\necho Enter password:\nread -s PASSWD\n\necho Running python code\npython - <<CODE\n# Importing required Python module\n\nimport urllib2\nimport getpass\nimport xml.etree.ElementTree as ET\n\n# Function to get unread messages in XML format\ndef get_unread_msgs(user, passwd):\n    auth_handler = urllib2.HTTPBasicAuthHandler()\n    auth_handler.add_password(\n        realm='mail.google.com',\n        uri='https://mail.google.com',\n        user=user,\n        passwd=passwd\n    )\n    opener = urllib2.build_opener(auth_handler)\n    urllib2.install_opener(opener)\n    feed = urllib2.urlopen('https://mail.google.com/mail/feed/atom')\n    return feed.read()\n\nxml_data = get_unread_msgs(\"$USER\", \"$PASSWD\")\nroot = ET.fromstring(xml_data)\n\n# Getting Title of unread emails\nprint \"Title of unread messages:\"\nprint \"........................\"\ncount=0\nfor e in root.iter('{http://purl.org/atom/ns#}title'):\n    print e.text\n\nCODE\n\necho \"Done!\"\n```", "```\n$ sh mail_fetch.sh\nEnter your gmail username:\nfoo@gmail.com\nEnter password:\n\nRunning python code\nTitle of unread messages:\n.....................\u2026\u2026\u2026\u2026\u2026..\nGmail - Inbox for foo@gmail.com\nUnread message1\nunread message2\nUnread message3\nDone!\n```", "```\n$ df -h\n\n```", "```\n#!/bin/bash\n# Filename: awk_embed.sh\n# Description: Demonstrating using awk in shell script\n\n# Fetching 4th column of command df output\ndf -h |awk '{ print $4 }'\n```", "```\nroot:x:0:0:root:/root:/bin/bash\n\n```", "```\n$ cat passwd\nroot:x:0:0:root:/root:/bin/bash\nbin:x:1:1:bin:/bin:/sbin/nologin\ndaemon:x:2:2:daemon:/sbin:/sbin/nologin\nadm:x:3:4:adm:/var/adm:/sbin/nologin\nlp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\nsync:x:5:0:sync:/sbin:/bin/sync\nshutdown:x:6:0:shutdown:/sbin:/sbin/shutdown\nhalt:x:7:0:halt:/sbin:/sbin/halt\n\n$ cat passwd_file_info.sh\t   # Shell script content\n#!/bin/bash\n# Filename: passwd_file_info.sh\n# Desciption: Fetches useful information from /etc/passwd file using awk\n\n# Fetching 1st and 3rd field i.e. Username and UID and separate them with blank space\nawk -F\":\" '{ print \"Username: \" $1 \"\\tUID:\" $3 }' passwd\n\n# Searching line whose user is root\necho \"User root information\"\nawk '$1 ~ /^root/' passwd\n\n```", "```\n$ sh passwd_file_info.sh\nUsername: root  UID:0\nUsername: bin   UID:1\nUsername: daemon        UID:2\nUsername: adm   UID:3\nUsername: lp    UID:4\nUsername: sync  UID:5\nUsername: shutdown      UID:6\nUsername: halt  UID:7\n\nUser root information\nroot:x:0:0:root:/root:/bin/bash \n\n```"]