- en: Chapter 5. Customizing the Environment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。自定义环境
- en: In a default system, we get certain settings that are preconfigured. As time
    progresses, we often feel the need to modify some of the default settings provided.
    Similar needs arise when we are working in a shell to get things done, for example,
    modifying the environment according to the needs of the application. Some of the
    features are so irresistible that we may need them every time, for example, the
    editor of our choice used by an application. While working on an important task,
    it may happen that we forget a command that we used a few days ago. In such cases,
    we try to recall that command as soon as possible to get work done. If we can't
    remember, we consume time and effort searching on the Internet or in text books
    for the exact command and syntax.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在默认系统中，我们会得到预配置的某些设置。随着时间的推移，我们经常感到需要修改一些默认设置。当我们在shell中工作以完成任务时，例如根据应用程序的需求修改环境时，会出现类似的需求。有些功能是如此令人难以抗拒，以至于我们可能每次都需要它们，例如应用程序使用的我们选择的编辑器。在处理重要任务时，可能会忘记几天前使用的命令。在这种情况下，我们会尽快回忆起该命令，以完成工作。如果我们记不起来，就会花费时间和精力在互联网或教科书中搜索确切的命令和语法。
- en: In this chapter, we will see how, by adding or changing the existing environment
    variables, we can modify the environment as per our application needs. We will
    also see how a user can modify the `.bashrc`, `.bash_profile`, and `.bash_logout`
    files to make the setting changes available permanently. We will see how we can
    search and modify the history of previously executed commands. We will also see
    how to run multiple tasks from a single shell and manage them together.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到如何通过添加或更改现有环境变量来修改环境，以满足我们的应用需求。我们还将看到用户如何修改`.bashrc`、`.bash_profile`和`.bash_logout`文件，以使设置更改永久生效。我们将看到如何搜索和修改先前执行的命令的历史记录。我们还将看到如何从单个shell运行多个任务并一起管理它们。
- en: 'This chapter will cover the following topics in detail:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将详细介绍以下主题：
- en: Knowing the default environment
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解默认环境
- en: Modifying the shell environment
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改shell环境
- en: Using bash startup files
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用bash启动文件
- en: Knowing your history
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解你的历史
- en: Managing tasks
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理任务
- en: Knowing the default environment
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解默认环境
- en: Setting up a proper environment is very important for running a process. An
    environment consists of environment variables that may or may not have a default
    value set. The required environment is set by modifying the existing environment
    variables or creating new environment variables. Environment variables are exported
    variables that are available to the current process and also its child processes.
    In [Chapter 1](ch01.html "Chapter 1. The Beginning of the Scripting Journey"),
    *The Beginning of the Scripting Journey*, we learned about some of the builtin
    shell variables that can be used in our application as environment variables to
    set the environment.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 设置适当的环境对于运行进程非常重要。环境由环境变量组成，这些变量可能具有默认值或未设置默认值。通过修改现有环境变量或创建新的环境变量来设置所需的环境。环境变量是导出的变量，可用于当前进程及其子进程。在[第1章](ch01.html
    "第1章。脚本之旅的开始"), *脚本之旅的开始*中，我们了解了一些内置shell变量，可以将其用作环境变量来设置环境。
- en: Viewing a shell environment
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看shell环境
- en: To view the current environment in the shell, we can use the `printenv` or `env`
    commands. Environment variables may have no value, a single value, or a multiple
    value set. If multiple values exist, each value is separated by a colon (:).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看shell中的当前环境，可以使用`printenv`或`env`命令。环境变量可能没有值，有单个值，或者有多个值设置。如果存在多个值，每个值都用冒号(:)分隔。
- en: printenv
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: printenv
- en: 'We can use `printenv` to print the value associated with a given environment
    variable. The syntax is as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`printenv`来打印与给定环境变量相关联的值。语法如下：
- en: '`$ printenv [VARIABLE]`'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`$ printenv [VARIABLE]`'
- en: 'Consider the following as examples:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If no `VARIABLE` is specified, `printenv` prints all environment variables
    as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未指定`VARIABLE`，`printenv`将打印所有环境变量，如下所示：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: env
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 环境
- en: 'We can also use the `env` command to view environment variables as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用`env`命令来查看环境变量，如下所示：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This displays all environment variables defined for a given shell.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示为给定shell定义的所有环境变量。
- en: Note
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To view value(s) of a specific environment variable, the `echo` command can
    also be used followed by an environment variable name prefixed with a dollar symbol
    (`$`). For example, `echo $SHELL`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看特定环境变量的值，也可以使用`echo`命令，后跟以美元符号(`$`)为前缀的环境变量名称。例如，`echo $SHELL`。
- en: Differences between shell and environment variables
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: shell和环境变量之间的区别
- en: 'Both shell and environment variables are variables that are accessible and
    set for a given shell that may be used by an application or a command running
    in that shell. However, there are a few differences between them, which are set
    out in the following table:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: shell变量和环境变量都是可访问和设置的变量，用于给定的shell，可能被在该shell中运行的应用程序或命令使用。但是，它们之间有一些区别，如下表所示：
- en: '| Shell variables | Environment variables |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| Shell变量 | 环境变量 |'
- en: '| --- | --- |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Both local and exported variables are shell variables | Exported shell variables
    are environment variables |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 本地和导出的变量都是shell变量 | 导出的shell变量是环境变量 |'
- en: '| The `set builtin` command is used to see the name and corresponding value
    of a shell variable | The `env` or `printenv` command is used to see the name
    and corresponding value of an environment variable |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 使用`set builtin`命令可查看shell变量的名称和相应值 | 使用`env`或`printenv`命令可查看环境变量的名称和相应值 |'
- en: '| Local shell variables are not available for use by their child shells | Child
    shells inherit all environment variables present in the parent shell |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 本地shell变量不可供子shell使用 | 子shell继承父shell中存在的所有环境变量 |'
- en: '| A shell variable is created by specifying a variable name on the left and
    value(s) separated by a colon (:) on the right-hand side of an equal operator
    (=) | An environment variable can be created by prefixing an export shell built
    - in command to the existing shell variable, or while creating a new shell variable
    |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '|通过在等号（=）的右侧用冒号（:）分隔的值在左侧指定变量名称来创建shell变量|可以通过在现有shell变量前加上export shell内置命令的前缀，或者在创建新的shell变量时创建环境变量|'
- en: Modifying a shell environment
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改shell环境
- en: When a new shell is launched, it has the initial environment set that will be
    used by any application or command that gets executed in a given shell. We now
    know that the `env` or `setenv` shell builtin command can be used to view which
    environment variables are set for this shell. The shell also provides the capability
    to modify the current environment. We can also modify the current bash environment
    by creating, modifying, or deleting environment variables.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当启动新的shell时，它具有初始环境设置，将被任何在给定shell中执行的应用程序或命令使用。我们现在知道，`env`或`setenv` shell内置命令可用于查看为该shell设置了哪些环境变量。shell还提供了修改当前环境的功能。我们还可以通过创建、修改或删除环境变量来修改当前的bash环境。
- en: Creating environment variables
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建环境变量
- en: To create a new environment variable in a shell, the `export` shell builtin
    command is used.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要在shell中创建一个新的环境变量，使用`export` shell内置命令。
- en: 'For example, we will create a new environment variable `ENV_VAR1`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们将创建一个新的环境变量`ENV_VAR1`：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'A new environment variable with the name `ENV_VAR1` is created. To view a new
    environment variable, we can call the `printenv` or `env` command:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了一个名为`ENV_VAR1`的新环境变量。要查看新环境变量，可以调用`printenv`或`env`命令：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We can also use the `echo` command to print the value of an environment variable:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`echo`命令来打印环境变量的值：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'A local shell variable can also be exported further as an environment variable.
    As an example, we will create the `ENV_VAR2` and `LOCAL_VAR1` variables:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 本地shell变量也可以进一步导出为环境变量。例如，我们将创建`ENV_VAR2`和`LOCAL_VAR1`变量：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'No environment variable is found with the name `ENV_VAR2`. This is because
    while creating `ENV_VAR2`, it wasn''t exported. Therefore, it will be created
    as a local variable of a shell:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 找不到名为`ENV_VAR2`的环境变量。这是因为在创建`ENV_VAR2`时，它没有被导出。因此，它将被创建为shell的本地变量：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, to make the `ENV_VAR2` shell variable as an environment variable, we can
    use the export command:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要将`ENV_VAR2` shell变量作为环境变量，可以使用export命令：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The variable `LOCAL_VAR1` is not an environment variable.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 变量`LOCAL_VAR1`不是环境变量。
- en: 'One of the important features of environment variables is that it is available
    to all of its child shells. We can see this in the following example:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 环境变量的一个重要特点是它对所有子shell都可用。我们可以在以下示例中看到这一点：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We can see that the environment variables from a parent shell got inherited
    by a child shell—for example, `ENV_VAR1`, `ENV_VAR2`—while the local variable,
    such as `LOCAL_VAR1`, remains available only to a shell in which the variable
    was created.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，从父shell继承的环境变量被子shell继承，例如`ENV_VAR1`，`ENV_VAR2`，而本地变量，如`LOCAL_VAR1`，仅对创建变量的shell可用。
- en: Modifying environment variables
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改环境变量
- en: 'Shell provides flexibility for modifying any existing environment variable.
    For example, consider the `HOME` environment variable. By default, the `HOME`
    environment variable contains the path of the current logged in user''s home directory:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Shell提供了灵活性，可以修改任何现有的环境变量。例如，考虑`HOME`环境变量。默认情况下，`HOME`环境变量包含当前登录用户的主目录的路径：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, we will modify the `HOME` environment variable value to `/tmp`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将修改`HOME`环境变量的值为`/tmp`：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We can also append a value to an environment variable. To do this, make sure
    the new value is separated with a colon (`:`). For example, consider the `PATH`
    environment variable:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以向环境变量附加一个值。为此，请确保新值用冒号（:）分隔。例如，考虑`PATH`环境变量：
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, we want to add a new path to the `PATH` variable—for example, `/home/foo/projects/bin`—so
    that, while looking for a program or command, the shell can search the specified
    path too. To append a path to the `PATH` environment variable, use a colon (:)
    followed with a new path name:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们想要将一个新路径添加到`PATH`变量中，例如`/home/foo/projects/bin`，这样，在查找程序或命令时，shell也可以搜索指定的路径。要将路径追加到`PATH`环境变量中，使用冒号（:）后跟新路径名称：
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We can see that the new path has been appended to the existing values of the
    `PATH` variable.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到新路径已附加到`PATH`变量的现有值上。
- en: We can also append multiple values to an environment variable; for that, each
    value should be separated by a colon (`:`).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将多个值附加到环境变量；为此，每个值应该用冒号（:）分隔。
- en: 'For example, we will add two more application paths to the `PATH` variable:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们将向`PATH`变量添加两个应用程序路径：
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The two new paths, `/home/foo/project1/bin` and `/home/foo/project2/bin`, have
    been added to the `PATH` variable.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 两个新路径`/home/foo/project1/bin`和`/home/foo/project2/bin`已添加到`PATH`变量中。
- en: Deleting environment variables
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除环境变量
- en: We can delete or reset a value of an environment variable using the `unset`
    shell builtin command.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`unset` shell内置命令删除或重置环境变量的值。
- en: 'For example, we will create an environment variable called `ENV1`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们将创建一个名为`ENV1`的环境变量：
- en: '[PRE15]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The environment variable `ENV1` gets deleted by the `unset` command. Now, to
    reset an environment variable, assign it a blank value:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 环境变量`ENV1`被`unset`命令删除。现在，要重置环境变量，将其赋予空值：
- en: '[PRE16]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Using bash startup files
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用bash启动文件
- en: Until now, to perform a task or set anything for a given shell, we had to execute
    the needed commands in a shell. One of the main limitations to this approach is
    that the same configuration won't be available in a new shell. In a lot of cases,
    a user may want that whenever he or she launches a new shell, whereas instead
    a new customized configuration on top of the default configuration is available
    for use. For customizing bash, three files are available in a user's home directory
    that get executed by default whenever a user launches a new bash. These files
    are `bashrc`, `.bash_profile`, and `.bash_logout`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，要执行任务或为给定的shell设置任何内容，我们必须在shell中执行所需的命令。这种方法的主要局限性之一是相同的配置不会在新的shell中可用。在许多情况下，用户可能希望每当启动新的shell时，而不是使用新的自定义配置，而是使用默认配置之上的新的自定义配置。对于自定义bash，用户的主目录中默认执行的三个文件是`bashrc`、`.bash_profile`和`.bash_logout`。
- en: .bashrc
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .bashrc
- en: In a graphical system, mostly a non-login shell is used by a user. To run a
    non-login shell, we don't need the login credentials. Starting a shell in a graphical
    system provides a non-login shell. When a bash is invoked in non-login mode, the
    `~/.bashrc` file is invoked and the configuration available in it is executed
    and applied in any bash shell being launched. Settings that are needed in both
    the login and non-login shell are kept in the `~/.bashrc` file.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在图形系统中，用户主要使用非登录shell。要运行非登录shell，我们不需要登录凭据。在图形系统中启动shell提供了一个非登录shell。当bash以非登录模式调用时，会调用`~/.bashrc`文件，并执行其中可用的配置，并将其应用于任何启动的bash
    shell。需要在登录和非登录shell中都需要的设置保存在`~/.bashrc`文件中。
- en: 'For example, on a Fedora 22 system default, the `~/.bashrc` file looks as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在Fedora 22系统上，默认的`~/.bashrc`文件如下：
- en: '[PRE17]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Any addition done in `~/.bashrc` will be reflected only to the current user's
    bash shell. We can see that the `.bashrc` file also checks whether the `etc/bashrc`
    file is available. If available, that gets executed too. The `/etc/bashrc` file
    contains configuration applied to a bash shell for all users—that is, systemwide.
    Sysadmin can modify the `/etc/bashrc` file if any configuration needs to be applied
    to all users' bash shells.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在`~/.bashrc`中进行的任何添加只会反映到当前用户的bash shell。我们可以看到`.bashrc`文件还检查`etc/bashrc`文件是否可用。如果可用，也会执行该文件。`/etc/bashrc`文件包含应用于所有用户的bash
    shell的系统范围配置。如果需要应用到所有用户的bash shell的任何配置，系统管理员可以修改`/etc/bashrc`文件。
- en: 'The file `/etc/bashrc` also looks into the script files available in `/etc/profile.d`,
    which can be confirmed by the following code snippet taken from the `/etc/bashrc`
    file:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`/etc/bashrc`文件还查看了`/etc/profile.d`中可用的脚本文件，可以通过`/etc/bashrc`文件中的以下代码片段确认：'
- en: '[PRE18]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The following example shows a modified `.bashrc` file. Name this file `custom_bashrc`:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示了修改后的`.bashrc`文件。将此文件命名为`custom_bashrc`：
- en: '[PRE19]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `LD_LIBRARY_PATH` environment variable is used to give the runtime shared
    library loader (`ld.so`) an extra set of directories to look for when searching
    for shared libraries. You can learn more about the shared library at [http://tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html](http://tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`LD_LIBRARY_PATH`环境变量用于为运行时共享库加载器（`ld.so`）提供额外的目录，以便在搜索共享库时查找。您可以在[http://tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html](http://tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html)了解更多关于共享库的信息。'
- en: 'Make a backup of your original `~/.bashrc` file before modifying it:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在修改之前，请备份您的原始`~/.bashrc`文件：
- en: '[PRE20]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, copy the `custom_bashrc` file to `~/.bashrc`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将`custom_bashrc`文件复制到`~/.bashrc`中：
- en: '[PRE21]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'To apply modified settings, open a new bash shell. To apply a new `.bashrc`
    in the same bash shell, you can source into a new `~/.bashrc` file:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 要应用修改后的设置，请打开一个新的bash shell。要在相同的bash shell中应用新的`.bashrc`，您可以将其源到新的`~/.bashrc`文件中：
- en: '[PRE22]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We can check whether the new settings are available or not:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以检查新的设置是否可用：
- en: '[PRE23]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The `alias` command displays aliases that we added in `.bashrc`—that is, `rm`,
    `cp`, `df`, and `ll`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`alias`命令显示我们在`.bashrc`中添加的别名，即`rm`、`cp`、`df`和`ll`。'
- en: 'Now, call the `current_directory_size()`function that we added in `.bashrc`:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，调用我们在`.bashrc`中添加的`current_directory_size()`函数：
- en: '[PRE27]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Make sure to move back the original `.bashrc` file whose backup we created
    at the beginning of this example, and source into it to get the settings reflected
    in the current shell session. This is required if you don''t want any of the configuration
    changes that we did while playing out the preceding example:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 确保将我们在本示例开始时创建的原始`.bashrc`文件移回去，并将其源到其中，以便在当前shell会话中反映设置。如果您不希望在执行前面示例时进行的任何配置更改，则需要这样做：
- en: '[PRE28]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Note
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When bash is invoked as a non-login shell, it loads the configuration available
    in the `~/.bashrc`, `/etc/bashrc`, and `/etc/profile.d/*.sh` files.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当bash作为非登录shell调用时，它会加载`~/.bashrc`、`/etc/bashrc`和`/etc/profile.d/*.sh`文件中可用的配置。
- en: .bash_profile
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .bash_profile
- en: 'In a non-graphical system, after a successful login, the user gets a shell.
    Such a shell is called a login shell. When a bash is invoked as a login shell,
    first the `/etc/profile` file gets executed; this runs the script available in
    `/etc/profile.d/` as well. The following code snippet taken from `/etc/profile`
    also mentions this:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在非图形系统中，成功登录后，用户会获得一个shell。这样的shell称为登录shell。当bash作为登录shell调用时，首先执行`/etc/profile`文件；这会运行`/etc/profile.d/`中可用的脚本。`/etc/profile`中的以下代码片段也提到了这一点：
- en: '[PRE29]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'These are global settings applied to any user''s login shell. Furthermore,
    `~/.bash_profile` gets executed for a login shell. On a Fedora 22 system, the
    default content of the `~/.bash_profile` file looks as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是应用于任何用户登录shell的全局设置。此外，`~/.bash_profile`会为登录shell执行。在Fedora 22系统上，默认的`~/.bash_profile`文件内容如下：
- en: '[PRE30]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: From the contents, we can see that it looks for the `.bashrc` file in a user's
    home directory. If the `.bashrc` file is available in a home directory, it gets
    executed. We also know that the `~/.bashrc` file executes the `/etc/bashrc` file
    as well. Next, we see that `.bash_profile` appends the `PATH` variable with the
    `$HOME/.local/bin` and `$HOME/bin` values. Furthermore, the modified `PATH` variable
    is exported as an environment variable.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 从内容中，我们可以看到它在用户的主目录中查找`.bashrc`文件。如果主目录中有`.bashrc`文件，则会执行它。我们还知道`~/.bashrc`文件也会执行`/etc/bashrc`文件。接下来，我们看到`.bash_profile`将`PATH`变量附加到`$HOME/.local/bin`和`$HOME/bin`值。此外，修改后的`PATH`变量被导出为环境变量。
- en: A user can modify the `~/.bash_profile` file as per his/her customized configuration
    needs, such as default shell, editor for login shell, and so on.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以根据自己的定制配置需求修改`~/.bash_profile`文件，例如默认shell、登录shell的编辑器等。
- en: 'The following example contains a modified configuration in `.bash_profile`.
    We will use `bash_profile` as its filename:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例包含了`.bash_profile`中的修改配置。我们将使用`bash_profile`作为文件名：
- en: '[PRE31]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Changes are made after the **Added configuration by us** comment. Before we
    apply this new configuration to `~/.bash_profile`, we will first make a backup
    of the original file. This will help us in restoring the original content of the
    `.bash_profile` file:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在**我们添加的配置**注释之后进行更改。在应用新配置到`~/.bash_profile`之前，我们将首先备份原始文件。这将帮助我们恢复`.bash_profile`文件的原始内容：
- en: '[PRE32]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'A new file `.bash_profile.bak` will be created in the `home` directory. Now,
    we will copy our new configuration to `~/.bash_profile`:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在`home`目录中将创建一个新文件`.bash_profile.bak`。现在，我们将复制我们的新配置到`~/.bash_profile`：
- en: '[PRE33]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'To see the reflected changes in a login shell, we can either login as a non-graphical
    interface or just perform `ssh` into the same machine to run a login shell. SSH
    (Secure Shell) is a cryptographic network protocol for initiating text-based shell
    sessions on remote machines in a secure way. In UNIX and Linux-based systems,
    SSH to a local or remote machine can be done using the `ssh` command. The `man`
    page of `ssh` (`man ssh`) shows all the capabilities provided by it. To do a remote
    login on the same machine, we can run `ssh username@localhost`:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 要在登录shell中看到反映的更改，我们可以以非图形界面登录，或者只需执行`ssh`到同一台机器上运行登录shell。SSH（Secure Shell）是一种加密网络协议，用于以安全方式在远程计算机上启动基于文本的shell会话。在UNIX和基于Linux的系统中，可以使用`ssh`命令进行对本地或远程机器的SSH。`ssh`的`man`页面（`man
    ssh`）显示了它提供的所有功能。要在同一台机器上进行远程登录，我们可以运行`ssh username@localhost`：
- en: '[PRE34]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'We can see that all the details added by us are printed in a login shell. Another
    way to quickly test our new `.bash_profile` is by doing source to it:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们添加的所有细节都打印在登录shell中。快速测试我们的新`.bash_profile`的另一种方法是通过对其进行源操作：
- en: '[PRE36]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'To reset changes done in the `~/.bash_profile` file, copy from the `~/.bash_profile.bak`
    file that we created at the beginning of this example and source into it to get
    the changes reflected in the current shell:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 要重置`~/.bash_profile`文件中的更改，从我们在本示例开始时创建的`~/.bash_profile.bak`文件中复制，并对其进行源操作，以便在当前shell中反映更改：
- en: '[PRE38]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Note
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When bash is invoked as a login shell, it loads the configuration available
    in the `/etc/profile`, `/etc/profile.d/*.sh`, `~/.bash_profile`, `.~/.bashrc`,
    and `~/etc/bashrc` files.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 当bash作为登录shell调用时，它会加载`/etc/profile`、`/etc/profile.d/*.sh`、`~/.bash_profile`、`.~/.bashrc`和`~/etc/bashrc`文件中可用的配置。
- en: .bash_logout
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .bash_logout
- en: The `.bash_logout` file present in a user's home directory gets executed every
    time a login shell exits. This is useful when a user has logged in remotely or
    has a non-graphical interface. A user can add clean-up tasks to be performed before
    he/she logs off from a system. A clean-up task may include removing the temporary
    files created, clearing environment variables, logging off important data, archiving
    or encrypting certain tasks, uploading onto the Web, and so on.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在用户的主目录中存在的`.bash_logout`文件在每次登录shell退出时都会执行。当用户远程登录或使用非图形界面时，这很有用。用户可以添加在从系统注销之前执行的清理任务。清理任务可能包括删除创建的临时文件、清除环境变量、注销重要数据、存档或加密某些任务、上传到Web等。
- en: Knowing your history
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解您的历史记录
- en: Shells provide an interesting feature that allows you to find out the history
    of all commands you have executed previously in a shell. It often happens that
    we forget what command was typed on the previous day to perform a task. We may
    or may not be able to recall the exact syntax, but it is very convenient that
    we can refer to the history saved by the shell.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Shell提供了一个有趣的功能，允许您查看以前在shell中执行的所有命令的历史记录。经常发生我们忘记了前一天键入的命令来执行任务。我们可能能够回忆起确切的语法，也可能不行，但很方便的是我们可以参考shell保存的历史记录。
- en: Shell variables controlling the history
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制历史记录的shell变量
- en: 'There are shell variables that can be altered to change what and how much history
    a user can see. These shell variables are mentioned in the following table:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些shell变量可以更改用户可以看到的历史记录的内容和数量。这些shell变量在下表中提到：
- en: '| Name | Value |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 值 |'
- en: '| --- | --- |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| HISTFILE | Name of file in which by default history will be saved |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| HISTFILE | 默认情况下历史记录将保存在的文件名 |'
- en: '| HISTFILESIZE | Number of commands to be kept in history file |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| HISTFILESIZE | 历史文件中要保留的命令数 |'
- en: '| HISTSIZE | Number of history to be stored in memory for current session |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| HISTSIZE | 当前会话中要存储的历史记录数量 |'
- en: '| HISTCONTROL | A colon-separated list of values controlling how commands are
    saved on the history list |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| HISTCONTROL | 以冒号分隔的值列表，控制如何保存命令在历史列表中 |'
- en: 'The value of the `HISTCONTROL` shell variable can be:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`HISTCONTROL` shell变量的值可以是：'
- en: '| Value | Description |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| 值 | 描述 |'
- en: '| --- | --- |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| ignorespace | Lines which starts with a blank space, doesn''t save in history
    list |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| ignorespace | 以空格开头的行，不保存在历史记录列表中 |'
- en: '| ignoredups | Don''t save lines which matches in previous saved history list
    |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| ignoredups | 不保存与先前保存的历史记录列表匹配的行 |'
- en: '| ignoreboth | Applies both ignorespace and ignoredups |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| ignoreboth | 应用ignorespace和ignoredups |'
- en: '| erasedups | Remove all previous lines from history matching current line
    before saving it in history file |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| erasedups | 在将其保存到历史文件之前，删除与当前行匹配的历史中的所有先前行 |'
- en: 'Let''s see what values these shell variables may contain:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这些shell变量可能包含什么值：
- en: '[PRE39]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: From the value obtained, we can see that the default history is saved into the
    `.bash_history` file of a user's `home` directory, with the maximum history command
    lines saved as 1000\. Also, any duplicate history that is already present in the
    previous history line isn't saved.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 从获得的值中，我们可以看到默认历史记录保存在用户`home`目录的`.bash_history`文件中，最大历史命令行保存为1000。此外，已经存在于先前历史行中的任何重复历史都不会保存。
- en: The history builtin command
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: history内置命令
- en: Shells provide the `history` builtin command so that a user will know the history
    of commands executed up to now.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Shell提供了`history`内置命令，以便用户了解到目前为止执行的命令历史。
- en: 'Running the history without any options, prints all the previously typed commands
    on `stdout`. The sequence of commands are provided oldest to latest as we go from
    top to bottom of the output:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有任何选项的情况下运行历史记录，会将所有先前输入的命令打印到`stdout`。命令序列按从顶部到底部的顺序提供，从最旧到最新：
- en: '[PRE40]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '![The history builtin command](img/4335_05_01.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![history内置命令](img/4335_05_01.jpg)'
- en: 'The following table explains the options available with the `history` shell
    built - in command:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格解释了`history` shell内置命令的可用选项：
- en: '| Option | Description |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 描述 |'
- en: '| --- | --- |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| -a | Append the new history lines into history immediately |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| -a | 立即将新的历史行追加到历史记录中 |'
- en: '| -c | Clears history from current list |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| -c | 清除当前列表中的历史记录 |'
- en: '| -d offset | Deletes history from offset specified |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| -d offset | 从指定的偏移量删除历史记录 |'
- en: '| -r | Append the content of saved history to current list |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| -r | 将保存的历史内容追加到当前列表 |'
- en: '| -w | Write the current history list to the history file after overwriting
    existing saved history contents |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| -w | 在覆盖现有保存的历史内容后，将当前历史列表写入历史文件 |'
- en: 'To see the last five commands executed, we can also perform the following commands:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看最后执行的五个命令，我们还可以执行以下命令：
- en: '[PRE41]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'We will find that all the commands executed match a given string from the history
    file. For example, search for commands having the `set` string in them:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将发现，所有执行的命令都与历史文件中的给定字符串匹配。例如，搜索其中包含`set`字符串的命令：
- en: '[PRE42]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'To clear all the history of commands saved and to append the history available
    in the current list, we can do the following (don''t run the following commands
    if you don''t want to loose the saved command history):'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 要清除所有保存的命令历史记录并将当前列表中的历史追加到历史中，我们可以执行以下操作（如果不想丢失保存的命令历史，请不要运行以下命令）：
- en: '[PRE43]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Modifying the default history behavior
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改默认历史记录行为
- en: By default, shell has some values set for managing the history. In the previous
    section, we saw that a maximum of 1000 lines of history will be stored in the
    history file. If a user spends most of his time working with a shell, he may have
    used 1000 or above commands in one or two days. In such a case, he will not be
    able to look at the history if he has typed a command ten days ago. Depending
    upon the individual use-case, a user can modify the number of lines to be stored
    in the history file.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，shell为管理历史记录设置了一些值。在前一节中，我们看到历史文件中将存储最多1000行历史记录。如果用户大部分时间都在shell中工作，他可能在一两天内使用了1000条或更多命令。在这种情况下，如果他十天前输入了一个命令，他将无法查看历史记录。根据个人用例，用户可以修改要存储在历史文件中的行数。
- en: 'Executing the following command will set the maximum number of lines the history
    file may have to `100000`:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下命令将将历史文件的最大行数设置为`100000`：
- en: '[PRE44]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Similarly, we can change where the history file should be saved. We saw that,
    by default, it is saved in the `.bash_history` file in the `home` directory. We
    can modify the `HISTFILE` shell variable and set it to whatever location we want
    our command history to be saved to:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以更改历史文件应保存的位置。我们看到，默认情况下，它保存在`home`目录中的`.bash_history`文件中。我们可以修改`HISTFILE`
    shell变量，并将其设置为我们想要保存命令历史的任何位置：
- en: '[PRE45]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Now the executed command history will be saved in the `customized_history_path`
    file in the home directory instead of the `~/.bash_history` file.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，执行的命令历史将保存在`home`目录中的`customized_history_path`文件中，而不是`~/.bash_history`文件中。
- en: To make these changes reflect to all the shells being launched by a user and
    for all sessions, add these modifications to the `~/.bashrc` file.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 要使这些更改反映到用户启动的所有shell和所有会话中，将这些修改添加到`~/.bashrc`文件中。
- en: Handy shortcuts for seeing the history
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看历史记录的便捷快捷键
- en: Depending upon a user's history size setting, the number of commands available
    in the history may be large. If a user wants to look for a specific command, he
    or she will have to look through the entire history, which can sometimes be troublesome.
    Shells provide some shortcuts to help us find a specific command previously executed.
    Knowledge of these shortcuts can save time in finding previously executed commands
    in the history.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 根据用户的历史记录大小设置，历史记录中可用的命令数量可能很大。如果用户想要查找特定命令，他或她将不得不查看整个历史记录，这有时可能会很麻烦。Shell提供了一些快捷方式，以帮助我们在历史记录中找到先前执行的特定命令。了解这些快捷方式可以节省在历史记录中查找先前执行的命令的时间。
- en: '[Ctrl + r]'
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[Ctrl + r]'
- en: 'While working in a shell, the [*Ctrl* + *r*] shortcut allows you to search
    for a command in the history. Start typing a command after pressing [*Ctrl* +
    *r*]; the shell shows a complete command that matches the substring of the command
    typed. To move forward to the next match, type [*Ctrl* + *r*] on the keyboard
    again and so on:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在shell中工作时，[*Ctrl* + *r*]快捷键允许您在历史记录中搜索命令。按下[*Ctrl* + *r*]后开始输入命令；shell会显示与输入的命令子字符串匹配的完整命令。要向前移动到下一个匹配项，再次在键盘上输入[*Ctrl*
    + *r*]，依此类推：
- en: '[PRE46]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: We can see that typing `his`, suggested from history `man history` that we previously
    typed.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，从历史记录`man history`中建议输入`his`。
- en: Up and down arrow key
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 上下箭头键
- en: The up and down arrow keys available on the keyboard can be used to go back
    and forward in the history of commands previously executed by the user. For example,
    to get the previous command, press the up arrow key once. To go back even further,
    press the up arrow key again and so on. Further, to go forward in the history
    use the down arrow key.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 键盘上的上下箭头键可用于在用户先前执行的命令历史记录中后退和前进。例如，要获取上一个命令，请按一次上箭头键。要进一步后退，请再次按上箭头键，依此类推。此外，要在历史记录中前进，请使用下箭头键。
- en: '!!'
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '!!'
- en: 'The shortcut `!!` can be used to reexecute the last command executed in the
    shell:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 快捷方式`!!`可用于重新执行shell中执行的最后一个命令：
- en: '[PRE47]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '!(search_string)'
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '!(search_string)'
- en: 'This shortcut executes the last command starting with `search_string`:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这个快捷方式执行最后一个以`search_string`开头的命令：
- en: '[PRE48]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '!?(search_string)'
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '!?(search_string)'
- en: 'This shortcut executes the last command found with the substring `search_string`:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这个快捷方式执行最后一个包含子字符串`search_string`的命令：
- en: '[PRE49]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Task management
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 任务管理
- en: When an application runs, it is possible that it will run for a long period
    of time or run until the computer shuts down. While running an application in
    a shell, we know that a shell prompt only comes back when running a program in
    the shell completes successfully or terminates due to some error. Unless we get
    a shell prompt back, we can't run another command in the same shell. We can't
    even close that shell because it will close the running process.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序运行时，可能会长时间运行，或者一直运行直到计算机关闭。在shell中运行应用程序时，我们知道只有当在shell中运行的程序成功完成或由于某些错误终止时，shell提示符才会返回。除非我们得到shell提示符返回，否则我们无法在同一个shell中运行另一个命令。我们甚至不能关闭该shell，因为这将关闭正在运行的进程。
- en: Also, to run another application, we will have to open another shell in a new
    terminal and then run it. It can become difficult and tedious to manage if we
    have to run a lot of tasks. Shells provide ways to run a task in the background
    and suspend, kill, or move back in the foreground.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，要运行另一个应用程序，我们将不得不在新的终端中打开另一个shell，然后运行它。如果我们必须运行很多任务，管理起来可能会变得困难和繁琐。Shell提供了在后台运行、挂起、终止或移回前台的方法。
- en: Running tasks in the background
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在后台运行任务
- en: A task can be started as a background in a shell by appending an ampersand (&).
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过在命令末尾添加&来在shell中将任务作为后台启动。
- en: For example, we want to search for a string in the entire filesystem. Depending
    upon the filesystem's size and the number of files, it may take a lot of time.
    We can call the `grep` command to search for a string and save the result in a
    file. A filesystem hierarchy in Linux starts from the root('`/`').
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们想在整个文件系统中搜索一个字符串。根据文件系统的大小和文件数量，可能需要很长时间。我们可以调用`grep`命令来搜索字符串并将结果保存在文件中。Linux中的文件系统层次结构从根目录('/')开始。
- en: '[PRE50]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Here, the `grep` searches for a string in the entire filesystem, sends any error
    message to `/dev/null`, and saves the search result into the `out1.txt` file.
    An ampersand (&) at the end sends the entire job to the background, prints PID
    of the started task, and returns back the shell prompt.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`grep`在整个文件系统中搜索字符串，将任何错误消息发送到`/dev/null`，并将搜索结果保存到`out1.txt`文件中。在末尾的&将整个作业发送到后台，打印启动任务的PID，并返回shell提示符。
- en: Now, we can do other work in the same opened shell and perform other tasks.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在同一个打开的shell中做其他工作并执行其他任务。
- en: Sending a running task to the background
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将正在运行的任务发送到后台
- en: It often happens that we run a task in a shell normally—that is, as a foreground
    task—but later we want to move it to the background. It is possible to do this
    by first suspending the current task using [*Ctrl* + *z*] and then using `bg`
    to move the task to the background.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 通常我们在shell中正常运行任务，即作为前台任务，但后来我们想将其移至后台。首先通过[*Ctrl* + *z*]暂停当前任务，然后使用`bg`将任务移至后台。
- en: 'Consider the last text search as an example. We start a search normally as
    follows:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑最后一次文本搜索作为一个例子。我们正常地开始搜索如下：
- en: '[PRE51]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'We will not see anything happening on the shell and we will just keep waiting
    for a shell prompt to return. Alternatively, we can suspend the running job using
    [Ctrl + z]:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会看到shell上发生任何事情，我们只会等待shell提示符返回。或者，我们可以使用[Ctrl + z]暂停运行的作业：
- en: '[PRE52]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Then, to send a suspended task to continue running in the background, use the
    `bg` command:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，要将挂起的任务发送到后台继续运行，请使用`bg`命令：
- en: '[PRE53]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Listing background tasks
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列出后台任务
- en: 'To find out which tasks are running in the background or suspended in the current
    shell, `jobs` shell built - in is used as follows:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看当前shell中正在后台运行或挂起的任务，使用内置`jobs` shell如下：
- en: '[PRE54]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Here, index [1] and [2] are job numbers.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，索引[1]和[2]是作业编号。
- en: The character '`+`' identifies the job that would be used as a default by the
    `fg` or `bg` command, and the character '`-`' identifies the job that would become
    a default if the current default job exits or terminates.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 字符'+'标识将由`fg`或`bg`命令用作默认值的作业，字符'-'标识当前默认作业退出或终止后将成为默认作业的作业。
- en: 'Create another task and suspend it using the following commands:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 创建另一个任务并使用以下命令将其挂起：
- en: '[PRE56]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'To view PID of all background and suspended tasks, we can use the `–p` option:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看所有后台和挂起任务的PID，我们可以使用`-p`选项：
- en: '[PRE57]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'PID of jobs is in sequence. To view only the tasks running in the background,
    the `-r` option is used as follows:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 作业的PID是按顺序排列的。要查看只在后台运行的任务，使用`-r`选项如下：
- en: '[PRE59]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'To view only the suspended tasks, the `-s` option is used as follows:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看只挂起的任务，使用`-s`选项如下：
- en: '[PRE61]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'To view a particular index job, use an index number with the `jobs` command:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看特定索引作业，请使用带有`jobs`命令的索引号：
- en: '[PRE63]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Moving tasks to the foreground
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将任务移动到前台
- en: 'We can move a background or suspended task to the foreground using the shell
    built - in command `fg`:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用shell内置命令`fg`将后台或挂起的任务移动到前台：
- en: '[PRE65]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'The character ''`+`'' is mentioned in the job index `3`. This means, running
    the `fg` command will run the third job in the foreground:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 字符'+'在作业索引`3`中被提到。这意味着运行`fg`命令将在前台运行第三个作业：
- en: '[PRE67]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'The following command suspends the third task:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令暂停第三个任务：
- en: '[PRE68]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'To move a particular job to the foreground, use `fg` with a task index number:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 要将特定作业移到前台，请使用带有任务索引号的`fg`：
- en: '[PRE69]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Terminating tasks
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 终止任务
- en: 'We can also delete a running or suspended task if it''s no longer needed. This
    can be done by using the `disown` shell built - in command:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不再需要，我们也可以删除运行中或挂起的任务。这可以通过使用`disown` shell内置命令来完成：
- en: '[PRE70]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Using `disown` without any option, deletes a task that has the character ''`+`''
    mentioned with a task:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`disown`而不带任何选项，会删除具有字符'`+`'的任务：
- en: '[PRE72]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'To delete running tasks, the `-r` option is used:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除运行中的任务，使用`-r`选项：
- en: '[PRE74]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'To remove all tasks, the `-a` option is used as follows:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除所有任务，使用`-a`选项如下：
- en: '[PRE75]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: The output of `jobs` shows nothing because all the suspended and running tasks
    got deleted by the `-a` option.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '`jobs`的输出什么也不显示，因为所有挂起和运行中的任务都被`-a`选项删除了。'
- en: Summary
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: After reading this chapter, you now know how to create and modify environment
    variables in a shell. You also know how `.bashrc` and `.bash_profile` help in
    making changes that are available permanently for all sessions of a user. You
    learned how to search the history of commands that we have previously executed
    and also how to run and manage different tasks in a shell by using the `fg` and
    `bg` shell built - in commands.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完本章后，您现在知道如何在shell中创建和修改环境变量。您还知道`.bashrc`和`.bash_profile`如何帮助永久地为用户的所有会话进行更改。您学会了如何搜索我们先前执行的命令的历史记录，以及如何使用`fg`和`bg`
    shell内置命令在shell中运行和管理不同的任务。
- en: In the next chapter, we will see what important types of files are available
    on Linux-based systems and what operations can be performed on them to get meaningful
    results.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到在基于Linux的系统上有哪些重要类型的文件，以及可以对它们执行哪些操作以获得有意义的结果。
