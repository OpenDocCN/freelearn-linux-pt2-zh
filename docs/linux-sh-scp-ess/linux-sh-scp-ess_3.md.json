["```\n$ ls /home  # viewing Content of directory /home\nfoo\n\n```", "```\n$ echo $?\n0\n\n```", "```\n$  ls /root/\nls: cannot open directory /root/: Permission deniedWe see that the ls command execution was unsuccessful with the Permission denied error. To see the exit status, run the following command:\n\n```", "```\n$ echo $?\n2\n\n```", "```\n    $ echo \"Successful Exit code check\"\n    Successful Exit code check\n    $ echo $?\n    0\n\n    ```", "```\n    $  cp -r /root/ .\n    cp: cannot access '/root/': Permission denied\n    $ echo $?\n    1\n\n    ```", "```\n    $ echo ;;\n    bash: syntax error near unexpected token ';;'\n    $ echo $?\n    2\n\n    ```", "```\n    $ /usr/bin\n    bash: /usr/bin: Is a directory\n    $ echo $?\n    126\n\n    ```", "```\n    $ foo\n    bash: foo: command not found\n    $ echo $?\n    127\n\n    ```", "```\n    $ read\n\n    ^C\n    $ echo $?\n    130\n\n    ```", "```\n#!/bin/bash                                                                                                                                                               \n# Filename: without_exit_code.sh                                                                                                                                          \n# Description: Exit code of script when no exit code is mentioned in script                                                                                                \n\nvar=\"Without exit code in script\"\necho $var\n\ncd /root\n```", "```\n$ sh without_exit_code.sh\nWithout exit code in script\nwithout_exit_code.sh: line 8: cd: /root: Permission denied\n$ echo $?  # checking exit code of script\n1\n\n```", "```\n#!/bin/bash                                                                                                                                                               \n# Filename: with_exit_code.sh                                                                                                                                          \n# Description: Exit code of script when exit code is mentioned in scr# ipt                                                                                                \n\nvar=\"Without exit code in script\"\necho $var\n\ncd /root\n\nexit 0\n```", "```\n$ sh with_exit_code.sh \nWithout exit code in script\nwith_exit_code.sh: line 8: cd: /root: Permission denied\necho $?\n0\n```", "```\n#!/bin/bash\n# Filename: exit_code.sh                                                                                                                                          \n# Description: Exit code of script                                                                                            \n\ncmd_foo # running command not installed in system\necho $?\n\ncd /root # Permission problem\necho $?\n\necho \"Hello World!\" # Successful echo print\necho $?\n\nexit 200 # Returning script's exit code as 200\n```", "```\n$ sh exit_status.sh\nexit_code.sh: line 5: cmd_foo: command not found\n127\nexit_code.sh: line 8: cd: /root: Permission denied\n1\nHello World!\n0\n$ echo $?  # Exit code of script\n200\n\n```", "```\n#!/bin/bash\n# Filename: file_checks.sh\n# Description: Performing different check on and between files\n\n# Checking existence of /tmp/file1\necho -n \"Does File /tmp/file1 exist? \"\ntest -e /tmp/file1\necho $?\n\n# Create /tmp/file1\ntouch /tmp/file1 /tmp/file2\necho -n \"Does file /tmp/file1 exist now? \"\ntest -e /tmp/file1\necho $?\n\n# Check whether /tmp is a directory or not\necho -n \"Is /tmp a directory? \"\ntest -d /tmp\necho $?\n\n# Checking if sticky bit set on /tmp\"\necho -n \"Is sticky bit set on /tmp ? \"\ntest -k /tmp\necho $?\n\n# Checking if /tmp has execute permission\necho -n \"Does /tmp/ has execute permission ? \"\ntest -x /tmp\necho $?\n\n# Creating another file /tmp/file2\ntouch /tmp/file2\n\n# Check modification time of /tmp/file1 and /tmp/file2\necho -n \"Does /tmp/file1 modified more recently than /tmp/file2 ? \"\ntest /tmp/file1 -nt /tmp/file2\necho $?\n```", "```\nDoes File /tmp/file1 exist? 1\nDoes file /tmp/file1 exist now? 0\nIs /tmp a directory? 0\nIs sticky bit set on /tmp ? 0\nDoes /tmp/ has execute permission? 0\nDoes /tmp/file1 modified more recently than /tmp/file2 ? 1\n```", "```\n#!/bin/bash\n# Filename: integer_checks.sh\n# Description: Performing different arithmetic checks between integers\n\na=12 b=24 c=78 d=24\necho \"a = $a , b = $b , c = $c , d = $d\"\n\necho -n \"Is a greater than b ? \"\ntest $a -gt $b\necho $?\n\necho -n \"Is b equal to d ? \"\ntest $b -eq $d\necho $?\n\necho -n \"Is c not equal to d ? \"\ntest $c -ne $d\necho $?\n```", "```\na = 12 , b = 24 , c = 78 , d = 24\nIs a greater than b ? 1\nIs b equal to d ? 0\nIs c not equal to d ? 0\n```", "```\n#!/bin/bash\n# Filename: string_checks.sh\n# Description: Performing checks on and between strings\n\nstr1=\"Hello\" str2=\"Hell\" str3=\"\" str4=\"Hello\"\necho \"str1 = $str1 , str2 = $str2 , str3 = $str3 , str4 = $str4\"\n\necho -n \"Is str3 empty ? \"\ntest -z $str3\necho $?\n\necho -n \"Is str2 not empty? \"\ntest -n $str2\necho $?\n\necho -n \"Are str1 and str4 equal? \"\ntest $str1 = $str4\necho $?\n\necho -n \"Are str1 and str2 different? \"\ntest $str1 != $str2\necho $?\n```", "```\nstr1 = Hello , str2 = Hell , str3 =  , str4 = Hello\nIs str3 empty ? 0\nIs str2 not empty? 0\nAre str1 and str4 equal? 0\nAre str1 and str2 different? 0\n```", "```\n#!/bin/bash\n# Filename: expression_checks.sh\n# Description: Performing checks on and between expressions\n\na=5 b=56\nstr1=\"Hello\" str2=\"Hello\"\n\necho \"a = $a , b = $b , str1 = $str1 , str2 = $str2\"\necho -n \"Is a and b are not equal, and str1 and str2 are equal? \"\ntest ! $a -eq $b -a  $str1 = $str2\necho $?\n\necho -n \"Is a and b are equal, and str1 and str2 are equal? \"\ntest $a -eq $b -a  $str1 = $str2\necho $?\n\necho -n \"Does /tmp is a sirectory and execute permission exists? \"\ntest -d /tmp -a  -x /tmp\necho $?\n\necho -n \"Is /tmp file is a block file or write permission exists? \"\ntest -b /tmp -o -w /tmp\necho $?\n```", "```\na = 5 , b = 56 , str1 = Hello , str2 = Hello\nIs a and b are not equal, and str1 and str2 are equal? 0\nIs a and b are equal, and str1 and str2 are equal? 1\nDoes /tmp is a sirectory and execute permission exists? 0\nIs /tmp file is a block file or write permission exists? 0\n```", "```\nif [ conditional_expression ]\nthen\n  statements\nfi\n```", "```\nif [ conditional_expression ]\nthen\n  statements\nelse\n  statements\nfi\n```", "```\n#!/bin/bash\n# Filename: file_exist.sh\n# Description: Print message if file exists\n\nif [ -e /usr/bin/ls ]\nthen\n        echo \"File /usr/bin/ls exists\"\nfi\n```", "```\nFile /usr/bin/ls exists\n```", "```\n#!/bin/bash\n# Filename: greater_integer.sh\n# Description: Determining greater among two integers\n\necho \"Enter two integers a and b\"\nread a b        # Reading input from stdin\necho \"a = $a , b = $b\"\n# Finding greater integer\nif test $a -gt $b\nthen\n        echo \"a is greater than b\"\nelse\n        echo \"b is greater than a\"\nfi\n```", "```\n$ sh greater_integer.sh\nEnter two integers a and b\n56 8\na = 56 , b = 8\na is greater than b\n```", "```\nif [ conditional_expression1 ]\nthen\n  statements\nelif [ conditional_expression2 ]\nthen\n  statements\nelif [ conditional_expression3 ]\nthen\n  statements\n  # More elif conditions\nelse\n  statements\n```", "```\n#!/bin/bash\n# Filename: elif_usage.sh\n# Description: Display content if user input is a regular file or a directoy\n\necho \"Enter a valid file or directory path\"\nread path\necho \"Entered path is $path\"\n\nif [ -f $path ]\nthen\n   echo \"File is a regular file and its content is:\"\n   cat $path\nelif [ -d $path ]\nthen\n   echo \"File is a directory and its content is:\"\n   ls $path\nelse\n   echo \"Not a valid regular file or directory\"\nfi\n```", "```\nEnter a valid file or directory path\n/home/\nEntered path is /home/\nFile is a directory and its content is:\nlost+found  sinny\n```", "```\nif [ conditional_expression1 ]\nthen\n  if [ conditional_expression2 ]\n  then\n     statements\n     if [conditional_expression3 ]\n     then\n       statements\n     fi\n  fi\nfi\n```", "```\n#!/bin/bash\n# Filename: nested_if.sh\n# Description: Finding greatest integer among 3 by making use of nested if\n\necho \"Enter three integer value\"\nread a b c\necho \"a = $a , b = $b, c = $c\"\n\nif [ $a -gt $b ]\nthen\n   if [ $a -gt $c ]\n   then\n      echo \"a is the greatest integer\"\n   else\n     echo \"c is the greatest integer\"\n   fi\nelse\n  if [ $b -gt $c ]\n  then\n    echo \"b is the greatest integer\"\n  else\n    echo \"c is the greatest integer\"\n  fi\nfi\n```", "```\nEnter three integer value\n78 110 7\na = 78 , b = 110, c = 7\nb is the greatest integer\n```", "```\n    echo ${array_name[index]}\n\n    ```", "```\n    echo ${array_name[*]}\n    echo ${array_name[@]}\n\n    ```", "```\n    echo ${#array_name[@]}\n    echo ${#array_name[*]}\n\n    ```", "```\n    echo ${#array_name[n]}\n\n    ```", "```\n    unset array_name[index]  # Removes value at index\n    unset array_name  # Deletes entire array\n\n    ```", "```\n#!/bin/bash\n# Filename: indexed_array.sh\n# Description: Demonstrating different operations on indexed array\n\n#Declaring an array conutries and intializing it\ndeclare -a countries=(India Japan Indonesia 'Sri Lanka' USA Canada)\n\n# Printing Length and elements of countries array\necho \"Length of array countries = ${#countries[@]}\"\necho ${countries[@]}\n\n# Deleting 2nd element of array\nunset countries[1]\necho \"Updated length and content of countries array\"\necho \"Length = ${#countries[@]}\"\necho ${countries[@]}\n\n# Adding two more countries to array\ncountries=(\"${countries[@]}\" \"Indonesia\" \"England\")\necho \"Updated length and content of countries array\"\necho \"Length = ${#countries[@]}\"\necho ${countries[@]}\n```", "```\nLength of array countries = 6\nIndia Japan Indonesia Sri Lanka USA Canada\nUpdated length and content of countries array\nLength = 5\nIndia Indonesia Sri Lanka USA Canada\nUpdated length and content of countries array\nLength = 7\nIndia Indonesia Sri Lanka USA Canada Indonesia England\n```", "```\ndeclare -A array_name\n\n```", "```\narray_name[key]=value\n\n```", "```\narray_name=([key1]=value1 [key2]=value2 ...)\n\n```", "```\n    echo ${array_name[key]}\n    ```", "```\n    echo ${array_name[*]}\n    echo ${array_name[@]}\n    Obtaining the length of an array:\n    echo ${#array_name[@]}\n    echo ${#array_name[*]}\n    ```", "```\n    echo ${array_name[k]}  # Value of key k\n    echo ${#array_name[k]}  # Length of value of key k\n    ```", "```\n    array_name+=([key]=value)\n    ```", "```\n    unset array_name[k]\n    ```", "```\n    unset array_name\n    ```", "```\n#!/bin/bash\n# Filename: associative_array.sh\n# Description: Demonstrating different operations on associative array\n\n# Declaring a new associative array\ndeclare -A student\n\n# Assigning different fields in student array\nstudent=([name]=Foo [usn]=2D [subject]=maths [marks]=67)\n\n# Printing length and content of array student\necho \"Length of student array = ${#student[@]}\"\necho ${student[@]}\n\n# deleting element with key marks\nunset student[marks]\necho \"Updated array content:\"\necho ${student[@]}\n\n# Adding department in student array\nstudent+=([department]=Electronics)\necho \"Updated array content:\"\necho ${student[@]}\n```", "```\nLength of student array = 4\nFoo 67 maths 2D\nUpdated array content:\nFoo maths 2D\nUpdated array content:\nFoo maths Electronics 2D\n```", "```\nfor item in [list]\ndo\n   #Tasks\ndone\n```", "```\nfor (( expr1; expr2; expr3 ))\n  # Tasks\ndone\n```", "```\n#!/bin/bash\n# Filename: for_loop.sh\n# Description: Basic for loop in bash\n\ndeclare -a names=(Foo Bar Tom Jerry)\necho \"Content of names array is:\"\nfor name in ${names[@]}\ndo\n   echo -n \"$name \"\ndone\necho\n```", "```\nContent of names array is:\nFoo Bar Tom Jerry\n```", "```\n#!/bin/bash\n# Filename: finding_directories.sh\n# Description: Print which all files in / are directories\n\necho \"Directories in / :\"\nfor file in 'ls /'\ndo\n  if [ -d \"/\"$file ]\n  then\n     echo -n  \"/$file \"\n  fi\ndone\necho\n```", "```\nDirectories in / :\n/bin /boot /dev /etc /home /lib /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /srv /sys /tmp /usr /var\n```", "```\n#!/bin/bash\n# Filename: range_in_for.sh\n# Description: Specifying range of numbers to for loop\n\necho \"Numbers between 5 to 10 -\"\nfor num in {5..10}\ndo\n  echo -n \"$num \"\ndone\n\necho\necho \"Odd numbers between 1 to 10 -\"\nfor num in {1..10..2}\ndo\n  echo -n \"$num \"\ndone\necho\n```", "```\nNumbers between 5 to 10 -\n5 6 7 8 9 10 \nOdd numbers between 1 to 10 -\n1 3 5 7 9\n```", "```\n$ for num in {3..20..3}; do echo -n \"$num \" ; done\n3 6 9 12 15 18 \n```", "```\nselect var in list\ndo\n   # Tasks to perform\ndone\n```", "```\n#!/bin/bash\n# Filename: select.sh\n# Description: Giving user choice using select to choose\n\nselect file in 'ls /'\ndo\n   if [ -d \"/\"$file ]\n   then\n     echo \"$file is a directory\"\n   else\n     echo \"$file is not a directory\"\n  fi\ndone\n```", "```\nwhile [ condition ]\ndo\n   # Task to perform\ndone\n```", "```\n#!/bin/bash\n# Filename: while_loop.sh\n# Description: Using while loop to read user input\n\necho \"Enter application name\"\nwhile read line\ndo\n  echo -n \"Running PID of application $line :\"\n  pidof $line\ndone\n```", "```\nEnter application name\nfirefox\nRunning PID of application firefox : 1771\nbash\nRunning PID of application bash : 9876 9646 5333 4388 3970 2090 2079 2012 1683 1336\nls\nRunning PID of application ls: \nsystemd\nRunning PID of application systemd : 1330 1026 1\n```", "```\nuntil condition\ndo\n     # Task to be executed\n done\n```", "```\n#!/bin/bash\n# Filename: until_loop.sh\n# Description: Using until loop to read user input\n\necho \"Enter application name\"\nread app\nuntil  pidof $app\ndo\n  sleep 5\ndone\necho \"$app is running now with pid 'pidof $app'\"\n```", "```\nEnter application name\nfirefox\n1867\nfirefox is running now with pid 1867\n```", "```\ncase $variable in\n  pattern1)\n  # Tasks to be executed\n  ;;\n  pattern2)\n  # Tasks to be executed\n  ;;\n  \u2026\n  pattern n)\n  # Tasks to be executed\n  ;;\n  *)\nesac\n```", "```\n#!/bin/bash\n# Filename: switch_case.sh\n# Description: Using case to find count of directories and files in a # path\n\necho \"Enter target path\"\nread path\nfiles_count=0\ndirs_count=0\n\nfor file in 'ls -l $path | cut -d ' ' -f1'\ndo\n  case \"$file\" in\n\n        d*)\n        dirs_count='expr $dirs_count + 1 '\n        ;;\n        -*)\n        files_count='expr $files_count + 1'\n        ;;\n        *)\n  esac\ndone\n\necho \"Directories count = $dirs_count\"\necho \"Regular file count = $files_count\"\n```", "```\nEnter target path\n/usr/lib64\nDirectories count = 134\nRegular file count = 1563\n```", "```\n$ xargs\nLinux shell\nscripting \nctrl + d\nLinux shell scripting\n\n```", "```\n$ xargs --show-limits\nYour environment variables take up 4017 bytes\nPOSIX upper limit on argument length (this system): 2091087\nPOSIX smallest allowable upper limit on argument length (all systems): 4096\nMaximum length of command we could actually use: 2087070\nSize of command buffer we are actually using: 131072\n\n```", "```\n#!/bin/bash\n# Filename: max_file_size.sh\n# Description: File with maximum size in a directory recursively\n\necho \"Enter path of directory\"\nread path\necho \"File with maximum size:\"\n\nfind $path -type f | xargs du -h | sort -h | tail -1\n```", "```\nEnter path of directory\n/usr/bin\nFile with maximum size:\n12M     /usr/bin/doxygen\n```", "```\n#!/bin/bash\n# Filename: tar_creation.sh\n# Description: Create tar of all shell scripts in a directory\n\necho \"Specify directory path\"\nread path\n\nfind $path -name \"*.sh\" | xargs tar cvf scripts.tar\n```", "```\nSpecify directory path\n/usr/lib64\n/usr/lib64/nspluginwrapper/npviewer.sh\n/usr/lib64/xml2Conf.sh\n/usr/lib64/firefox/run-mozilla.sh\n/usr/lib64/libreoffice/ure/bin/startup.sh\n```", "```\nfunction function_name\n {\n # Common set of action to be done\n }\n\n```", "```\nfunction_name()\n{\n # Common set of action to be done\n}\n\n```", "```\n#!/bin/bash\n# Filename: function_call.sh\n# Description: Shows how function is defined and called in bash\n\n# Defining my_func function\nmy_func()\n{\n  echo \"Function my_func is called\"\n  return 3\n}\n\nmy_func # Calling my_func function\nreturn_value=$?\necho \"Return value of function = $return_value\"\n```", "```\nmy_func\n```", "```\nFunction my_func is called\nReturn value of function = 3\n```", "```\n#!/bin/bash\n# Filename: func_param.sh\n# Description: How parameters to function is passed and accessed in bash\n\nupper_case()\n{\n   if [ $# -eq 1 ]\n   then\n     echo $1 | tr '[a-z]' '[A-Z]'\n   fi\n}\n\nupper_case hello\nupper_case \"Linux shell scripting\"\n```", "```\nHELLO\nLINUX SHELL SCRIPTING\n```", "```\n$ df\n\n```", "```\n$ alias df=\"df -h\"\t# Creating alias\n$ df\n\n```", "```\n#!/bin/bash\n# Filename: alias.sh\n# Description: Creating alias of rm -i\n\ntouch /tmp/file.txt\nrm /tmp/file.txt        # File gets deleted silently\ntouch /tmp/file.txt     # Creating again a file\nalias rm=\"rm -i\" # Creating alias of rm -i\nrm /tmp/file.txt\n```", "```\nrm: remove regular empty file '/tmp/file.txt'? Y\n```", "```\n$ alias\nalias df='df -h'\nalias egrep='egrep --color=auto'\nalias fgrep='fgrep --color=auto'\nalias grep='grep --color=auto'\nalias l.='ls -d .* --color=auto'\nalias ll='ls -l --color=auto'\nalias ls='ls --color=auto'\nalias vi='vim'\n```", "```\n$ unalias df  # Deletes df alias\n$ alias -p  # Printing existing aliases\nalias egrep='egrep --color=auto'\nalias fgrep='fgrep --color=auto'\nalias grep='grep --color=auto'\nalias l.='ls -d .* --color=auto'\nalias ll='ls -l --color=auto'\nalias ls='ls --color=auto'\nalias vi='vim'\n```", "```\n$ unalias -a  # Delets all aliases for current shell\n$ alias -p\n\n```", "```\n#!/bin/bash\n# Filename: pushd_popd.sh\n# Description: Count number of files and directories\n\necho \"Enter a directory path\"\nread path\n\nif [ -d $path ]\nthen\n   pushd $path > /dev/null\n   echo \"File count in $path directory = 'ls | wc -l'\"\n   for f in 'ls'\n   do\n      if [ -d $f ]\n      then\n         pushd $f > /dev/null\n         echo \"File count in sub-directory $f = 'ls | wc -l'\"\n         popd > /dev/null\n      fi\n   done\n   popd > /dev/null\nelse\n  echo \"$path is not a directory\"\nfi\n```", "```\nEnter a directory path\n/usr/local   \nFile count in /usr/local directory = 10\nFile count in sub-directory bin = 0\nFile count in sub-directory etc = 0\nFile count in sub-directory games = 0\nFile count in sub-directory include = 0\nFile count in sub-directory lib = 0\nFile count in sub-directory lib64 = 0\nFile count in sub-directory libexec = 0\nFile count in sub-directory sbin = 0\nFile count in sub-directory share = 3\nFile count in sub-directory src = 0\n```"]