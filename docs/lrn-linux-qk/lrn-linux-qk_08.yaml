- en: Controlling the Population
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 控制人口
- en: Linux is a multiuser operating system, which means that many users are allowed
    to access the system at the same time. In real life, you barely find a Linux server
    with just one user. On the contrary, you see a lot of users on one server. So
    let's get real and populate our system with various users and groups. In this
    chapter, you will learn how to add users and groups to your Linux system. You
    will also learn how to manage user and group accounts in all sorts of ways. Furthermore,
    you will also learn how to manage Linux file permissions.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Linux是一个多用户操作系统，这意味着许多用户可以同时访问系统。在现实生活中，你几乎不会找到只有一个用户的Linux服务器。相反，你会在一个服务器上看到很多用户。所以让我们真实地为我们的系统添加各种用户和组。在本章中，您将学习如何向Linux系统添加用户和组。您还将学习如何以各种方式管理用户和组帐户。此外，您还将学习如何管理Linux文件权限。
- en: The /etc/passwd file
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: /etc/passwd文件
- en: 'In Linux, user information is stored in the `/etc/passwd` file. Every line
    in `/etc/passwd` corresponds to exactly one user. When you first open `/etc/passwd`,
    you will see a lot of users, and you will wonder, *where are all these users coming
    from?* The answer is simple: most of these users are service users, and they are
    used by your system to start up various applications and services. However, our
    main focus of this chapter will be system users; those are real people like you
    and me!'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux中，用户信息存储在`/etc/passwd`文件中。`/etc/passwd`中的每一行都对应于一个用户。当您首次打开`/etc/passwd`时，您会看到很多用户，然后您会想，*这些用户都是从哪里来的？*答案很简单：这些用户中的大多数是服务用户，它们由您的系统用于启动各种应用程序和服务。然而，本章的主要重点将是系统用户；这些是像您和我一样的真正的人！
- en: 'Every line in `/etc/passwd` consists of 7 fields, each separated by a colon,
    and each field represents a user attribute. For example, the entry for user `elliot`
    will look something like this:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '`/etc/passwd`中的每一行都由7个字段组成，每个字段用冒号分隔，每个字段代表一个用户属性。例如，用户`elliot`的条目看起来可能是这样的：'
- en: '![](img/88acbe14-424a-4da1-90fc-6ea1e8522129.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![](img/88acbe14-424a-4da1-90fc-6ea1e8522129.png)'
- en: 'Figure 1: The 7 fields in /etc/passwd'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 图1：/etc/passwd中的7个字段
- en: 'The following table breaks down those seven fields in `/etc/passwd` and explains
    each one of them:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格详细说明了`/etc/passwd`中的这七个字段，并解释了每一个：
- en: '| **Field** | **What does it store?** |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| **字段** | **它存储什么？** |'
- en: '| 1 | This field stores the username. |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 这个字段存储用户名。|'
- en: '| 2 | This field usually has an `X` in it, which means the user''s password
    is encrypted and stored in the file `/etc/shadow`. |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 这个字段通常有一个`X`，这意味着用户的密码已加密并存储在文件`/etc/shadow`中。|'
- en: '| 3 | This field stores the **UID** (**User ID**) number. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 这个字段存储**UID**（**用户ID**）号码。|'
- en: '| 4 | This field stores the primary **GID** (**Group ID**) of the user. |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 这个字段存储用户的主要**GID**（**组ID**）。|'
- en: '| 5 | This field stores a comment on the user, which is usually the user''s
    first and last name. |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 5 | 这个字段存储用户的注释，通常是用户的名字和姓氏。|'
- en: '| 6 | This field stores the path of the user''s home directory. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 6 | 这个字段存储用户的主目录路径。|'
- en: '| 7 | This field stores the user''s default shell. |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| 7 | 这个字段存储用户的默认shell。|'
- en: 'Table 10: Understanding /etc/passwd'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 表10：理解/etc/passwd
- en: Adding users
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加用户
- en: 'Before you can add a user on your system, you have to become `root`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在您可以在系统上添加用户之前，您必须成为`root`：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, we are ready to add users. We all love Tom & Jerry, so let''s begin by
    adding user `tom`. To do that, you need to run the command `useradd -m tom`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备好添加用户了。我们都喜欢汤姆和杰瑞，所以让我们从添加用户`tom`开始。为此，您需要运行命令`useradd -m tom`：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And just like that, the user `tom` is now added to our system. You will also
    see a new line added to the end of the `/etc/passwd` file for the new user `tom`;
    let''s view it with the lovely `tail` command:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 就像这样，用户`tom`现在已经添加到我们的系统中。您还会看到在`/etc/passwd`文件的末尾添加了一个新行，用于新用户`tom`；让我们用可爱的`tail`命令查看一下：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We used the `-m` option with the `useradd` command to ensure that a new home
    directory will be created for user `tom`. So let''s try to change to the `/home/tom`
    directory to make sure it''s indeed created:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`useradd`命令的`-m`选项来确保为用户`tom`创建一个新的主目录。所以让我们尝试切换到`/home/tom`目录，以确保它确实已经创建：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Awesome! We verified that `/home/tom` is created.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们验证了`/home/tom`已经创建。
- en: 'The first thing you may want to do after creating a new user is to set the
    user''s password. You can set `tom`''s password by running the command `passwd
    tom`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建新用户后，您可能想要做的第一件事是设置用户的密码。您可以通过运行命令`passwd tom`来设置`tom`的密码：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, let''s create user `jerry`. But this time, we will choose the following
    attributes for user `jerry`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建用户`jerry`。但是这次，我们将为用户`jerry`选择以下属性：
- en: '| UID | `777` |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| UID | `777` |'
- en: '| Comment | `Jerry the Mouse` |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 注释 | `Jerry the Mouse` |'
- en: '| Shell | `/bin/bash` |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| Shell | `/bin/bash` |'
- en: 'This is easy to do with the `useradd` command:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这很容易通过`useradd`命令来完成：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `-u` option is used to set the UID for `jerry`. We also used the `-c` option
    to add a comment for user `jerry`, and finally we used the `-s` option to set
    the default shell for `jerry`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`-u`选项用于设置`jerry`的UID。我们还使用了`-c`选项为用户`jerry`添加注释，最后我们使用了`-s`选项为`jerry`设置默认shell。'
- en: 'Now, let''s view the last two lines of the `/etc/passwd` file to make some
    comparisons:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们查看`/etc/passwd`文件的最后两行，进行一些比较：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Notice how the comment field for user `tom` is empty as we didn't add any comments
    while creating user `tom`, and notice how the UID for user `tom` was chosen by
    the system, but we have chosen `777` for user `jerry`. Also, notice that the default
    shell for user `tom` is chosen by the system to be `/bin/sh`, which is an older
    version of `/bin/bash`. However, we chose the newer shell `/bin/bash` for user
    `jerry`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，用户`tom`的注释字段为空，因为我们在创建用户`tom`时没有添加任何注释，还要注意用户`tom`的UID是由系统选择的，但我们为用户`jerry`选择了`777`。另外，注意用户`tom`的默认shell是由系统选择的`/bin/sh`，这是`/bin/bash`的旧版本。然而，我们为用户`jerry`选择了更新的shell`/bin/bash`。
- en: 'Now, let''s set the password for user `jerry`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们为用户`jerry`设置密码：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Amazing! We have now created two users: `tom` and `jerry`. Now, let''s switch
    to user `tom`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们现在已经创建了两个用户：`tom`和`jerry`。现在，让我们切换到用户`tom`：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We were able to switch to user `tom`, but as you can see, the shell looks so
    much different as the command prompt doesn''t display the username or the hostname.
    That''s because the default shell for user `tom` is `/bin/sh`. You can use the
    `echo $SHELL` command to display the user''s default shell:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们成功切换到了用户`tom`，但是你可以看到，shell看起来很不一样，因为命令提示符不显示用户名或主机名。这是因为用户`tom`的默认shell是`/bin/sh`。你可以使用`echo
    $SHELL`命令来显示用户的默认shell：
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As you can see, it displayed `/bin/sh`. Now, let''s exit and switch to user
    `jerry`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，它显示了`/bin/sh`。现在，让我们退出并切换到用户`jerry`：
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Everything looks better with user `jerry` as we did set his default shell to
    be `/bin/bash`. Alright, now let''s switch back to the `root` user:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一切看起来都更好了，因为我们确实将他的默认shell设置为`/bin/bash`。好了，现在让我们切换回`root`用户：
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Modifying user attributes
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改用户属性
- en: So we are not happy that the default shell for user `tom` is `/bin/sh`, and
    we want to change it to `/bin/bash`. We can use the `usermod` command to modify
    user attributes.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们不满意用户`tom`的默认shell是`/bin/sh`，我们想把它改成`/bin/bash`。我们可以使用`usermod`命令来修改用户属性。
- en: 'For example, to change the default shell for user `tom` to be `/bin/bash`,
    you can run the command `usermod -s /bin/bash tom`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要将用户`tom`的默认shell更改为`/bin/bash`，你可以运行命令`usermod -s /bin/bash tom`：
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Notice that you can also use the full name for the command option; so you can
    use `--shell` instead of `-s`. Anyways, let''s see if we successfully changed
    the default shell for user `tom`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你也可以使用命令选项的全名；所以你可以使用`--shell`代替`-s`。无论如何，让我们看看我们是否成功地更改了用户`tom`的默认shell：
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Great! We successfully did it. You can also change the UID of `tom` to `444`
    by running the command `usermod -u 444 tom`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们成功了。你也可以通过运行命令`usermod -u 444 tom`将`tom`的UID更改为`444`：
- en: '[PRE14]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'And we can indeed check that the UID of `tom` has changed by taking a peek
    at the `/etc/passwd` file:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们确实可以通过查看`/etc/passwd`文件来检查`tom`的UID是否已更改：
- en: '[PRE15]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We can even modify the comment field of user `tom`. Right now, it''s empty,
    but you can set the comment field of user `tom` to `"Tom the Cat"` by running
    the command:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以修改用户`tom`的注释字段。现在，它是空的，但你可以通过运行命令将用户`tom`的注释字段设置为`"Tom the Cat"`：
- en: '[PRE16]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'And again, we can verify that the comment is changed by looking at the `/etc/passwd`
    file:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，我们可以通过查看`/etc/passwd`文件来验证评论是否已更改：
- en: '[PRE17]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Defining the skeleton
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义骨架
- en: 'If you list the contents of `/home/jerry` and `/home/tom`, you will see that
    they are empty:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你列出`/home/jerry`和`/home/tom`的内容，你会发现它们是空的：
- en: '[PRE18]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The reason that both `/home/jerry` and `/home/tom` are empty is that the skeleton
    file `/etc/skel` is also empty:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`/home/jerry`和`/home/tom`都是空的原因是骨架文件`/etc/skel`也是空的：'
- en: '[PRE19]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '**WHAT IS /etc/skel?**'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**/etc/skel是什么？**'
- en: This is the skeleton file. Any file or directory you create in `/etc/skel` will
    be copied to the home directory of any new user created.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这是骨架文件。在`/etc/skel`中创建的任何文件或目录都将被复制到任何新创建的用户的主目录中。
- en: 'Now, with your favorite text editor, create the file `welcome.txt` in `/etc/skel`
    and insert the line `"Hello Friend!"` in it:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，用你最喜欢的文本编辑器，在`/etc/skel`中创建文件`welcome.txt`，并在其中插入一行`"Hello Friend!"`：
- en: '[PRE20]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Alright, so now you have created the file `welcome.txt` in `/etc/skel`, which
    means that any new user created will now have the file `welcome.txt` in their
    home directory. To demonstrate, let''s create a new user named `edward` and then
    we will take a peek at his home directory:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，现在你已经在`/etc/skel`中创建了文件`welcome.txt`，这意味着任何新创建的用户现在都会在他们的主目录中有文件`welcome.txt`。为了演示，让我们创建一个名为`edward`的新用户，然后我们将看一下他的主目录：
- en: '[PRE21]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, let''s set the password for user `edward`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们为用户`edward`设置密码：
- en: '[PRE22]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now, the moment of truth comes! Let''s switch to user `edward` and list the
    contents of his home directory:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，关键时刻到了！让我们切换到用户`edward`，并列出他的主目录的内容：
- en: '[PRE23]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: You can see that the file `welcome.txt` is copied to `edward`'s home directory.
    Every new user created on the system will now have a cool greeting message! Notice
    that old users like `tom` and `jerry` will not have the file `welcome.txt` in
    their home directory as they were created before we added the file `welcome.txt`
    in `/etc/skel`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到文件`welcome.txt`被复制到了`edward`的主目录。系统中创建的每个新用户现在都将有一个很酷的问候消息！请注意，像`tom`和`jerry`这样的旧用户不会在他们的主目录中有文件`welcome.txt`，因为它们是在我们在`/etc/skel`中添加文件`welcome.txt`之前创建的。
- en: Changing the defaults
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改默认值
- en: We are too tired of specifying the default shell every time we create a new
    user. But luckily, there is a file where you can specify the default shell for
    any new user created. This amazing file is `/etc/default/useradd`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经厌倦了每次创建新用户时都要指定默认shell。但幸运的是，有一个文件可以指定为任何新创建的用户设置默认shell。这个神奇的文件是`/etc/default/useradd`。
- en: 'Open up the file `/etc/default/useradd` and look for the following line:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 打开文件`/etc/default/useradd`，查找以下行：
- en: '[PRE24]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Change it to:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 将其更改为：
- en: '[PRE25]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Awesome! Now, any new user created will have `/bin/bash` as the default shell.
    Let''s test it by creating a new user named `spy`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在，任何新创建的用户都将以`/bin/bash`作为默认shell。让我们通过创建一个名为`spy`的新用户来测试一下：
- en: '[PRE26]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now, set the password for user `spy`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为用户`spy`设置密码：
- en: '[PRE27]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Finally, let''s switch to user `spy` and check the default shell:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们切换到用户`spy`并检查默认shell：
- en: '[PRE28]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Hooray! We can see that `bash` is the default shell for user `spy`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 万岁！我们可以看到`bash`是用户`spy`的默认shell。
- en: 'Keep in mind that `/bin/sh` and `/bin/bash` are not the only two valid shells
    on your system; there are more! Check out the file `/etc/shells` to see a complete
    list of all the valid shells on your system:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，`/bin/sh`和`/bin/bash`不是你系统上唯一两个有效的shell；还有更多！查看文件`/etc/shells`，以查看系统上所有有效shell的完整列表：
- en: '[PRE29]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You can change other user defaults in `/etc/default/useradd`, including:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在`/etc/default/useradd`中更改其他用户默认值，包括：
- en: The default `home` directory (`HOME=/home`)
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认的`home`目录（`HOME=/home`）
- en: The default `skel` directory (`SKEL=/etc/skel`)
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认的`skel`目录（`SKEL=/etc/skel`）
- en: I will leave that for you to do as an exercise.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我会把这个留给你作为练习。
- en: Removing users
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除用户
- en: Sometimes a user is no longer needed to be on the system, for example, an employee
    leaving the company or a user that only needed temporary access to a server. In
    any case, you need to know how to delete users.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，不再需要用户在系统上，例如，离开公司的员工或只需要临时访问服务器的用户。无论哪种情况，您都需要知道如何删除用户。
- en: 'The last user we created was `spy`, right? Well, we don''t need any spies on
    our system, so let''s delete the user `spy`; you can delete user `spy` by running
    the command `userdel spy`:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的最后一个用户是`spy`，对吧？好吧，我们的系统上不需要间谍，所以让我们删除用户`spy`；您可以通过运行命令`userdel spy`来删除用户`spy`：
- en: '[PRE30]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'And just like that, user `spy` is deleted. However, the home directory of `spy`
    still exists:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 就像那样，用户`spy`被删除了。但是，`spy`的主目录仍然存在：
- en: '[PRE31]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We would have to manually delete it:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将不得不手动删除它：
- en: '[PRE32]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: But this is inconvenient. Imagine after every user you delete, you then have
    to go and manually remove their home directory. Luckily, there is a better solution;
    you can use the `-r` option to automatically remove the user's home directory.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 但这很不方便。想象一下，每次删除一个用户后，您都必须手动删除他们的主目录。幸运的是，有一个更好的解决方案；您可以使用`-r`选项自动删除用户的主目录。
- en: 'Let''s give it a try with user `edward`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试一下用户`edward`：
- en: '[PRE33]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now, let''s check to see if the home directory for user `edward` still exists:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来检查一下用户`edward`的主目录是否仍然存在：
- en: '[PRE34]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: And as you can see, `edward`'s home directory is removed.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，`edward`的主目录已被删除。
- en: The /etc/group file
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: /etc/group文件
- en: In schools, kids are usually grouped into different groups. For example, kids
    who like dancing will be part of the dance group. The geeky kids will form the
    science group. In case you are wondering, I used to be part of the sports group
    because I was pretty damn fast!
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在学校，孩子们通常被分成不同的小组。例如，喜欢跳舞的孩子将成为舞蹈组的一部分。书呆子孩子将组成科学组。如果你想知道，我曾经是体育组的一部分，因为我跑得相当快！
- en: We have the same concept in Linux as users who share similar characteristics
    are placed in the same group.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux中，具有相似特征的用户被放置在同一组中，这与我们有相同的概念。
- en: '**WHAT IS A GROUP?**'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是组？
- en: A group is a collection of users who share the same role or purpose.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 组是共享相同角色或目的的用户集合。
- en: 'All groups have their information stored in the file `/etc/group`. And just
    like with the `/etc/passwd` file, every line in `/etc/group` corresponds to exactly
    one group, and each line consists of `4` fields. For example, one of the most
    famous groups in Linux is the `sudo` group:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 所有组的信息都存储在文件`/etc/group`中。就像`/etc/passwd`文件一样，`/etc/group`中的每一行都对应于一个组，每一行都由`4`个字段组成。例如，Linux中最著名的组之一是`sudo`组：
- en: '![](img/93e2c12d-c25a-4a51-a415-bc252f582ca1.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/93e2c12d-c25a-4a51-a415-bc252f582ca1.png)'
- en: 'Figure 2: The 4 fields in /etc/group'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图2：/etc/group中的4个字段
- en: 'The following table breaks down those four fields in `/etc/group` and explains
    each one of them:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格详细说明了`/etc/group`中的这四个字段，并解释了每一个：
- en: '| **Field** | **What does it store?** |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| **字段** | **它存储什么？** |'
- en: '| 1 | This field stores the group name. |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 此字段存储组名。|'
- en: '| 2 | This field usually has an `X` in it, which means the group password is
    encrypted and stored in the file `/etc/gshadow`. |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 此字段通常包含`X`，这意味着组密码已加密并存储在文件`/etc/gshadow`中。|'
- en: '| 3 | This field stores the **GID** (**Group ID**) number. |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 此字段存储**GID**（**组ID**）号码。|'
- en: '| 4 | This field stores the usernames of the group members. |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 此字段存储组成员的用户名。|'
- en: 'Table 11: Understanding /etc/group'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 表11：理解/etc/group
- en: Adding groups
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加组
- en: 'Let''s create a group named `cartoon`. To do that, you need to run the command
    `groupadd cartoon`:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个名为`cartoon`的组。为此，您需要运行命令`groupadd cartoon`：
- en: '[PRE35]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Notice that a new line with the group information will be added to the end
    of the file `/etc/group`:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，将添加包含组信息的新行到文件`/etc/group`的末尾：
- en: '[PRE36]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Notice that the group `cartoon` currently has no members, and that's why the
    fourth field is currently empty.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，组`cartoon`目前没有成员，这就是为什么第四个字段目前为空的原因。
- en: 'Let''s create another group named `developers`, but this time, we will specify
    a GID of `888`:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建另一个名为`developers`的组，但这次，我们将指定`888`的GID：
- en: '[PRE37]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Let''s check the `developers` group entry in `/etc/group`:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查`/etc/group`中的`developers`组条目：
- en: '[PRE38]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: And it looks just like we expect it to be. Cool!
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 而且它看起来就像我们期望的那样。很酷！
- en: Adding group members
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加组成员
- en: Users `tom` and `jerry` are both cartoon characters, so it makes sense to add
    them both to the `cartoon` group.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 用户`tom`和`jerry`都是卡通人物，因此将它们都添加到`cartoon`组是有意义的。
- en: 'To add `tom` to the `cartoon` group, you simply run the command `usermod -aG
    cartoon tom`:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 要将`tom`添加到`cartoon`组，只需运行命令`usermod -aG cartoon tom`：
- en: '[PRE39]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Likewise, you can add `jerry` to the `cartoon` group:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，您可以将`jerry`添加到`cartoon`组中：
- en: '[PRE40]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Now, let''s have a peek at the `/etc/group` file:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看`/etc/group`文件：
- en: '[PRE41]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: As you can see, both `tom` and `jerry` are now listed as members of the `cartoon`
    group.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，`tom`和`jerry`现在都列为`cartoon`组的成员。
- en: 'You can use the `id` command to view the group memberships of any user on the
    system. For example, if you want to check which groups `tom` belongs to, you can
    run the command `id tom`:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`id`命令查看系统上任何用户的组成员资格。例如，如果您想要检查`tom`属于哪些组，可以运行命令`id tom`：
- en: '[PRE42]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Let''s do some more practice by creating three new users – `sara`, `peter`,
    and `rachel`:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过创建三个新用户`sara`，`peter`和`rachel`来进行更多练习：
- en: '[PRE43]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'And remember to set the password for each user:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 并记得为每个用户设置密码：
- en: '[PRE44]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Now imagine if all the three new users are software developers; this means
    that they have the same role, and so they should be members of the same group.
    So let''s add all three users to the `developers` group:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在想象一下，如果所有三个新用户都是软件开发人员；这意味着他们有相同的角色，因此他们应该是同一组的成员。因此，让我们将所有三个用户添加到`developers`组中：
- en: '[PRE45]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Now, let''s have a peek at the `/etc/group` file:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看`/etc/group`文件：
- en: '[PRE46]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: We can see that the group `developers` now has the three members – `sara`, `peter`,
    and `rachel`. But there is something strange! It seems like when we have created
    the users `sara`, `peter`, and `rachel`, it also created them as groups! But why
    did this happen? Well, let me explain it to you in the next section.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到`developers`组现在有三个成员-`sara`，`peter`和`rachel`。但是有一些奇怪的地方！看起来当我们创建用户`sara`，`peter`和`rachel`时，它也创建了它们作为组！但是为什么会发生这种情况呢？好吧，让我在下一节中向您解释。
- en: Primary versus secondary groups
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主要与次要组
- en: Every user in Linux must be a member of a primary group. Primary groups are
    also referred to as login groups. By default, whenever a new user is created,
    a group is also created with the same name as the user, and this group becomes
    the primary group of the new user.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: Linux中的每个用户必须是主要组的成员。主要组有时也被称为登录组。默认情况下，每当创建新用户时，也会创建一个与用户名称相同的组，并且该组将成为新用户的主要组。
- en: On the other hand, a user may or may not be a member of a secondary group. Secondary
    groups are also sometimes referred to as supplementary groups. You can think of
    a secondary group as any group that a user is a member of aside from the user's
    primary group.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，用户可能是或不是次要组的成员。次要组有时也被称为附加组。您可以将次要组视为用户除了用户的主要组之外的任何组的成员。
- en: Do not worry if you don't understand the concept of primary and secondary groups
    just yet; it will become crystal clear by the end of this chapter.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还不理解主要和次要组的概念，不要担心；到本章结束时，它将变得非常清晰。
- en: 'Let''s create a new user named `dummy`:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个名为`dummy`的新用户：
- en: '[PRE47]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Now, if you look at the last line of the `/etc/group` file, you will see that
    a group named `dummy` is also created:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您查看`/etc/group`文件的最后一行，您将看到一个名为`dummy`的组也被创建：
- en: '[PRE48]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'This `dummy` group is the primary group of user `dummy`; and if you run the
    `id` command on user `dummy`:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`dummy`组是用户`dummy`的主要组；如果您对用户`dummy`运行`id`命令：
- en: '[PRE49]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'You will see that user `dummy` is indeed a member of the `dummy` group. Now,
    let''s add user `dummy` to the `cartoon` group:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到用户`dummy`确实是`dummy`组的成员。现在，让我们将用户`dummy`添加到`cartoon`组：
- en: '[PRE50]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Let''s run the `id` command on user `dummy` again:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次对用户`dummy`运行`id`命令：
- en: '[PRE51]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'You can see that user `dummy` is a member of two groups: `dummy` and `cartoon`.
    However, `dummy` is the primary group and `cartoon` is the secondary group.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到用户`dummy`是两个组`dummy`和`cartoon`的成员。但是，`dummy`是主要组，`cartoon`是次要组。
- en: 'The primary group is always preceded by `gid=` in the output of the `id` command:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 主要组始终在`id`命令的输出中以`gid=`开头：
- en: '![](img/1bd2ceec-8da8-4c6f-a814-bfafe9f97945.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1bd2ceec-8da8-4c6f-a814-bfafe9f97945.png)'
- en: 'Figure 3: Primary versus secondary group'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图3：主要与次要组
- en: 'Now let''s add user `dummy` to the `developers` group:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将用户`dummy`添加到`developers`组：
- en: '[PRE52]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Next, run the `id` command on user `dummy` again:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，再次对用户`dummy`运行`id`命令：
- en: '[PRE53]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'As you can see, user `dummy` is a member of two secondary groups: `cartoon`
    and `developers`.'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，用户`dummy`是两个次要组`cartoon`和`developers`的成员。
- en: 'Alright! Enough with all this dummy stuff. Let''s remove the user `dummy`:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 好了！够了这些虚拟的东西。让我们删除用户`dummy`：
- en: '[PRE54]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Every user must be a member of only one primary group; however, there are no
    restrictions on the choice of the primary group!
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 每个用户必须是唯一主要组的成员；但是，对主要组的选择没有限制！
- en: 'To demonstrate, let''s create a user named `smurf` with `cartoon` being the
    primary group of user `smurf`. This can easily be done by using the `--gid` option
    with the `useradd` command:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示，让我们创建一个名为`smurf`的用户，`cartoon`是用户`smurf`的主要组。这可以通过使用`useradd`命令的`--gid`选项轻松完成：
- en: '[PRE55]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Now, take a peek at the `/etc/group` file:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，看一下`/etc/group`文件：
- en: '[PRE56]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: You will see that there is no group created with the name `smurf`. Amazing!
    That's because we already specified another primary group for user `smurf`.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到没有使用名称`smurf`创建的组。太神奇了！那是因为我们已经为用户`smurf`指定了另一个主要组。
- en: 'Now let''s check user `smurf`''s group memberships:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们检查用户`smurf`的组成员资格：
- en: '[PRE57]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: As you can see, `smurf` is only a member of the group `cartoon`, which is also
    his primary group, of course.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`smurf`只是`cartoon`组的成员，这当然也是他的主要组。
- en: 'You can also change the primary group of existing users. For example, you can
    set the `developers` group to be the primary group of user `smurf` as follows:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以更改现有用户的主要组。例如，您可以将`developers`组设置为用户`smurf`的主要组，如下所示：
- en: '[PRE58]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Removing groups
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除组
- en: 'You can remove a group if it is no longer needed. To demonstrate, let''s create
    a group named `temp`:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不再需要组，可以删除组。为了演示，让我们创建一个名为`temp`的组：
- en: '[PRE59]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Now, you can use the `groupdel` command to remove the `temp` group:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以使用`groupdel`命令删除`temp`组：
- en: '[PRE60]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Now, let''s try removing the group `sara`:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试删除`temp`组：
- en: '[PRE61]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: We get an error message as we are not allowed to remove primary groups of existing
    users.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们收到错误消息，因为我们不允许删除现有用户的主要组。
- en: File ownership and permissions
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件所有权和权限
- en: 'Every file in Linux is owned by a specific user and a specific group. To demonstrate,
    let''s switch to user `smurf`, and create a file named `mysmurf` in `smurf`''s
    home directory:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: Linux中的每个文件都由特定的用户和特定的组拥有。为了演示，让我们切换到用户`smurf`，并在`smurf`的主目录中创建一个名为`mysmurf`的文件：
- en: '[PRE62]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Now do a long listing on the file `mysmurf`:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 现在对文件`mysmurf`进行长列表：
- en: '![](img/61c1ebc2-7c65-47fc-aae3-f6775ddc3448.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![](img/61c1ebc2-7c65-47fc-aae3-f6775ddc3448.png)'
- en: 'Figure 4: User and group owners'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 图4：用户和组所有者
- en: You will see the name of the user (the user owner) who owns the file in the
    third column of the output, which is, by default, the user who created the file.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在输出的第三列中看到拥有文件的用户（用户所有者）的名称，默认情况下是创建文件的用户。
- en: On the fourth column of the output, you will see the name of the group (the
    group owner) of the file, which is, by default, the primary group of the user
    owner.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在输出的第四列中，您将看到文件的组（组所有者）的名称，默认情况下是用户所有者的主要组。
- en: The `developers` group is the primary group of user `smurf`, and hence `developers`
    became the group owner of the file `mysmurf`.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`developers`组是用户`smurf`的主要组，因此`developers`成为文件`mysmurf`的组所有者。'
- en: 'If you do a long listing on the `sports` directory that''s inside `elliot`''s
    home directory:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在`elliot`的主目录中的`sports`目录上进行长列表：
- en: '[PRE63]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: You will see that user `elliot` is the user owner, and the group `elliot` is
    the group owner; that's because the group `elliot` is the primary group of user
    `elliot`.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到用户`elliot`是用户所有者，组`elliot`是组所有者；这是因为组`elliot`是用户`elliot`的主要组。
- en: Changing file ownership
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改文件所有权
- en: 'You can use the `chown` command to change a file''s ownership. In general,
    the syntax of the `chown` command is as follows:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`chown`命令更改文件的所有权。一般来说，`chown`命令的语法如下：
- en: '[PRE64]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'For example, you can change the ownership of the file `mysmurf`, so that user
    `elliot` is the owner, and group `cartoon` is the group owner, as follows:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以更改文件`mysmurf`的所有权，使用户`elliot`成为所有者，组`cartoon`成为组所有者，如下所示：
- en: '[PRE65]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Oh! Only the `root` user can do it; let''s switch to the `root` user and try
    again:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 哦！只有`root`用户可以做到；让我们切换到`root`用户并再试一次：
- en: '[PRE66]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Success! Now let''s view the ownership of the file `mysmurf`:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 成功！现在让我们查看文件`mysmurf`的所有权：
- en: '[PRE67]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'As you can see, we have successfully changed the ownership of `mysmurf`. Also,
    you can change the user owner without changing the group owner. For example, if
    you want the user `root` to be the owner of `mysmurf`, you can run the following
    command:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们已成功更改了`mysmurf`的所有权。此外，您还可以更改用户所有者，而不更改组所有者。例如，如果您希望用户`root`成为`mysmurf`的所有者，可以运行以下命令：
- en: '[PRE68]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: As you can see, only the user owner is changed to `root`, but `cartoon` remains
    the group owner.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，只有用户所有者更改为`root`，但`cartoon`仍然是组所有者。
- en: 'You can also change the group owner without changing the user owner. For example,
    if you want the group `developers` to be the group owner of `mysmurf`, then you
    can run:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以更改组所有者，而不更改用户所有者。例如，如果您希望组`developers`成为`mysmurf`的组所有者，则可以运行：
- en: '[PRE69]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '**FOR YOUR INFORMATION**'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '**供您参考**'
- en: '`chgrp` can also be used to change the group owner of a file. I will leave
    that for you to do as an exercise!'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '`chgrp`也可以用于更改文件的组所有者。我会留给你作为练习！'
- en: Understanding file permissions
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解文件权限
- en: 'In Linux, every file is assigned access permissions for three different entities;
    these entities are:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux中，每个文件都为三个不同的实体分配了访问权限；这些实体是：
- en: The user owner of the file
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件的用户所有者
- en: The group owner of the file
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件的组所有者
- en: Everyone else (also referred to as others/world)
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他所有人（也称为其他/全局）
- en: We are already familiar with the user owner and the group owner; everyone else
    refers to any user on the system who is not the user owner and not the group owner.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经熟悉了用户所有者和组所有者；其他所有人指的是系统上不是用户所有者也不是组所有者的任何用户。
- en: You can think of these three entities like you, your friends, and everyone else.
    There are some things that you don't like to share with anyone, other things you
    like to share with your friends, and things you may like to share with everyone.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将这三个实体视为您、您的朋友和其他所有人。有一些事情你不愿意与任何人分享，其他一些事情你愿意与朋友分享，还有一些事情你可能愿意与所有人分享。
- en: 'Each file has three types of access permissions:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 每个文件都有三种类型的访问权限：
- en: Read
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取
- en: Write
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 写
- en: Execute
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行
- en: 'The meaning of each of these access permissions is not the same for files and
    directories. The following diagram explains the differences between access permissions
    for files versus directories:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 每个这些访问权限的含义对文件和目录来说并不相同。以下图解释了文件与目录的访问权限之间的区别：
- en: '![](img/ea2e97b3-f43d-49c3-9310-4346e1389bbf.png)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ea2e97b3-f43d-49c3-9310-4346e1389bbf.png)'
- en: 'Figure 5: File versus directory permissions'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 图5：文件与目录权限
- en: 'You can view the permissions of a file by doing a long listing. For example,
    to see the current permissions set on the `mysmurf` file, you can run:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过进行长列表查看文件的权限。例如，要查看`mysmurf`文件上设置的当前权限，可以运行：
- en: '[PRE70]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Now pay attention to the first column of the output, which is `-rw-r--r--`.
    Notice that it consists of ten slots; the first slot determines the type of the
    file. The remaining nine slots are divided into three sets, each with three slots,
    just like in the following diagram:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 现在注意输出的第一列，即`-rw-r--r--`。请注意，它由十个槽组成；第一个槽确定了文件的类型。剩下的九个槽分为三组，每组有三个槽，就像下图中的一样：
- en: '![](img/82df07a6-cba1-4bb5-8bc7-e4e7a413aad4.png)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![](img/82df07a6-cba1-4bb5-8bc7-e4e7a413aad4.png)'
- en: 'Figure 6: Understanding permissions'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 图6：理解权限
- en: 'Notice the first slot determines the file type; it can be:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 注意第一个槽确定了文件类型；它可以是：
- en: '`-` for regular files'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-`表示常规文件'
- en: '`d` for directories'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`d`表示目录'
- en: '`l` for soft links'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`l`表示软链接'
- en: '`b` for block devices'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`b`表示块设备'
- en: '`c` for character devices'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`c`表示字符设备'
- en: 'The next three slots determine the permissions granted for the owner of the
    file. The first of these slots determines the read permission; it can either be:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的三个槽确定了文件所有者被授予的权限。这些槽中的第一个确定了读取权限；它可以是：
- en: '`r` for read access'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`r`表示读取权限'
- en: '`-` for no read access'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-`表示无读取访问'
- en: 'The second of these slots determines the write permission; it can either be:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 这些槽中的第二个确定了写权限；它可以是：
- en: '`w` for write access'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w`表示写访问'
- en: '`-` for no write access'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-`表示无写访问'
- en: 'The third slot determines the execute permission; it can either be:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个槽确定了执行权限；它可以是：
- en: '`x` for execute access'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x`表示执行访问'
- en: '`-` for no execute access'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-`表示无执行访问'
- en: The same logic is applied to the next three slots, which determine the permissions
    for the group owner, and lastly, the final three slots, which determine the permissions
    for everyone else.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的逻辑也适用于接下来的三个槽，用于确定组所有者的权限，最后是最后三个槽，用于确定其他所有人的权限。
- en: 'Now let''s get our hands dirty and do some examples to reinforce our understanding
    of file permissions. Let''s first edit the `mysmurf` file and add the following
    line `Smurfs are blue!` so it looks like this:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们动手做一些示例，以加强我们对文件权限的理解。让我们首先编辑`mysmurf`文件，并添加以下行`Smurfs are blue!`，使其看起来像这样：
- en: '[PRE71]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Now switch to user `smurf` and try reading the contents of the file `mysmurf`:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 现在切换到用户`smurf`，并尝试读取文件`mysmurf`的内容：
- en: '[PRE72]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Cool! User `smurf` can read the contents of the file `mysmurf`. Keep in mind
    that user `smurf` is not the owner of the file, but he is a member of the group
    `developers`:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 酷！用户`smurf`可以读取文件`mysmurf`的内容。请记住，用户`smurf`不是文件的所有者，但他是`developers`组的成员：
- en: '[PRE73]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'So `smurf` can read the file because the group permission of `mysmurf` is `r--`.
    But can he edit the file? Let''s see what will happen if user `smurf` tried to
    add the line `I am smurf!` to the file `mysmurf`:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`smurf`可以读取文件，因为`mysmurf`的组权限是`r--`。但是他能编辑文件吗？让我们看看如果用户`smurf`尝试向文件`mysmurf`添加一行`我是smurf！`会发生什么：
- en: '[PRE74]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Permission denied! Yup, that''s because there is no write permission for the
    group owner (or others). Only the user owner has read and write permissions to
    the file `mysmurf`, and the owner happens to be `root` in this case. Now, if we
    changed the file ownership and made `smurf` the owner of the file `mysmurf`, then
    he will be able to edit the file; so let''s change the file ownership first:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 权限被拒绝！是的，这是因为组所有者（或其他人）没有写权限。只有用户所有者对文件`mysmurf`有读和写权限，而在这种情况下所有者恰好是`root`。现在，如果我们改变文件所有权并使`smurf`成为文件`mysmurf`的所有者，那么他将能够编辑文件；所以让我们首先改变文件所有权：
- en: '[PRE75]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Now let''s switch back to user `smurf` and reattempt to edit the file `mysmurf`:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们切换回用户`smurf`，并尝试编辑文件`mysmurf`：
- en: '[PRE76]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Cool! So user `smurf` has successfully edited the file. Now let''s switch to
    user `elliot` and attempt to add the line `I am not smurf!` to the `mysmurf` file:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 酷！所以用户`smurf`成功编辑了文件。现在让我们切换到用户`elliot`，并尝试向`mysmurf`文件添加一行`我不是smurf！`：
- en: '[PRE77]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Permission denied! Notice that `elliot` is not the user owner and is not even
    a member of the `developers` group, so he is regarded as everyone else (others).
    However, he can read the file because others have read permission `r--`:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 权限被拒绝！请注意，`elliot`不是用户所有者，甚至不是`developers`组的成员，因此他被视为其他人。但是，他可以读取文件，因为其他人有读权限`r--`：
- en: '[PRE78]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Changing file permissions
  id: totrans-281
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改文件权限
- en: Now, what if we want to give `elliot` permission to edit the file `mysmurf`
    without changing file ownership as we did before? Well! This is very simple; you
    can use the `chmod` command to change file permissions.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们想要给`elliot`权限来编辑文件`mysmurf`，而不像之前那样改变文件所有权呢？好吧！这很简单；您可以使用`chmod`命令来更改文件权限。
- en: 'Let''s first switch to the `root` user:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先切换到`root`用户：
- en: '[PRE79]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Now you can add the write permission for others (everyone else) by running
    the command:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以通过运行以下命令为其他人（其他所有人）添加写权限：
- en: '[PRE80]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Here `o+w` means **others+write**, which means adding the write permission
    to others. Now do a long listing on `mysmurf`:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 这里`o+w`表示**其他人+写**，这意味着向其他人添加写权限。现在对`mysmurf`进行长列表：
- en: '[PRE81]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'As you can see, others can now read and write `rw-` to the `mysmurf` file.
    Now, switch back to user `elliot` and try to add the line `I am not smurf!` again:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，其他人现在可以读取和写入`mysmurf`文件的`rw-`。现在，切换回用户`elliot`，并尝试再次添加一行`我不是smurf！`：
- en: '[PRE82]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Success! User `elliot` can edit the file `mysmurf`. Now it''s time to discuss
    the execute permission; let''s go to `elliot`''s home directory, and create a
    file named `mydate.sh`:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 成功！用户`elliot`可以编辑文件`mysmurf`。现在是时候讨论执行权限了；让我们转到`elliot`的主目录，并创建一个名为`mydate.sh`的文件：
- en: '[PRE83]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Now add the following two lines to the file `mydate.sh`:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 现在向文件`mydate.sh`添加以下两行：
- en: '[PRE84]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'You can add both lines by running the following two `echo` commands:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过运行以下两个`echo`命令添加这两行：
- en: '[PRE85]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Do not worry about the meaning of the line `''#/bin/bash''` now; I will explain
    it in a later chapter. Anyways, let''s view the content of the file `mydate.sh`:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 现在不要担心`#/bin/bash`行的含义；我会在以后的章节中解释。无论如何，让我们查看文件`mydate.sh`的内容：
- en: '[PRE86]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Now do a long listing on the file `mydate.sh`:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 现在对文件`mydate.sh`进行长列表：
- en: '[PRE87]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Notice the absence of the execute permission here for everyone (the user owner,
    group owner, and others). Let''s add the execute permission to everyone; you can
    do that by running the following command:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这里每个人（用户所有者、组所有者和其他人）都没有执行权限。让我们为每个人添加执行权限；您可以通过运行以下命令来实现：
- en: '[PRE88]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Here `a+x` means **all+execute**, which means add the execute permission to
    everyone. Also, notice that we were able to run the `chmod` command as user `elliot`
    only because he is the owner of the file `mydate.sh`.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 这里`a+x`表示**所有+执行**，这意味着向每个人添加执行权限。还要注意，我们之所以能够作为用户`elliot`运行`chmod`命令，是因为他是文件`mydate.sh`的所有者。
- en: 'Finally, just enter the full path of `mydate.sh` and hit *Enter*:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，只需输入`mydate.sh`的完整路径，然后按*Enter*：
- en: '[PRE89]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Wow! The current date is displayed! You have created your first Bash script
    and have run it! Bash scripting will be covered in detail in a later chapter.
    But now at least you know what it means for a file to be executable. Now remove
    the execute permission by running the command:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！当前日期显示出来了！您已经创建了您的第一个Bash脚本并运行了它！Bash脚本将在以后的章节中详细介绍。但是现在至少您知道文件可执行是什么意思。现在通过运行以下命令删除执行权限：
- en: '[PRE90]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'Here `a-x` means **all-execute**, which means remove the execute permission
    from everyone. Now try to run the script again:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 这里`a-x`表示**所有-执行**，这意味着从每个人那里删除执行权限。现在尝试再次运行脚本：
- en: '[PRE91]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'We get a permission denied error! This is because the file `mydate.sh` is no
    longer executable. Most Linux commands are executable files. For example, take
    a look at the `date` command. First, we run the `which` command to get the location
    of the `date` command:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 我们收到了权限被拒绝的错误！这是因为文件`mydate.sh`不再可执行。大多数Linux命令都是可执行文件。例如，看一下`date`命令。首先，我们运行`which`命令以获取`date`命令的位置：
- en: '[PRE92]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Now do a long listing on `/bin/date`:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 现在对`/bin/date`进行长列表：
- en: '[PRE93]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'As you can see, it has execute permissions for everyone. Now watch what happens
    when you remove the execute permission:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，每个人都有执行权限。现在看看当您删除执行权限时会发生什么：
- en: '[PRE94]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'Now try running the `date` command:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 现在尝试运行`date`命令：
- en: '[PRE95]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'The `date` command is no longer working! Please let''s fix that by adding the
    execute permission back:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '`date`命令不再起作用！请让我们通过重新添加执行权限来修复：'
- en: '[PRE96]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'Now let''s remove the user owner read permission on the file `mysmurf`:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们删除文件`mysmurf`的用户所有者读取权限：
- en: '[PRE97]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'Here `u-r` means **user-read**, which means remove the read permission from
    the user owner. Now let''s switch to user `smurf` and try to read the file `mysmurf`:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的`u-r`表示**用户读取**，意思是从用户所有者中删除读取权限。现在让我们切换到用户`smurf`，并尝试读取文件`mysmurf`：
- en: '[PRE98]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'Poor `smurf`. He can''t even read his own file. But since he is the file owner;
    he can get the read permission back:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 可怜的`smurf`。他甚至不能读取自己的文件。但由于他是文件所有者，他可以恢复读取权限：
- en: '[PRE99]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'You have seen how to add (`+`) and remove (`-`) permissions with the `chmod`
    command. You can also use the equal sign `=` to set permissions. For example,
    if you want the group owner (`developers`) of the file `mysmurf` to only have
    write permission, you can run the command:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经看到如何使用`chmod`命令添加（`+`）和删除（`-`）权限。您还可以使用等号`=`来设置权限。例如，如果您希望文件`mysmurf`的组所有者（`developers`）只有写入权限，您可以运行以下命令：
- en: '[PRE100]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'So now, the `developers` group members only has write permission `-w-` to the
    file `mysmurf`. Here are more examples:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 所以现在，`developers`组成员只对文件`mysmurf`有写入权限`-w-`。以下是更多示例：
- en: '`chmod ug=rwx mysmurf`: This will give the user owner and group owner full
    permissions.'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chmod ug=rwx mysmurf`：这将给用户所有者和组所有者完全权限。'
- en: '`chmod o-rw mysmurf`: This will remove read and write permissions from others.'
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chmod o-rw mysmurf`：这将从其他用户中删除读取和写入权限。'
- en: '`chmod a= mysmurf`: This will give zero (no) permissions to everyone.'
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chmod a= mysmurf`：这将为每个人提供零（无）权限。'
- en: '`chmod go= mysmurf`: This will give zero permissions to the group owner and
    others.'
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chmod go= mysmurf`：这将给组所有者和其他用户零权限。'
- en: '`chmod u+rx mysmurf`: This will add read and execute permissions to the user
    owner.'
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chmod u+rx mysmurf`：这将为用户所有者添加读取和执行权限。'
- en: 'Let''s give zero permissions to everyone:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们给每个人零权限：
- en: '[PRE101]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'So now user `smurf` can''t read, write, or execute the file:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 所以现在用户`smurf`无法读取，写入或执行文件：
- en: '[PRE102]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'How about the `root` user? Well let''s switch to `root` to find out:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '`root`用户呢？好吧，让我们切换到`root`来找出：'
- en: '[PRE103]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: As you can see, the `root` user can do anything! That's because `root` can bypass
    file permissions! In other words, file permissions don't apply to the `root` user.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，`root`用户可以做任何事情！这是因为`root`可以绕过文件权限！换句话说，文件权限不适用于`root`用户。
- en: Directory permissions
  id: totrans-341
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目录权限
- en: 'Now let''s see how read, write, and execute permissions work on a directory.
    The easiest example will be the `root`''s home directory `/root`. Let''s do a
    long listing on `/root`:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看读取，写入和执行权限在目录上是如何工作的。最简单的例子将是`root`的主目录`/root`。让我们在`/root`上进行长列表：
- en: '[PRE104]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'As you can see, full permissions are given to the owner `root` and zero permissions
    for everyone else. Let''s create a file inside `/root` named `gold`:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，`root`所有者被授予完全权限，其他人被授予零权限。让我们在`/root`内创建一个名为`gold`的文件：
- en: '[PRE105]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'Now let''s switch to user `smurf` and try to list the contents of the `/root`
    directory:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们切换到用户`smurf`，并尝试列出`/root`目录的内容：
- en: '[PRE106]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: User `smurf` gets a permission denied error as he's got no read permissions
    on the directory `/root`. Now, can `smurf` create a file inside `/root`?
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 用户`smurf`收到了权限被拒绝的错误，因为他在目录`/root`上没有读取权限。现在，`smurf`能在`/root`内创建文件吗？
- en: '[PRE107]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: He cannot since he has no write permissions on `/root`. Can he delete a file
    inside `/root`?
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 他不能，因为他在`/root`上没有写入权限。他能删除`/root`内的文件吗？
- en: '[PRE108]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: Again, no write permissions, so he can't delete a file in `/root`. Finally,
    can user `smurf` change to the `/root` directory?
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，没有写入权限，所以他无法在`/root`中删除文件。最后，用户`smurf`能否切换到`/root`目录？
- en: '[PRE109]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'He cannot because `smurf` needs the execute permission to be able to change
    to the `/root` directory. Now, let''s switch back to the `root` user and start
    adding some permissions:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 他不能，因为`smurf`需要执行权限才能切换到`/root`目录。现在，让我们切换回`root`用户并开始添加一些权限：
- en: '[PRE110]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'Here, we added the read and execute permissions to others, so user `smurf`
    can now list the contents of the `/root` directory:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们为其他用户添加了读取和执行权限，所以用户`smurf`现在可以列出`/root`目录的内容：
- en: '[PRE111]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'He can even change to the `/root` directory as we have added the execute permission
    as well:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 他甚至可以切换到`/root`目录，因为我们还添加了执行权限：
- en: '[PRE112]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'But he still has no write permissions, so he can''t create or delete files
    in `/root`:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 但他仍然没有写入权限，所以他无法在`/root`中创建或删除文件：
- en: '[PRE113]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'Let''s add the write permission to others:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为其他用户添加写入权限：
- en: '[PRE114]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'Finally, switch to user `smurf` and try to create or remove a file in `/root`:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，切换到用户`smurf`并尝试在`/root`中创建或删除文件：
- en: '[PRE115]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: So `smurf` can now create and delete files in `/root` as he has the write permission.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 所以`smurf`现在可以在`/root`中创建和删除文件，因为他有写入权限。
- en: Using octal notation
  id: totrans-367
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用八进制表示法
- en: 'Instead of the letters `r`, `w`, and `x`, you can use the numbers `4`, `2`,
    and `1` to set file permissions. Take a look at the following image:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用数字`4`，`2`和`1`来设置文件权限，而不是字母`r`，`w`和`x`。看一下下面的图片：
- en: '![](img/781e3f37-978e-435b-b053-d927a1b3ac16.png)'
  id: totrans-369
  prefs: []
  type: TYPE_IMG
  zh: '![](img/781e3f37-978e-435b-b053-d927a1b3ac16.png)'
- en: 'Figure 7: Understanding octal notation'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 图7：理解八进制表示法
- en: 'Notice that the first number, `7`, is basically the addition of the three numbers:
    `4 (r) + 2 (w) + 1 (x)`, which sets full permissions to the file owner. The second
    number, `6`, is the addition of the two numbers: `4 (r) + 2(w)`, which sets the
    read and write permissions to the group owner. Finally, the third number, `4`,
    which sets the read permission to others.'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，第一个数字`7`基本上是三个数字的相加：`4（r）+ 2（w）+ 1（x）`，这将为文件所有者设置完全权限。第二个数字`6`是两个数字的相加：`4（r）+
    2（w）`，这将为组所有者设置读取和写入权限。最后，第三个数字`4`，这将为其他用户设置读取权限。
- en: 'I know what you are thinking: "Why would I want to do math when I can just
    use the literal notation `rwx`?" And trust me, I feel you. A lot of people prefer
    the literal notation over the numeric notation, but some people just love numbers
    way too much!'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道你在想什么：“为什么我要做数学，当我可以使用文字表示`rwx`？”相信我，我理解你。很多人更喜欢文字表示法而不是数字表示法，但有些人太喜欢数字了！
- en: 'Let''s do some practice with the octal notation. There are currently zero permissions
    on the file `mysmurf`:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用八进制表示法做一些练习。文件`mysmurf`当前没有任何权限：
- en: '[PRE116]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'We can use `777` to give full permissions to everyone:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`777`为每个人提供完全权限：
- en: '[PRE117]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'Cool! Now you can use the triplet `421` to give read permission for the owner,
    write permission for the group owner, and execute permission for others:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在你可以使用三位数`421`来给予文件所有者读取权限，给予组所有者写入权限，以及给予其他用户执行权限：
- en: '[PRE118]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'Let''s do one more example. What if you want to give full permissions to the
    owner, read permission for the group owner, and zero permissions for others? That''s
    easy; the correct triplet will be `740`:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再举一个例子。如果你想给予文件所有者完全权限，给予组所有者读取权限，以及其他用户零权限，那很简单；正确的三位数将是`740`：
- en: '[PRE119]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'Numbers are easy to work with once you get the hang of it. Just remember that:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你掌握了，数字就很容易使用。只需要记住：
- en: '`4`: Read'
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`4`：读取'
- en: '`2`: Write'
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`2`：写入'
- en: '`1`: Execute'
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1`：执行'
- en: '`0`: Zero permissions'
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0`：零权限'
- en: 'The following table summarizes all the possible permissions combinations:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表总结了所有可能的权限组合：
- en: '| **Number** | **Meaning** | **Literal Equivalence** |'
  id: totrans-387
  prefs: []
  type: TYPE_TB
  zh: '| **数字** | **意义** | **字面等价** |'
- en: '| 0 | Zero/No Permissions | `---` |'
  id: totrans-388
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 零/无权限 | `---` |'
- en: '| 1 | Execute | `--x` |'
  id: totrans-389
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 执行 | `--x` |'
- en: '| 2 | Write | `-w-` |'
  id: totrans-390
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 写入 | `-w-` |'
- en: '| 3 | Write + Execute | `-wx` |'
  id: totrans-391
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 写入 + 执行 | `-wx` |'
- en: '| 4 | Read | `r--` |'
  id: totrans-392
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 读取 | `r--` |'
- en: '| 5 | Read + Execute | `r-x` |'
  id: totrans-393
  prefs: []
  type: TYPE_TB
  zh: '| 5 | 读取 + 执行 | `r-x` |'
- en: '| 6 | Read + Write | `rw-` |'
  id: totrans-394
  prefs: []
  type: TYPE_TB
  zh: '| 6 | 读取 + 写入 | `rw-` |'
- en: '| 7 | Read + Write + Execute | `rwx` |'
  id: totrans-395
  prefs: []
  type: TYPE_TB
  zh: '| 7 | 读取 + 写入 + 执行 | `rwx` |'
- en: 'Table 12: Octal notation versus literal notation'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 表12：八进制表示法与字面表示法
- en: This chapter was a bit lengthy. Go take a break and then come back and attack
    the knowledge check exercises!
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章有点冗长。休息一下，然后回来完成知识检测练习！
- en: Knowledge check
  id: totrans-398
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 知识检测
- en: 'For the following exercises, open up your Terminal and try to solve the following
    tasks:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 对于以下练习，打开你的终端并尝试解决以下任务：
- en: Create a new user `abraham` with a user ID of `333`.
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个用户`abraham`，用户ID为`333`。
- en: Create a new group `admins`.
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的组`admins`。
- en: Add user `abraham` to the `admins` group.
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将用户`abraham`添加到`admins`组。
- en: Make `admins` the group owner of the directory `/home/abraham`.
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`admins`设为目录`/home/abraham`的组所有者。
- en: Members of the `admins` group can only list the contents of the directory `/home/abraham`.
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`admins`组的成员只能列出目录`/home/abraham`的内容。'
- en: True or false
  id: totrans-405
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 真或假
- en: '`chmod a=rxw facts.txt` will have the same result as `chmod 777 facts.txt`.'
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`chmod a=rxw facts.txt`将会得到与`chmod 777 facts.txt`相同的结果。'
- en: '`chmod a=rw facts.txt` will have the same result as `chmod 665 facts.txt`.'
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`chmod a=rw facts.txt`将会得到与`chmod 665 facts.txt`相同的结果。'
- en: User `elliot` can have more than one primary group.
  id: totrans-408
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户`elliot`可以有多个主要组。
