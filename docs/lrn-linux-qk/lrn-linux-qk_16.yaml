- en: Bash Scripting Is Fun
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: Bash脚本很有趣
- en: To complete a specific task in Linux, you will often find yourself running the
    same set of commands over and over again. This process can waste a lot of your
    precious time. In this chapter, you will learn how to create bash scripts so that
    you can be much more efficient in Linux.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux中完成特定任务时，你经常会发现自己一遍又一遍地运行相同的一组命令。这个过程会浪费很多宝贵的时间。在本章中，你将学习如何创建bash脚本，以便在Linux中更加高效。
- en: Creating simple scripts
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建简单脚本
- en: 'Our first bash script will be a simple script that will output the line "Hello
    Friend!" to the screen. In Elliot''s home directory, create a file named `hello.sh`
    and insert the following two lines:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个bash脚本将是一个简单的脚本，它将在屏幕上输出一行“你好，朋友！”。在艾略特的主目录中，创建一个名为`hello.sh`的文件，并插入以下两行：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now we need to make the script executable:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要将脚本设置为可执行：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And finally, run the script:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，运行脚本：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Congratulations! You have now created your first bash script! Let''s take a
    minute here and discuss a few things; every bash script must do the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你现在已经创建了你的第一个bash脚本！让我们花一分钟时间讨论一些事情；每个bash脚本必须做到以下几点：
- en: '`#!/bin/bash`'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`#!/bin/bash`'
- en: Be executable
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要可执行
- en: You have to insert `#!/bin/bash` at the first line of any bash script; the character
    sequence `#!` is referred to as a shebang or hashbang and is followed by the path
    of the bash shell.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须在任何bash脚本的第一行插入`#!/bin/bash`；字符序列`#!`被称为shebang或hashbang，后面跟着bash shell的路径。
- en: The PATH variable
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PATH变量
- en: 'You may have noticed that I used `./hello.sh` to run the script; you will get
    an error if you omit the leading `./`:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到我使用了`./hello.sh`来运行脚本；如果省略前导的`./`，你会得到一个错误：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The shell can't find the command `hello.sh`. When you run a command on your
    terminal, the shell looks for that command in a set of directories that are stored
    in the `PATH` variable.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: shell找不到命令`hello.sh`。当你在终端上运行一个命令时，shell会在存储在`PATH`变量中的一组目录中寻找该命令。
- en: 'You can use the `echo` command to view the contents of your `PATH` variable:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`echo`命令查看你的`PATH`变量的内容：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The colon character separates the path of each of the directories. You don''t
    need to include the full path of any command or script (or any executable) that
    resides in these directories. All the commands you have learned so far reside
    in `/bin` and `/sbin`, which are both stored in your `PATH` variable. As a result,
    you can run the `pwd` command:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 冒号字符分隔每个目录的路径。你不需要包括这些目录中任何命令或脚本（或任何可执行文件）的完整路径。到目前为止，你学到的所有命令都驻留在`/bin`和`/sbin`中，它们都存储在你的`PATH`变量中。因此，你可以运行`pwd`命令：
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'There is no need to include its full path:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 没有必要包含它的完整路径：
- en: '[PRE6]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The good news is that you can easily add a directory to your `PATH` variable.
    For example, to add `/home/elliot` to your `PATH` variable, you can use the `export`
    command as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是你可以很容易地将一个目录添加到你的`PATH`变量中。例如，要将`/home/elliot`添加到你的`PATH`变量中，你可以使用`export`命令如下：
- en: '[PRE7]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now you don''t need the leading `./` to run the `hello.sh` script:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你不需要前导的`./`来运行`hello.sh`脚本：
- en: '[PRE8]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'It will run because the shell is now looking for executable files in the `/home/elliot`
    directory as well:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 它将运行，因为shell现在也在`/home/elliot`目录中寻找可执行文件：
- en: '[PRE9]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Alright! Now let''s create a few more bash scripts. We will create a script
    named `hello2.sh` that prints out "Hello Friend!" then displays your current working
    directory:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 好了！现在让我们创建几个更多的bash脚本。我们将创建一个名为`hello2.sh`的脚本，它打印出“你好，朋友！”然后显示你当前的工作目录：
- en: '[PRE10]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now let''s run it:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们运行它：
- en: '[PRE11]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Shoot! I forgot to make it executable:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 糟糕！我忘记了要将其设置为可执行：
- en: '[PRE12]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Reading user input
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取用户输入
- en: 'Let''s create a better version of our `hello.sh` script. We will let the user
    input his/her name and then we will greet the user; create a script named `greet.sh`
    with the following lines:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建我们的`hello.sh`脚本的更好版本。我们将让用户输入他/她的名字，然后我们将向用户打招呼；创建一个名为`greet.sh`的脚本，包含以下几行：
- en: '[PRE13]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now make the script executable and then run it:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让脚本可执行，然后运行它：
- en: '[PRE14]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'When you run the script, it will prompt you to enter your name; I entered `Elliot`
    as my name:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行脚本时，它会提示你输入你的名字；我输入了`Elliot`作为我的名字：
- en: '[PRE15]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The script greeted me with "Hello Elliot!". We used the `read` command to get
    the user input, and notice in the `echo` statement, we used a dollar sign, `$`,
    to print the value of the variable `name`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本向我打招呼说“你好，艾略特！”。我们使用`read`命令获取用户输入，并注意在`echo`语句中，我们使用了美元符号`$`来打印变量`name`的值。
- en: 'Let''s create another script that reads a filename from the user and then outputs
    the size of the file in bytes; we will name our script `size.sh`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建另一个脚本，从用户那里读取文件名，然后输出文件的大小（以字节为单位）；我们将命名我们的脚本为`size.sh`：
- en: '[PRE16]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'And never forget to make the script executable:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 并且永远不要忘记将脚本设置为可执行：
- en: '[PRE17]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now let''s run the script:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们运行脚本：
- en: '[PRE18]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'I used `size.sh` as the file path, and the output was 128 bytes; is that true?
    Let''s check:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用`size.sh`作为文件路径，输出为128字节；是真的吗？让我们来检查一下：
- en: '[PRE19]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Indeed it is; notice in the script the following line:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 的确如此；请注意脚本中的以下一行：
- en: '[PRE20]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'It stores the result of the command `du -bs $file | cut -f1` in the variable
    `filesize`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 它将`du -bs $file | cut -f1`命令的结果存储在变量`filesize`中：
- en: '[PRE21]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Also notice that the command `du -bs $file cut -f1` is surrounded by parentheses
    and a dollar sign (on the left); this is called command substitution. In general,
    the syntax of command substitution goes as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，命令`du -bs $file cut -f1`被括号和美元符号（在左边）包围；这被称为命令替换。一般来说，命令替换的语法如下：
- en: '[PRE22]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The result of the `command` will be stored in the variable `var`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`command`的结果将存储在变量`var`中。'
- en: Passing arguments to scripts
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向脚本传递参数
- en: 'Instead of reading input from users, you can also pass arguments to a bash
    script. For example, let''s create a bash script named `size2.sh` that does the
    same thing as the script `size.sh`, but instead of reading the file from the user,
    we will pass it to the script `size2.sh` as an argument:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 除了从用户那里读取输入，你还可以将参数传递给bash脚本。例如，让我们创建一个名为`size2.sh`的bash脚本，它做的事情与脚本`size.sh`相同，但是不是从用户那里读取文件，而是将其作为参数传递给脚本`size2.sh`：
- en: '[PRE23]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now let''s make the script executable:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将脚本设置为可执行：
- en: '[PRE24]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Finally, you can run the script:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以运行脚本：
- en: '[PRE25]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: You will get the same output as `size.sh`. Notice that we provided the file
    path
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你将得到与`size.sh`相同的输出。注意我们提供了文件路径
- en: '`/home/elliot/size.sh` as an argument to the script `size2.sh`.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`/home/elliot/size.sh`作为脚本`size2.sh`的参数。'
- en: 'We only used one argument in the script `size2.sh`, and it is referenced by
    `$1`. You can pass multiple arguments as well; let''s create another script `size3.sh`
    that takes two files (two arguments) and outputs the size of each file:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在脚本`size2.sh`中只使用了一个参数，它由`$1`引用。你也可以传递多个参数；让我们创建另一个脚本`size3.sh`，它接受两个文件（两个参数）并输出每个文件的大小：
- en: '[PRE26]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now make the script executable and run it:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在使脚本可执行并运行它：
- en: '[PRE27]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Awesome! As you can see, the first argument is referenced by `$1`, and the
    second argument is referenced by `$2`. So in general:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！如你所见，第一个参数由`$1`引用，第二个参数由`$2`引用。所以一般来说：
- en: '[PRE28]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Using the if condition
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用if条件
- en: You can add intelligence to your bash script by making it behave differently
    in different scenarios. To do that, we use the conditional `if` statement.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使其在不同的情况下表现不同来为你的bash脚本增加智能。为此，我们使用条件`if`语句。
- en: 'In general, the syntax of the `if condition` is as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，`if条件`的语法如下：
- en: '[PRE29]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'For example, let''s create a script `empty.sh` that will examine whether a
    file is empty or not:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们创建一个名为`empty.sh`的脚本，它将检查文件是否为空：
- en: '[PRE30]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now let''s make the script executable and also create an empty file named `zero.txt`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使脚本可执行，并创建一个名为`zero.txt`的空文件：
- en: '[PRE31]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now let''s run the script on the file `zero.txt`:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在文件`zero.txt`上运行脚本：
- en: '[PRE32]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'As you can see, the script correctly detects that `zero.txt` is an empty file;
    that''s because the test condition is true in this case as the file `zero.txt` is
    indeed zero bytes in size:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，脚本正确地检测到`zero.txt`是一个空文件；这是因为在这种情况下测试条件为真，因为文件`zero.txt`的确是零字节大小的：
- en: '[PRE33]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We used `-eq` to test for equality. Now if you run the script on a non-empty
    file, there will be no output:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了`-eq`来测试相等。现在如果你在一个非空文件上运行脚本，将不会有输出：
- en: '[PRE34]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'We need to modify the script `empty.sh` so that it displays an output whenever
    it''s passed a non-empty file; for that, we will use the `if-else` statement:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要修改脚本`empty.sh`，以便在传递非空文件时显示输出；为此，我们将使用`if-else`语句：
- en: '[PRE35]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Let''s edit the `empty.sh` script by adding the following `else` statement:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过添加以下`else`语句来编辑`empty.sh`脚本：
- en: '[PRE36]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Now let''s rerun the script:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们重新运行脚本：
- en: '[PRE37]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: As you can see, it now works perfectly!
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，现在它完美地运行了！
- en: 'You can also use the `elif` (**else-if**) statement to create multiple test
    conditions:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用`elif`（**else-if**）语句来创建多个测试条件：
- en: '[PRE38]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Let''s create a script `filetype.sh` that detects a file type. The script will
    output whether a file is a regular file, a soft link, or a directory:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个名为`filetype.sh`的脚本，它检测文件类型。脚本将输出文件是普通文件、软链接还是目录：
- en: '[PRE39]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Now let''s make the script executable and also create a soft link to `/tmp`
    named `tempfiles`:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使脚本可执行，并创建一个指向`/tmp`的软链接，名为`tempfiles`：
- en: '[PRE40]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Now run the script on any directory:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在任何目录上运行脚本：
- en: '[PRE41]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'It correctly detects that `/bin` is a directory. Now run the script on any
    regular file:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 它正确地检测到`/bin`是一个目录。现在在任何普通文件上运行脚本：
- en: '[PRE42]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'It correctly detects that `zero.txt` is a regular file. Finally, run the script
    on any soft link:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 它正确地检测到`zero.txt`是一个普通文件。最后，在任何软链接上运行脚本：
- en: '[PRE43]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: It correctly detects that `tempfiles` is a soft link.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 它正确地检测到`tempfiles`是一个软链接。
- en: 'The following `man` page contains all the test conditions:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 以下`man`页面包含了所有的测试条件：
- en: '[PRE44]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: So NEVER memorize! Utilize and make use of the man pages.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 所以永远不要死记硬背！利用并使用man页面。
- en: Looping in bash scripts
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在bash脚本中循环
- en: The ability to loop is a very powerful feature of bash scripting. For example,
    let's say you want to print out the line "Hello world" 20 times on your terminal;
    a naive approach would be to create a script that has 20 `echo` statements. Luckily,
    looping offers a smarter solution.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 循环的能力是bash脚本的一个非常强大的特性。例如，假设你想要在终端上打印出"Hello world"这一行20次；一个天真的方法是创建一个有20个`echo`语句的脚本。幸运的是，循环提供了一个更聪明的解决方案。
- en: Using the for loop
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用for循环
- en: 'The `for` loop has a few different syntaxes. If you are familiar with C++ or
    C programming, then you will recognize the following `for` loop syntax:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`for`循环有几种不同的语法。如果你熟悉C++或C编程，那么你会认出以下`for`循环的语法：'
- en: '[PRE45]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Using the aforementioned C-style syntax; the following `for` loop will print
    out "Hello World" twenty times:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前面提到的C风格语法；以下`for`循环将打印出"Hello World"二十次：
- en: '[PRE46]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The loop initializes the integer variable `i` to `0`, then it tests the condition
    (`i < 20`); if true, it then executes the line echo "Hello World" and increments
    the variable `i` by one, and then the loop runs again and again until `i` is no
    longer less than `20`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 循环将整数变量`i`初始化为`0`，然后测试条件（`i < 20`）；如果为真，则执行echo "Hello World"这一行，并递增变量`i`一次，然后循环再次运行，直到`i`不再小于`20`。
- en: 'Now let''s create a script `hello20.sh` that has the `for` loop we just discussed:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建一个名为`hello20.sh`的脚本，其中包含我们刚讨论的`for`循环：
- en: '[PRE47]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Now make the script executable and run it:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在使脚本可执行并运行它：
- en: '[PRE48]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'It outputs the line "Hello World" twenty times as we expected. Instead of the
    C-style syntax, you can also use the range syntax with the `for` loop:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 它输出了"Hello World"这一行二十次，正如我们所预期的那样。除了C风格的语法，你也可以在`for`循环中使用范围语法：
- en: '[PRE49]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'This will also output "Hello World" 20 times. This range syntax is particularly
    useful when working with a list of files. To demonstrate, create the following
    five files:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这也将输出"Hello World"20次。这种范围语法在处理文件列表时特别有用。为了演示，创建以下五个文件：
- en: '[PRE50]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Now let's say we want to rename the extension for all five files from `.doc`
    to
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设我们想要将所有五个文件的扩展名从`.doc`改为
- en: '`.document`. We can create a script `rename.sh` that has the following `for`
    loop:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`.document`。我们可以创建一个名为`rename.sh`的脚本，其中包含以下`for`循环：'
- en: '[PRE51]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Make the script executable and run it:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 使脚本可执行并运行它：
- en: '[PRE52]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: As you can see, it renamed all the files with the `.doc` extension to `.document`.
    Now imagine if you wanted to do this for a million files. If you don't know bash
    scripting, you would probably spend ten years doing it. We should all thank the
    Linux Gods for bash scripting.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，它将所有扩展名为`.doc`的文件重命名为`.document`。现在想象一下，如果你想对一百万个文件执行此操作。如果你不懂bash脚本，你可能要花十年的时间。我们都应该感谢Linux之神的bash脚本。
- en: Using the while loop
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`while`循环
- en: 'The `while` loop is another popular and intuitive loop. The general syntax
    for a `while` loop is as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`while`循环是另一个流行且直观的循环。`while`循环的一般语法如下：'
- en: '[PRE53]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'For example, we can create a simple script `numbers.sh` that prints the numbers
    from one to ten:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以创建一个简单的脚本`numbers.sh`，打印从一到十的数字：
- en: '[PRE54]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Make the script executable and run it:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 使脚本可执行并运行它：
- en: '[PRE55]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The script is simple to understand; we first initialized the variable number
    to `1`:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本很容易理解；我们首先将变量number初始化为`1`：
- en: '[PRE56]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Then we created a test condition that will keep the `while` loop running as
    long as the variable `number` is less than or equal to 10:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们创建了一个测试条件，只要变量`number`小于或等于10，`while`循环将继续运行：
- en: '[PRE57]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Inside the body of the `while` loop, we first print out the value of the variable
    `number`, and then we increment it by one. Notice that to evaluate an arithmetic
    expression, it needs to be within double parentheses as `$((arithmetic-expression))`:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在`while`循环的主体中，我们首先打印变量`number`的值，然后将其增加1。请注意，要评估算术表达式，它需要在双括号内，如`$((arithmetic-expression))`：
- en: '[PRE58]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Now it''s time for some fun! We will create a number guessing game. But before
    we do that, let me introduce you to a pretty cool command. You can use the shuffle
    command `shuf` to generate random permutations. For example, to generate a random
    permutation of the numbers between 1 and 10, you can run the following command:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候玩一些有趣的东西了！我们将创建一个猜数字游戏。但在我们开始之前，让我向你介绍一个非常酷的命令。你可以使用`shuf`命令来生成随机排列。例如，要生成1到10之间数字的随机排列，你可以运行以下命令：
- en: '[PRE59]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Keep in mind that my output will most likely be different from your output because
    it is random! There is a one in a million chance that you will have the same output
    as me.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，我的输出很可能与你的输出不同，因为它是随机的！你有一百万分之一的机会和我有相同的输出。
- en: 'Now we can use the `-n` option to select one number out of the permutation.
    This number will be random as well. So to generate a random number between 1 and
    10, you can run the following command:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用`-n`选项从排列中选择一个数字。这个数字也将是随机的。因此，要生成1到10之间的随机数，你可以运行以下命令：
- en: '[PRE60]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: The output will be a random number between 1 and 10\. The `shuf` command will
    play a key role in our game. We will generate a random number between 1 and 10,
    and then we will see how many tries it will take the user (player) to guess the
    random number correctly.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将是1到10之间的一个随机数。`shuf`命令将在我们的游戏中发挥关键作用。我们将生成1到10之间的随机数，然后我们将看看用户（玩家）猜中随机数需要多少次尝试。
- en: 'Here is our lovely handcrafted script `game.sh`:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们精心制作的脚本`game.sh`：
- en: '[PRE61]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Now make the script executable and run it to start the game:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在使脚本可执行并运行它来开始游戏：
- en: '[PRE62]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: It took me four tries in my first attempt at the game; I bet you can easily
    beat me!
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的第一次尝试游戏中，我猜了四次；我打赌你可以轻松地击败我！
- en: 'Let''s go over our game script line by line. We first generate a random number
    between 1 and 10 and assign it to the variable `random`:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐行查看我们的游戏脚本。我们首先生成一个1到10之间的随机数，并将其赋值给变量`random`：
- en: '[PRE63]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Notice that you can add comments in your bash script as I did here by using
    the hash character, followed by your comment.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你可以在你的bash脚本中添加注释，就像我在这里使用井号字符，后面跟上你的注释一样。
- en: 'We then print three lines that explain the game to the player:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们打印三行来向玩家解释游戏规则：
- en: '[PRE64]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Next, we initialize the variable `tries` to `1` so that we can keep track of
    how many guesses the player took:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将变量`tries`初始化为`1`，以便我们可以跟踪玩家猜了多少次：
- en: '[PRE65]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'We then enter the game loop:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们进入游戏循环：
- en: '[PRE66]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Notice the test condition `while [ true ]` will always be `true`, and so the
    loop will keep running forever (infinite loop).
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，测试条件`while [ true ]`将始终为`true`，因此循环将永远运行（无限循环）。
- en: 'The first thing we do in the game loop is that we ask the player to enter a
    number between 1 and 10:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏循环中我们做的第一件事是要求玩家输入1到10之间的数字：
- en: '[PRE67]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'We then test to see if the number the player has entered is greater than, less
    than, or equal to the `random` number:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们测试玩家输入的数字是大于、小于还是等于`random`数字：
- en: '[PRE68]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: If `number` is bigger than `random`, we tell the player that the guess is too
    high to make it easier for the player to have a better guess next time. Likewise,
    if `number` is smaller than `random`, we tell the player the guess is too low.
    Otherwise, if it is a correct guess, then we print the total number of tries the
    player exhausted to make the correct guess, and we break from the loop.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`number`大于`random`，我们告诉玩家猜测太高，以便玩家下次更容易猜对。同样，如果`number`小于`random`，我们告诉玩家猜测太低。否则，如果是正确的猜测，那么我们打印玩家用来做出正确猜测的总次数，并且我们从循环中退出。
- en: Notice that you need the `break` statement to exit from the infinite loop. Without
    the `break` statement, the loop will run forever.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你需要`break`语句来退出无限循环。没有`break`语句，循环将永远运行。
- en: 'Finally, we increment the number of `tries` by 1 for each incorrect guess (high
    or low):'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们每次猜错（高或低）都会将`tries`的数量增加1：
- en: '[PRE69]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: I have to warn you that this game is addictive! Especially when you play it
    with a friend to see who will get the correct guess in the least number of tries.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我必须警告你，这个游戏很容易上瘾！特别是当你和朋友一起玩时，看谁能在最少的尝试次数中猜对。
- en: Using the until loop
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`until`循环
- en: Both the `for` and `while` loops run as long as the test condition is `true`.
    On the flip side, the `until` loop keeps running as long as the test condition
    is `false`. That's to say, it stops running as soon as the test condition is `true`.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`for`和`while`循环都会在测试条件为`true`时运行。相反，`until`循环会在测试条件为`false`时继续运行。也就是说，它会在测试条件为`true`时停止运行。'
- en: 'The general syntax of an `until` loop is as follows:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`until`循环的一般语法如下：'
- en: '[PRE70]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'For example, we can create a simple script `3x10.sh` that prints out the first
    ten multiples of `3`:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以创建一个简单的脚本`3x10.sh`，打印出`3`的前十个倍数：
- en: '[PRE71]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Now make the script executable and then run it:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让脚本可执行，然后运行它：
- en: '[PRE72]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'The script is easy to understand, but you might scratch your head a little
    bit trying to understand the test condition of the `until` loop:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本很容易理解，但你可能会在尝试理解`until`循环的测试条件时有点困惑：
- en: '[PRE73]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'The test condition basically says: "until `counter` is greater than 10, keep
    running!"'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 测试条件基本上是这样说的：“直到`counter`大于10，继续运行！”
- en: 'Notice that we can achieve the same result with a `while` loop that has the
    opposite test condition. You simply negate the test condition of the `until` loop
    and you will get the `while` loop equivalent:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们可以使用具有相反测试条件的`while`循环来实现相同的结果。你只需否定`until`循环的测试条件，就会得到`while`循环的等价形式：
- en: '[PRE74]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: In mathematics, the opposite (negation) of greater than (`>`) is less than or
    equal to (`≤`). A lot of people forget the `equal to` part. Don't be one of those
    people!
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在数学中，大于（`>`）的相反（否定）是小于或等于（`≤`）。很多人忘记了`等于`部分。不要成为那些人中的一个！
- en: Bash script functions
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Bash脚本函数
- en: When your scripts get bigger and bigger, things can get very messy. To overcome
    this problem, you can use bash functions. The idea behind functions is that you
    can reuse parts of your scripts, which in turn produces better organized and readable
    scripts.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的脚本变得越来越大时，事情可能会变得非常混乱。为了克服这个问题，你可以使用bash函数。函数的理念是你可以重用脚本的部分，从而产生更有组织和可读性的脚本。
- en: 'The general syntax of a bash function is as follows:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: bash函数的一般语法如下：
- en: '[PRE75]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Let''s create a function named `hello` that prints out the line "Hello World".
    We will put the `hello` function in a new script named `fun1.sh`:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个名为`hello`的函数，打印出“Hello World”这一行。我们将`hello`函数放在一个名为`fun1.sh`的新脚本中：
- en: '[PRE76]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Now make the script executable and run it:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让脚本可执行，然后运行它：
- en: '[PRE77]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: The script outputs the line "Hello World" three times to the terminal. Notice
    that we called (used) the function `hello` three times.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本将在终端上输出“Hello World”三次。请注意，我们调用（使用）了函数`hello`三次。
- en: Passing function arguments
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 传递函数参数
- en: 'Functions can also take arguments the same way a script can take arguments.
    To demonstrate, we will create a script `math.sh` that has two functions `add`
    and `sub`:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 函数也可以像脚本一样接受参数。为了演示，我们将创建一个名为`math.sh`的脚本，其中有两个函数`add`和`sub`：
- en: '[PRE78]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Make the script executable and then run it:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 使脚本可执行，然后运行它：
- en: '[PRE79]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: The script has two functions `add` and `sub`. The `add` function calculates
    and outputs the total of any given two numbers. On the other hand, the `sub` function
    calculates and outputs the difference of any given two numbers.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本有两个函数`add`和`sub`。`add`函数计算并输出任意两个数字的总和。另一方面，`sub`函数计算并输出任意两个数字的差。
- en: No browsing for you
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你不能浏览网页
- en: 'We will conclude this chapter with a pretty cool bash script `noweb.sh` that
    makes sure no user is having fun browsing the web on the Firefox browser:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将用一个相当酷的bash脚本`noweb.sh`来结束本章，确保没有用户在Firefox浏览器上浏览网页时玩得开心：
- en: '[PRE80]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Now open Firefox as a background process:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将Firefox作为后台进程打开：
- en: '[PRE81]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Finally, make the script executable and run the script in the background:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使脚本可执行，并在后台运行脚本：
- en: '[PRE82]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: The moment you run your script, Firefox will shut down. Moreover, if you run
    the script as the `root` user, none of the system users will be able to enjoy
    Firefox!
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦运行你的脚本，Firefox就会关闭。此外，如果以`root`用户身份运行脚本，系统用户将无法享受Firefox！
- en: Knowledge check
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 知识检查
- en: 'For the following exercises, open up your terminal and try to solve the following
    tasks:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 对于以下练习，打开你的终端并尝试解决以下任务：
- en: Create a bash script that will display the calendar of the current month.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个bash脚本，显示当前月份的日历。
- en: Modify your script so it displays the calendar for any year (passed as an argument).
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改你的脚本，以便显示任何年份（作为参数传递）的日历。
- en: Modify your script so it displays the calendar for all the years from `2000`
    to `2020`.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改你的脚本，以便显示从`2000`年到`2020`年的所有年份的日历。
