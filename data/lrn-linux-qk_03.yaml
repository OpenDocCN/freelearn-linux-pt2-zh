- en: Meet the Editors
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 见编辑器
- en: First of all, let me tell you something that may surprise you. Linux implements
    what is called "Everything is a file" philosophy. This means that on your Linux
    system, everything is represented by a file. For example, your hard disk is represented
    by a file. A running program (process) is represented by a file. Even your peripheral
    devices, such as your keyboard, mouse, and printer, are all represented by files.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我告诉您一些可能会让您感到惊讶的事情。Linux实现了所谓的“一切皆文件”的哲学。这意味着在您的Linux系统上，一切都由文件表示。例如，您的硬盘由一个文件表示。运行的程序（进程）由一个文件表示。甚至您的外围设备，如键盘、鼠标和打印机，都由文件表示。
- en: With that being said, an immediate consequence of "Everything is a file" philosophy
    is that Linux administrators spend a substantial amount of their time editing
    and viewing files. And so you will often see Linux administrators very proficient
    at using text editors. And this chapter is dedicated to just that. I want you
    to be very comfortable using various text editors in Linux.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 说到这一点，“一切皆文件”的哲学的一个直接结果是，Linux管理员花费大量时间编辑和查看文件。因此，您经常会看到Linux管理员非常擅长使用文本编辑器。本章就是专门讲这个的。我希望您能够非常熟练地使用Linux中的各种文本编辑器。
- en: There are a lot, and I mean a whole lot, of text editors out there that you
    can use. However, in this chapter, I will cover the most popular Linux editors
    that will get the job done.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多，我是说很多文本编辑器可以使用。但是，在本章中，我将介绍最受欢迎的Linux编辑器，这些编辑器可以完成工作。
- en: Graphical editors – gedit and kate
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图形编辑器 - gedit和kate
- en: We start with the most basic and simple editors out there. These are the graphical
    editors! If you are using a **GNOME** version of any Linux distribution, then
    you will have the text editor `gedit` installed by default. On the other hand,
    if you are using a **KDE** version of Linux, then you will have the text editor
    `kate` installed by default.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先从那些最基本和简单的编辑器开始。这些是图形编辑器！如果您使用任何Linux发行版的**GNOME**版本，那么默认情况下会安装文本编辑器`gedit`。另一方面，如果您使用Linux的**KDE**版本，那么默认情况下会安装文本编辑器`kate`。
- en: '**DESKTOP ENVIRONMENT**'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**桌面环境**'
- en: GNOME and KDE are two examples of desktop environments. Each desktop environment
    implements a different graphical user interface, which is a very fancy way of
    saying that your desktop will look different!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: GNOME和KDE是桌面环境的两个例子。每个桌面环境都实现了不同的图形用户界面，这是说您的桌面看起来会有所不同的一种花哨的方式！
- en: 'Anyways, there is really not a lot to discuss on graphical editors. They are
    pretty intuitive and easy to use. For example, if you want to view a text file
    with `gedit`, then you run the `gedit` command followed by any filename:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，在图形编辑器上真的没有太多可以讨论的。它们非常直观和易于使用。例如，如果您想要使用`gedit`查看文本文件，那么您可以运行`gedit`命令，后面跟上任何文件名：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will open the `gedit` graphical editor, and it displays your CPU information.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开`gedit`图形编辑器，并显示您的CPU信息。
- en: '![](img/d37da084-50a9-4032-b1e9-a886707e6a80.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d37da084-50a9-4032-b1e9-a886707e6a80.png)'
- en: 'Figure 1: Opening /proc/cpuinfo with gedit'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 图1：使用gedit打开/proc/cpuinfo
- en: 'If you don''t have `gedit` and have `kate` instead, then you can run:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有`gedit`而是有`kate`，那么您可以运行：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](img/cc6c07d1-6c84-44da-b26f-986f3b6839c2.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cc6c07d1-6c84-44da-b26f-986f3b6839c2.png)'
- en: 'Figure 2: Opening /proc/cpuinfo with kate'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图2：使用kate打开/proc/cpuinfo
- en: 'You can also use the graphical editors to create new files on your system.
    For example, if you want to create a file named `cats.txt` in `/home/elliot`,
    then you can run the `gedit /home/elliot/cats.txt` command:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用图形编辑器在系统上创建新文件。例如，如果您想在`/home/elliot`中创建一个名为`cats.txt`的文件，那么您可以运行`gedit
    /home/elliot/cats.txt`命令：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](img/40a3c327-7211-46ab-b713-7cfcf87bc12b.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/40a3c327-7211-46ab-b713-7cfcf87bc12b.png)'
- en: 'Figure 3: Creating cats.txt with gedit'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图3：使用gedit创建cats.txt
- en: 'Now insert the line "I love cats!" then save and close the file. The file `cats.txt`
    now exists in my home directory, and I can view it with the `cat` command:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在插入一行“I love cats!”然后保存并关闭文件。文件`cats.txt`现在存在于我的主目录中，我可以使用`cat`命令查看它：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Similarly, you can use any other graphical text editor to create files on your
    system.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，您可以使用任何其他图形文本编辑器在系统上创建文件。
- en: OK! That's enough talk about graphical text editors. Let's move on to explore
    the serious world of non-graphical text editors.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 好了！关于图形文本编辑器的讨论就到此为止。让我们继续探索非图形文本编辑器的严肃世界。
- en: The nano editor
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: nano编辑器
- en: 'The `nano` editor is a very popular and easy-to-use command-line editor. You
    can open the `nano` editor by running the `nano` command:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`nano`编辑器是一个非常流行且易于使用的命令行编辑器。您可以通过运行`nano`命令来打开`nano`编辑器：'
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This will open up your `nano` editor, and you should see a screen like that
    in the following screenshot:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开您的`nano`编辑器，您应该会看到以下截图中的屏幕：
- en: '![](img/b9b1e0e2-b634-4d2d-8d74-a6df75c96d78.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b9b1e0e2-b634-4d2d-8d74-a6df75c96d78.png)'
- en: 'Figure 4: Inside nano'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图4：在nano内部
- en: 'Now add the six lines that are shown in the following screenshot:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在添加以下截图中显示的六行：
- en: '![](img/6167db42-a28c-44c4-afcf-6c032c0e9694.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6167db42-a28c-44c4-afcf-6c032c0e9694.png)'
- en: 'Figure 5: Add these six lines'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图5：添加这六行
- en: 'Look at the bottom of the `nano` editor screen; you will see a lot of shortcuts:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下`nano`编辑器屏幕底部；您会看到很多快捷键：
- en: '![](img/0345a1b9-485d-4917-a0a7-64666bf49078.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0345a1b9-485d-4917-a0a7-64666bf49078.png)'
- en: 'Figure 6: nano shortcuts'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图6：nano快捷键
- en: 'I have included all the useful nano shortcuts in the following table:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我在下表中列出了所有有用的nano快捷键：
- en: '| **nano shortcut** | **What it does** |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| **nano快捷方式** | **它的作用** |'
- en: '| *Ctrl*+*O* | Saves the current file (write out). |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| *Ctrl*+*O* | 保存当前文件（写出）。 |'
- en: '| *Ctrl*+*K* | Cuts the current line and stores it in the buffer. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| *Ctrl*+*K* | 剪切当前行并将其存储在缓冲区中。 |'
- en: '| *Ctrl*+*U* | Pastes the line stored in the buffer. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| *Ctrl*+*U* | 粘贴存储在缓冲区中的行。 |'
- en: '| *Ctrl*+*W* | Searches for a string (word) in the file. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| *Ctrl*+*W* | 在文件中搜索字符串（单词）。 |'
- en: '| *Ctrl*+*\* | Replaces a string (word) in the file with another string. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| *Ctrl*+*\* | 用另一个字符串替换文件中的字符串（单词）。 |'
- en: '| *Ctrl*+*R* | Reads another file. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| *Ctrl*+*R* | 读取另一个文件。 |'
- en: '| *Ctrl*+*G* | Views help information on how to use nano. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| *Ctrl*+*G* | 查看如何使用nano的帮助信息。 |'
- en: '| *Ctrl*+*V* | Moves to the next page. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| *Ctrl*+*V* | 转到下一页。 |'
- en: '| *Ctrl*+*Y* | Moves to the previous page. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| *Ctrl*+*Y* | 转到上一页。 |'
- en: '| *Ctrl*+*X* | Exits the nano editor. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| *Ctrl*+*X* | 退出nano编辑器。 |'
- en: 'Table 5: nano shortcuts'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 表5：nano快捷键
- en: Notice that the *Ctrl*+*O* shortcut is triggered by pressing *Ctrl* and then
    the letter *O*. You don't have to press the *+* key or the upper case letter *O*.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '请注意，按下*Ctrl*+*O*快捷键是通过按下*Ctrl*，然后按字母*O*触发的。您不必按下*+*键或大写字母*O*。 '
- en: 'Now let''s use the shortcut *Ctrl*+*O* to save the file; it will ask you for
    a filename, you can insert `facts.txt`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用快捷键*Ctrl*+*O*保存文件；它会要求您输入文件名，您可以输入`facts.txt`。
- en: '![](img/48bb5470-d558-429b-b1ef-8514afb5ac00.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/48bb5470-d558-429b-b1ef-8514afb5ac00.png)'
- en: 'Figure 7: Saving the file'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图7：保存文件
- en: 'Then press *Enter* to confirm. Now let''s exit the `nano` editor (use the *Ctrl*+*X *shortcut)
    to verify that the file `facts.txt` is created:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 然后按*Enter*确认。现在让我们退出`nano`编辑器（使用*Ctrl*+*X*快捷键）来验证文件`facts.txt`是否已创建：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now let''s open `facts.txt` again to fix the false facts we have added there!
    To open the file `facts.txt` with the `nano` editor, you can run the `nano facts.txt`
    command:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们再次打开`facts.txt`来修复我们添加的错误事实！要用`nano`编辑器打开文件`facts.txt`，您可以运行`nano facts.txt`命令：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The first line in the file `facts.txt` states that "Apples are blue." We certainly
    need to correct this false fact, so let's use the shortcut *Ctrl*+*\* to replace
    the word `blue` with `red`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 文件`facts.txt`中的第一行说“苹果是蓝色的。”我们肯定需要纠正这个错误的事实，所以让我们使用快捷键*Ctrl*+*\*将单词`blue`替换为`red`。
- en: 'When you press *Ctrl*+*\*, it will ask you to enter the word that you want
    to replace; you can enter `blue`, as shown in the following screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当您按下*Ctrl*+*\*时，它会要求您输入要替换的单词；您可以输入`blue`，如下面的截图所示：
- en: '![](img/f1f7099a-5a54-4f3a-aef0-2ca1e043e558.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f1f7099a-5a54-4f3a-aef0-2ca1e043e558.png)'
- en: 'Figure 8: The word to replace'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图8：要替换的单词
- en: 'Hit *Enter*, and then it will ask you to enter the substitute word. You can
    enter `red`, as shown in the following screenshot:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 按*Enter*，然后它会要求您输入替换的单词。您可以输入`red`，如下面的截图所示：
- en: '![](img/0a1da2ab-e958-469b-ab96-965e7cc4d551.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0a1da2ab-e958-469b-ab96-965e7cc4d551.png)'
- en: 'Figure 9: The substitute word'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图9：替换单词
- en: You can then hit *Enter*, and it will go through each instance of the word `blue`
    and ask you if you want to replace it. Luckily, we only have one occurrence of
    `blue`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 然后按*Enter*，它将遍历单词`blue`的每个实例，并询问您是否要替换它。幸运的是，我们只有一个`blue`的出现。
- en: '![](img/ebbefa8c-324b-45d1-af78-539a5a0aab9b.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ebbefa8c-324b-45d1-af78-539a5a0aab9b.png)'
- en: 'Figure 10: Replacing blue with red'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图10：用红色替换蓝色
- en: Press *Y* and BOOM! The word `red` replaced `blue`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 按*Y*，嘭！单词`red`替换了`blue`。
- en: '![](img/9ee45d73-7f0e-4c74-9238-21cf16f8f38a.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9ee45d73-7f0e-4c74-9238-21cf16f8f38a.png)'
- en: 'Figure 11: red replaced blue'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图11：红色替换蓝色
- en: 'There is one more word we need to change here. We can all agree that the Earth
    is not flat, right? I hope we all do! Now let''s replace the word `flat` with
    `round` precisely as we did before, and the result should be like the one shown
    in the following screenshot:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这里还有一个词需要改变。我们都同意地球不是平的，对吧？希望我们都同意！现在让我们像之前一样精确地用单词`round`替换`flat`，结果应该像下面的截图所示：
- en: '![](img/6a4e95ea-5677-4bce-8374-b43102783ab5.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6a4e95ea-5677-4bce-8374-b43102783ab5.png)'
- en: 'Figure 12: flat replaced with round'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图12：用圆形替换平的
- en: Now let's save and exit the file. So we use the *Ctrl*+*O* shortcut to save
    and then *Ctrl*+*X* to exit.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们保存并退出文件。因此我们使用*Ctrl*+*O*快捷键保存，然后使用*Ctrl*+*X*退出。
- en: The `nano` editor is pretty simple to use. And practice makes perfect, so the
    more you use it, the easier it will become for you. You can practice all the shortcuts
    in `Table 5` as an exercise.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`nano`编辑器非常简单易用。熟能生巧，所以您使用得越多，它对您来说就会变得越容易。您可以练习`表5`中的所有快捷键。'
- en: The vi editor
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: vi编辑器
- en: The `nano` editor is usually the editor of choice for beginners. It is a great
    editor, but let's just say that it's not the most efficient editor out there.
    The `vi` editor is a more advanced Linux editor with tons of features and is by
    far the most popular editor among advanced Linux users.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`nano`编辑器通常是初学者的首选编辑器。它是一个很棒的编辑器，但我们只能说它不是最高效的编辑器。`vi`编辑器是一个更高级的Linux编辑器，具有大量功能，并且是高级Linux用户中最受欢迎的编辑器。'
- en: 'Let''s open the `facts.txt` file with the `vi` editor; to do that, you run
    the `vi facts.txt` command:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用`vi`编辑器打开`facts.txt`文件；为此，您运行`vi facts.txt`命令：
- en: '[PRE7]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This will open the `vi` editor, as shown in the following screenshot:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开`vi`编辑器，如下面的截图所示：
- en: '![](img/7294c42b-a5b4-4086-bed9-adbf69da2e48.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7294c42b-a5b4-4086-bed9-adbf69da2e48.png)'
- en: 'Figure 13: The facts.txt file opened in vi'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图13：在vi中打开facts.txt文件
- en: 'Unlike the `nano` editor, the `vi` editor works in two different modes:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 与`nano`编辑器不同，`vi`编辑器以两种不同的模式工作：
- en: '`insert` mode'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`插入`模式'
- en: '`command` mode'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`命令`模式'
- en: The `insert` mode enables you to insert text into a file. On the other hand,
    the `command` mode allows you to do things like copying, pasting, and deleting
    text. The `command` mode also allows you to search and replace text along with
    many other things.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`插入`模式使您能够在文件中插入文本。另一方面，`命令`模式允许您执行复制、粘贴和删除文本等操作。`命令`模式还允许您搜索和替换文本以及许多其他操作。'
- en: Insert mode
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插入模式
- en: By default, you enter `command` mode when you first open the `vi` editor, and
    you can't insert text while you are in `command` mode. To insert text, you need
    to switch to `insert` mode. There are several ways you can use to change to `insert`
    mode; `Table 6` lists all of them.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，您首次打开`vi`编辑器时会进入`命令`模式，而在`命令`模式下无法插入文本。要插入文本，您需要切换到`插入`模式。有几种方法可以切换到`插入`模式；`表6`列出了所有方法。
- en: '| **Key** | **What it does** |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| **键** | **功能** |'
- en: '| `i` | Inserts text before the current cursor position. |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `i` | 在当前光标位置之前插入文本。 |'
- en: '| `I` | Inserts text at the beginning of the current line. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `I` | 在当前行的开头插入文本。 |'
- en: '| `a` | Appends text after the current cursor position. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `a` | 在当前光标位置之后添加文本。 |'
- en: '| `A` | Appends text after the end of the current line. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `A` | 在当前行的末尾添加文本。 |'
- en: '| `o` | Creates a new line below the current line. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: o | 在当前行下方创建一个新行。
- en: '| `O` | Creates a new line above the current line. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: O | 在当前行上方创建一个新行。
- en: 'Table 6: vi insert mode'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 表6：vi插入模式
- en: You can navigate in the `vi` editor with your arrow keys, just like you would
    do in the `nano` editor. Now navigate to the last line in the file `facts.txt`
    and then press the letter `o` to switch into `insert` mode. You can now add the
    line "Linux is cool!"
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用箭头键在“vi”编辑器中导航，就像在“nano”编辑器中一样。现在导航到文件“facts.txt”的最后一行，然后按字母“o”切换到“insert”模式。现在您可以添加一行“Linux
    is cool!”
- en: '![](img/4afe6d76-edfc-4fc1-9231-a4834c36d9ed.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4afe6d76-edfc-4fc1-9231-a4834c36d9ed.png)'
- en: 'Figure 14: Adding a line in vi'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图14：在vi中添加一行
- en: With `insert` mode, you can add as much text as you want. To switch back to
    `command` mode, you need to press the *Esc* key.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在“insert”模式下，您可以添加任意多的文本。要切换回“command”模式，您需要按下*Esc*键。
- en: '![](img/0542f500-99c6-4570-b5a1-e191424aa661.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0542f500-99c6-4570-b5a1-e191424aa661.png)'
- en: 'Figure 15: Switching between Insert Mode and Command Mode'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图15：在插入模式和命令模式之间切换
- en: The preceding screenshot illustrates how to switch back and forth between `command`
    mode and `insert` mode.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 上述屏幕截图说明了如何在“command”模式和“insert”模式之间来回切换。
- en: Command mode
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命令模式
- en: Anything you want to do aside from adding text can be achieved from `command` mode.
    There are a whole lot of commands you can use with the `vi` editor. You may think
    I am joking, but there are books and courses out there that only discuss the `vi`
    editor. However, Table 7 will get you up and running with the `vi` editor as it
    lists the most popular commands you can use with `vi`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 除了添加文本之外，您想做的任何事情都可以从“command”模式中实现。您可以在“vi”编辑器中使用大量命令。您可能会认为我在开玩笑，但是有很多关于“vi”编辑器的书籍和课程。但是，“表7”将让您熟悉“vi”编辑器，并列出了您可以使用的最流行的命令。
- en: '| **vi command** | **What it does** |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '**vi命令** | **它的作用**'
- en: '| `yy` | Copy (yank) the current line. |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: yy | 复制（yank）当前行。
- en: '| `3yy` | Copy (yank) three lines (starting with the current line). |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: 3yy | 复制（yank）三行（从当前行开始）。
- en: '| `yw` | Copy (yank) one word starting at the cursor position. |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: yw | 复制（yank）光标位置开始的一个单词。
- en: '| `2yw` | Copy (yank) two words starting at the cursor position. |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: 2yw | 复制（yank）光标位置开始的两个单词。
- en: '| `p` | Paste after the current cursor position. |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: p | 在当前光标位置之后粘贴。
- en: '| `P` | Paste before the current cursor position. |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: P | 在当前光标位置之前粘贴。
- en: '| `dd` | Cut (delete) the current line. |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: dd | 剪切（删除）当前行。
- en: '| `4dd` | Cut (delete) four lines (starting with the current line). |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: 4dd | 剪切（删除）四行（从当前行开始）。
- en: '| `dw` | Cut (delete) one word starting at the cursor position. |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: dw | 剪切（删除）光标位置开始的一个单词。
- en: '| `x` | Delete the character at the cursor position. |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: x | 删除光标位置的字符。
- en: '| `u` | Undo the last change. |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: u | 撤销上一次更改。
- en: '| `U` | Undo all changes to the line. |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: U | 撤销对该行的所有更改。
- en: '| `/red` | Search for the word `red` in the file. |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: /red | 在文件中搜索单词“red”。
- en: '| `:%s/bad/good` | Replace the word `bad` with `good`. |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: :%s/bad/good | 用“good”替换“bad”。
- en: '| `:set number` | Show line numbers. |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: 设置行号 | 显示行号。
- en: '| `:set nonumber` | Hide line numbers. |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: :set nonumber | 隐藏行号。
- en: '| `:7` | Go to line number 7. |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: :7 | 转到第7行。
- en: '| `G` | Jump to the end of the file. |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: G | 跳转到文件末尾。
- en: '| `gg` | Jump to the beginning of the file. |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: gg | 跳转到文件开头。
- en: Table 7: vi commands
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 表7：vi命令
- en: As you can see, `Table 7` has a lot of commands, so I will not go through all
    of them; that's left for you as an exercise. However, I will discuss some of the
    commands to help you get going with the `vi` editor.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，“表7”有很多命令，所以我不会逐一介绍所有的命令；这留给您作为练习。但是，我将讨论一些命令，以帮助您开始使用“vi”编辑器。
- en: 'Let''s start by showing line numbers as it will make our life much easier!
    To do that, you run the `:set` number command, as shown in the following screenshot:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先显示行号，因为这将使我们的生活更加轻松！要做到这一点，您可以运行“:set” number命令，如下面的屏幕截图所示：
- en: '![](img/69d9a7ee-ea10-4a4c-b8e1-3b06d013cc33.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/69d9a7ee-ea10-4a4c-b8e1-3b06d013cc33.png)'
- en: 'Figure 16: Show line numbers'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图16：显示行号
- en: 'Now let''s copy line `4`. You want to make sure the cursor is on line `4`;
    you can do that by running the `:4` command, as shown in the following screenshot:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们复制第4行。您需要确保光标在第4行上；您可以通过运行“:4”命令来实现这一点，如下面的屏幕截图所示：
- en: '![](img/aacc68b4-97a6-4ff0-b832-abfa34dfb557.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aacc68b4-97a6-4ff0-b832-abfa34dfb557.png)'
- en: 'Figure 17: Go to the 4th line'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图17：转到第4行
- en: 'Now press the sequence `yy`, and it will copy the entire line. Let''s paste
    it three times at the end of the file. So navigate to the last line and then press
    *p* three times, it will paste the copied line three times, as shown in the following
    screenshot:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在按下序列“yy”，它会复制整行。让我们在文件末尾粘贴三次。因此，导航到最后一行，然后按* p *三次，它会将复制的行粘贴三次，如下面的屏幕截图所示：
- en: '![](img/407eff49-cf61-4f82-a73f-ccc8df800a97.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/407eff49-cf61-4f82-a73f-ccc8df800a97.png)'
- en: 'Figure 18: Copying and pasting in vi'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图18：在vi中复制和粘贴
- en: 'Alright! Let''s replace the word `cool` with `awesome` because we all know
    Linux is not just cool; it''s awesome! To do that, you run the `:%s/cool/awesome`
    command, as shown in the following screenshot:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 好了！让我们将单词“cool”替换为“awesome”，因为我们都知道Linux不仅仅是酷；它是令人敬畏的！要做到这一点，您可以运行“:%s/cool/awesome”命令，如下面的屏幕截图所示：
- en: '![](img/9bd62bc6-483e-495b-99ec-7693d3c6c39d.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9bd62bc6-483e-495b-99ec-7693d3c6c39d.png)'
- en: 'Figure 19: Replace cool with awesome'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图19：用awesome替换cool
- en: 'Let''s also replace the word `Roses` with `Cherries` because we all know that
    not all roses are red. To do that, run the `:%s/Roses/Cherries` command, as shown
    in the following screenshot:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也将单词“Roses”替换为“Cherries”，因为我们都知道并不是所有的玫瑰都是红色的。要做到这一点，运行“:%s/Roses/Cherries”命令，如下面的屏幕截图所示：
- en: '![](img/b92a6c73-a27c-4037-8d8b-caeeeca9ae83.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b92a6c73-a27c-4037-8d8b-caeeeca9ae83.png)'
- en: 'Figure 20: Replace Roses with Cherries'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图20：用Cherries替换Roses
- en: It will even tell you how many substitutions took place.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 它甚至会告诉您发生了多少次替换。
- en: '**COOL TIP**'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '**酷提示**'
- en: You should know that `:%s/old/new` will only replace the first occurrence of
    the word `old` with `new` on all the lines. To replace all the occurrences of
    the word `old` with `new` on all the lines, you should use the global option `:%s/old/new/g`
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该知道`:%s/old/new`只会替换所有行中单词`old`的第一次出现。要替换所有行中单词`old`的所有出现，应使用全局选项`:%s/old/new/g`
- en: To understand and make sense of the tip above, add the line "blue blue blue
    blue" to your `facts.txt` file and try to use the `:%s/blue/purple` command to
    replace the word `blue` with `purple`. You will see that it will only replace
    the first occurrence of `blue`. To make it replace all occurrences of `blue`,
    you have to use the global option
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解并理解上面的提示，向您的`facts.txt`文件添加行“蓝蓝蓝蓝”，并尝试使用`:%s/blue/purple`命令将单词`blue`替换为`purple`。您会看到它只会替换第一个`blue`的出现。要使其替换所有`blue`的出现，您必须使用全局选项
- en: '`:%s/blue/purple/g`.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`:%s/blue/purple/g`。'
- en: Saving and exiting vi
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保存并退出vi
- en: Eventually, when you are done viewing or editing a file in `vi`, you would want
    to exit the `vi` editor. There are multiple ways you can use to exit the `vi`
    editor, `Table 8` lists all of them.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，当您完成在`vi`中查看或编辑文件时，您会想要退出`vi`编辑器。您可以使用多种方法退出`vi`编辑器，`表8`列出了所有方法。
- en: '| **vi command** | **What it does** |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| **vi命令** | **它的作用** |'
- en: '| `:w` | Save the file but do not quit `vi`. |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| `:w` | 保存文件但不退出`vi`。 |'
- en: '| `:wq` | Save the file and quit `vi`. |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| `:wq` | 保存文件并退出`vi`。 |'
- en: '| `ZZ` | Save the file and quit `vi` (same as `:wq`, just faster!). |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| `ZZ` | 保存文件并退出`vi`（与`:wq`相同，只是更快！）。 |'
- en: '| `:x` | Save the file and quit `vi` (same as `:wq` or `ZZ`). |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| `:x` | 保存文件并退出`vi`（与`:wq`或`ZZ`相同）。 |'
- en: '| `:q` | Quit `vi` without saving. |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| `:q` | 不保存退出`vi`。 |'
- en: '| `:q!` | Forcefully quit `vi` without saving. |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| `:q!` | 强制退出`vi`而不保存。 |'
- en: 'Table 8: Saving and Exiting vi'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 表8：保存和退出vi
- en: 'So let''s save our file and quit the `vi` editor. Of course, you can use any
    of the following commands:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们保存文件并退出`vi`编辑器。当然，您可以使用以下任何命令：
- en: '`:wq`'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`:wq`'
- en: '`:x`'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`:x`'
- en: '`ZZ`'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ZZ`'
- en: They all achieve the same result, that is, saving and exiting `vi`.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 它们都实现了相同的结果，即保存并退出`vi`。
- en: '![](img/4e4023a5-29b5-4fb4-b352-7265fabbd287.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4e4023a5-29b5-4fb4-b352-7265fabbd287.png)'
- en: 'Figure 21: Save and exit vi'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图21：保存并退出vi
- en: If you have successfully exited the `vi` editor, I want to congratulate you
    because you are one of the elite. There are hundreds of memes and comics on the
    internet about how some people opened the `vi` editor, and were never able to
    exit!
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您成功退出了`vi`编辑器，我要祝贺您，因为您是精英中的一员。互联网上有数百个关于一些人打开`vi`编辑器后从未能退出的模因和漫画！
- en: File viewing commands
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件查看命令
- en: In some cases, you may just want to view a file without editing it. While you
    can still use text editors like `nano` or `vi` to view files, there are much faster
    ways to view a file in Linux.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，您可能只想查看文件而不编辑它。虽然您仍然可以使用文本编辑器如`nano`或`vi`来查看文件，但在Linux中有更快的查看文件的方法。
- en: The cat command
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: cat命令
- en: The `cat` command is one of the most popular and frequently used commands in
    Linux. The `cat` (short for **concatenate**) command concatenates and prints files
    to the standard output (terminal).
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`cat`命令是Linux中最受欢迎和经常使用的命令之一。`cat`（**concatenate**的缩写）命令将文件连接并打印到标准输出（终端）。'
- en: 'To view the `facts.txt` file that we created, you can run the `cat facts.txt`
    command:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看我们创建的`facts.txt`文件，可以运行`cat facts.txt`命令：
- en: '[PRE8]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You can now view the contents of the file `facts.txt` from the comfort of your
    terminal without having to open any text editor.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以在终端舒适地查看`facts.txt`文件的内容，而无需打开任何文本编辑器。
- en: 'The `cat` command can do more than just viewing a file. It can also concatenate
    (put together) files. To demonstrate, create the following three files with your
    favorite text editor:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`cat`命令不仅可以查看文件，还可以连接（放在一起）文件。为了演示，使用您喜欢的文本编辑器创建以下三个文件：'
- en: '`file1.txt` (Insert the line "First File")'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`file1.txt`（插入行“第一个文件”）'
- en: '`file2.txt` (Insert the line "Second File")'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`file2.txt`（插入行“第二个文件”）'
- en: '`file3.txt` (Insert the line "Third File")'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`file3.txt`（插入行“第三个文件”）'
- en: 'Now let''s view each of the three files using the `cat` command:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用`cat`命令查看这三个文件的每一个：
- en: '[PRE9]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now let''s concatenate both `file1.txt` and `file2.txt` together by running
    the `cat file1.txt file2.txt` command:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们通过运行`cat file1.txt file2.txt`命令来连接`file1.txt`和`file2.txt`：
- en: '[PRE10]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We can also concatenate all three files:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以连接所有三个文件：
- en: '[PRE11]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Keep in mind that order matters; for example, running the `cat file2.txt file1.txt`
    command:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，顺序很重要；例如，运行`cat file2.txt file1.txt`命令：
- en: '[PRE12]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This will output the text in `file2.txt` first before `file1.txt`.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在`file1.txt`之前输出`file2.txt`的文本。
- en: The tac command
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: tac命令
- en: The `tac` command is the twin brother of the `cat` command. It is basically
    `cat` written in reverse, and it does the same thing as the `cat` command but
    in a reversed fashion!
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`tac`命令是`cat`命令的孪生兄弟。它基本上是反向编写的`cat`，它做的事情与`cat`命令相同，但是以相反的方式！'
- en: 'For example, if you want to view the `facts.txt` file in reverse order, you
    can run the `tac facts.txt` command:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您想以相反的顺序查看`facts.txt`文件，可以运行`tac facts.txt`命令：
- en: '[PRE13]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `tac` command also concatenates files, just like the `cat` command.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`tac`命令也可以像`cat`命令一样连接文件。'
- en: The more command
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: more命令
- en: Viewing files with the `cat` command is a good choice when the file is small,
    and there aren't many lines of text to display. If you want to view a big file,
    it's better to use the `more` command. The `more` command displays the content
    of a file one page at a time; it is basically a paging program.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`cat`命令查看文件是一个不错的选择，当文件很小，且没有很多行文本需要显示时。如果要查看一个大文件，最好使用`more`命令。`more`命令一次显示文件的一页内容；它基本上是一个分页程序。
- en: 'Let''s view the contents of the file `/etc/services` with the `more` command:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用`more`命令查看文件`/etc/services`的内容：
- en: '[PRE14]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'It will show you the first page of the `/etc/services` files, and there is
    a percentage value at the bottom line that shows how far you have progressed through
    the file. You can use the following keys to navigate in `more`:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 它会显示`/etc/services`文件的第一页，并在底部显示一个百分比值，显示你已经浏览了文件的进度。你可以使用以下键在`more`中导航：
- en: '*Enter* > to scroll down one line.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Enter* > 向下滚动一行。'
- en: Space Bar > to go to the next page.
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空格键 > 前往下一页。
- en: '*b* > to go back one page.'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*b* > 返回上一页。'
- en: '*q* > to quit.'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*q* > 退出。'
- en: The `/etc/services` file stores information on numerous services (applications)
    that can run on Linux.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`/etc/services`文件存储了许多可以在Linux上运行的服务（应用程序）的信息。'
- en: The less command
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: less命令
- en: The `less` command is an improved version of the `more` command. Yes, you read
    this correctly; less is better than more! In fact, the famous idiom *less is more*
    originated from the idea that `less` offers more than `more`.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`less`命令是`more`命令的改进版本。是的，你读对了；less比more更好！事实上，著名的成语*less is more*源于`less`比`more`提供更多的想法。'
- en: The `less` command is another pager program, just like `more`; it allows you
    to view text files one page at a time. The advantage of `less` is that you can
    use the UP/DOWN arrow keys to navigate through the file. Also, `less` is faster
    than `more`.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`less`命令是另一个分页程序，就像`more`一样；它允许你一次查看一个页面的文本文件。`less`的优点是你可以使用上/下箭头键在文件中导航。此外，`less`比`more`更快。'
- en: 'You can view the `/etc/services` file with `less` by running the command:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过运行以下命令使用`less`查看`/etc/services`文件：
- en: '[PRE15]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: You can also use `more` navigation keys with less.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在`less`中使用`more`导航键。
- en: Heads or tails?
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 正面还是反面？
- en: 'As its name suggests, the `head` command displays the first few lines of a
    file. By default, it shows the first ten lines of a file. For example, we know
    that `facts.txt` has ten lines in it, and so running the `head facts.txt` command
    will display all the file contents:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 正如其名称所示，`head`命令显示文件的前几行。默认情况下，它显示文件的前十行。例如，我们知道`facts.txt`中有十行，因此运行`head facts.txt`命令将显示所有文件内容：
- en: '[PRE16]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You can also pass the `-n` option to specify the number of lines you wish to
    view. For example, to display the first three lines of `facts.txt`, you can run
    the `head -n 3 facts.txt` command:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以传递`-n`选项来指定你希望查看的行数。例如，要显示`facts.txt`的前三行，你可以运行`head -n 3 facts.txt`命令：
- en: '[PRE17]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'On the other hand, the `tail` command displays the last few lines of a file.
    By default, it shows the last ten lines. You can also use the `-n` option to specify
    the number of lines you wish to view. For example, to display the last two lines
    in `facts.txt`, you can run the `tail -n 2 facts.txt` command:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，`tail`命令显示文件的最后几行。默认情况下，它显示最后十行。你也可以使用`-n`选项来指定你希望查看的行数。例如，要显示`facts.txt`中的最后两行，你可以运行`tail
    -n 2 facts.txt`命令：
- en: '[PRE18]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Do you know what time it is? It's time for some knowledge check questions.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道现在是几点吗？是时候进行一些知识检查了。
- en: Knowledge check
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 知识检查
- en: 'For the following exercises, open up your Terminal and try to solve the following
    tasks:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 对于以下练习，打开你的终端并尝试解决以下任务：
- en: Only view the first two lines of the file `facts.txt`.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只查看文件`facts.txt`的前两行。
- en: Only view the last line of the file `facts.txt`.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只查看文件`facts.txt`的最后一行。
- en: Display the contents of the file `facts.txt` in a reversed order.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以相反的顺序显示文件`facts.txt`的内容。
- en: Open the file `facts.txt` using the `vi` editor.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`vi`编辑器打开文件`facts.txt`。
- en: Exit the `vi` editor and consider yourself one of the elites.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 退出`vi`编辑器，认为自己是精英之一。
