- en: Modifying Process Execution
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改进程执行
- en: In the previous chapter, various methods to expose processes currently running
    in the shell were exposed. Furthermore, we saw how to pull memory and CPU information,
    and we saw how to terminate a process using the `ps` command in combination with
    the `kill` command. Next, we touched on the `pstree` command. Following this,
    we touched on the `pgrep` command; also known as Process Grep. Following this,
    we touched on the `pkill` command; as its name suggests, it is used to terminate
    a process. After this, we worked with the `top` command. Next, we worked with
    the `service` command. Finally, we worked with the `systemctl` command.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们揭示了暴露当前在shell中运行的进程的各种方法。此外，我们还看到了如何获取内存和CPU信息，以及如何使用`ps`命令结合`kill`命令终止进程。接下来，我们接触了`pstree`命令。接着，我们接触了`pgrep`命令；也称为进程Grep。之后，我们接触了`pkill`命令；顾名思义，它用于终止进程。之后，我们使用了`top`命令。接下来，我们使用了`service`命令。最后，我们使用了`systemctl`命令。
- en: This chapter is small in comparison to the previous ones, but its contents are
    of great importance when it comes to managing our resources. First, managing processes
    is further discussed, this time focusing on the importance of a process within
    the context of the process scheduler (sometimes you may hear the term kernel scheduler;
    they mean the same thing). Often, we are faced with challenges with regard to
    resource limitations. This will be addressed in a number of ways. With that in
    mind, we will explore the various guidelines that should be followed when attempting
    to change a process's priority within the confines of a Linux distribution. The
    first section focuses on the `nice` command. This is followed by the `renice`
    command. Finally, the focus will be on foreground processes versus background
    processes.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 与前几章相比，本章内容较少，但在资源管理方面具有重要意义。首先，进一步讨论了进程管理，这次重点是进程在进程调度器中的重要性（有时您可能会听到内核调度器这个术语；它们是指同一件事）。通常，我们面临着与资源限制相关的挑战。这将以多种方式加以解决。考虑到这一点，我们将探讨在Linux发行版的范围内尝试更改进程优先级时应遵循的各种准则。第一部分关注`nice`命令。接下来是`renice`命令。最后，重点将放在前台进程与后台进程上。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中涵盖以下主题：
- en: The `nice` command
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nice`命令'
- en: The `renice` command
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`renice`命令'
- en: Foreground processes versus background processes
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前台进程与后台进程
- en: The nice command
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: nice命令
- en: In its simplest terms, the `nice` command is used for manipulating process niceness
    with regard to CPU resource availability. When we say *niceness*, this is referring
    to the attention or priority given to a particular process for the CPU resources.
    We can increase or decrease priority for a given process. This becomes relevant
    whenever the CPU is being bogged down by a number of processes, each fighting
    for its own attention. By changing the niceness for a particular process, we are
    affecting the process scheduling.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，`nice`命令用于调整进程的niceness，以便与CPU资源的可用性相关。当我们说“niceness”时，这是指对特定进程在CPU资源方面给予的关注或优先级。我们可以增加或减少给定进程的优先级。每当CPU被一系列进程拖垮时，这就变得相关起来，每个进程都在争夺自己的关注。通过改变特定进程的niceness，我们影响了进程的调度。
- en: 'We can view the current `nice` value for processes using the `ps` command;
    we would pass the `al` option:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`ps`命令查看进程的当前`nice`值；我们会传递`al`选项：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Some output has been omitted for brevity. Based on the preceding output, the
    `NI` column represents the current niceness for processes. You''ll notice that
    most processes'' niceness value is set to `0`. We can also filter the output of
    the `ps` command; we can use the `grep` command:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 出于简洁起见，某些输出已被省略。根据前面的输出，`NI`列代表进程的当前niceness。您会注意到大多数进程的niceness值都设置为`0`。我们还可以过滤`ps`命令的输出；我们可以使用`grep`命令：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Awesome job! Based on this, we can see that there are some processes whose
    niceness value is not `0`, by default. Interestingly enough, we can also leverage
    another command to view the current niceness of processes; we can use the `top`
    command:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 干得漂亮！基于此，我们可以看到有一些进程的niceness值默认不是`0`。有趣的是，我们还可以利用另一个命令来查看进程的当前niceness；我们可以使用`top`命令：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The fourth column, `NI`, represents the niceness for each process. Another key
    column is the third column, `PR`; this represents the actual priority which the
    Linux kernel sees. The `PRI` column is not user configurable. Also, the `rt` under
    the `PRI` column indicates that those processes' priorities are handled in real-time
    scheduling.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 第四列`NI`代表每个进程的niceness。另一个关键列是第三列`PR`；这代表Linux内核所看到的实际优先级。`PRI`列不可由用户配置。此外，`PRI`列下的`rt`表示这些进程的优先级是由实时调度处理的。
- en: We cannot change values under the `PRI` column.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不能改变`PRI`列下的值。
- en: 'We can view the syntax of the `nice` command by passing the `--help` option:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过传递`--help`选项来查看`nice`命令的语法：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Your shell may have its own version of `nice`, which usually supersedes the
    version described here. Please refer to your shell's documentation for details
    about the options it supports.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您的shell可能有自己的`nice`版本，通常会取代此处描述的版本。有关其支持的选项的详细信息，请参阅您的shell文档。
- en: 'GNU coreutils online help can be found at: [http://www.gnu.org/software/coreutils](http://www.gnu.org/software/coreutils)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: GNU coreutils在线帮助可以在以下网址找到：[http://www.gnu.org/software/coreutils](http://www.gnu.org/software/coreutils)
- en: 'Full documentation can be found at: [http://www.gnu.org/software/coreutils/nice](http://www.gnu.org/software/coreutils/nice)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的文档可以在以下网址找到：[http://www.gnu.org/software/coreutils/nice](http://www.gnu.org/software/coreutils/nice)
- en: 'or available locally via: info ''(coreutils) nice invocation'''
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 或者在本地通过以下方式查看：info '(coreutils) nice invocation'
- en: '`root@ubuntu:/home/philip#`'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`root@ubuntu:/home/philip#`'
- en: 'Based on the preceding syntax, the range that we can set is between `-19(most
    priority) to 20(least priority)`. Let''s run the `nice` command without any options:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前述语法，我们可以设置的范围是从`-19（最高优先级）到20（最低优先级）`。让我们运行不带任何选项的`nice`命令：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Great! The value `0` represents the priority with which the shell was started.
    Keep in mind that a normal user cannot change the niceness of another user''s
    process; only the root user can change the niceness for any user. By default,
    if we run the `nice` command without specifying a niceness value, then the niceness
    will be set to `10`. Let''s verify this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 很好！值`0`表示启动shell的优先级。请记住，普通用户无法更改其他用户的进程的优先级；只有root用户才能更改任何用户的优先级。默认情况下，如果我们运行`nice`命令而没有指定优先级值，那么优先级将设置为`10`。让我们验证一下：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Based on the preceding output, the `NI` value was not changed. This is due
    to the fact that the process had already been started. The `nice` command can''t
    change the niceness of currently running processes. We can work around this by
    stopping the process:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的输出，`NI`值没有改变。这是因为进程已经启动。`nice`命令无法改变当前正在运行的进程的优先级。我们可以通过停止进程来解决这个问题：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, let''s try to the start the `cron` process using the `nice` command:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试使用`nice`命令启动`cron`进程：
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Awesome job! We can clearly see that the `NI` value has been changed to `10`,
    even though we did not specify a niceness value. If we want to specify a value,
    then we pass it by placing a `-` in front of the number. Let''s use the `cron`
    process once again:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们可以清楚地看到`NI`值已更改为`10`，即使我们没有指定优先级值。如果我们想指定一个值，那么我们通过在数字前面放置一个`-`来传递它。让我们再次使用`cron`进程：
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Sometimes, you may run into an error similar to this while stopping a process.
    You can use the `systemctl` command or the `service` command, but the process
    will still be running. We can easily fix this by using what we''ve learned in
    the previous chapter; we can call the `kill` command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，停止进程时可能会遇到类似的错误。您可以使用`systemctl`命令或`service`命令，但进程仍将继续运行。我们可以通过使用前一章学到的知识轻松解决这个问题；我们可以调用`kill`命令：
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Great job! Now let''s try to start up the `cron` process with a niceness value:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！现在让我们尝试使用一个优先级值启动`cron`进程：
- en: '[PRE10]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'But there is a problem. If we run the `system1` command to check the status,
    we will see the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 但是有一个问题。如果我们运行`system1`命令来检查状态，我们将看到以下内容：
- en: '[PRE11]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The reason why we get this error is because, when we are working with a Linux
    distribution that uses `systemd`, we need to edit the service file in `/lib/systemd/system/`.
    In our case, it would be `/lib/systemd/system/cron.service`. This is the `/lib/systemd/system/cron.service`
    configuration file:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们收到此错误的原因是，当我们使用使用`systemd`的Linux发行版时，我们需要编辑`/lib/systemd/system/`中的服务文件。在我们的情况下，它将是`/lib/systemd/system/cron.service`。这是`/lib/systemd/system/cron.service`配置文件：
- en: '[PRE12]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `[Service]` section is where we would put `Nice=value`. Here is how we
    would store the niceness for the `cron` process and remove the aching error that
    the `systemctl` is generating:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`[Service]`部分是我们放置`Nice=value`的地方。这是我们将存储`cron`进程的优先级并消除`systemctl`正在生成的错误的方法：'
- en: '[PRE13]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, once we''ve made any changes to a `systemd` service, we will need to run
    this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一旦我们对`systemd`服务进行了任何更改，我们需要运行这个命令：
- en: '[PRE14]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Awesome job! Also, you want to place `Nice=` before `ExecStart`, because, if
    you place it after, then it will have no effect on the process. We will now stop
    the existing `cron` process and use the `systemctl` to start `cron`; the errors
    will go away and `systemctl` will be happy:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！此外，您希望在`ExecStart`之前放置`Nice=`，因为如果您将其放在之后，它将不会对进程产生影响。我们现在将停止现有的`cron`进程并使用`systemctl`启动`cron`；错误将消失，`systemctl`将很高兴：
- en: '[PRE15]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Great job! We can now see that the `cron` process `NI` is set to `15`. This
    is only for system services such as `cron` and so on. Another method is to pass
    the `--adjustment=` option; we would specify a niceness value following the equal
    (`=`) sign:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！现在我们可以看到`cron`进程的`NI`设置为`15`。这仅适用于`cron`等系统服务。另一种方法是传递`--adjustment=`选项；我们将在等号（`=`）后指定一个优先级值：
- en: '[PRE16]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Of course, `systemctl` will complain:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，`systemctl`会抱怨：
- en: '[PRE17]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'But we can easily remedy this using the technique we have just learned; by
    specifying the declaration inside `/lib/systemd/system/cron.service`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 但是我们可以很容易地通过使用我们刚学到的技术来解决这个问题；通过在`/lib/systemd/system/cron.service`中指定声明：
- en: '[PRE18]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Awesome job!
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！
- en: Be very cautious when modifying system processes as seen in these demos.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在修改系统进程时要非常谨慎，就像在这些演示中看到的那样。
- en: The renice command
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: renice命令
- en: 'When we work with the `nice` command, it''s clear that it can''t change the
    scheduling priority of running processes; as we''ve just seen, we would need to
    stop and then start the process. This is where the `renice` command shines. We
    can leverage the `renice` command to change the niceness while the process is
    running. To see the syntax, we would pass the `--help` option:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用`nice`命令时，很明显它无法更改正在运行的进程的调度优先级；正如我们刚才看到的，我们需要停止然后启动进程。这就是`renice`命令的优势所在。我们可以利用`renice`命令在进程运行时更改优先级。要查看语法，我们将传递`--help`选项：
- en: '[PRE19]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'First off, let''s use the `ps` command to see the niceness of a process and
    then change its niceness:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们使用`ps`命令查看进程的优先级，然后更改其优先级：
- en: '[PRE20]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Based on the preceding output, the `renice` command expects a PID of a process.
    In addition to this, when we specify a `-` followed by a number, it interprets
    it as a negative `-` sign and assigns a negative value. Also, the `systemctl`
    command is not going to complain because it''s not required to stop and start
    the process to apply the changes when using the `renice` command:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的输出，`renice`命令期望进程的PID。此外，当我们指定一个`-`后跟一个数字时，它会将其解释为负`-`号并分配一个负值。此外，`systemctl`命令不会抱怨，因为使用`renice`命令时不需要停止和启动进程以应用更改：
- en: '[PRE22]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Great job! We can also change the niceness for a specific user; we would pass
    the `-u` option. Let''s change the niceness for all the processes owned by a user:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！我们还可以为特定用户更改优先级；我们将传递`-u`选项。让我们为所有属于某个用户的进程更改优先级：
- en: '[PRE23]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Great job! The niceness has been changed for each process that is owned by the
    user we specified.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！已经为指定用户拥有的每个进程更改了优先级。
- en: Foreground processes versus background processes
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前台进程与后台进程
- en: 'When working in the shell, we are in fact working in what is known as the foreground;
    we aren''t able to carry out any other tasks unless we stop the current process.
    There are times when you are going to want to send some processes to the background
    for processing; this will allow you to continue to work in the shell, while, at
    the same time, the process in the background is also running. To verify whether
    there are any processes running in the background, we can use the `jobs` command.
    Let''s try this out:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在shell中工作时，实际上是在所谓的前台工作；除非我们停止当前进程，否则我们无法执行任何其他任务。有时候，您会想要将一些进程发送到后台进行处理；这将允许您在shell中继续工作，同时后台中的进程也在运行。要验证是否有任何后台运行的进程，我们可以使用`jobs`命令。让我们试一试：
- en: '[PRE24]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'From the preceding output, we can see that there are no jobs currently running
    in the background. To see how a process could affect you from working in the shell,
    let''s look at the `yes` utility; this can be found in most Linux distributions.
    The `yes` utility will run until we suspend or stop it; when we execute the `yes`
    utility, it will prevent us from executing any commands:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的输出中，我们可以看到当前没有作业在后台运行。要了解进程如何影响您在shell中的工作，让我们看看`yes`实用程序；这可以在大多数Linux发行版中找到。`yes`实用程序将一直运行，直到我们暂停或停止它；当我们执行`yes`实用程序时，它将阻止我们执行任何命令：
- en: '[PRE25]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'To stop this utility, we would use a combination of *Ctrl* + *C*:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要停止此实用程序，我们将使用*Ctrl* + *C*的组合：
- en: '[PRE26]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This will inadvertently stop the `yes` utility. The syntax for the `yes` utility
    is as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这将无意中停止`yes`实用程序。`yes`实用程序的语法如下：
- en: '`yes <STRING>`: If we leave off the string, it will spit out a `y` as shown
    in the preceding code'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`yes <STRING>`：如果我们省略字符串，它将像前面的代码中显示的那样输出一个`y`'
- en: '`yes <OPTIONS>`: The available options are version and help'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`yes <OPTIONS>`：可用选项为version和help'
- en: 'If we rerun the `yes` utility, and, instead of stopping it, we decide we would
    like to suspend it, we would use a combination of *Ctrl* + *Z.* This will, in
    effect, place the `yes` utility in the background:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们重新运行`yes`实用程序，并且决定不停止它，而是决定暂停它，我们将使用*Ctrl* + *Z*的组合。这将实际上将`yes`实用程序放在后台：
- en: '[PRE27]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This time, when we run the `jobs` command, we will see there is a job listed:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，当我们运行`jobs`命令时，我们会看到有一个作业被列出：
- en: '[PRE28]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This has suspended the `yes` utility and placed it in the background, allowing
    us to continue to work at the Command Prompt. Another example to illustrate the
    concept of a foreground process halting the shell, thus preventing us from executing
    any other commands, would be where we started a utility, such as `vim` or any
    GUI program.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这已经暂停了`yes`实用程序并将其放在后台，使我们能够继续在命令提示符下工作。另一个例子来说明前台进程阻止shell，从而阻止我们执行任何其他命令的概念，是我们启动了一个实用程序，例如`vim`或任何GUI程序。
- en: 'Let''s pick a GUI to demonstrate; this will drive home the point. We will start
    the `gedit` utility from the shell:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们选择一个GUI来演示；这将更加突出这一点。我们将从shell启动`gedit`实用程序：
- en: '![](img/00125.jpeg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00125.jpeg)'
- en: 'Based on the preceding output, the shell is preventing us from typing any other
    commands until we either suspend or close the `gedit` utility. Let''s suspend
    the `gedit` utility:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的输出，shell正在阻止我们输入任何其他命令，直到我们暂停或关闭`gedit`实用程序。让我们暂停`gedit`实用程序：
- en: '![](img/00126.jpeg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00126.jpeg)'
- en: 'From the preceding output, you''ll notice that the `gedit` utility is frozen,
    meaning we''re unable to do anything from within the `gedit` utility. Now let''s
    run the `jobs` command once again:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的输出中，您会注意到`gedit`实用程序已经冻结，这意味着我们无法从`gedit`实用程序内执行任何操作。现在让我们再次运行`jobs`命令：
- en: '[PRE29]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Great job! There are now two jobs listed. If we decide that we would like to
    resume working with one of these jobs, we can use yet another powerful command:
    the `fg` command. The syntax for the `fg` command is as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！现在有两个作业被列出。如果我们决定要恢复其中一个作业，我们可以使用另一个强大的命令：`fg`命令。`fg`命令的语法如下：
- en: '[PRE30]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'To see this in action, let''s resume the `gedit` utility from its stopped state:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 要看到这一点，让我们从其停止状态恢复`gedit`实用程序：
- en: '![](img/00127.jpeg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00127.jpeg)'
- en: 'Awesome job! Now we''re able to work within the `gedit` utility that was started
    from the Command Prompt. However, there is a problem. When we do *Ctrl* + *Z*,
    the program is stopped. In a real environment, we would want the process that
    we are sending to the background to continue to run. This would speed up our productivity,
    enabling us to carry out simultaneous jobs. Rest assured that this is, in fact,
    possible by way of yet another technique, which we can use whenever we''re executing
    a command in the shell. The `&` is for starting a process and sending it to the
    background. Let''s close both the `gedit` and `yes` utilities:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在我们可以在从命令提示符启动的`gedit`实用程序中工作。但是，有一个问题。当我们按下*Ctrl* + *Z*时，程序会停止。在实际环境中，我们希望将发送到后台的进程继续运行。这将加快我们的生产力，使我们能够执行同时进行的工作。请放心，事实上，通过另一种技术是可能的，我们可以在shell中执行命令时使用。`&`用于启动进程并将其发送到后台。让我们关闭`gedit`和`yes`实用程序：
- en: '[PRE31]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now, we''ll use `&` to start the `gedit` utility and send it straight to the
    background:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用`&`启动`gedit`实用程序并将其直接发送到后台：
- en: '![](img/00128.jpeg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00128.jpeg)'
- en: 'Great job! Now we can work in either the `gedit` utility, or we can continue
    to work at the Command Prompt. Also, when we run the `jobs` command, we will see
    the `gedit` utility''s status is `running`:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！现在我们可以在`gedit`实用程序中工作，或者我们可以继续在命令提示符下工作。此外，当我们运行`jobs`命令时，我们将看到`gedit`实用程序的状态为`running`：
- en: '[PRE32]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Awesome! There is another way to resume the jobs that are stopped in the background
    and instruct them to run in the background. This is made possible by leveraging
    yet another powerful command: the `bg` command. Here is how we would resume the
    `gedit` program, if we had stopped it, and instruct it to resume but run in the
    background:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！还有另一种方法可以恢复在后台停止的作业并指示它们在后台运行。这是通过利用另一个强大的命令实现的：`bg`命令。这是我们如果已经停止了`gedit`程序，我们将如何恢复`gedit`程序并指示它在后台运行：
- en: '![](img/00129.jpeg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00129.jpeg)'
- en: 'Great job! The `bg` command did two things. First, it resumed the `gedit` utility.
    It then placed `&` at the end of the command. As we saw earlier, `&` instructs
    a process to run in the background. If there are multiple jobs, we would specify
    either the job ID or the job name:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！“bg”命令做了两件事。首先，它恢复了“gedit”实用程序。然后在命令的末尾放置了“&”。正如我们之前看到的，“&”指示进程在后台运行。如果有多个作业，我们将指定作业ID或作业名称：
- en: '[PRE33]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '![](img/00130.jpeg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00130.jpeg)'
- en: Awesome! We can see that both of the utilities are open and can be used simultaneously
    alongside the Command Prompt.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们可以看到这两个实用程序都是打开的，并且可以与命令提示符同时使用。
- en: Summary
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have covered a variety of methods for handling processes.
    First, we focused on scheduling processes using the `nice` command. Whenever the
    workload on your CPU is rising, various processes are contending for the CPU's
    resources. The niceness for each process was exposed using various commands, such
    as: `ps` and `top`. Next, we did some demos on how we would go about setting the
    niceness for the processes. This took us to systems that run `systemd`; we saw
    the problem of changing the niceness of a process on a `systemd` system. This
    led to us modifying the configuration file for a process so that `systemd` could
    recognize the niceness when we started the process. After this, we moved on to
    the `renice` command, particularly dealing with processes that are currently running
    and the method to change the niceness of running processes. This was illustrated
    by changing the niceness, not only for a given process, but, also, we were able
    to change the niceness for all processes owned by a user. The `systemd` recognized
    the changes of the running process without us having to modify any particular
    configuration. However, if the process is stopped and started or restarted then
    the niceness which we set would be removed. To work around this and have the niceness
    persisting would mean editing the configuration file for a given process. Finally,
    we worked with processes in the context of foreground verses background. The concept
    of foreground processes affects us from working at the Command Prompt until the
    foreground process is suspended or closed. This greatly reduces productivity when
    we are tasked to carry out a number of operations. The fix is to have the processes
    running in the background, thereby allowing you to effectively carry out functions
    at the Command Prompt.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经介绍了处理进程的各种方法。首先，我们专注于使用“nice”命令调度进程。每当CPU上的工作负载上升时，各种进程都在争夺CPU的资源。使用各种命令暴露了每个进程的niceness，例如：`ps`和`top`。接下来，我们进行了一些演示，演示了如何设置进程的niceness。这使我们进入了运行`systemd`的系统；我们看到了在`systemd`系统上更改进程的niceness的问题。这导致我们修改了进程的配置文件，以便在启动进程时`systemd`能够识别niceness。之后，我们转向了`renice`命令，特别是处理当前正在运行的进程以及更改正在运行的进程的niceness的方法。这通过更改niceness来说明，不仅适用于给定的进程，而且我们还能够更改由用户拥有的所有进程的niceness。`systemd`识别了正在运行的进程的更改，而无需我们修改任何特定的配置。但是，如果进程停止并启动或重新启动，那么我们设置的niceness将被删除。要解决这个问题并使niceness持续存在，意味着编辑给定进程的配置文件。最后，我们在前台和后台的背景下处理了进程。前台进程的概念影响我们在命令提示符上工作，直到前台进程被挂起或关闭。当我们被要求执行多个操作时，这大大降低了生产力。解决方法是让进程在后台运行，从而使您能够有效地在命令提示符下执行功能。
- en: In the next chapter, we will shift our attention towards the world of display
    managers. Often, most users are comfortable working within a GUI environment.
    Therefore, the focus will cover the common display managers that are prevalent
    in today's Linux distributions, also, those which are on the current Linux+ exam
    objectives. First, we will touch on the **X Display Manager** (**XDM**). Next,
    the KDE Display Manager will be discussed. This will be followed by the **Gnome
    Display Manager** (**GDM**). Finally, the chapter will cover the **Light Display
    Manager** (**LDM**). This next chapter is vital for your exam preparation, as
    are all of the previous chapters. This will empower you to be able to work with
    the various display managers common in today's Linux environments.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将把注意力转向显示管理器的世界。通常，大多数用户都习惯于在GUI环境中工作。因此，重点将涵盖今天Linux发行版中普遍存在的常见显示管理器，以及当前Linux+考试目标中的显示管理器。首先，我们将涉及**X显示管理器**（**XDM**）。接下来，将讨论KDE显示管理器。然后将讨论**Gnome显示管理器**（**GDM**）。最后，本章将涵盖**Light显示管理器**（**LDM**）。这一章对于您的考试准备至关重要，就像以前的所有章节一样。这将使您能够使用今天Linux环境中常见的各种显示管理器。
- en: Questions
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which option with the `ps` command prints the niceness for each process?
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`ps`命令的哪个选项打印每个进程的niceness？
- en: A. *n*
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: A. *n*
- en: B. *l*
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: B. *l*
- en: C. *a*
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: C. *a*
- en: D. *x*
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: D. *x*
- en: Which column represents the niceness for each process using the `ps` command?
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`ps`命令表示每个进程的niceness的哪一列？
- en: A. `NI`
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: A. `NI`
- en: B. `ni`
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: B. `ni`
- en: C. `N1`
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: C. `N1`
- en: D. `nice`
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: D. `nice`
- en: Which column represents the niceness for each process using the `top` command?
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`top`命令表示每个进程的niceness的哪一列？
- en: A. `ni`
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: A. `ni`
- en: B. `PNI`
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: B. `PNI`
- en: C. `pnic`
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: C. `pnic`
- en: D. `NI`
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: D. `NI`
- en: Which value is not a valid value to set when using the `nice` command?
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在使用“nice”命令时，哪个值不是有效值？
- en: A. `-20`
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: A. `-20`
- en: B. `-19`
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: B. `-19`
- en: C. `20`
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: C. `20`
- en: D. `19`
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: D. `19`
- en: Which niceness value has the highest priority?
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个niceness值具有最高优先级？
- en: A. `-21`
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: A. `-21`
- en: B. `-32`
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: B. `-32`
- en: C. `-19`
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: C. `-19`
- en: D. `-20`
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: D. `-20`
- en: In which directory are the configuration files for processes using `systemd`
    stored?
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`systemd`存储进程配置文件的目录是哪个？
- en: A. `/usr/lib/systemd/system`
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: A. `/usr/lib/systemd/system`
- en: B. `/lib/systemd/system`
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: B. `/lib/systemd/system`
- en: C. `/lib/systemd/system/service`
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: C. `/lib/systemd/system/service`
- en: D. `/lib/systemd/service`
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: D. `/lib/systemd/service`
- en: Which command needs to be run after editing a service file using `systemd`?
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在使用`systemd`编辑服务文件后需要运行哪个命令？
- en: A. `systemctl daemon-reload`
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: A. `systemctl daemon-reload`
- en: B. `systemctl --daemon-reload`
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: B. `systemctl --daemon-reload`
- en: C. `systemctl daemon --reload`
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: C. `systemctl daemon --reload`
- en: D. `systemctl daemonreload`
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: D. `systemctl daemonreload`
- en: When using the `renice` command, what is expected after specifying the niceness
    value?
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在使用`renice`命令时，指定niceness值后会发生什么？
- en: A. `Process name`
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: A. `进程名称`
- en: B. `PID`
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: B. `PID`
- en: C. `Process name + PID`
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: C. `进程名称 + PID`
- en: D. None of the above
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: D. 以上都不是
- en: Which command resumes a process from the background and prevents you from executing
    any other commands until the current process has ended?
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个命令可以从后台恢复一个进程，并阻止你执行其他命令，直到当前进程结束为止？
- en: A. fg
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: A. fg
- en: B. bg
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: B. bg
- en: C. jobs
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: C. jobs
- en: D. job
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: D. job
- en: Which command resumes a process from the background, but places it in the background,
    allowing you to execute other commands at the Command Prompt?
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个命令可以从后台恢复一个进程，但将其放在后台，允许你在命令提示符下执行其他命令？
- en: A. `fg`
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: A. `fg`
- en: B. `jobs`
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: B. `jobs`
- en: C. `bg`
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: C. `bg`
- en: D. `CTRL+C`
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: D. `CTRL+C`
- en: Further reading
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: You can get more info about managing processes by checking out [https://www.tecmint.com](https://www.tecmint.com).
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以通过查看[https://www.tecmint.com](https://www.tecmint.com)来获取有关管理进程的更多信息。
- en: This next website gives you a lot of useful tips and best practices for handling
    processes: [https://www.digitalocean.com](https://www.digitalocean.com).
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个网站提供了很多有用的关于处理进程的技巧和最佳实践：[https://www.digitalocean.com](https://www.digitalocean.com)。
- en: 'This last link gives you information in general that relates to various commands
    that work on both CentOS and Ubuntu. You can post your questions there and other
    community members will be able to respond: [https://www.linuxquestions.org](https://www.linuxquestions.org).'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个链接提供了一般性的信息，涉及适用于CentOS和Ubuntu的各种命令。你可以在那里发布你的问题，其他社区成员将能够回答：[https://www.linuxquestions.org](https://www.linuxquestions.org)。
