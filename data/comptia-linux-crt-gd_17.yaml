- en: Performing Administrative Security Tasks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行管理安全任务
- en: In the last chapter, we covered IPv4, IPv6, the client-side DNS, and network
    troubleshooting. We worked with IPv4 and discussed IPv4 routing, and then, we
    did the same for IPv6\. This lead into the client-side DNS and network troubleshooting;
    we covered a number of command-line tools that assist in troubleshooting potential
    network connectivity issues.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们涵盖了IPv4、IPv6、客户端DNS和网络故障排除。我们使用IPv4并讨论了IPv4路由，然后我们对IPv6做了同样的事情。这导致了客户端DNS和网络故障排除；我们涵盖了一些命令行工具，这些工具有助于排除潜在的网络连接问题。
- en: 'In this chapter, we will focus on security: host security, SSH, and encryption.
    First, we will cover host security; the `/etc/sudoers`, `/etc/hosts.allow`, and
    `/etc/.hosts.deny` files will be our main focus. Next, we will work with SSH.
    We will focus on the steps involved in setting up SSH, and the steps for generating
    a key. We will also look at logging in to a remote system using SSH. Additionally,
    we will work with the various SSH files that are available to us. Encryption will
    be our next focal point; we will look at ways to encrypt and decrypt files. This
    will be an important chapter, in terms of securing a Linux system.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于安全：主机安全、SSH和加密。首先，我们将介绍主机安全；`/etc/sudoers`、`/etc/hosts.allow`和`/etc/.hosts.deny`文件将是我们的主要关注点。接下来，我们将使用SSH。我们将专注于设置SSH所涉及的步骤，以及生成密钥的步骤。我们还将研究使用SSH登录到远程系统的步骤。此外，我们将使用各种可用的SSH文件。加密将是我们接下来的重点；我们将探讨加密和解密文件的方法。这将是一个重要的章节，涉及到保护Linux系统的安全。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主题：
- en: Host security
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机安全
- en: SSH
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SSH
- en: Encryption
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加密
- en: Host security
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主机安全
- en: 'In Linux, we can perform a range of security tasks to safeguard our system.
    Up to this point in the book, we''ve been performing most of our administrative
    tasks as the root user. Can we perform some of these tasks as a regular user,
    instead? Well, we can use a regular user account and give it certain root privileges,
    without having to actually log in as the root user. This is made possible with
    the `/etc/sudoers` file. We''ll work with the Fedora 28 system in this demo. If
    we try to view the boot files inside of `/boot/grub2/`, we will be presented with
    the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux中，我们可以执行一系列安全任务来保护我们的系统。到目前为止，我们一直以root用户的身份执行大部分管理任务。我们能否以普通用户的身份执行其中一些任务呢？我们可以使用普通用户帐户并赋予其某些root权限，而无需实际以root用户身份登录。这是通过`/etc/sudoers`文件实现的。在本演示中，我们将使用Fedora
    28系统。如果我们尝试查看`/boot/grub2/`中的引导文件，将会看到以下内容：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Based on the preceding information, the user does not have sufficient permission
    to view the contents of `/boot/grub2`; we have received a `Permission denied`
    message. Adding to this, if we try to make a change (such as adding an IP address),
    we will be presented with the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的信息，用户没有足够的权限查看`/boot/grub2`的内容；我们收到了`Permission denied`的消息。此外，如果我们尝试进行更改（例如添加IP地址），将会看到以下内容：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Based on the preceding information, we will execute the first command—the `IP`
    command, with the `a` and `s` options (`a` for address, `s` for show)—but when
    we attempt to add an IP address, we get an `Operation not permitted` message.
    The message will vary, depending on whether you're trying to view, as this is
    a case with the `ls` command, as opposed to making a change in the latter demo.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的信息，我们将执行第一个命令——`IP`命令，使用`a`和`s`选项（`a`表示地址，`s`表示显示），但是当我们尝试添加IP地址时，会收到`Operation
    not permitted`的消息。消息会有所不同，具体取决于您尝试查看的内容，就像`ls`命令的情况一样，而不是在后面的演示中进行更改。
- en: The su command
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: su命令
- en: 'One technique to work around the standard user permission problem is to use
    the `su` command; the `su` means **substitute user**. The basic syntax of the
    `su` command is as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 解决标准用户权限问题的一种技术是使用`su`命令；`su`表示**substitute user**。`su`命令的基本语法如下：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Based on the preceding command, we can also use the `su` command without using
    any options, as seen in the following command:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的命令，我们还可以使用`su`命令而不使用任何选项，如下所示：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Awesome! When we use the `su` command without any options, it prompts us for
    the root password, and then logs us in as the root user. However, this might not
    be ideal, due to security concerns. A better approach would be for us to execute
    a command, but not stay signed in as the root user; this can be accomplished by
    passing the `-l` option, which expects the user account''s name, and the `-c`
    option, which expects the command. The following command shows how we can use
    the `su` command to effectively display the contents of the `/boot/grub2/` directory,
    and, at the same time, stay logged in as the standard user:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！当我们使用`su`命令而不使用任何选项时，它会提示我们输入root密码，然后以root用户身份登录。但是，由于安全问题，这可能不是理想的做法。更好的方法是执行命令，但不要以root用户身份登录；这可以通过传递`-l`选项来实现，该选项需要用户帐户的名称，以及`-c`选项，该选项需要命令。以下命令显示了我们如何使用`su`命令有效地显示`/boot/grub2/`目录的内容，并同时以标准用户身份登录：
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Excellent! The contents of the `/boot/grub2/` directory will now be displayed.
    However, the contents will be displayed without any color (other than white);
    we can pass the `--color` option to instruct the `ls` command to display the colors,
    just like if we were logged in as the root user. This is shown as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！`/boot/grub2/`目录的内容现在将被显示。但是，内容将以白色（除了白色）显示；我们可以传递`--color`选项来指示`ls`命令显示颜色，就像我们以root用户身份登录一样。如下所示：
- en: '![](img/00164.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00164.jpeg)'
- en: 'Awesome! We can see the difference when we omit the `--color` option, as opposed
    to including it with the `ls` command. Also, when the command has spaces between,
    we have to enclose the entire command with a single quote (`''`). Another useful
    option is the `-s` option; this tells the `su` command to use the specified shell
    provided by the user, as indicated by the following screenshot:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们可以看到当省略“--color”选项时，与在ls命令中包括它相比的区别。此外，当命令之间有空格时，我们必须用单引号（'）括起整个命令。另一个有用的选项是“-s”选项；这告诉su命令使用用户提供的指定shell，如下面的截图所示：
- en: '![](img/00165.jpeg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00165.jpeg)'
- en: Wonderful! When we used the `-s` option and specified the shell (in our case,
    `/usr/sbin/sh`), we did not to specify the `--color` option with the `ls` command.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！当我们使用“-s”选项并指定了shell（在我们的案例中是“/usr/sbin/sh”）时，我们不需要在ls命令中指定“--color”选项。
- en: 'Another way to use the `su` command is to pass the `-` option, which implies
    the root user, as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用su命令的另一种方法是传递“-”选项，这意味着root用户，如下所示：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Perfect! The contents are displayed, and we did not specify the login `root`.
    We can see a list of shells that are available by looking inside of the `/etc/shells`
    file, as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 完美！内容被显示出来，我们没有指定登录“root”。我们可以通过查看/etc/shells文件来看到可用的shell列表，如下所示：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Awesome! We can see the various shells that can be used with the `-s` option
    of the `su` command. So far, we''ve only viewed content with the `su` command,
    but we can also make changes with it. The following command shows how we can make
    a change using the `su` command:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们可以看到可以与su命令的“-s”选项一起使用的各种shell。到目前为止，我们只查看了su命令的内容，但我们也可以对其进行更改。以下命令显示了我们如何使用su命令进行更改：
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Excellent! The IP address was added successfully.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！IP地址已成功添加。
- en: A major drawback of using the `su` command is that every user has to know the
    root password in order to execute it.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用su命令的一个主要缺点是，每个用户都必须知道root密码才能执行它。
- en: The sudo command
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: sudo命令
- en: 'The `sudo` command solves the dilemma of standard users needing the root password,
    as long as the user''s account resides in the `/etc/sudoers` configuration file.
    The basic syntax of the `sudo` command is as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: sudo命令解决了普通用户需要root密码的困境，只要用户帐户位于/etc/sudoers配置文件中。sudo命令的基本语法如下：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Along with the preceding command, we simply specify the command that we would
    like to execute, which would normally require root privileges. Let''s try the
    `sudo` command as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 除了前面的命令，我们只需指定要执行的命令，这通常需要root权限。让我们尝试sudo命令，如下所示：
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Excellent! When we executed the `sudo` command and passed the command that
    required root privileges, we were prompted for the password of the standard user,
    not the root user. Afterwards, we can pass another command with the `sudo` command,
    and we won''t be prompted for our password, as you can see in the following code
    snippet:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！当我们执行sudo命令并传递需要root权限的命令时，我们会提示输入标准用户的密码，而不是root用户的密码。之后，我们可以传递另一个带有sudo命令的命令，我们不会被提示输入密码，如下面的代码片段所示：
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Awesome! The command executed successfully, without requiring the user''s password.
    This is possible because there is a timeout setting that saves the user''s password;
    after the time has elapsed, we will be prompted to enter the user''s password
    again. However, this does not hold true in the event that the user opens another
    Terminal, as shown in the following screenshot:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！命令成功执行，而不需要用户的密码。这是可能的，因为有一个超时设置，保存了用户的密码；超时后，我们将被提示再次输入用户的密码。然而，在用户打开另一个终端的情况下，情况并非如此，如下面的截图所示：
- en: '![](img/00166.jpeg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00166.jpeg)'
- en: Awesome! We can see that the timeout value does not affect a new Terminal, because
    the user was prompted to enter their password.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们可以看到超时值不会影响新的终端，因为用户被提示输入他们的密码。
- en: 'There may be times when we prefer to increase the timeout value, especially
    when we''re going to be working for a long period of time. Rest assured; we can
    increase the timeout value by searching for `env_reset` inside of the `/etc/sudoers`
    file and appending the `timestamp_timeout` option alongside it. The contents of
    the `/etc/sudoers` file are as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们可能希望增加超时值，特别是当我们要长时间工作时。放心，我们可以通过在/etc/sudoers文件中搜索env_reset并在其旁边附加timestamp_timeout选项来增加超时值。/etc/sudoers文件的内容如下：
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the preceding code, some output has been omitted for brevity. There are
    a number of options that we can change. For instance, to increase the timeout
    value, we can edit `/etc/sudoers` using the visudo editor; it is highly recommended
    to not use any editor other than visudo, as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，为了简洁起见，省略了一些输出。我们可以更改许多选项。例如，要增加超时值，我们可以使用visudo编辑/etc/sudoers；强烈建议不要使用visudo之外的任何编辑器，如下所示：
- en: '[PRE12]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Excellent! We''ve added `timestamp_timeout=60`; this tells `sudo` to save the
    user''s password for 60 minutes. Another useful option to set is to see the output
    as we type the user''s password; it is possible to display asterisks (`*`) for
    each key typed by the user. This is made possible by appending the `pwfeedback`
    option alongside the `env_reset` option, as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们添加了“timestamp_timeout=60”；这告诉sudo保存用户的密码60分钟。另一个有用的选项是在用户输入密码时显示输出；可以显示用户输入的每个按键的星号（*）。这是通过在env_reset选项旁边附加pwfeedback选项来实现的，如下所示：
- en: '[PRE13]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Based on the preceding command, when the user first tries to use the `sudo`
    command, the password will be represented with asterisks, as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的命令，当用户首次尝试使用sudo命令时，密码将用星号表示，如下所示：
- en: '[PRE14]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Excellent! We can now see asterisks that represent the typed password.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们现在可以看到代表输入密码的星号。
- en: 'When we add a new user, the new user will not automatically be added to the
    `/etc/sudoers` file. We have to add the user manually, as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们添加新用户时，新用户不会自动添加到/etc/sudoers文件中。我们必须手动添加用户，如下所示：
- en: '[PRE15]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, we can switch users, either by logging out and back in on the computer,
    or by using the `su` command, as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以切换用户，要么通过在计算机上注销并重新登录，要么使用`su`命令，如下所示：
- en: '[PRE16]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We''ve successfully logged in as the new user; now, when we try to issue the
    `sudo` command, the results will be as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功以新用户登录；现在，当我们尝试发出`sudo`命令时，结果将如下所示：
- en: '[PRE17]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We''re given a notification message, but when we enter the new user''s password,
    we get the dreaded `teddy is not in the sudoers file` message, along with, `This
    incident will be reported`. This basically tells us that we have to add the new
    user to the `/etc/sudoer` file. This can be done in a number of ways; one way,
    which may be the simplest, is to add the new user to the `wheel` group. The `wheel`
    group can execute all of the commands, as can be seen in the `/etc/sudoer` file:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们收到了一条通知消息，但当我们输入新用户的密码时，我们收到了可怕的`teddy不在sudoers文件中`消息，以及`此事件将被报告`。这基本上告诉我们，我们必须将新用户添加到`/etc/sudoer`文件中。有多种方法可以做到这一点；其中一种可能是最简单的方法是将新用户添加到`wheel`组。`wheel`组可以执行所有命令，如在`/etc/sudoer`文件中所示：
- en: '[PRE18]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'As you can see, the `wheel` group exists, with full access; we can use the
    `usermod` command and pass the `-a` and `-G` options (`a` for appends, `G` for
    group), as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`wheel`组存在，并具有完全访问权限；我们可以使用`usermod`命令并传递`-a`和`-G`选项（`a`表示追加，`G`表示组），如下所示：
- en: '[PRE19]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We will need root privileges to modify another user''s properties; we can use
    the `sudo` command, as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要root权限来修改另一个用户的属性；我们可以使用`sudo`命令，如下所示：
- en: '[PRE20]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Excellent! The new user is now capable of using the `sudo` command. Let''s
    examine the syntax for adding an entry inside of `/etc/sudoer`, as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！新用户现在可以使用`sudo`命令。让我们来看看在`/etc/sudoer`中添加条目的语法，如下所示：
- en: '[PRE21]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We can define an entry for one particular user or group (we have to put a `%`
    in front of a group''s name); we can then specify which system we want the entry
    for, which user we want to allow to execute the commands, and, finally, the actual
    commands. Let''s give this a try; we will remove the `wheel` group from the new
    user and create an entry for the new user, as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为特定用户或组定义一个条目（在组名前面必须加上`%`）；然后我们可以指定要为哪个系统添加条目，要允许哪个用户执行命令，最后是实际的命令。让我们试试；我们将从新用户中删除`wheel`组，并为新用户创建一个条目，如下所示：
- en: '[PRE22]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Wonderful! We''ve restricted the new user to executing only the `ls` and `cat`
    commands; this can be proven as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们已经限制了新用户只能执行`ls`和`cat`命令；可以通过以下方式证明：
- en: '[PRE23]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Excellent! The new user can only use the `ls` command with root privileges,
    and is unable to make any other changes with the `sudo` command. Additionally,
    we can grant the new user the ability to execute as many commands as we specify,
    as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！新用户只能以root权限使用`ls`命令，并且无法使用`sudo`命令进行任何其他更改。此外，我们可以授予新用户执行我们指定的尽可能多的命令的能力，如下所示：
- en: '[PRE24]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Awesome! We added the `cat` command for the new user, making it possible for
    the new user to execute the `cat` command with root privileges. The thing to remember,
    when placing multiple commands alongside each other, is that you have to place
    tabs by pressing the *Tab* key between the commands. Another option that we can
    use with the `sudo` command is the `-l` option; this lists the privileges of the
    current user, as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们为新用户添加了`cat`命令，使新用户能够以root权限执行`cat`命令。要记住的一件事是，当将多个命令放在一起时，必须在命令之间按*Tab*键放置制表符。我们可以与`sudo`命令一起使用的另一个选项是`-l`选项；这将列出当前用户的权限，如下所示：
- en: '[PRE25]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'As you can see, the user `philip` can run all of the commands with the `sudo`
    command. However, if we run the `sudo` command with `-l` for the other user, `teddy`,
    we will see that user''s access, as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，用户`philip`可以使用`sudo`命令运行所有命令。但是，如果我们对其他用户`teddy`运行带有`-l`的`sudo`命令，我们将看到用户的访问权限，如下所示：
- en: '[PRE26]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Awesome! We can only see two commands that `teddy` can execute with root privileges.
    It is also possible to pass the username with the `-u` option and specify which
    command to be executed with `sudo`, as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们只能看到`teddy`可以以root权限执行两个命令。还可以使用`-u`选项传递用户名，并指定要使用`sudo`执行的命令，如下所示：
- en: '[PRE27]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Excellent! Another useful option is `-v`, which resets the authentication timeout
    for the user, as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！另一个有用的选项是`-v`，它将重置用户的身份验证超时，如下所示：
- en: '[PRE28]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Similarly, it is possible to kill the authentication session immediately by
    passing the `-k` option with `sudo`, as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，可以通过使用`sudo`传递`-k`选项立即终止身份验证会话，如下所示：
- en: '[PRE29]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Awesome! In the preceding code, the user had to provide their password when
    they attempted to execute the `sudo` command with the `-k` option.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！在前面的代码中，用户在尝试使用`-k`选项执行`sudo`命令时必须提供他们的密码。
- en: 'So far, we''ve been providing the user''s password the first time we execute
    `sudo`; it is possible to run `sudo` without entering a password. We add the `NOPASSWD`
    option in the entry that we added for the new user, as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们在第一次执行`sudo`时一直提供用户的密码；可以在不输入密码的情况下运行`sudo`。我们在为新用户添加的条目中添加`NOPASSWD`选项，如下所示：
- en: '[PRE30]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Wonderful! Whenever the user `teddy` tries to execute the `sudo` command, they
    will no longer be prompted for their password.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！每当用户`teddy`尝试执行`sudo`命令时，他们将不再被提示输入密码。
- en: TCP wrappers
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TCP包装
- en: 'We can add another layer of security within a Linux system by using TCP wrappers.
    **TCP wrappers** filter traffic as it enters the system. The TCP wrappers check
    the traffic against two files: `/etc/hosts.allow` and `/etc/hosts.deny`. The rules
    are applied with a top-down approach, meaning that the first rule is always applied
    before all other rules. We can view the contents of `/etc/hosts.allow` as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用TCP包装在Linux系统中添加另一层安全性。**TCP包装**在流入系统时过滤流量。 TCP包装检查流量与两个文件：`/etc/hosts.allow`和`/etc/hosts.deny`。规则采用自上而下的方式应用，这意味着始终先应用第一条规则。我们可以查看`/etc/hosts.allow`的内容，如下所示：
- en: '[PRE31]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The file only contains comments that start with `#`. The basic syntax for creating
    a rule is as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件只包含以`#`开头的注释。创建规则的基本语法如下：
- en: '[PRE32]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We can add a rule using a text editor, such as vi or nano, as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用文本编辑器（如vi或nano）添加规则，如下所示：
- en: '[PRE33]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'In the preceding command, we added a rule for the `vsftpd`; this is a secure
    version of FTP. We then specified the client list—the subnet `172.16.175.`. The
    `.` means that any IP addresses within that subnet will be able to access the
    `vsftpd`. Another way to define the rule is to specify a domain, as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述命令中，我们为`vsftpd`添加了一个规则；这是FTP的安全版本。然后我们指定了客户端列表——子网`172.16.175.`。`.`表示该子网中的任何IP地址都可以访问`vsftpd`。定义规则的另一种方法是指定域，如下所示：
- en: '[PRE34]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Excellent! Anyone from within `.packtpub.com` will be able to access the `vsftpd`
    on the local system. Adding to this, we can use the keyword `ALL` inside a rule;
    this matches everything, and it can be placed at the daemon or in the client list
    section, as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！`.packtpub.com`内的任何人都可以访问本地系统上的`vsftpd`。此外，我们可以在规则中使用关键字`ALL`；这匹配一切，并且可以放在守护程序或客户端列表部分，如下所示：
- en: '[PRE35]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Awesome! Everyone can access the Telnet Service on the local system. It is
    also possible to execute another command, by passing the `spawn` option. This
    is useful when we want to log who is attempting to access a given service on the
    local system. We use the `spawn` option as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！每个人都可以访问本地系统上的Telnet服务。还可以通过传递`spawn`选项来执行另一个命令。当我们想要记录谁正在尝试访问本地系统上的特定服务时，这是有用的。我们使用`spawn`选项如下：
- en: '[PRE36]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Excellent! The `spawn` option creates a message containing the current date
    (`/bin/date`), which is then appended with the hostname (`%h`) of the system attempting
    to access the `vsftpd`; this then gets appended inside of `/var/log/vsftp.log`.
    We can then take a look at the `/etc/hosts.deny` file, as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！`spawn`选项创建一个包含当前日期（`/bin/date`）的消息，然后将其附加到尝试访问`vsftpd`的系统的主机名（`%h`）中；然后将其附加到`/var/log/vsftp.log`中。然后我们可以查看`/etc/hosts.deny`文件，如下所示：
- en: '[PRE37]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'In the preceding command, `/etc/hosts.deny` only contains comments (`#`). It
    is recommended to deny everything in this file, as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述命令中，`/etc/hosts.deny`只包含注释（`#`）。建议在此文件中拒绝一切，如下所示：
- en: '[PRE38]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Awesome! We've specified `ALL:ALL:`, to deny everything except the rules that
    are listed in `/etc/hosts.allow`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们指定了`ALL:ALL:`，以拒绝除`/etc/hosts.allow`中列出的规则之外的所有内容。
- en: SSH
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SSH
- en: 'We mainly use SSH for the purpose of securely logging in to a remote system.
    Most Linux distributions come with the SSH package, by default. In order to verify
    whether SSH is currently running, we use the `systemctl` command; we pass the
    `status` option, as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们主要使用SSH来安全登录到远程系统。大多数Linux发行版默认安装了SSH软件包。为了验证SSH是否正在运行，我们使用`systemctl`命令；我们传递`status`选项，如下所示：
- en: '![](img/00167.jpeg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00167.jpeg)'
- en: 'The SSH daemon `ssh.service` is currently running (particularly, the Secure
    Shell server). Another method that we can use to verify that the SSH service is
    running is the `netstat` command; we pass the `ntlp` options (`n` for display
    port numbers, `t` for TCP protocol, `l` for currently listening, and `p` for program
    ID/program name), as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: SSH守护程序`ssh.service`目前正在运行（特别是安全外壳服务器）。我们可以使用的另一种验证SSH服务是否正在运行的方法是`netstat`命令；我们传递`ntlp`选项（`n`用于显示端口号，`t`用于TCP协议，`l`用于当前监听，`p`用于程序ID/程序名称），如下所示：
- en: '[PRE39]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'As you can see, the SSH server daemon is currently running on TCP port `22`.
    The basic syntax for establishing a connection to a remote system is as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，SSH服务器守护程序目前正在TCP端口`22`上运行。建立与远程系统的连接的基本语法如下：
- en: '[PRE40]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'We can simply run the `ssh` command and pass only the remote system; we will
    use the `ssh` command from the Fedora 28 system and try to connect to the Ubuntu
    18 system, as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需运行`ssh`命令并仅传递远程系统；我们将从Fedora 28系统使用`ssh`命令并尝试连接到Ubuntu 18系统，如下所示：
- en: '[PRE41]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'In the preceding command, some output has been omitted for brevity. If you specify
    the command without any options, the SSH program used the current user, `philip`,
    and a fingerprint identifying the server was presented. This added the user `philip`
    to `~/.ssh/known_hosts` in the Fedora 28 system. We can take a look at the file,
    as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述命令中，为简洁起见省略了一些输出。如果您指定不带任何选项的命令，SSH程序将使用当前用户`philip`，并显示服务器的指纹。这将在Fedora
    28系统中的`~/.ssh/known_hosts`中添加用户`philip`。我们可以查看文件，如下所示：
- en: '[PRE42]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Awesome! We have Ubuntu''s system information inside of `~/.ssh/known_hosts`
    for the user `philip` on the Fedora 28 system. It is also possible to use a different
    username with the `ssh` command; we specify the `-l` option, as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们在Fedora 28系统上的用户`philip`的`~/.ssh/known_hosts`中有Ubuntu系统的信息。还可以使用`ssh`命令使用不同的用户名；我们指定`-l`选项，如下所示：
- en: '[PRE43]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'We were able to log in using a different user, via SSH. Also, notice that we
    were presented with the earlier message identifying the server''s fingerprint.
    This is because the information was previously stored in `~/.ssh/known_hosts`.
    If we were to remove the contents using a text editor, such as vi or nano, we
    would be presented with the identity message again, as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能够使用不同的用户通过SSH登录。还要注意，我们收到了之前识别服务器指纹的消息。这是因为信息先前存储在`~/.ssh/known_hosts`中。如果我们使用文本编辑器（如vi或nano）删除内容，我们将再次收到身份验证消息，如下所示：
- en: '[PRE44]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Excellent! We removed the contents, and we were once again presented with the
    identity message.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们删除了内容，然后再次收到了身份验证消息。
- en: 'So far, we''ve been prompted to enter a password every time that we''ve attempted
    to start an SSH session. However, it is possible to bypass the password prompt
    and log in to the system without any hindrance. We use SSH keys to authenticate;
    this is known as **key-based authentication**. Key-based authentication involves
    the creation of a pair of keys: a private key and a public key. The private key
    is stored on the client''s system, and the public key is stored on the destination
    system(s). Particularly, we generate an SSH key using the `ssh-keygen` command
    on the destination system. Next, we copy over the client system; we use the `ssh-copy-id`
    command to copy the keys. When you first connect using key-based authentication,
    the servers transmit a message, using the public key, over to the client''s system,
    which can then be interpreted using the private key, which resides on the client''s
    system.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，每次我们尝试启动SSH会话时都会提示输入密码。但是，可以绕过密码提示并无阻碍地登录到系统。我们使用SSH密钥进行身份验证；这被称为**基于密钥的身份验证**。基于密钥的身份验证涉及创建一对密钥：私钥和公钥。私钥存储在客户端系统上，公钥存储在目标系统上。特别是，我们使用`ssh-keygen`命令在目标系统上生成SSH密钥。接下来，我们将客户端系统上的密钥复制过去；我们使用`ssh-copy-id`命令复制密钥。当您首次使用基于密钥的身份验证连接时，服务器会使用公钥向客户端系统传输一条消息，然后可以使用客户端系统上的私钥来解释这条消息。
- en: 'Let''s generate the SSH keys using the `ssh-keygen` command on the client system
    from where we need to log in; it will be the Fedora 28 system, as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`ssh-keygen`命令在我们需要登录的客户端系统上生成SSH密钥；这将是Fedora 28系统，如下所示：
- en: '[PRE45]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'By default, the algorithm is `rsa`, and the location to store the key pair
    is inside of the current user''s home directory (`~/.ssh/id_rsa`). We accept the
    defaults and press *Enter*, as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，算法是`rsa`，存储密钥对的位置在当前用户的主目录中（`~/.ssh/id_rsa`）。我们接受默认值并按*Enter*，如下所示：
- en: '[PRE46]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'We have to specify a `passphrase`; we will use a super secret `passphrase`,
    and then press *Enter*, as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须指定一个`passphrase`；我们将使用一个超级秘密的`passphrase`，然后按*Enter*，如下所示：
- en: '[PRE47]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Excellent! The key was generated using a 2,048-bit key size. Now, we can run
    the `ls` command on the user''s home directory and look inside of `~/.ssh`, as
    follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！密钥是使用2,048位密钥大小生成的。现在，我们可以在用户的主目录上运行`ls`命令，并查看`~/.ssh`目录中的内容，如下所示：
- en: '[PRE48]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Wonderful! Apart from the `known_hosts` file, which we covered earlier, we
    now have two additional files: `id_rsa` (this is the private key) and `id_rsa.pub` (this
    is the public key). We can look at the contents by using the `cat` command:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！除了我们之前介绍的`known_hosts`文件之外，我们现在有两个额外的文件：`id_rsa`（这是私钥）和`id_rsa.pub`（这是公钥）。我们可以使用`cat`命令查看内容：
- en: '[PRE49]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Awesome! The next step is to copy the public key from the client''s system
    to the destination server, using the `ssh-copy id` command; in our case, the server
    is the Ubuntu system. Before we run the `ssh-copy-id` command, let''s check the
    `~/.ssh` directory on the Ubuntu system, as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！下一步是使用`ssh-copy-id`命令将客户端系统的公钥复制到目标服务器，我们的情况下，服务器是Ubuntu系统。在运行`ssh-copy-id`命令之前，让我们检查一下Ubuntu系统上的`~/.ssh`目录，如下所示：
- en: '[PRE50]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'As you can see, `~/.ssh` is currently empty. Now, let''s execute the `ssh-copy-id`
    command on the client system, as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`~/.ssh`目前是空的。现在，让我们在客户端系统上执行`ssh-copy-id`命令，如下所示：
- en: '[PRE51]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Excellent! The public key `~/.ssh/id_rsa.pub` was securely transferred to the
    server''s system. Now, let''s check the `~/.ssh` directory on the Ubuntu system
    again, as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！公钥`~/.ssh/id_rsa.pub`已安全传输到服务器系统。现在，让我们再次检查Ubuntu系统上的`~/.ssh`目录，如下所示：
- en: '[PRE52]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Awesome! We now have an `authorized_keys` file, located in the `~/.ssh` directory.
    We can use the `cat` command to verify that the public key is indeed the same
    as the public key on the client''s system, as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们现在有一个`authorized_keys`文件，位于`~/.ssh`目录中。我们可以使用`cat`命令验证公钥是否与客户端系统上的公钥相同，如下所示：
- en: '[PRE53]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Excellent! The last step is to run the `ssh` command on the client system (Fedora
    28) and verify that we are able to log in to the server (Ubuntu 18) without using
    a password, as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！最后一步是在客户端系统（Fedora 28）上运行`ssh`命令，并验证我们能够登录到服务器（Ubuntu 18）而不使用密码，如下所示：
- en: '[PRE54]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Excellent! We started the `ssh agent`, which created the necessary variables
    and started the process. Next, we will run the `ssh-add` command with the `-l`
    option; this will list all of the identities that the `ssh agent` is aware of,
    as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们启动了`ssh agent`，它创建了必要的变量并启动了进程。接下来，我们将使用`ssh-add`命令和`-l`选项运行；这将列出`ssh
    agent`知道的所有身份，如下所示：
- en: '[PRE57]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'As you can see in the preceding command, there are no identities known by the
    agent; we will now add the identity that we created earlier, by using the `ssh-add`
    command without any options, as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在上述命令中所见，代理没有已知的身份；我们现在将使用`ssh-add`命令添加我们之前创建的身份，不带任何选项，如下所示：
- en: '[PRE58]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Wonderful! You can now see the identity for the private key that we generated
    earlier. Now, we will try to initiate an SSH session, as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！您现在可以看到我们之前生成的私钥的身份。现在，我们将尝试启动SSH会话，如下所示：
- en: '[PRE59]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Excellent! We successfully logged in, without having to enter the user''s password
    or the `passphrase`. The SSH configuration is stored in `/etc/ssh/ssh_config`:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们成功登录，而无需输入用户密码或`passphrase`。SSH配置存储在`/etc/ssh/ssh_config`中：
- en: '[PRE60]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: In the preceding code, some output has been omitted for brevity. All of the
    settings are using their defaults.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，为了简洁起见，一些输出已被省略。所有设置都使用它们的默认值。
- en: 'Another location where the `known_hosts` are kept is `/etc/ssh/known_hosts`;
    this allows administrators to add the identities of all servers inside of a LAN.
    This method prevents the identity message from appearing every time a new user
    attempts to initiate an SSH session to a server. We can copy the contents of `~./ssh/known_hosts` to
    `/etc/ssh/known_hosts`, and, if we try to log in as another user, we won''t see
    the identity message:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个保存“known_hosts”的位置是“/etc/ssh/known_hosts”；这允许管理员添加局域网内所有服务器的身份。这种方法可以防止每次新用户尝试启动SSH会话到服务器时出现身份验证消息。我们可以复制“~./ssh/known_hosts”的内容到“/etc/ssh/known_hosts”，如果我们尝试以另一个用户登录，我们将不会看到身份验证消息：
- en: '[PRE61]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Excellent. Neither of the users were presented with the identity message. Note
    that they were prompted for their respective passwords, because we only set up
    the key-based authentication for the `philip` user; we have to generate the keys
    for each of the users.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 很好。没有一个用户收到了身份验证消息。请注意，他们被提示输入各自的密码，因为我们只为“philip”用户设置了基于密钥的身份验证；我们必须为每个用户生成密钥。
- en: Encryption
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加密
- en: In today's environment, it's critical to safeguard our data. We can use various
    methods of encryption; in our environment, we will use the **GNU Privacy Guard**
    (**GnuPG**, or **GPG**) for encrypting and decrypting our files and folders. We
    will use the `gpg` command when working with encryption and decryption.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在当今的环境中，保护我们的数据至关重要。我们可以使用各种加密方法；在我们的环境中，我们将使用GNU隐私保护（GnuPG或GPG）来加密和解密我们的文件和文件夹。在进行加密和解密时，我们将使用gpg命令。
- en: 'First, we will encrypt a file using the most basic form, **symmetric encryption**;
    this uses a password. The following command shows how we can perform symmetric
    encryption using the `gpg` command, with either the `-c` or `--symmetric` option:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将使用最基本的形式加密文件，即对称加密；这需要密码。以下命令显示了我们如何使用gpg命令执行对称加密，使用-c或--symmetric选项：
- en: '[PRE62]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'We have to enter a password/passphrase, then reenter it, as follows:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须输入密码/密码短语，然后重新输入，如下所示：
- en: '[PRE63]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Awesome! A new file was created, with a `.gpg` extension; this is the encrypted
    file. We can try to view the contents by using the `cat` command:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！创建了一个带有.gpg扩展名的新文件；这是加密文件。我们可以尝试使用cat命令查看内容：
- en: '[PRE64]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '![](img/00168.jpeg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00168.jpeg)'
- en: 'The content is encrypted, and we can now remove the original content and leave
    the encrypted content, as follows:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 内容已加密，我们现在可以删除原始内容，只留下加密内容，如下所示：
- en: '[PRE65]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Now, only the encrypted file remains. We can decrypt this file by passing the
    `-d` option, as follows:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，只剩下加密文件。我们可以通过传递-d选项来解密此文件，如下所示：
- en: '[PRE66]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'We must provide the passphrase in order to decrypt the file, as follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须提供密码来解密文件，如下所示：
- en: '[PRE67]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Excellent! The contents of the file are displayed, but, as we can see, when
    we ran the `ls` command, we still only had the encrypted file, and no new file
    was generated. Rest assured; we can pass the `-o` option to save the output to
    a file, as follows:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！文件的内容被显示出来，但是，正如我们所看到的，当我们运行ls命令时，我们仍然只有加密文件，没有生成新文件。请放心；我们可以传递-o选项将输出保存到文件中，如下所示：
- en: '[PRE68]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Awesome! Now, we have both the encrypted and the unencrypted file.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在，我们既有加密文件，也有未加密文件。
- en: 'We can also encrypt and decrypt is by using private/public key pairs. First,
    we have to generate the key pairs by using `gpg` with the `--gen-key` option,
    as follows:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用私钥/公钥对进行加密和解密。首先，我们必须使用gpg命令和--gen-key选项生成密钥对，如下所示：
- en: '[PRE69]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'We have to choose the type of key, `RSA and RSA` being the default; we will
    accept the default, as follows:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须选择密钥类型，“RSA和RSA”是默认值；我们将接受默认值，如下所示：
- en: '[PRE70]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'We also have to specify the size of the key, the default being `2048`; we will
    choose `4096`, because a longer key is much more secure:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还必须指定密钥的大小，默认值为2048；我们将选择4096，因为更长的密钥更安全：
- en: '[PRE71]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'We also have to specify when the key will expire, the default being `0`, which
    means that it will never expire. We will choose `1y`, which means that it will
    expire in one year:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还必须指定密钥何时过期，默认值为“0”，表示永不过期。我们将选择“1y”，表示一年后过期：
- en: '[PRE72]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Then, we have to confirm the expiration date and specify the `Real Name`; we
    will fill in the information as follows:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们必须确认过期日期并指定“真实姓名”；我们将按以下信息填写信息：
- en: '[PRE73]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'We now have to confirm by typing `O`, as follows:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们必须通过输入“O”来确认，如下所示：
- en: '[PRE74]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'We also have to protect our secret keys, as follows:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还必须保护我们的秘密密钥，如下所示：
- en: '[PRE75]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Excellent! We have successfully generated our key pairs; we can verify this
    by passing the `--list-keys` option with the `gpg` command, as follows:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们已成功生成了密钥对；我们可以通过使用gpg命令传递--list-keys选项来验证这一点，如下所示：
- en: '[PRE76]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Wonderful! As you can see, our public key information is in `/home/philip/.gnupg/pubring.gpg`:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！正如您所看到的，我们的公钥信息在“/home/philip/.gnupg/pubring.gpg”中：
- en: '[PRE77]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'We can now see our public key information. Next, we will check for our private
    key information; we will pass the `--list-secret-keys` option with the `gpg` command,
    as follows:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以看到我们的公钥信息。接下来，我们将检查我们的私钥信息；我们将使用gpg命令传递--list-secret-keys选项，如下所示：
- en: '[PRE78]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Excellent! We can see information pertaining to the private key; namely, that
    the private key is in `/home/philip/.gnupg/secring.gpg`, as follows:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们可以看到有关私钥的信息；即私钥位于“/home/philip/.gnupg/secring.gpg”，如下所示：
- en: '[PRE79]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Awesome! We can now encrypt by using the public key that we just created, passing
    the `-r` option with the `gpg` command, as follows:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们现在可以使用刚刚创建的公钥进行加密，通过gpg命令传递-r选项，如下所示：
- en: '[PRE80]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'We did not specify a user ID with the command, so we were prompted to specify
    the user ID; we then pressed *Enter* to move to the second line, `Enter the user
    ID`. End with an empty line: `""`, we simply pressed *Enter* to generate an empty
    line. Following this, we have to confirm whether we want to overwrite the file
    that was encrypted earlier, when we performed symmetric encryption. We can also
    specify the `user ID` with the `-r` option. Let''s give this a try:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有使用命令指定用户ID，因此我们被提示指定用户ID；然后我们按*Enter*移动到第二行，`输入用户ID`。以空行结束：`""`，我们只需按*Enter*生成一个空行。之后，我们必须确认是否要覆盖之前加密的文件，当我们执行对称加密时。我们还可以使用`-r`选项指定`用户ID`。让我们试一试：
- en: '[PRE81]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Excellent! We weren''t prompted to enter the `user ID`, because we specified
    it using the `-r` option. In order to decrypt the file, we pass the `-d` option,
    as follows:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们没有被提示输入`用户ID`，因为我们使用了`-r`选项来指定它。为了解密文件，我们需要传递`-d`选项，如下所示：
- en: '[PRE82]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'In the preceding code, we ran into the same problem that we did during symmetric
    decryption; the displayed content is not being saved. We can solve this quickly
    by passing the `-o` option:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们遇到了与对称解密时相同的问题；显示的内容没有被保存。我们可以通过传递`-o`选项来快速解决这个问题：
- en: '[PRE83]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Excellent! The file was decrypted successfully.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！文件成功解密了。
- en: 'It is also possible to edit a key; we pass the `--edit-key` option with the
    `gpg` command, as follows:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以编辑密钥；我们可以使用`gpg`命令传递`--edit-key`选项，如下所示：
- en: '[PRE84]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'In the preceding command, we can make a number of changes. For instance, if
    we want to disable the key, we can type `disable`, as follows:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述命令中，我们可以进行多项更改。例如，如果我们想禁用密钥，我们可以输入`disable`，如下所示：
- en: '[PRE85]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'In the preceding command, we changed the key says `*** This key has been disabled`;
    let''s see the effect of this by saving and exiting, as follows:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述命令中，我们改变了密钥的状态为`***此密钥已被禁用***`；让我们保存并退出，看看这样做的效果：
- en: '[PRE86]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'When we try to use the key to encrypt the file, we are given an error. We can
    fix this quickly by changing the `disable` to `enable` inside of the `gpg` console,
    as follows:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们尝试使用密钥加密文件时，出现了错误。我们可以通过在`gpg`控制台内将`disable`更改为`enable`来快速解决这个问题，如下所示：
- en: '[PRE87]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Excellent!
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！
- en: Summary
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered a wide array of security features that are available
    to us in the Linux environment. First, we covered accessing commands with root
    privileges; particularly, we looked at the `su` and `sudo` commands. We then moved
    on to TCP wrappers, focusing on the `/etc/hosts.allow` and `/etc/hosts.deny` files.
    We looked at how the two files can complement each other, by allowing access via
    the `/etc/hosts.allow` file and denying everything in the `/etc/hosts.deny` file.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了Linux环境中可用的各种安全功能。首先，我们介绍了以root权限访问命令；特别是，我们看了`su`和`sudo`命令。然后我们转向TCP包装器，重点介绍了`/etc/hosts.allow`和`/etc/hosts.deny`文件。我们看了这两个文件如何通过允许`/etc/hosts.allow`文件中的访问和在`/etc/hosts.deny`文件中拒绝所有内容来互补。
- en: Next, we covered SSH; we looked at setting up SSH access between a client and
    a server, allowing for a seamless login without entering a password, and we covered
    using a passphrase. We then cached the passphrase, so that the user would not
    have to enter a passphrase when logging in to the server. Finally, we covered
    encryption in depth. We focused on symmetric encryption, which involves a passphrase;
    we then took it up a notch by working with key pairs in encryption. We finished
    by looking at how we can edit properties of the key.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们介绍了SSH；我们看了如何在客户端和服务器之间设置SSH访问，允许无需输入密码即可无缝登录，并介绍了如何使用密码短语。然后我们缓存了密码短语，这样用户在登录服务器时就不必输入密码短语了。最后，我们深入讨论了加密。我们专注于对称加密，其中涉及密码短语；然后我们通过使用密钥对来进一步加强了加密。最后，我们看了如何编辑密钥的属性。
- en: In the next (and final) chapter, we will finish the book by focusing on shell
    scripting and SQL data management. It is crucial to understand some shell scripting
    and SQL management skills while working in a Linux environment.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章（也是最后一章）中，我们将通过专注于shell脚本和SQL数据管理来完成本书。在Linux环境中工作时，理解一些shell脚本和SQL管理技能是至关重要的。
- en: Questions
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which of the following commands can launch another command each time a rule
    is activated in `/etc/hosts.allow`?
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/etc/hosts.allow`中每次激活规则时，以下哪个命令可以启动另一个命令？
- en: A. ALL
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: A. 所有
- en: B. deny
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: B. 拒绝
- en: C. spawn
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: C. 生成
- en: D. log
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: D. 记录
- en: What does `su` stand for?
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`su`代表什么？'
- en: A. Superuser
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: A. 超级用户
- en: B. Substitute user
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: B. 切换用户
- en: C. Switch user
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: C. 切换用户
- en: D. None of the above
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: D. 以上都不是
- en: Which of the following users' password is requested when we use the `su` command
    without any options?
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们在没有任何选项的情况下使用`su`命令时，会要求哪个用户的密码？
- en: A. Root user
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: A. 根用户
- en: B. Current user
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: B. 当前用户
- en: C. SSH passphrase
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: C. SSH密码短语
- en: D. None of the above
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: D. 以上都不是
- en: Which of the following options allows for a command to be executed without logging
    in, using the `su` command?
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个选项允许使用`su`命令在不登录的情况下执行命令？
- en: A. `-a`
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: A. `-a`
- en: B. `-c`
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: B. `-c`
- en: C. `-d`
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: C. `-d`
- en: D. `-l`
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: D. `-l`
- en: Which of the following symbols has to be in front of a group when being declared
    in `/etc/sudoers`?
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/etc/sudoers`中声明组时，以下哪个符号必须在组前面？
- en: A. `-`
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: A. `-`
- en: B. `^`
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: B. `^`
- en: C. `-$`
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: C. `-$`
- en: D. `%`
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: D. ％
- en: Which of the following commands is used to create an SSH key pair?
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个命令用于创建SSH密钥对？
- en: A. `ssh-keygen`
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: A. `ssh-keygen`
- en: B. `ssh-key-gen`
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: B. `ssh-key-gen`
- en: C. `ssh-create-key`
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: C. `ssh-create-key`
- en: D. `ssh-key`
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: D. `ssh-key`
- en: Which of the following commands is used to add an identity to the SSH agent?
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个命令用于向SSH代理添加身份？
- en: A. `ssh-add`
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: A. `ssh-add`
- en: B. `ssh-agent`
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: B. `ssh-agent`
- en: C. `ssh.service`
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: C. `ssh.service`
- en: D. `ssh-daemon`
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: D. `ssh-daemon`
- en: Which of the following commands copies over the SSH public key securely?
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个命令可以安全地复制SSH公钥？
- en: A. `ssh-copy`
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: A. `ssh-copy`
- en: B. `ssh-copy-id`
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: B. `ssh-copy-id`
- en: C. `ssh-cp`
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: C. `ssh-cp`
- en: D. `ssh-id-copy`
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: D. `ssh-id-copy`
- en: Which of the following options is used to encrypt a file with the `gpg` command?
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个选项用于使用`gpg`命令加密文件？
- en: A. `-d`
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: A. `-d`
- en: B. `-e`
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: B. `-e`
- en: C. `-r`
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: C. `-r`
- en: D. `-a`
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: D. `-a`
- en: Which of the following options is used to provide the identity with the `gpg`
    command?
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个选项用于在`gpg`命令中提供身份？
- en: A. `-f`
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: A. `-f`
- en: B. `-e`
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: B. `-e`
- en: C. `-r`
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: C. `-r`
- en: D. `-a`
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: D. `-a`
- en: Further reading
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'The following site provides useful information about `sudo`: [https://www.computerhope.com/unix/sudo.htm](https://www.computerhope.com/unix/sudo.htm)'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下网站提供了有关`sudo`的有用信息：[https://www.computerhope.com/unix/sudo.htm](https://www.computerhope.com/unix/sudo.htm)
- en: The following site provides useful information about SSH: [https://www.ssh.com](https://www.ssh.com)
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下网站提供了有关SSH的有用信息：[https://www.ssh.com](https://www.ssh.com)
- en: The following site provides useful information about encryption: [http://linuxaria.com](http://linuxaria.com)
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下网站提供了有关加密的有用信息：[http://linuxaria.com](http://linuxaria.com)
