- en: Creating, Monitoring, Killing, and Restarting Processes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建、监视、终止和重新启动进程
- en: In the previous chapter, we looked in detail at file management. Then, we covered
    how to create a file at the shell. Furthermore, we saw the various permissions
    for a file, and we learned how to change them. Following this, we moved onto directories
    inside a Linux environment. Finally, we worked with pipes and redirects, within
    the context of the shell environment. Also, we took a look at another powerful
    command—the `tee` command.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们详细讨论了文件管理。然后，我们介绍了如何在shell中创建文件。此外，我们还看到了文件的各种权限，并学习了如何更改它们。接着，我们转向Linux环境中的目录。最后，我们在shell环境的上下文中使用了管道和重定向。此外，我们还了解了另一个强大的命令——`tee`命令。
- en: 'In this chapter, we are going to explore various techniques that can be used
    for managing various processes. First, we will investigate processes in real time
    using a very popular command—the `ps` command. This `ps` command was briefly covered
    in [Chapter 2](part0026.html#OPEK0-43f6e611c18f4c7abc8a9e3790317ae8), *Booting
    the System*, in the *The boot process – explained* section. In this chapter, we
    place more emphasis on the `ps` command, exploring more options that can be passed,
    thereby exposing vital information. After this, we venture into methods of managing
    daemons; first, we start off with the very popular `top` command. This method
    of handling processes is widely used throughout the Linux community. This is mainly
    because the `top` command gives real-time statistics for various daemons. In addition
    to this, we can also control daemon behavior. Following this, we move onto another
    common method for managing processes: the `service` command. Finally, we cover
    the latest method for daemon management; namely, the `systemctl` command. This
    was covered in [Chapter 2](part0026.html#OPEK0-43f6e611c18f4c7abc8a9e3790317ae8),
    *Booting the System*, in the *The boot process: Explained* section. In this chapter,
    we go into more depth on common practices used for daemon management, using the
    `systemctl` command.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨用于管理各种进程的各种技术。首先，我们将使用非常流行的命令——`ps`命令实时调查进程。这个`ps`命令在[第2章](part0026.html#OPEK0-43f6e611c18f4c7abc8a9e3790317ae8)中简要介绍了一下，*启动系统*，在*解释引导过程*部分。在本章中，我们更加强调`ps`命令，探索可以传递的更多选项，从而暴露重要信息。之后，我们进入管理守护进程的方法；首先，我们从非常流行的`top`命令开始。这种处理进程的方法在整个Linux社区广泛使用。这主要是因为`top`命令提供各种守护进程的实时统计信息。除此之外，我们还可以控制守护进程的行为。接着，我们转向另一种管理进程的常见方法：`service`命令。最后，我们介绍了管理守护进程的最新方法；即`systemctl`命令。这在[第2章](part0026.html#OPEK0-43f6e611c18f4c7abc8a9e3790317ae8)中简要介绍了，*启动系统*，在*解释引导过程*部分。在本章中，我们更深入地探讨了使用`systemctl`命令进行守护进程管理的常见做法。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: The `ps` command
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ps`命令'
- en: Viewing and managing processes using the `top` command
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`top`命令查看和管理进程
- en: Managing processes with the `service` command
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`service`命令管理进程
- en: Managing processes with the `systemctl` command
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`systemctl`命令管理进程
- en: The ps command
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ps命令
- en: The `ps` command, which stands for **Process Status**, is one of the most popular
    commands used in today's environment. It displays the current processes running
    within a system; when we work within a Linux environment, we often overlook the
    underlying processes that make it all possible. All the information that the `ps`
    command displays comes from a very popular directory; namely, the `/proc` filesystem.
    The `/proc` filesystem is not actually a real filesystem, per say; it is in fact
    a virtual filesystem. It's loaded upon boot time, and you will find the `/proc` filesystem
    in almost every Linux distribution available today. Let's dive into the `ps` command.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`ps`命令代表**进程状态**，是当今环境中最流行的命令之一。它显示系统中正在运行的当前进程；当我们在Linux环境中工作时，我们经常忽视使一切成为可能的底层进程。`ps`命令显示的所有信息都来自一个非常流行的目录；即`/proc`文件系统。`/proc`文件系统实际上并不是一个真正的文件系统；它实际上是一个虚拟文件系统。它在启动时加载，几乎可以在今天的每个Linux发行版中找到`/proc`文件系统。让我们深入了解`ps`命令。'
- en: 'To begin with, we can display any process that has started in the current shell:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们可以显示在当前shell中启动的任何进程：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Based on the preceding output, we have not started any other process in the
    current shell, except for the `ps` command itself and the Bash shell. We can also
    list all of the processes currently present within a system, using the `ps` command;
    we would pass the `-A` parameter:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的输出，我们在当前shell中没有启动任何其他进程，除了`ps`命令本身和Bash shell。我们还可以使用`ps`命令列出当前系统中的所有进程；我们将传递`-A`参数：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When we run the `ps` command with either `-A` or `-e` parameter, it will only
    print out the process IDs and the name of each process. But wait, we can expand
    this output even further. We can pass `-a` along with `-u`. This will print out
    processes for the current user who opened the Terminal:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用`-A`或`-e`参数运行`ps`命令时，它只会打印出每个进程的进程ID和名称。但是，我们可以进一步扩展这个输出。我们可以传递`-a`和`-u`。这将打印出当前用户在终端中打开的进程：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](img/00111.jpeg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00111.jpeg)'
- en: 'To see all processes owned by the current user in the system, we pass the `-x`
    option:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看系统中当前用户拥有的所有进程，我们传递`-x`选项：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We can also specify a user as part of the argument with `-u`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将用户作为参数的一部分指定为`-u`：
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We can also see all the users in addition to the path to the executable for
    each daemon; we pass `-aux` or `aux-`; this is the **Berkeley Software Distribution**
    (**BSD**) syntax. The BSD is another flavor of Unix. Following is an example of
    the Linux syntax:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以看到所有用户以及每个守护进程的可执行文件的路径；我们传递`-aux`或`aux-`；这是**伯克利软件发行**（**BSD**）语法。BSD是Unix的另一种风味。以下是Linux语法的示例：
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Awesome! Based on the preceding output, we can see various user accounts. Some
    of the accounts are actual system accounts, such as the `dbus` account. We can
    also specify a user account ID:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！根据前面的输出，我们可以看到各种用户帐户。一些帐户是实际的系统帐户，例如`dbus`帐户。我们还可以指定用户帐户ID：
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In addition to this, it is also possible to display processes that are owned
    by a particular group. Yes! It''s possible by passing either the group name or
    ID. If we''re passing the group name then we use `-g`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，还可以显示由特定组拥有的进程。是的！通过传递组名或ID来实现。如果我们传递组名，那么我们使用`-g`：
- en: '[PRE8]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To pass the group ID, we pass the `-G` option:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要传递组ID，我们传递`-G`选项：
- en: '[PRE9]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Great job! We can also search for a process by specifying the **process ID**
    (**PID**). We pass `-f` that will print a long listing along with the `-p` option,
    which expects a numerical value:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！我们还可以通过指定**进程ID**（**PID**）来搜索进程。我们传递`-f`，它将打印一个长列表，以及`-p`选项，它期望一个数值：
- en: '[PRE10]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Interestingly enough, we can even specify multiple processes on the same line;
    we separate the processes by a comma:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，我们甚至可以在同一行上指定多个进程；我们用逗号分隔进程：
- en: '[PRE11]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Great job! It is also possible to find a command by specifying the process
    ID by passing the `-o` option:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！还可以通过传递`-o`选项来查找命令指定的进程ID：
- en: '[PRE13]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Based on the preceding output, only the actual executable for the respective
    PID is displayed.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的输出，仅显示了相应PID的实际可执行文件。
- en: 'It is also possible to get memory and CPU information using the `ps` command;
    we pass the `-e` option along with the `-o` option. We then need to pass the column
    names that interest us. Here is how we accomplish this:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以使用`ps`命令获取内存和CPU信息；我们传递`-e`选项以及`-o`选项。然后，我们需要传递我们感兴趣的列名称。以下是我们如何完成这个任务：
- en: '[PRE14]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Awesome! Based on the preceding output, we've specified `pid,ppid,cmd,%mem,%cpu`.
    In addition to this, the `--sort` option was added. This looks for the processes
    that have used up most of the system RAM and displays those first starting from
    highest to lowest. In addition, we've added the `head` command; this will only
    display the top portion of the content.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！根据前面的输出，我们指定了`pid,ppid,cmd,%mem,%cpu`。除此之外，还添加了`--sort`选项。这将查找使用最多系统RAM的进程，并从最高到最低显示这些进程。此外，我们添加了`head`命令；这将只显示内容的顶部部分。
- en: 'We specified that we would only like to see the first 14 lines. But wait, the
    output from the `ps` command isn''t refreshed in real time; we can use yet another
    popular command to see the output refresh in real time instead of us having to
    rerun the command. We use the `watch` command to accomplish this task:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们指定只想看到前14行。但是，`ps`命令的输出不是实时刷新的；我们可以使用另一个流行的命令来查看输出实时刷新，而不是我们必须重新运行命令。我们使用`watch`命令来完成这个任务：
- en: '[PRE15]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The output of running the preceding command is as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 运行前面的命令的输出如下：
- en: '![](img/00112.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00112.jpeg)'
- en: 'Based on the preceding screenshot, we have sorted the output to view the processes
    that are taking up most of the CPU within the system. We can view the output of
    the `ps` command in a hierarchical view; we would add the `-f` and `--forest`
    options:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的截图，我们已经对输出进行了排序，以查看在系统中占用大部分CPU的进程。我们可以以分层视图查看`ps`命令的输出；我们将添加`-f`和`--forest`选项：
- en: '[PRE16]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The kill command
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 杀死命令
- en: 'The `kill` command is used for terminating processes. We can leverage the `ps`
    command, which we just covered, to identify a process, then call the `kill` command
    to end the process. Here is how we stop a process using the `kill` command:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`kill`命令用于终止进程。我们可以利用刚刚介绍的`ps`命令来识别进程，然后调用`kill`命令来结束进程。以下是我们如何使用`kill`命令停止进程的方法：'
- en: '[PRE17]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Awesome job! We used the `9` number, which means to send a `SIGKILL`. To see
    the various signals we can pass, we can use the `-l` option with the `kill` command:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们使用了`9`数字，这意味着发送`SIGKILL`。要查看我们可以传递的各种信号，我们可以使用`kill`命令的`-l`选项：
- en: '[PRE18]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'To stop a process using the signal name, we pass the `-s` option:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用信号名称停止进程，我们传递`-s`选项：
- en: '[PRE19]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Caution should be taken whenever stopping a process with the `SIGTERM` while
    calling the `kill` command.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用`kill`命令时，停止使用`SIGTERM`时应该小心。
- en: The pstree command
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pstree命令
- en: 'There is also another flavor of the `ps` command that can be used to view processes
    within a system—the `pstree` command. This will present all processes in a hierarchical
    layout. This is what it looks like:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一种`ps`命令的变体，可用于查看系统中的进程——`pstree`命令。这将以分层布局呈现所有进程。它看起来是这样的：
- en: '![](img/00113.jpeg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00113.jpeg)'
- en: 'Based on the preceding screenshot, some processes are parent processes: they
    have child processes. We can also highlight a specific process by passing the
    `-h` option:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的截图，一些进程是父进程：它们有子进程。我们还可以通过传递`-h`选项来突出显示特定进程：
- en: '[PRE20]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We can also display only the processes specific to a user; we pass `username`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以仅显示特定于用户的进程；我们传递`用户名`：
- en: '![](img/00114.jpeg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00114.jpeg)'
- en: Based on the preceding screenshot, we can see the user parent process is `gdm-x-session`;
    this then has child processes, starting with `Xorg` and moving down the tree.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的截图，我们可以看到用户父进程是`gdm-x-session`；然后有子进程，从`Xorg`开始，向下移动树。
- en: The pgrep command
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pgrep命令
- en: 'The **Process Grep**, commonly known as `pgrep`, is another popular method
    used for finding process IDs at the shell. If we know the process name, then we
    can specify it with the `pgrep` command:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**进程Grep**，通常称为`pgrep`，是另一种在shell中查找进程ID的流行方法。如果我们知道进程名称，那么我们可以使用`pgrep`命令指定它：'
- en: '[PRE21]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Based on the preceding command, we can see the PID for `rsyslogd`. We can also
    find processes for a particular user. To do this, we pass the `-u` option:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的命令，我们可以看到`rsyslogd`的PID。我们还可以找到特定用户的进程。为此，我们传递`-u`选项：
- en: '[PRE22]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Awesome job!
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！
- en: The pkill command
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pkill命令
- en: 'The `pkill` command is another known method used for terminating processes.
    It enables us to use the process name when terminating a given process. In its
    simplest form, it is as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`pkill`命令是另一种用于终止进程的已知方法。它使我们能够在终止给定进程时使用进程名称。在其最简单的形式中，它如下：'
- en: '[PRE23]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Awesome job! Based on the preceding code output, we can see the effectiveness
    of the `pkill` command.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 厉害了！根据前面的代码输出，我们可以看到`pkill`命令的有效性。
- en: Viewing and managing processes using the top command
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用top命令查看和管理进程
- en: 'The `top` command, which means *table of processes*, is similar in nature to
    Windows task manager. You will find a wide variety of Linux distributions that
    support the `top` command. The `top` command is essentially used to derive the
    system''s CPU and memory utilization. The output is structured by creating a list
    of running processes selected by user-specified criteria; the output is in real
    time. The PID for each process is listed in the first column. Let''s fire it up:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`top`命令，意思是*进程表*，在性质上类似于Windows任务管理器。您会发现许多Linux发行版支持`top`命令。`top`命令主要用于获取系统的CPU和内存利用率。输出是通过创建一个由用户指定标准选择的运行进程列表来构造的；输出是实时的。每个进程的PID都列在第一列中。让我们开始吧：'
- en: '[PRE24]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'To the far right, there is a `COMMAND` column; this shows the executable. We
    can filter which user we would like to be displayed and their corresponding processes;
    we pass the `-u` option with `top`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在最右边，有一个`COMMAND`列；这显示了可执行文件。我们可以过滤我们想要显示的用户及其相应的进程；我们在`top`中使用`-u`选项：
- en: '[PRE26]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Based on the preceding output, only the user `philip` is displayed with the
    processes. We can view the absolute path for all processes by pressing *C* inside
    the `top` command. Here is a screenshot of what you get when *C* is pressed:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的输出，只显示了用户`philip`的进程。我们可以通过在`top`命令中按*C*来查看所有进程的绝对路径。这是按下*C*时得到的截图：
- en: '![](img/00115.jpeg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00115.jpeg)'
- en: 'Awesome job! Now we can see the location for each process. We can also change
    how often the output is refreshed; the default is every three seconds. We press
    the *D* key from within the `top` command:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在我们可以看到每个进程的位置。我们还可以更改输出的刷新频率；默认值是每三秒。我们从`top`命令中按下*D*键：
- en: '![](img/00116.jpeg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00116.jpeg)'
- en: 'Based on the preceding screenshot, when the *D* key is pressed, a new line
    appears: `Change delay from 3.0 to`. This prompts us to specify a number. I''ll
    type `2` here so the updates will refresh every two seconds. Now, when I press
    *D *once again, we will notice the difference in the prompt:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的屏幕截图，当按下*D*键时，会出现一行新的内容：`Change delay from 3.0 to`。这提示我们要指定一个数字。我在这里输入`2`，这样更新将每两秒刷新一次。现在，当我再次按下*D*键时，我们会注意到提示中的差异：
- en: '![](img/00117.jpeg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00117.jpeg)'
- en: 'Great job! To see help with `top`, we can press *H*:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！要查看`top`的帮助，我们可以按*H*：
- en: '![](img/00118.jpeg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00118.jpeg)'
- en: 'We can change how the memory is displayed inside in the `top` utility; depending
    on the current memory output, the display will toggle when we press *M*:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以更改`top`实用程序中内存的显示方式；根据当前的内存输出，当我们按下*M*时，显示将切换：
- en: '[PRE27]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Based on the preceding screenshot, the section for the memory is hidden. When
    we press the *M* key once again, this will change:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的屏幕截图，内存部分被隐藏了。当我们再次按下*M*键时，这将改变：
- en: '![](img/00119.jpeg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00119.jpeg)'
- en: 'Awesome! If we press the *M* key once again, we will see a sort of graphical
    design:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！如果我们再次按下*M*键，我们会看到一种图形设计：
- en: '![](img/00120.jpeg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00120.jpeg)'
- en: 'Great job! Now we have the nice bars indicating the memory usage for both RAM
    and swap. Similarly, we can change the display of the output by CPU; to do so,
    we press *T*:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！现在我们有漂亮的条形图，指示了RAM和交换的内存使用情况。同样，我们可以通过CPU更改输出的显示；为此，我们按*T*：
- en: '[PRE28]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Awesome! When we press *T,* it will then turn the bars into a shaded output:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！当我们按*T*时，它会将条形图变成阴影输出：
- en: '![](img/00121.gif)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00121.gif)'
- en: 'In addition to this, the processes can also be displayed in a hierarchical
    output; we press *Shift* + *V*:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，进程还可以以分层输出的方式显示；我们按*Shift* + *V*：
- en: '![](img/00122.jpeg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00122.jpeg)'
- en: 'To turn off the forest view, we simply toggle *Shift* + *V* once again:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要关闭层次视图，我们只需再次切换*Shift* + *V*：
- en: '![](img/00123.jpeg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00123.jpeg)'
- en: 'We can also stop a process using the `top` command; we press *K*, which is
    for killing processes inside the `top` command:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`top`命令停止一个进程；我们按*K*，这是在`top`命令中杀死进程的快捷键：
- en: '![](img/00124.jpeg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00124.jpeg)'
- en: 'Based on the preceding command, a new line appears: `PID to signal/kill [default
    pid = 1710]`, and we need to specify a process ID:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 基于前面的命令，会出现一行新的内容：`PID to signal/kill [default pid = 1710]`，我们需要指定一个进程ID：
- en: '[PRE29]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Now we need to specify the signal to send to the process; the default is `15/sigterm`.
    We'll accept the default; this will terminate the process without us having to
    exit the `top` utility.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要指定要发送给进程的信号；默认是`15/sigterm`。我们将接受默认值；这将在不必退出`top`实用程序的情况下终止进程。
- en: Managing process(es) with the service command
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`service`命令管理进程
- en: 'The `service` command initially was used to run SysVinit scripts on early Linux
    distributions prior to `systemd`. Depending on the what you''re trying to accomplish,
    the method you use to start, stop, or restart a service will depend upon whether
    your distribution uses `systemd` or `init`. Most Linux engineers prefer to use
    the `service` command as opposed to the newer methods of handling processes in
    system environments. Thus in most newer distributions the `service` command is
    supported. The syntax for the `service` command is:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`service`命令最初用于在`systemd`之前的早期Linux发行版上运行SysVinit脚本。根据您要完成的任务，您用于启动、停止或重新启动服务的方法将取决于您的发行版是使用`systemd`还是`init`。大多数Linux工程师更喜欢使用`service`命令而不是在系统环境中处理进程的较新方法。因此，在大多数较新的发行版中支持`service`命令。`service`命令的语法是：'
- en: '[PRE30]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'To view all services on a system running SysV scripts, we''ll use the CentOS
    6.5 system:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看运行SysV脚本的系统上的所有服务，我们将使用CentOS 6.5系统：
- en: '[PRE31]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The scripts that the `service` command reads start with `rc`. We can quickly
    view all related scripts:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`service`命令读取的脚本以`rc`开头。我们可以快速查看所有相关脚本：'
- en: '[PRE32]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'To control the status of a process, we can do this:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 要控制进程的状态，我们可以这样做：
- en: '[PRE33]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'From the preceding command, this particular process is currently running. We
    can change this; let''s say we want to stop the `crond` process. We simply replace
    `status` with `stop`:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的命令，这个特定进程目前正在运行。我们可以更改这一点；假设我们想要停止`crond`进程。我们只需用`stop`替换`status`：
- en: '[PRE34]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Based on the preceding output, we run into a roadblock; this can easily be
    remedied by becoming the root user:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的输出，我们遇到了一个障碍；这可以很容易地通过成为root用户来解决：
- en: '[PRE35]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Awesome job! Now we can rerun the `service` command; this time using the `status`
    option:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在我们可以重新运行`service`命令；这次使用`status`选项：
- en: '[PRE36]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'And there we have it. The service has been stopped. To start backing up this
    process, we simply replace `stop` with `start`:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们完成了。服务已经停止。要开始备份这个进程，我们只需用`start`替换`stop`：
- en: '[PRE37]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Now let''s try to start the process once again:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们再次尝试启动这个进程：
- en: '[PRE38]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Great job! If, for some reason, we have changes to the process and need to
    restart the process, then we can do it in a number of ways. We can stop the process
    and then start it again:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！如果出于某种原因，我们对进程进行了更改并需要重新启动进程，那么我们可以通过多种方式来做到。我们可以停止进程，然后再次启动它：
- en: '[PRE39]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Also, we can use the `restart` option:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以使用`restart`选项：
- en: '[PRE40]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Lastly, we can use the `reload` option; this last option will reread the configuration
    files for any changes that have been made:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以使用`reload`选项；这个选项将重新读取已经进行的任何更改的配置文件：
- en: '[PRE41]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Awesome job!
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！
- en: Managing process(es) with the systemctl command
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用systemctl命令管理进程
- en: 'On most new distributions that use system, we would manage processes using
    the `systemctl` command. The Linux developers have also left support for the `service`
    command; if we try to terminate a process using the `service` command, then we
    will see that it is actually going to redirect our request to the `systemctl`
    command. Let''s try this:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数使用system的新发行版上，我们将使用`systemctl`命令来管理进程。Linux开发人员也留下了对`service`命令的支持；如果我们尝试使用`service`命令终止一个进程，那么我们会发现它实际上会将我们的请求重定向到`systemctl`命令。让我们试试看：
- en: '[PRE42]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Awesome! Based on the output, we can see that the `service` command is in fact
    being redirected:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！根据输出，我们可以看到`service`命令实际上正在被重定向：
- en: '[PRE43]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Now let''s try using the newer approach for managing processes; we''ll use
    the `systemctl` command. The format is as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们尝试使用管理进程的新方法；我们将使用`systemctl`命令。格式如下：
- en: '[PRE44]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'We can use this at the shell:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在shell中使用这个：
- en: '[PRE45]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'To start a process using `systemctl`, we pass the `start` option:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`systemctl`启动一个进程，我们传递`start`选项：
- en: '[PRE46]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'We can check on the status for a process by passing the `status` option:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过传递`status`选项来检查进程的状态：
- en: '[PRE47]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'You will notice that the output from the `systemctl` command is much more intuitive
    than the older service command in early Linux distributions. We can also stop
    a process using the `systemctl` command; we pass the `stop` option:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到，与早期Linux发行版中的旧service命令相比，`systemctl`命令的输出要直观得多。我们也可以使用`systemctl`命令停止一个进程；我们传递`stop`选项：
- en: '[PRE48]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Also, we can restart or reload a process:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以重新启动或重新加载一个进程：
- en: '[PRE49]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Based on the preceding output, when we passed the `restart` option, it simply
    started the process. The processes that `systemctl` handles are considered as
    units when using the `systemctl` command. We can view the units by passing `list-units`
    files:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的输出，当我们传递`restart`选项时，它只是启动了进程。使用`systemctl`命令处理的进程在使用`systemctl`命令时被视为单元。我们可以通过传递`list-units`文件来查看这些单元：
- en: '[PRE50]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The various processes are stored in `/usr/lib/systemd/system`:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 各种进程存储在`/usr/lib/systemd/system`中：
- en: '[PRE51]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: As you can see, there are a wide variety of processes that are managed using
    the `systemctl` command.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，有各种各样的进程是使用`systemctl`命令进行管理的。
- en: Summary
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we dealt with various aspects relating to handling processes
    from within the shell. We started off with the `ps` command. The methods to expose
    processes currently running in the shell were shown. Next, we saw how to print
    all processes running on the system. This was followed up by exposing the commands
    used by each process. We then focused on filtering the output for a particular
    user, also by the user ID. After that, we touched on filtering for a process,
    also filtering by the process ID. In addition to this, we tackled filtering by
    groups. This was followed by changing the display into a forest layout.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们处理了与在shell中处理进程相关的各个方面。我们从`ps`命令开始。展示了在shell中显示当前运行的进程的方法。接下来，我们看到了如何打印系统上运行的所有进程。然后是暴露每个进程使用的命令。然后，我们专注于过滤特定用户的输出，也可以通过用户ID进行过滤。之后，我们触及了对进程进行过滤，也可以通过进程ID进行过滤。除此之外，我们还处理了按组进行过滤。然后，我们将显示更改为树状布局。
- en: Furthermore, we saw how to pull memory and CPU information; we called on the
    `watch` command to update the results in real time. Finally, we saw how to terminate
    a process using the `ps` command in combination with the `kill` command. Next,
    we touched on the `pstree` command; this presents the processes in a hierarchical
    format. We even manipulated its output to narrow in on a specific process; in
    addition, we also checked for a specific user's processes.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们看到了如何获取内存和CPU信息；我们调用`watch`命令实时更新结果。最后，我们看到了如何使用`ps`命令结合`kill`命令终止一个进程。接下来，我们触及了`pstree`命令；这以分层格式呈现进程。我们甚至操纵了它的输出来缩小到特定的进程；此外，我们还检查了特定用户的进程。
- en: Following this, we touched on the `pgrep` command, also known as process grep.
    This is another method for finding a process ID; either a process name can be
    supplied, or we can specify the user whose processes we would like to be displayed.
    Following this, we touched on the `pkill` command; as the names suggests, it is
    used to terminate a process. We saw this in the demo. After that, we worked with
    the `top` command, using various techniques for manipulating the output of the
    results, and explored how the to terminate a process while inside the `top` command.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，我们触及了`pgrep`命令，也称为进程grep。这是另一种查找进程ID的方法；可以提供进程名称，也可以指定要显示的用户。在此之后，我们触及了`pkill`命令；顾名思义，它用于终止一个进程。我们在演示中看到了这一点。之后，我们使用`top`命令，使用各种技术来操作结果的输出，并探讨了如何在`top`命令中终止一个进程。
- en: Next, we worked with the `service` command; we talked about where we usually
    find it, and looked at its support in newer Linux distributions. Various demos
    were done using the `service` command. Finally, we worked with the `systemctl`
    command; this is by far the best method for managing processes in newer Linux
    distributions that use systems, as opposed to older Linux distributions that use
    SysVinit scripts.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用了`service`命令；我们谈到了我们通常在哪里找到它，并查看了它在较新的Linux发行版中的支持。使用`service`命令进行了各种演示。最后，我们使用了`systemctl`命令；这是迄今为止在使用系统的较新Linux发行版中管理进程的最佳方法，而不是使用SysVinit脚本的较旧的Linux发行版。
- en: In the next chapter, we go deeper into managing processes. There are times when
    we want to give preference to one process over another. This is the focus of the
    next chapter. This will not only enable you to manage your processes on your system
    but it will also give you an edge over others, thus taking you one step closer
    to certification. I hope to see you there.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨管理进程。有时我们希望优先考虑一个进程而不是另一个。这是下一章的重点。这不仅能让您管理系统上的进程，还能让您比其他人更有优势，从而让您更接近认证。希望能在那里见到您。
- en: Questions
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which command prints processes that have been started in a new Terminal?
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个命令打印在新终端中启动的进程？
- en: A. `pkill`
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: A. `pkill`
- en: B. `chmod`
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: B. `chmod`
- en: C. `ps`
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: C. `ps`
- en: D. `chage`
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: D. `chage`
- en: Which option with the `ps` command prints all processes running in a system?
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ps`命令的哪个选项可以用于打印系统中运行的所有进程？'
- en: A. `-B`
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: A. `-B`
- en: B. `-b`
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: B. `-b`
- en: C. `-e`
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: C. `-e`
- en: D. `-x`
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: D. `-x`
- en: Which option with the `ps` command can be used to print the output in a hierarchical
    layout?
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ps`命令的哪个选项可以用于以分层布局打印输出？'
- en: A. `-forest`
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: A. `-forest`
- en: B. `--forest`
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: B. `--forest`
- en: C. `--tree`
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: C. `--tree`
- en: D. `-tree`
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: D. `-tree`
- en: Which option with the `ps` command is used to specify a user process?
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ps`命令的哪个选项用于指定用户进程？'
- en: A. `-x`
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: A. `-x`
- en: B. `-a`
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: B. `-a`
- en: C. `-u`
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: C. `-u`
- en: D. `-d`
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: D. `-d`
- en: Which option with the `kill` command is used to display the various SIG terms?
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`kill`命令的哪个选项用于显示各种SIG术语？'
- en: A. `-`
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: A. `-`
- en: B. `-l`
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: B. `-l`
- en: C. `-i`
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: C. `-i`
- en: D. `-d`
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: D. `-d`
- en: Which number is equivalent to `SIGKILL` when using the `kill` command?
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`kill`命令时，哪个数字等同于`SIGKILL`？
- en: A. `8`
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: A. `8`
- en: B. `10`
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: B. `10`
- en: C. `7`
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: C. `7`
- en: D. `9`
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: D. `9`
- en: Which option with the `top` command can specify the user?
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`top`命令的哪个选项可以指定用户？'
- en: A. `-u`
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: A. `-u`
- en: B. `-p`
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: B. `-p`
- en: C. `-v`
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: C. `-v`
- en: D. `-a`
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: D. `-a`
- en: Which letter is used to set how often the results are refreshed inside the `top`
    utility?
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`top`实用程序中用哪个字母设置刷新结果的频率？'
- en: A. `-a`
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: A. `-a`
- en: B. `b`
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: B. `b`
- en: C. `d`
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: C. `d`
- en: D. `e`
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: D. `e`
- en: Which option can be used to reread a process configuration with the `service`
    command?
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个选项可以用于使用`service`命令重新读取进程配置？
- en: A. `reboot`
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: A. `reboot`
- en: B. `stop`
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: B. `stop`
- en: C. `status`
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: C. `status`
- en: D. `reload`
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: D. `reload`
- en: In which directory are the units `/processes` located in a system that is managed
    by the `systemctl` command?
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在由`systemctl`命令管理的系统中，单位`/processes`位于哪个目录？
- en: A. `/var/lib/systemd`
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: A. `/var/lib/systemd`
- en: B. `/usr/lib/systemd/system`
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: B. `/usr/lib/systemd/system`
- en: C. `/usr/systemd/system`
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: C. `/usr/systemd/system`
- en: D. `/usr/system/systemd`
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: D. `/usr/system/systemd`
- en: Further reading
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'For more info about processes, see: [https://www.tutorialspoint.com.](https://www.tutorialspoint.com)'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关进程的更多信息，请参阅：[https://www.tutorialspoint.com.](https://www.tutorialspoint.com)
- en: 'This website gives you a lot of useful tips for processes: [https://www.linux.com.](https://www.linux.com)'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个网站为您提供了许多有关进程的有用提示：[https://www.linux.com.](https://www.linux.com)
- en: This last link gives you information in general that relates to various commands.
    You can post your questions there, and other community members will respond: [https://www.linuxquestions.org.](https://www.linuxquestions.org)
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个最后的链接为您提供了与各种命令相关的一般信息。您可以在那里发布您的问题，其他社区成员将会回答：[https://www.linuxquestions.org.](https://www.linuxquestions.org)
