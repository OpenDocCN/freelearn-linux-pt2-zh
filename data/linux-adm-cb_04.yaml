- en: Services and Daemons
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务和守护进程
- en: 'The following topics will be covered in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Determining running services
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定运行的服务
- en: Listing installed services
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出已安装的服务
- en: Starting and stopping services
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动和停止服务
- en: Changing which services start and stop at boot
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改启动和停止的服务
- en: Common services you might expect to see
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可能期望看到的常见服务
- en: Understanding service unit files
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解服务单元文件
- en: Customizing systemd unit files
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义systemd单元文件
- en: Testing running services
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试运行服务
- en: Writing a basic unit file
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写基本单元文件
- en: Working with systemd timers (and cron)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用systemd定时器（和cron）
- en: Other `init` systems
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他`init`系统
- en: Introduction
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: systemd (stylized lowercase) is a hydra.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: systemd（小写）是一个九头蛇。
- en: In the old world, we had one piece of software for each little thing we wanted
    to do on a system. Time was handled by NTP, devices were handled by `udev`, and
    init was generally handled by `SysV Init`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在旧世界中，我们为系统上想要做的每件小事都有一个软件。时间由NTP处理，设备由`udev`处理，而init通常由`SysV Init`处理。
- en: 'In the new world, we have systemd:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在新世界中，我们有systemd：
- en: System clock management can be handled by `systemd-timesyncd`.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统时钟管理可以由`systemd-timesyncd`处理。
- en: '`udev` was merged into the systemd code base, forming `systemd-udevd`.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`udev`已合并到systemd代码库中，形成`systemd-udevd`。'
- en: Process initialization is handled by the core of systemd itself.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进程初始化由systemd核心本身处理。
- en: The list goes on.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 列表还在继续。
- en: Generally, systemd has been adopting other projects, or writing the same functionality
    into implementations of their own (such as systemd-timesyncd which is an NTP replacement.) However,
    the systemd suite is also modular, meaning that distributions can broadly choose
    which bits to adopt and use.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，systemd一直在采用其他项目，或者将相同的功能写入自己的实现中（例如systemd-timesyncd，它是一个NTP替代品）。然而，systemd套件也是模块化的，这意味着发行版可以广泛选择要采用和使用的部分。
- en: For us, the important job that systemd does is replace the traditional init
    system on distributions (CentOS, Debian, and Ubuntu all use systemd now). This
    means that first and foremost, systemd manages services and daemons on your box.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对我们来说，systemd的重要工作是替换发行版上的传统init系统（CentOS，Debian和Ubuntu现在都使用systemd）。这意味着首先，systemd管理着您的计算机上的服务和守护进程。
- en: systemd is the first process, meaning it will often be assigned the first **process
    ID** (**PID**). All other processes have systemd as a parent.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: systemd是第一个进程，这意味着它经常被分配为第一个**进程ID**（**PID**）。所有其他进程都将systemd作为父进程。
- en: In this chapter, we're going to work with the init component of systemd, learn
    about unit files, and determining the running state of our system.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用systemd的init组件，了解单元文件，并确定系统的运行状态。
- en: 'Previously, this chapter could have been much longer. Prior to systemd dominating
    each and every mainstream distribution, fragmentation existed. Canonical wrote
    something called Upstart for Ubuntu (which was temporarily adopted by Red Hat),
    and more traditional distributions had a hard time letting go of the `SysV` init
    style of daemon management. Even today, you''ll find systems that use older implementations
    in the wild:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在systemd主导每个主流发行版之前，这一章可能会更长。Canonical为Ubuntu编写了一个称为Upstart的东西（它曾暂时被Red Hat采用），而更传统的发行版则很难放弃`SysV`初始化风格的守护程序管理。即使在今天，您仍会发现在野外使用旧实现的系统：
- en: CentOS adopted systemd with version 7
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CentOS在7版本中采用了systemd
- en: Ubuntu adopted systemd with 15.04
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ubuntu在15.04中采用了systemd
- en: Debian adopted systemd with Jessie (8)
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Debian在Jessie（8）中采用了systemd
- en: If Canonical wrote Upstart, you might be wondering why they went with systemd
    in the end. This was mainly due to Debian adopting systemd, after something of
    a civil war internally, and Ubuntu conceding that they would have an easier time
    of it if they remained aligned with their upstream distribution. The war was not
    without bitter battles on both sides and some ripples can still be felt.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Canonical编写了Upstart，您可能会想知道他们最终为什么选择了systemd。这主要是因为Debian采用了systemd，经过内部的一场内战，Ubuntu承认如果他们继续与上游发行版保持一致，他们将更容易些。这场战争并不是没有双方激烈的战斗，一些涟漪仍然可以感受到。
- en: Technical requirements
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For this chapter, a different `Vagrantfile` is needed.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，需要一个不同的`Vagrantfile`。
- en: 'Feel free to use the following example if required—be sure to `destroy` any
    previous boxes to free up resources:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如有需要，可以使用以下示例-确保`destroy`之前的任何箱子以释放资源：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Determining running services
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确定运行的服务
- en: Whenever you get to a box, especially one you're unsure of (that's been tucked
    in the back of a cupboard somewhere blinking to itself), it's a good idea to find
    out what software is running on it.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 每当您到达一个箱子，特别是您不确定的箱子（被放在柜子后面自言自语的箱子），弄清楚上面运行的软件是个好主意。
- en: On modern systems (2013-ish plus), this is accomplished with the `systemctl`
    command.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代系统（2013年以后），可以使用`systemctl`命令来实现这一点。
- en: '`systemctl` is the main control mechanism for any systemd system—literally
    "system control". Think of it as the human frontend to your initialization software
    (the first software to run on your box, which manages all others), allowing you
    to modify and investigate the running state of your computer.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`systemctl`是任何systemd系统的主要控制机制-字面上是“系统控制”。将其视为初始化软件的人类前端（在您的计算机上运行的第一个软件，管理所有其他软件），允许您修改和调查计算机的运行状态。'
- en: Not only that, in the Unix/Linux world everything is a file; your network connections
    are a file, your programs are a file, your devices are a file, and because of
    this you can control everything, just by modifying files.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅如此，在Unix/Linux世界中，一切都是文件；您的网络连接是一个文件，您的程序是一个文件，您的设备是一个文件，因此您可以通过修改文件来控制一切。
- en: But that gets tedious fast.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 但这很快就变得乏味了。
- en: '`systemctl` saves you the headache of manually shuffling files around your
    system by wrapping functionality in simple commands and printing the results in
    a human-readable way.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`systemctl`通过简单的命令包装功能并以人类可读的方式打印结果，为您节省了手动在系统中移动文件的麻烦。'
- en: How to do it...
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'At the command line, type the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令行上，键入以下内容：
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You should be dropped into a list of systemd units; this is a good initial
    overview of every unit systemd is aware of, but it''s very noisy (as seen in the
    following screenshot) and what we specifically want to see are daemons (because
    of our gothic streak):'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会看到一个systemd单元的列表；这是systemd知道的每个单元的一个很好的初始概述，但它非常嘈杂（如下面的屏幕截图所示），我们特别想要看到的是守护进程（因为我们有一种哥特风格）：
- en: '![](img/73ec54ca-a25c-4b4e-bc26-fc98b7eb631b.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/73ec54ca-a25c-4b4e-bc26-fc98b7eb631b.png)'
- en: Services and daemons are somewhat interchangeable in Linux land; for example,
    systemd refers to daemons as `service` files. This doesn't stop some people from
    getting passionately angry about "proper usage".
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux领域，服务和守护进程有些可以互换；例如，systemd将守护进程称为`service`文件。这并不能阻止一些人对“正确使用”感到愤怒。
- en: 'Try the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试以下命令：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You should be given a list of services and their statuses.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会得到一个服务及其状态的列表。
- en: 'This view is better, but it also shows failed and exited services, for example,
    on our Vagrant instance, we should see the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这个视图更好，但它也显示了失败和退出的服务，例如，在我们的Vagrant实例上，我们应该看到以下内容：
- en: '![](img/62d80a21-c36c-4f42-8e65-4f13f3ec1c1f.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/62d80a21-c36c-4f42-8e65-4f13f3ec1c1f.png)'
- en: 'If I want to exclude these, I can use the following command:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我想排除这些，我可以使用以下命令：
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now we get a much more condensed list, with 17 items in total:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们得到了一个更加简洁的列表，总共有17项：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can get rid of the helpful-but-noisy header and footer notes with the `--no-legend`
    option to `systemctl`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`--no-legend`选项来消除`systemctl`的有用但嘈杂的页眉和页脚注释。
- en: How it works...
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this section, we're using the `systemctl` command to query systemd.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们使用`systemctl`命令来查询systemd。
- en: We'll get gradually more granular with our requests, until we've eventually
    built a query that shows us only what we want to see, that being services that
    are running right-this-second.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将逐渐更加细化我们的请求，直到最终构建出一个查询，只显示我们想要看到的内容，即正在运行的服务。
- en: 'There''s an argument to be made for using `pipes` and `grep` to accomplish
    what you want and, depending on your preference, you may find one of these two
    commands neater than the other, though they accomplish roughly the same thing:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 有人认为使用`pipes`和`grep`来实现你想要的结果是有道理的，根据你的偏好，你可能会发现这两个命令中的一个比另一个更整洁，尽管它们实现的功能大致相同：
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the previous, we're first printing the default "all" list from `systemctl`,
    then we're passing it through `grep` a couple of times to filter what we want,
    and finally we're displaying it in a mostly-readable fashion with a column.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面，我们首先从`systemctl`打印默认的“all”列表，然后我们通过`grep`几次来过滤我们想要的内容，最后我们以列的形式显示出来，这样基本上是可读的。
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, we're using one command to get a slightly prettier output than the previous,
    and we're only using one command to do it.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用一个命令来获得比以前更漂亮的输出，并且我们只使用一个命令来完成它。
- en: There's more...
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'As with services that''re loaded and running, you may be interested in services
    that have loaded, done whatever job they were intended for, and then exited:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 与已加载和运行的服务一样，您可能对已加载、完成其预期工作然后退出的服务感兴趣：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Or perhaps you''re interested in services that have failed? Try the following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你可能对失败的服务感兴趣？尝试以下命令：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Lastly, systemd will use a pager by default to display results, which while
    human-friendly, isn't great for scripts. To simply print the output of your command
    to `stdout`, add `--no-pager` to your command.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，systemd默认会使用分页器显示结果，虽然对人类友好，但对脚本来说并不理想。要简单地将命令的输出打印到`stdout`，请在您的命令中添加`--no-pager`。
- en: See also
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Typically, querying the init system is the best way to determine what services
    are running on a box, though if you're running something outside of init, such
    as a background task started by `cron`, you might have better look with `ps` or
    `top`, which we'll cover later.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，查询init系统是确定系统上运行哪些服务的最佳方法，尽管如果你在init之外运行某些东西，比如由`cron`启动的后台任务，你可能会用`ps`或`top`更好，我们稍后会介绍。
- en: Listing installed services
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出已安装的服务
- en: In this section, we're going to look at how to list services that are installed,
    but will never run on your host, generally because they're not enabled to do so.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看看如何列出已安装但永远不会在主机上运行的服务，通常是因为它们没有被启用。
- en: Getting ready
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Connect to your `centos1` VM.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到您的`centos1` VM。
- en: '[PRE9]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How to do it...
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Run the following as your user:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 以您的用户身份运行以下命令：
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: By default, you'll be dropped into a typically long list of services. A lot
    of these will be listed as `static`, some will be `enabled`, and others will be
    `disabled`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，您将会看到一个通常很长的服务列表。其中很多将被列为`static`，一些将被列为`enabled`，其他将被列为`disabled`。
- en: As far as systemd is concerned, this is a list of all services it knows about
    on your system.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 就systemd而言，这是系统上所有它知道的服务的列表。
- en: How it works...
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: We are again querying systemd using `systemctl`, only this time instead of printing
    running services, we're getting everything that the init system is aware of.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次使用`systemctl`查询systemd，只是这一次不是打印运行中的服务，而是获取init系统知道的所有内容。
- en: Service files, and indeed all other types of unit file, generally exist in `/usr/lib/systemd/system`.
    From this location, files are symlinked into the `runlevel` directories at `/etc/systemd/system/`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 服务文件，实际上所有其他类型的单元文件，通常存在于`/usr/lib/systemd/system`。从这个位置，文件被符号链接到`/etc/systemd/system`中的`runlevel`目录中。
- en: 'As seen in the following, we''re going to `ls` this directory:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示，我们将`ls`这个目录：
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note we have a few `targets`, which are basically the different runlevels of
    a system; most of the day-to-day services you'll interact with live in `multi-user.target.wants`,
    which are basically the services required for a multi-user session (the typical
    mode of operation).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们有一些`targets`，它们基本上是系统的不同运行级别；您将与之交互的大多数日常服务都位于`multi-user.target.wants`中，这基本上是多用户会话所需的服务（典型的操作模式）。
- en: 'Running `ls` again in this sub-directory reveals the symlinks mentioned earlier
    and their location on disk:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个子目录中再次运行`ls`，可以看到之前提到的符号链接及其在磁盘上的位置：
- en: '[PRE12]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: These services are all `enabled` to start in a multi-user session.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这些服务都是在多用户会话中`启用`启动的。
- en: There's more...
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The concept of `enabled` and `disabled` is relatively easy to understand, those
    states being that the service will either try to run or it won't.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: “启用”和“禁用”的概念相对容易理解，这些状态是服务要么尝试运行要么不尝试运行。
- en: '`static` is something different; this is the terminology used when a unit file
    exists, isn''t enabled, but has no ability to become enabled, owing to a missing
    `[Install]` section of its unit file.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`静态`是另一回事；当一个单元文件存在但未启用时，这是一个使用术语，由于其单元文件的缺少`[Install]`部分，它没有能力变得启用。'
- en: 'We can list these services with the following line:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下行列出这些服务：
- en: '[PRE13]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Taking a service at random (`sshd-keygen`), we can have a look at its service
    file like so:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 随机选择一个服务（`sshd-keygen`），我们可以查看其服务文件如下：
- en: '[PRE14]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Using systemctl's `cat` option is great, as it also shows you the location of
    the unit file in question.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 使用systemctl的`cat`选项很好，因为它还会显示您所询问的单元文件的位置。
- en: 'We get the following:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下内容：
- en: '[PRE15]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: From this file, we can see it has a `PartOf` definition, suggesting it's run
    as part of the `sshd` service.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个文件中，我们可以看到它有一个`PartOf`定义，表明它作为`sshd`服务的一部分运行。
- en: 'Taking a look at that service (again using systemctl `cat`) reveals the following:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 再次查看该服务（再次使用systemctl `cat`）会发现以下内容：
- en: '[PRE16]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We can see the `Wants` section here, suggesting `sshd-keygen` is run when `sshd`
    starts.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们可以看到`Wants`部分，表明`sshd-keygen`在`sshd`启动时运行。
- en: This explains why it doesn't have to be enabled on its own.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这就解释了为什么它不必自行启用。
- en: See also
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: As with most components on a Linux system, the `systemctl` command has a man
    page.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 与Linux系统上的大多数组件一样，`systemctl`命令有一个man页面。
- en: In this man page, you'll find a table titled `is-enabled output` where you can
    learn more about the different terminology printed with your status commands.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个man页面中，您会找到一个名为`is-enabled output`的表，您可以在其中了解有关您的状态命令打印的不同术语的更多信息。
- en: 'We have one service of the `indirect` state, which the table lists as having
    the following meaning:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个处于`间接`状态的服务，表中列出了以下含义：
- en: '"The unit file itself is not enabled, but it has a non-empty Also= setting
    in the [Install] unit file section, listing other unit files that might be enabled,
    or it has an alias under a different name through a symlink that is not specified
    in Also=. For template unit file, an instance different than the one specified
    in DefaultInstance= is enabled."'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: “单元文件本身没有启用，但在[Install]单元文件部分中有一个非空的Also=设置，列出了可能已启用的其他单元文件，或者它在不在Also=中指定的符号链接下有一个不同名称的别名。对于模板单元文件，除了在DefaultInstance=中指定的实例之外的实例是启用的。”
- en: Starting and stopping services
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动和停止服务
- en: In this section, we're going to look at the trivial-but-important aspect of
    starting and stopping services.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看一下启动和停止服务的微不足道但重要的方面。
- en: Imagine a world without the ability to automatically start daemons when a box
    boots; you'd have to manually go in and start your services with every reboot,
    being careful to ensure you start your services in the appropriate way each time.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下一个没有自动启动守护进程的能力的世界；您将不得不手动进入并在每次重新启动时启动您的服务，确保每次以适当的方式启动您的服务。
- en: That world, like one dominated by the Stargate Replicators, isn't one in which
    I'd want to live.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 像受星际之门复制体主导的世界一样，那不是我想要生活的世界。
- en: How to do it...
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: We're going to use `postfix` in this example, as it's a service that won't be
    doing much of anything on our VM.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用`postfix`，因为它是一个在我们的VM上不会做太多事情的服务。
- en: '`postfix` is a **Mail Transport Agent** (**MTA**) typically installed on CentOS
    boxes. Even if your box isn''t handling email, processes might use it to email
    you warning about failures and things of that ilk.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`postfix`是一个通常安装在CentOS盒子上的**邮件传输代理**（**MTA**）。即使您的盒子不处理电子邮件，进程也可能使用它向您发送有关故障的警告等信息。'
- en: Stopping our service
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 停止我们的服务
- en: 'Run the following (using `sudo`):'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令（使用`sudo`）：
- en: '[PRE17]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note the distinct lack of output confirming or denying what you've typed has
    worked.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，没有输出来确认或否认您输入的内容是否有效。
- en: Starting our service
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动我们的服务
- en: 'As with stopping our service, starting it again is trivial:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 与停止我们的服务一样，再次启动它是微不足道的：
- en: '[PRE18]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note again the confusing silence.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 再次注意到令人困惑的沉默。
- en: Silence upon command completion isn't unique to systemd, and it's actually something
    of a philosophy in the Unix and Unix-like world. If a command has done what it's
    supposed to, the user doesn't need to be told.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 命令完成后的沉默并不是systemd独有的，实际上这是Unix和类Unix世界的一种哲学。如果一个命令已经完成了它应该做的事情，用户就不需要被告知。
- en: How it works...
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When you instruct systemd to start or stop a unit, what you're actually doing
    is running the `ExecStart` or `ExecStop` portions of its unit file.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 当您指示systemd启动或停止一个单元时，实际上是运行其单元文件的`ExecStart`或`ExecStop`部分。
- en: 'Taking `postfix` as our example, its unit file looks like this:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 以`postfix`为例，其单元文件如下：
- en: '[PRE19]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Here we can see that, when we issue a `systemctl start postfix` command, it's
    literally running the `postfix` binary with the `start` option. The opposite is
    true for `stop`.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到，当我们发出`systemctl start postfix`命令时，它实际上是使用`start`选项运行`postfix`二进制文件。相反的是`stop`。
- en: We also have some `ExecStartPre` lines, which are commands executed before the
    main `ExecStart` command is run.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有一些`ExecStartPre`行，这些是在主`ExecStart`命令运行之前执行的命令。
- en: There's more...
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Without `sudo`, you may be prompted to authenticate as `root`; in order that
    the command might be run as `root`, I typically see this dialogue when I forget
    to `sudo` first:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 没有`sudo`，您可能会被提示以`root`身份进行身份验证；为了以`root`身份运行命令，当我忘记先使用`sudo`时，我通常会看到这种对话框：
- en: '[PRE20]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'You can also confirm whether a service is started or stopped quickly with the
    `status` argument:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`status`参数快速确认服务是否已启动或停止：
- en: '[PRE21]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: See also
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: For more on the `ExecStart` and `ExecStop` options of the unit file you're reading,
    check out the specific `systemd.service` man page on the subject.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 有关您正在阅读的单元文件的`ExecStart`和`ExecStop`选项的更多信息，请查看有关此主题的特定`systemd.service` man页面。
- en: There's also various other options that aren't `start` and `stop`, including
    `reload-or-try-restart` just to confuse matters. See the `systemctl` command for
    these options.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他一些选项不是`start`和`stop`，包括`reload-or-try-restart`，这可能会让事情变得更加混乱。请参阅`systemctl`命令以获取这些选项。
- en: Changing which services start and stop at boot
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改启动和停止的服务
- en: In the CentOS world, installing a new service doesn't immediately start and
    enable it, though it does in the Debian world (a default that, again, has its
    advocates and disparagers).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在CentOS世界中，安装新服务并不会立即启动和启用它，尽管在Debian世界中会（这是一个默认设置，再次引起了一些人的支持和反对）。
- en: In this example, we're going to enable a new service and reboot our VM, checking
    what happens when it comes up.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将启用一个新的服务并重新启动我们的虚拟机，看看它启动时会发生什么。
- en: Getting ready
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 做好准备
- en: 'Connect to your `centos1` VM. Install `httpd` (Apache) for these examples:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到您的`centos1`虚拟机。为这些示例安装`httpd`（Apache）：
- en: '[PRE22]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: How to do it...
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'First, let''s see if we actually have a unit file for `httpd`:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看我们是否实际上有一个`httpd`的单元文件：
- en: '[PRE23]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We have one, and now we need to see what state it''s currently in:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个，现在我们需要看看它当前处于什么状态：
- en: '[PRE24]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Our output lists the service as `inactive` and `disabled`.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的输出将服务列为`inactive`和`disabled`。
- en: Enabling our service
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用我们的服务
- en: If we just want to start our service, we could run the command listed in the
    previous section, but this wouldn't enable the service at boot.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们只想启动我们的服务，我们可以运行前一节中列出的命令，但这不会使服务在启动时启用。
- en: 'To enable our service, we run `enable`, surprisingly:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用我们的服务，我们运行`enable`，令人惊讶：
- en: '[PRE25]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Note that, for some reason, we do get output while enabling services.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，由于某种原因，我们在启用服务时确实会得到输出。
- en: Reboot your box and see whether `httpd` started on boot by using the `systemctl
    status` command.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 重新启动您的服务器，使用`systemctl status`命令查看`httpd`是否在启动时启动。
- en: Disabling our service
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 禁用我们的服务
- en: 'Now we''ve got `httpd` enabled, we''re going to disable it again, because that''s
    just the sort of people we are:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经启用了`httpd`，我们将再次禁用它，因为这就是我们的风格：
- en: '[PRE26]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: How it works...
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Seen in the output when we're disabling and enabling our services, what we're
    actually doing is creating a `symlink` from the default location of our `httpd`
    unit file, to the `multi-user.target.wants` directory, mentioned previously.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们禁用和启用服务时，在输出中看到的实际上是在我们的`httpd`单元文件的默认位置和`multi-user.target.wants`目录之间创建一个`symlink`，如前所述。
- en: On boot, systemd will check this directory at the appropriate time and start
    the services it finds there.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动时，systemd将在适当的时间检查此目录并启动它发现的服务。
- en: There's more...
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Starting and enabling services at the same time is perfectly possible and is
    definitely preferable to rebooting a box to change a service's state.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 同时启动和启用服务是完全可能的，绝对比重新启动服务器更可取来改变服务的状态。
- en: 'This can be done easily by inserting `--now` to our `enable` command:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在我们的`enable`命令中插入`--now`可以轻松实现这一点：
- en: '[PRE27]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Effectively, we''ve run the following on one line:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们在一行上运行了以下操作：
- en: '[PRE28]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: See also
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The systemd concept of `targets` is similar in nature to the old-school `runlevel`
    that you may or may not be familiar with. It's not a direct comparison, as systemd
    can activate multiple targets at the same time, whereas runlevels were singular.
    The `multi-user.target` is roughly equivalent to runlevels 2, 3, and 4.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: systemd对`targets`的概念与您可能熟悉或不熟悉的老式`runlevel`类似。这不是直接的比较，因为systemd可以同时激活多个targets，而runlevels是单数的。`multi-user.target`大致相当于runlevels
    2、3和4。
- en: See the `systemd.target` man page for more information.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅`systemd.target`手册以获取更多信息。
- en: Common services you might expect to see
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您可能期望看到的常见服务
- en: In this section, we're going to run down a list of common services you might
    expect to see on a given box. This list won't be comprehensive, as what services
    are there by default can change, even between distribution releases.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将列出您可能期望在给定服务器上看到的常见服务。这个列表不会是全面的，因为默认情况下会有哪些服务可能会发生变化，甚至在发行版之间也会有所不同。
- en: How to do it...
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'List out the services on our system, even those that are static and disabled:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 列出系统上的服务，甚至包括那些静态和禁用的服务：
- en: '[PRE29]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Scroll through the list, searching with `/` if you're using the default pager
    (less).
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用默认分页器（less）并使用`/`进行搜索，浏览列表。
- en: auditd.service
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: auditd.service
- en: Starting at the top, we have `auditd.service`, "the Linux audit daemon". Used
    to write the audit records of your system, you'll find the fruit of its work in
    the `/var/log/audit/` directory.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 从头开始，我们有`auditd.service`，"Linux审计守护程序"。用于编写系统的审计记录，您将在`/var/log/audit/`目录中找到其工作的成果。
- en: chronyd.service
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: chronyd.service
- en: As discussed when we talked about time on our system, `chronyd` is responsible
    for keeping your system clock correct. I would expect to see this, or `ntpd`,
    running on most servers in the wild.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在讨论系统时间时所讨论的，`chronyd`负责保持系统时钟的准确性。我期望在大多数服务器上都能看到这个或`ntpd`在运行。
- en: crond.service
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: crond.service
- en: Not to be confused with `chronyd`, `crond` is the daemon responsible for making
    sure that scheduled commands are run when they're supposed to be.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 不要与`chronyd`混淆，`crond`是负责确保按计划运行命令的守护程序。
- en: lvm2-*.service
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: lvm2-*.service
- en: The collection of `lvm2` service files are used to maintain and monitor **Logical
    Volume Manager** (**LVM**) setups. Most servers you'll come across will probably
    be using LVM for their filesystem and volume management needs.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`lvm2`服务文件的集合用于维护和监视**逻辑卷管理器**（**LVM**）设置。您可能会发现大多数服务器都在使用LVM来管理文件系统和卷。'
- en: NetworkManager.service
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NetworkManager.service
- en: We've covered networks to death, but it's useful to know that the `NetworkManager.service`
    file is one of the annoying few with uppercase letters.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经详细介绍了网络，但了解`NetworkManager.service`文件是其中几个带有大写字母的让人讨厌的服务之一是很有用的。
- en: This fact has caught me out on more than one occasion.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这个事实已经在不止一个场合让我措手不及。
- en: nfs.service
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: nfs.service
- en: Typically installed, the `nfs` suite of services are for management of **Network
    File System** (**NFS**) devices.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 通常安装的`nfs`服务套件用于管理**网络文件系统**（**NFS**）设备。
- en: NFS is still in wide use and is very well maintained by distribution producers,
    meaning even if you don't use it, it'll probably be there.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: NFS仍然被广泛使用，并且由发行版生产商进行了很好的维护，这意味着即使你不使用它，它可能仍然存在。
- en: postfix.service
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: postfix.service
- en: A typical MTA, `postfix` is the default you'll see on Red Hat, CentOS, and Fedora
    systems. On others, it might be the Exim mail server. We'll be going over these
    briefly later.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 作为典型的MTA，`postfix`是您在Red Hat、CentOS和Fedora系统上看到的默认选项。在其他系统上，可能是Exim邮件服务器。稍后我们将简要介绍这些内容。
- en: rsyslog.service
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: rsyslog.service
- en: Either `rsyslog` or `syslog-ng` will probably be installed on your server, at
    least for the foreseeable future. These are the system log daemons, responsible
    for writing logs to text files in `/var/log` (usually). They've got a competitor
    in `binary-log-loving journald`, which we'll come to later.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的服务器上可能已经安装了`rsyslog`或`syslog-ng`，至少在可预见的未来是这样。这些是系统日志守护程序，负责将日志写入`/var/log`（通常）。它们在`喜欢二进制日志的journald`中有竞争对手，我们稍后会谈到。
- en: sshd.service
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: sshd.service
- en: I should hope to see `sshd.service` running on any system I'm connected to,
    otherwise I have no idea what baffling method I've used to connect.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望在我连接的任何系统上都能看到`sshd.service`运行，否则我就不知道我用了什么令人困惑的方法来连接。
- en: systemd-journald.service
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: systemd-journald.service
- en: The competitor to `syslog` mentioned previously, `journald` is the logging daemon
    managed by systemd, and which can be queried using an array of syntactical soup
    on the command line.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`syslog`的竞争对手`journald`是由systemd管理的日志守护程序，可以使用命令行上的一系列句法汤进行查询。'
- en: systemd-logind.service
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: systemd-logind.service
- en: Another from `systemd` Borg, `logind` manages user logins to the systems of
    which you're an administrator.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`systemd`的另一个来自Borg的服务，`logind`管理您是管理员的系统的用户登录。'
- en: How it works...
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: These services, and any others you might be running on your machine, make up
    what is effectively the OS you're running.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 这些服务以及您可能在计算机上运行的其他服务，实际上构成了您正在运行的操作系统。
- en: If you're like me, you may find yourself playing around with this list in your
    spare time, trying to figure out which bits you can disable, and still have a
    functioning system at the end.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你像我一样，可能会在业余时间玩弄这个列表，试图弄清楚哪些部分可以禁用，而最终仍然有一个正常运行的系统。
- en: My advice would generally be to leave the defaults as they are, because you
    never know what random job is cleaning a temporary directory for you without you
    even realizing it.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 通常建议保持默认设置不变，因为你永远不知道哪个随机的作业正在清理临时目录，而你甚至没有意识到。
- en: Default services are frequently disabled as part of **hardening** tasks; if
    you ever find yourself having to harden a system, the usual rules apply. Look
    into what the current best practices are, and see if your vendor has a ready-made
    guide.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 默认服务经常被禁用作为**加固**任务的一部分；如果你发现自己不得不加固一个系统，通常的规则仍然适用。了解当前的最佳实践是什么，并查看您的供应商是否有现成的指南。
- en: There's more...
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'We can use handy tools such as `systemd-analyze` to see how long our system
    took to boot:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`systemd-analyze`等方便的工具来查看系统启动所需的时间：
- en: '[PRE30]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 8 seconds isn't bad, excluding the time it takes VirtualBox to initialize our
    VM and the time it takes the kernel to start (5 seconds on the Grub boot menu).
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 8秒并不算糟糕，不包括VirtualBox初始化我们的虚拟机所需的时间和内核启动所需的时间（在Grub引导菜单上为5秒）。
- en: 'You can even run this command with `blame` tacked on the end, to see what process
    is taking your precious seconds from you:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 你甚至可以在命令的末尾加上`blame`来运行这个命令，以查看哪个进程占用了你宝贵的时间：
- en: '[PRE31]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: See also
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Check out other systems for what services they start by default. For example,
    Ubuntu on the desktop might not start `auditd`, but it will probably have `gdm`
    to ensure a Gnome login window when you boot your machine.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 查看其他系统默认启动的服务。例如，Ubuntu桌面版可能不会启动`auditd`，但在启动计算机时可能会有`gdm`来确保Gnome登录窗口。
- en: Understanding service unit files
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解服务单元文件
- en: We now have a good idea of where to find service unit files, as well as how
    to enable and disable services.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经很清楚在哪里找到服务单元文件，以及如何启用和禁用服务。
- en: Previously, we touched on a couple of the entries within a unit file, though
    we haven't gone into much depth on these options or where to find more information
    and alternative entries you might want to use.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们提到了单元文件中的一些条目，尽管我们并没有深入探讨这些选项或者在哪里找到更多信息和您可能想要使用的替代条目。
- en: How to do it...
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: We're going to use `sshd.service` as an example here, not just because it's
    a service file you might see a lot, but because it has a good mixture of default
    entries.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以`sshd.service`为例，不仅因为它是您可能经常看到的服务文件，而且因为它具有很好的默认条目混合。
- en: '`cat` our chosen service:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '`cat`我们选择的服务：'
- en: '[PRE32]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: To understand this file, we have to break it down into its component parts.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解这个文件，我们必须将其分解为其组成部分。
- en: 'Sort of the `Main` section of the unit file, `[Unit]` is the area for generic
    entries, not specific to the `Service` type:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '`Unit`文件的`Main`部分，`[Unit]`是通用条目的区域，不是`Service`类型的特定条目：'
- en: '[PRE33]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'For the description, we have a short and snappy entry that can be understood
    at a glance:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 对于描述，我们有一个简短而简洁的条目，一目了然：
- en: '[PRE34]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'We also have a handy line, detailing the appropriate URI location to peruse
    if you get stuck. Here we have `man:` as the URI, but it could be `https://` or
    even `info::`:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有一行方便的信息，详细说明了如果遇到困难应该查看的适当URI位置。这里我们有`man:`作为URI，但它也可以是`https://`甚至是`info::`：
- en: '[PRE35]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '`info:` refers to information pages, like man pages, but more widely ridiculed. `After=` (and `Before=`)
    is a space-separated list of unit names, which stipulates the services that need
    to start after (or before) this one. Here the network needs to be started, and `ssh-keygen` needs
    to run prior to `sshd` starting:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '`info:`指的是信息页面，类似于man页面，但更广泛地受到嘲笑。`After=`（和`Before=`）是一个以空格分隔的单元名称列表，指定需要在此之后（或之前）启动的服务。这里需要启动网络，并且在`sshd`启动之前需要运行`ssh-keygen`：'
- en: '[PRE36]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'We dissected `Wants=` earlier, but to flesh it out a bit, you''ll commonly
    see `Wants=` in unit files, listing services which it would be nice to trigger,
    prior to this service starting:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前解析了`Wants=`，但为了更详细地解释一下，你通常会在单元文件中看到`Wants=`，列出了在启动此服务之前可能触发的服务：
- en: '[PRE37]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '`Wants=` is a less-mandated version of `Requires=`. If a `Wants=` service fails
    to start, the parent service will still give it a try, if a `Requires=` service
    fails, the parent doesn''t either.'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '`Wants=`是`Requires=`的一个不那么强制的版本。如果`Wants=`服务启动失败，父服务仍然会尝试，如果`Requires=`服务失败，父服务也不会启动。'
- en: 'Specific to unit files of the `service` type, the `[Service]` block is specific
    to service options, perhaps obviously:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 特定于`service`类型的单元文件，`[Service]`块是特定于服务选项的，可能很明显：
- en: '[PRE38]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The process start up type, `notify` here means systemd expects the daemon to
    send a notification message once it''s finished starting up. Only when this notification
    is received will systemd continue starting services that depend on this one:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 进程启动类型，`notify`在这里表示systemd期望守护进程在启动完成后发送通知消息。只有在收到此通知后，systemd才会继续启动依赖于此服务的服务：
- en: '[PRE39]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Used to point the service to the file that contains its environment variables,
    for `sshd` this contains one option on our box, `OPTIONS="-u0"`:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 用于指向包含其环境变量的文件的服务，对于`sshd`，这在我们的盒子上包含一个选项，`OPTIONS="-u0"`：
- en: '[PRE40]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The crux of what''s run when the service is started, `ExecStart` gives us the
    command that''s run. Note also the `$OPTIONS` value, read from the file stipulated
    on the `EnvironmentFile` line:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务启动时运行的关键是`ExecStart`，它给出了要运行的命令。还要注意从`EnvironmentFile`行指定的文件中读取的`$OPTIONS`值：
- en: '[PRE41]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'This section tells systemd what should be run if the `systemctl reload sshd` command
    is run. Specifically, we''re sending the `HUP` (hangup) signal to the `sshd` PID:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分告诉systemd如果运行`systemctl reload sshd`命令时应该运行什么。具体来说，我们向`sshd`PID发送`HUP`（挂起）信号：
- en: '[PRE42]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'This directive specifies how processes of the unit''s own creation are to be
    killed. `process` here means only the main process itself is killed by systemd:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 这个指令指定了如何杀死该单元自己创建的进程。这里的`process`意味着只有主进程本身被systemd杀死：
- en: '[PRE43]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Here, `KillMode` is being used, but `ExecStop` isn't. This is because `ExecStop`
    is optional, and generally only used if the init daemon has a specific cleanup
    job to do.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 这里使用了`KillMode`，但没有使用`ExecStop`。这是因为`ExecStop`是可选的，通常只有在init守护程序有特定的清理工作要做时才会使用。
- en: 'Our `Restart` option tells systemd how the process is to be restarted. `on-failure` used
    here means `sshd` will be restarted on an unclean exit code, an unclean signal,
    a timeout, or if the watchdog timeout for a service is breached:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`Restart`选项告诉systemd如何重新启动进程。这里使用的`on-failure`表示`sshd`将在退出代码不干净、不干净的信号、超时或服务的看门狗超时被触发时重新启动：
- en: '[PRE44]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '`RestartSec` is the specified time to take before restarting the `sshd` service,
    following the `Restart=` criteria being met. I''d imagine it''s `42` seconds here
    because the author of the unit file is a fan of Douglas Adams:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '`RestartSec`是在满足`Restart=`标准后重新启动`sshd`服务之前需要的时间。我想这里是42秒，因为单元文件的作者是道格拉斯·亚当斯的粉丝：'
- en: '[PRE45]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Install is another generic section, such as `[Unit]`. This section holds the
    installation information for the unit file, meaning it''s read by the enable and
    disable directives when run:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 安装是另一个通用部分，例如`[Unit]`。该部分保存了单元文件的安装信息，这意味着在运行时被enable和disable指令读取：
- en: '[PRE46]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The only directive here is that this service is `WantedBy` the multi-user target,
    meaning that, in multi-user mode, `sshd` will be started:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 这里唯一的指令是这个服务是`WantedBy`多用户目标，这意味着在多用户模式下，`sshd`将被启动：
- en: '[PRE47]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: How it works...
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: When a service file is interacted with by systemd, the section of the file it
    reads determines its actions.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 当systemd与服务文件交互时，它读取的文件部分决定了它的操作。
- en: If starting a service, `ExecStart` would be read—if stopping, `ExecStop`.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 如果启动服务，将读取`ExecStart`；如果停止，将读取`ExecStop`。
- en: There's more...
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Several options are available to the writer of a unit file and more are being
    added with every systemd release. There's a good chance that the operation you
    want to accomplish can be achieved with a unit file entry.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 单元文件的作者可以使用多种选项，并且每个systemd版本都会添加更多选项。你有很大的机会可以通过单元文件条目实现你想要的操作。
- en: Despite the overwhelming array of options available to unit file authors, you
    still get people who insist on writing a bash script to do everything, and simply
    referring to this in a four-line unit file. It's possible, but it's not neat.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管单元文件作者可以使用多种选项，但仍然有人坚持编写一个bash脚本来完成所有操作，并在四行单元文件中简单地引用它。这是可能的，但不够整洁。
- en: See also
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: If you have a free afternoon, give the `systemd.service` and `systemd.unit`
    manual pages a read; they're both lengthy and a good sedative in lieu of sleeping
    tablets.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个空闲的下午，可以阅读`systemd.service`和`systemd.unit`手册页；它们都很长，是睡眠药片的良好替代品。
- en: Customizing systemd unit files
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义systemd单元文件
- en: In this section, we're going to look at ways we can modify systemd unit files.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看看如何修改systemd单元文件的方法。
- en: There's an important note to make here, which is that, while you can absolutely
    modify configuration files as they're delivered, there's no guarantee that your
    changes will be persistent across updates of your system. Package managers might
    take offence to your mangling of their service files, and simply replace them
    without warning.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个重要的说明，即虽然你绝对可以修改配置文件，但不能保证你的更改会在系统更新后持久存在。软件包管理器可能会对你篡改他们的服务文件感到不满，并在没有警告的情况下替换它们。
- en: The correct way to modify the actions of systemd unit files is to write a whole
    other file with your changes included.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 修改systemd单元文件操作的正确方法是编写另一个包含你的更改的文件。
- en: systemd's method for doing this is called a snippet.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: systemd执行此操作的方法称为片段。
- en: How to do it...
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: systemd has a built-in way of generating the required override file we need.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: systemd有一种内置的方法来生成我们需要的覆盖文件。
- en: 'Create the directory and file for the `sshd.service` unit using the following
    command:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令创建`sshd.service`单元的目录和文件：
- en: '[PRE48]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: You will be placed in an empty file, but one that exists within a new directory,
    namely `/etc/systemd/system/sshd.service.d/override.conf`.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 您将被放置在一个空文件中，但这个文件存在于一个新的目录中，即`/etc/systemd/system/sshd.service.d/override.conf`。
- en: 'Copy the following into our empty file:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下内容复制到我们的空文件中：
- en: '[PRE49]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: When we save and exit the file, an implicit `systemctl daemon-reload` is run,
    meaning that when we run a `systemctl restart sshd`, our new settings are enabled.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们保存并退出文件时，会隐式运行`systemctl daemon-reload`，这意味着当我们运行`systemctl restart sshd`时，我们的新设置将生效。
- en: How it works...
  id: totrans-279
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'We said our `edit` command created a new directory and file, in which override
    commands can be placed; you can now visit this by changing to it:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 我们说我们的`edit`命令创建了一个新的目录和文件，可以在其中放置覆盖命令；您现在可以通过更改到它来访问这个目录：
- en: '[PRE50]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Within our override file, our new entries are stored. These entries generally
    complement those in the primary configuration file.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的覆盖文件中，我们存储了新的条目。这些条目通常是主配置文件中的补充。
- en: 'Breaking our new configuration down, we have the following:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 分解我们的新配置，我们有以下内容：
- en: '[PRE51]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Here we've added a short description of what the file is, showing it's slightly
    modified. There's a fake manual page entry, which we've suggested might be a good
    place for documentation when we get around to writing it. We also changed the
    service so that it now requires `sshd-keygen`, instead of just wanting it.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们添加了文件的简短描述，显示它稍微修改了。有一个虚假的手册页面条目，我们建议在编写文档时可能是一个不错的地方。我们还更改了服务，使其现在需要`sshd-keygen`，而不仅仅是想要它。
- en: 'Now, we change the service section:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们更改服务部分：
- en: '[PRE52]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Here we're adding our `Environment` directive, instead of using an `EnvironmentFile`
    (which we've blanked).
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们添加了我们的`Environment`指令，而不是使用`EnvironmentFile`（我们已经清空了）。
- en: We're blanking `ExecStart` too, and passing in our own (which we've added `-4`)
    to.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也清空了`ExecStart`，并传入我们自己的（我们已经添加了`-4`）。
- en: And because we're boring, we've decided we want `sshd` to restart in 10 seconds,
    instead of `42`.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们觉得无聊，所以我们决定希望`sshd`在10秒内重新启动，而不是`42`。
- en: There's more...
  id: totrans-291
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: It's not always obvious which values can be stacked atop one another, and which
    have to be blanked out first.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 并不总是明显哪些值可以堆叠在一起，哪些必须首先清空。
- en: To test whether your configuration is being loaded correctly, use `systemctl
    show sshd` to read the running configuration of your service.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试您的配置是否被正确加载，请使用`systemctl show sshd`来读取服务的运行配置。
- en: 'Within the output, I find the following line (`Documentation` can stack, so
    our new entry just gets added to the end.):'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在输出中，我找到了以下行（`Documentation`可以堆叠，所以我们的新条目只是添加到末尾）：
- en: '[PRE53]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '`Description` is overwritten, as you can only have one entry, so ours takes
    precedence:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '`Description`被覆盖了，因为您只能有一个条目，所以我们的优先级较高：'
- en: '[PRE54]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'There''s no `EnvironmentFile` option, and the only entry is our `Environment` line:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 没有`EnvironmentFile`选项，唯一的条目是我们的`Environment`行：
- en: '[PRE55]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'There''s only one `ExecStart` line, and it''s ours as we blanked the original:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 只有一行`ExecStart`，而且是我们的，因为我们清空了原始的：
- en: '[PRE56]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: See also
  id: totrans-302
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: There's another method to making your own unit file changes, but it's messier.
    Effectively, you write a complete unit file, changing the options you want, and
    you place your new file in `/etc/systemd/system/` before re-enabling the service.
    The reason this works is because `/etc/systemd/system/` has a higher precedence
    than `/usr/lib/systemd/system/` though you've now burdened yourself with management
    of the whole service definition, instead of just the bits you want to change.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一种方法可以对自己的单元文件进行更改，但这种方法比较混乱。实际上，您需要编写一个完整的单元文件，更改您想要的选项，然后将新文件放在`/etc/systemd/system/`中，然后重新启用服务。这种方法有效的原因是因为`/etc/systemd/system/`的优先级高于`/usr/lib/systemd/system/`，尽管现在您已经自己承担了整个服务定义的管理，而不仅仅是您想要更改的部分。
- en: Testing running services
  id: totrans-304
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试运行的服务
- en: In this section, we're going to look at three ways we can see whether a service
    is actually running, once we've issued a `start` command.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看看三种方法，一旦我们发出`start`命令，就可以看到服务是否真的在运行。
- en: We'll start with the built-in systemd way (`systemctl`) before moving to a generic
    way (`ps`) and finally a simple way (`telnet`).
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从内置的systemd方式（`systemctl`）开始，然后转向通用方式（`ps`），最后是简单方式（`telnet`）。
- en: Getting ready
  id: totrans-307
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Connect to your `centos1` VM. Install and start `httpd` if it's not already
    started.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到您的`centos1`虚拟机。如果尚未启动，请安装并启动`httpd`。
- en: 'We''ll also install `telnet` for some basic port checking:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将安装`telnet`进行一些基本的端口检查：
- en: '[PRE57]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: How to do it...
  id: totrans-311
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'With systemd''s built-in tool, we can check the status with the `status` option:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 使用systemd的内置工具，我们可以使用`status`选项来检查状态：
- en: '[PRE58]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'This is a good indication that things are fine, because systemd believes them
    to be. We can also use the `ps` tool to try and determine whether our process
    has started:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个很好的迹象，因为systemd认为它们是正常的。我们还可以使用`ps`工具来尝试确定我们的进程是否已启动：
- en: '[PRE59]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Here I use the `aux` option, partly this is because I can reliably do the same
    thing on my BSD systems, and partly it's because the person I first watched use `ps`
    used those flags, so it stuck with me.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我使用`aux`选项，部分原因是因为我可以在我的BSD系统上可靠地执行相同的操作，另一部分原因是因为我最初观看`ps`使用这些标志的人，所以这些标志一直留在我心中。
- en: We can see `httpd` running with a few processes.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到`httpd`正在运行几个进程。
- en: 'Alternatively, we could try connecting to the port locally with `telnet`:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以尝试使用`telnet`在本地连接端口：
- en: '[PRE60]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Though if your web server isn't running on localhost, or `80`, this test is
    somewhat pointless and will fail.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如果您的Web服务器不在localhost上运行，或者不在`80`端口上运行，这个测试就有点无意义，并且会失败。
- en: How it works...
  id: totrans-321
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: We've covered three ways of checking whether a service is running. The first,
    and arguably most robust, is to see whether the init system believes the service
    is up.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经介绍了三种检查服务是否正在运行的方法。第一种，也可以说是最可靠的，是查看init系统是否认为服务正在运行。
- en: Our `systemctl` command reported an active, running state and gave us a time
    that the service had started.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`systemctl`命令报告了一个活动的、运行中的状态，并给出了服务启动的时间。
- en: Next, we queried the system's process list to see whether we could find our
    server; this works well as it could be the case that a misconfigured service file
    starts your service, but isn't then aware of its state, hence believing it to
    be dead.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们查询系统的进程列表，看看是否能找到我们的服务器；这很有效，因为可能出现这样的情况，即配置错误的服务文件启动了您的服务，但随后不知道它的状态，因此认为它已经停止。
- en: Lastly, we used `telnet` to try and connect to the port we thought the service
    might be running on; this is the least intelligent way to check whether a service
    is running locally, as it requires you to know specifics and `telnet` is rarely
    installed by default.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用`telnet`尝试连接到我们认为服务可能正在运行的端口；这是检查服务是否在本地运行的最不智能的方法，因为它需要您知道具体细节，而且`telnet`通常不会默认安装。
- en: There's more...
  id: totrans-326
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: To get information about open sockets on a system, you would use `ss`; see the
    earlier section on `ss` for details on what commands you might use to determine
    used ports.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取有关系统上打开套接字的信息，您将使用`ss`；有关可能用于确定已使用端口的命令的详细信息，请参阅`ss`的早期部分。
- en: Writing a basic unit file
  id: totrans-328
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写一个基本的unit文件
- en: In this section, we're going to put together a unit file of our own. We're also
    going to choose a location to save it and we're going to reboot our system to
    check if it works.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将组合一个我们自己的unit文件。我们还将选择一个位置保存它，并重新启动我们的系统以检查它是否有效。
- en: How to do it...
  id: totrans-330
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: We're going to again use Python's built-in web server, starting an instance
    using a small unit file.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将再次使用Python的内置Web服务器，使用一个小的unit文件启动一个实例。
- en: 'First, create the directory in which we''re going to store our unit file:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建我们将存储unit文件的目录：
- en: '[PRE61]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Next, we''re going to echo the following into a file called `pythonWebServer.service`:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将把以下内容回显到一个名为`pythonWebServer.service`的文件中：
- en: '[PRE62]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: This unit file is for demonstration purposes only, and should **absolutely not**
    be used in production.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 此unit文件仅用于演示目的，**绝对不**应在生产中使用。
- en: 'Now we can enable and start it:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以启用并启动它：
- en: '[PRE63]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Check it''s running with the `status` command:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`status`命令检查它是否正在运行：
- en: '[PRE64]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: How it works...
  id: totrans-341
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: All we've done here is create a local unit file for systemd to read and load.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里所做的一切只是创建了一个本地unit文件，以便systemd读取和加载。
- en: 'In order to understand our path choice, try running the following on your system,
    and see what''s returned:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解我们的路径选择，请尝试在您的系统上运行以下命令，并查看返回的内容：
- en: '[PRE65]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: One of the options should be `/usr/local/lib/systemd/system`, which doesn't
    exist at first, but does when we create it.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个选项应该是`/usr/local/lib/systemd/system`，一开始不存在，但在我们创建它后就存在了。
- en: It's a good idea to use a path like this because, not only is there a good chance
    it's empty, meaning you can logically separate your unit files from others, it's
    also uncluttered (unlike the `/etc/systemd/system/` directory).
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这样的路径是个好主意，因为不仅有很大的可能性它是空的，这意味着您可以逻辑上将您的unit文件与其他文件分开，而且它也是整洁的（不像`/etc/systemd/system/`目录）。
- en: We then placed a small example unit file in this directory, featuring the bare
    minimum to make a functioning service file.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将一个小的示例unit文件放在这个目录中，其中包含使服务文件正常运行所需的最低限度。
- en: Once written, it's a simple case of enabling and starting our service.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦编写完成，只需启用并启动我们的服务。
- en: There's more...
  id: totrans-349
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There're a couple of problems with what we've done here.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里所做的有一些问题。
- en: 'The first is that we''ve created a very static service file, which we can only
    change by manipulating it directly. The second issue is that we''ve made a web
    server that, by default, will list the contents of the root of our server, which
    I highly doubt you want:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 第一点是，我们创建了一个非常静态的服务文件，只能通过直接操作来更改。第二个问题是，我们创建了一个默认情况下将列出服务器根目录内容的Web服务器，我非常怀疑你想要这样：
- en: '[PRE66]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Let's address both of these issues, using what we've learned so far.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用到目前为止学到的知识来解决这两个问题。
- en: 'Open your new systemd unit file for editing, in your editor of choice, and
    populate it with a few more options:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 打开您的新systemd unit文件进行编辑，使用您选择的编辑器，并填充它的一些其他选项：
- en: '[PRE67]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Note some we've used previously, and some new ones such as `WorkingDIrectory=`.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们之前使用过的一些内容，以及一些新的内容，比如`WorkingDIrectory=`。
- en: 'Next, populate `/var/www/html/index.html`:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，填充`/var/www/html/index.html`：
- en: '[PRE68]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'And add an entry to our environment file:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 并向我们的环境文件添加一个条目：
- en: '[PRE69]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Reload systemd''s configuration:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 重新加载systemd的配置：
- en: '[PRE70]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'And test with `curl`:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 并使用`curl`进行测试：
- en: '[PRE71]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: See also
  id: totrans-365
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: There are so many different configuration options for systemd unit files; we've
    not really scratched the surface here, and it could absolutely constitute a book
    in itself.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: systemd unit文件有很多不同的配置选项；我们在这里并没有真正深入探讨，这绝对可以构成一本书。
- en: Read the relevant man pages, have a go at writing your own unit files, and report
    back with your findings, you brave explorer.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读相关的man页面，尝试编写自己的unit文件，并用您的发现回报，你勇敢的探险者。
- en: Working with systemd timers (and cron)
  id: totrans-368
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用systemd定时器（和cron）
- en: The new kids on the block, and another component that systemd brought into its
    gargantuan self, are systemd timers. Timers are another type of unit, only one
    that acts as the instruction for when another unit is to trigger.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 新来的孩子，以及systemd引入其庞大自身的另一个组件，是systemd定时器。定时器是另一种类型的unit，只是作为另一个unit触发的指令。
- en: In the old world, you'd control periodic events on a system with `cron`, and
    this is still widely used, but increasingly systemd timers are stealing that mantle
    away.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 在旧世界中，您可以使用`cron`来控制系统上的周期性事件，这仍然被广泛使用，但是越来越多的systemd定时器正在夺走这个位置。
- en: I say *new* but new is relative. Basically something can be in systemd for years
    before it finally trickles into Debian or CentOS. If you want the latest and greatest,
    run something like Fedora on a laptop.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 我说*新*，但新是相对的。基本上，某些东西可能在Debian或CentOS中滞留多年，然后最终才进入systemd。如果您想要最新和最好的东西，可以在笔记本电脑上运行Fedora之类的系统。
- en: In this section, we're going to look at existing `cron` and timer entries on
    our system, before converting our Python server into a timer-triggered service.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将查看系统上现有的`cron`和定时器条目，然后将我们的Python服务器转换为定时器触发的服务。
- en: How to do it...
  id: totrans-373
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: First, we're going to list existing periodic jobs on the system.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将列出系统上现有的周期性作业。
- en: systemd timers
  id: totrans-375
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: systemd定时器
- en: 'Starting with systemd timers, we''re going to list what exists on our box by
    default:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 从systemd定时器开始，我们将列出默认情况下我们的盒子上存在的内容：
- en: '[PRE72]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Within this output, we can see two timers. The first is `systemd-tmpfiles-clean.timer`
    and its action is to trigger `systemd-tmpfiles-clean.service`.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个输出中，我们可以看到两个定时器。第一个是`systemd-tmpfiles-clean.timer`，它的动作是触发`systemd-tmpfiles-clean.service`。
- en: 'Running `systemctl cat` against this file shows us its timer configuration:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 对这个文件运行`systemctl cat`会显示它的定时器配置：
- en: '[PRE73]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Looking at the service file reveals what''s actually run:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 查看服务文件会揭示实际运行的内容：
- en: '[PRE74]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Note that it's a `oneshot` service, meaning it's expected to exit after running.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这是一个`oneshot`服务，意味着它在运行后预期会退出。
- en: From the previous information, we can tell when our timer has last run and when
    it's next due to.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 根据之前的信息，我们可以知道我们的定时器上次运行的时间和下次运行的时间。
- en: The second timer we can see, `systemd-readahead-done.timer` and its companion
    service file, aren't active. This is denoted by the `n/a` details in the various
    time fields. This service is used in non-virtualized systems to log disk boot
    patterns, attempting to speed up subsequent boots.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到的第二个定时器，`systemd-readahead-done.timer`及其伴随的服务文件，没有激活。这是通过各种时间字段中的`n/a`细节表示的。这个服务用于非虚拟化系统记录磁盘引导模式，试图加快随后的引导速度。
- en: This makes timers much easier to read and work out when they last ran, compared
    to `cron`.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得定时器比`cron`更容易阅读和计算上次运行的时间。
- en: cron
  id: totrans-387
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: cron
- en: I'm not aware of an easy way to list information from `cron`; if you know of
    one, please write to me and blow my mind.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 我不知道有没有一种简单的方法来列出`cron`的信息；如果你知道，请写信给我，让我大吃一惊。
- en: '`cron`, as we said previously, is a daemon for executing commands on a schedule.
    It''s still in wide use and there''s many systems out there with a hybrid systemd
    timers/`cron` setup.'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所说，`cron`是一个按计划执行命令的守护进程。它仍然被广泛使用，有许多系统在其中使用了混合的systemd定时器/`cron`设置。
- en: 'By default, `cron` features the following directories in `/etc/`:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`cron`在`/etc/`中包含以下目录：
- en: '[PRE75]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Within `cron.d`, we can see a single file named `0hourly`, the contents of
    which are copied in the following:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 在`cron.d`中，我们可以看到一个名为`0hourly`的文件，其内容如下所示：
- en: '[PRE76]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'And within the `/etc/cron.hourly` directory, we have only `0anacron`:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 而在`/etc/cron.hourly`目录中，我们只有`0anacron`：
- en: '[PRE77]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Readable, this is not.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 可读性不强。
- en: At a glance, it's awkward and fiddly to work out what jobs are running periodically
    through `cron`, and you'll always get that one bodge-job that someone's written,
    without any logging, that they forget about.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，要弄清楚通过`cron`定期运行的作业是很尴尬和麻烦的，你总会遇到那种没有任何日志记录的临时作业，而且他们自己都忘了。
- en: Chances are good you'll have `cron` screw you over at one point in your life,
    at least until it goes away forever, so if you ever get unexpected behavior on
    your system, stop and have a quick look through the `cron` directories for some
    indication of foul play.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 很有可能在你的生活中某个时候`cron`会让你失望，至少直到它永远消失，所以如果你的系统出现意外行为，停下来快速浏览一下`cron`目录，看看有没有什么不对劲。
- en: 'You can get the specific `cron` logs from `journalctl` easily enough:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以很容易地从`journalctl`中获取具体的`cron`日志：
- en: '[PRE78]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: How it works...
  id: totrans-401
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: systemd timers are great; they also work very well, primarily because they're
    inherently tied to the init and unit system that they're managing the time triggers
    for.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: systemd定时器很棒；它们也工作得很好，主要是因为它们与它们管理的时间触发的init和unit系统紧密相连。
- en: In a perfect world, I'd love to see all of the `cron` entries featured in CentOS
    and Debian completely removed within their next release. The truth of the matter
    is `cron` will probably be around for a long time, and systems such as FreeBSD
    will use it long after the heat-death of the universe.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个完美的世界中，我希望看到在它们的下一个版本中完全删除CentOS和Debian中的所有`cron`条目。事实是`cron`可能会在很长一段时间内存在，而像FreeBSD这样的系统将在宇宙热死之后很长时间内使用它。
- en: When we list timers, we're checking what systemd is aware of in terms of units
    it has to trigger.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们列出定时器时，我们正在检查systemd在单位触发方面的意识。
- en: When we're sifting through `cron` logs and subdirectories, we're banging our
    heads against a metaphorical desk in a vain effort to find that vague one-liner
    that's constantly touching the file we're trying to delete.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在`cron`日志和子目录中查找时，我们正在试图找到那个不断触及我们试图删除的文件的模糊一行的隐喻性努力。
- en: There's more...
  id: totrans-406
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We're going to write our own timer unit, using the Python unit file from the
    last example.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将编写我们自己的定时器单元，使用上一个示例中的Python单元文件。
- en: I would recommend starting by disabling the service if you've still got it running
    or destroying the VM and writing it again, referring to the last section if necessary.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仍在运行它，我建议首先禁用服务，或者销毁虚拟机并重新编写，必要时参考最后一节。
- en: 'Let''s start by adjusting our `pythonWebServer.service` file so that it looks
    like the following:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先调整我们的`pythonWebServer.service`文件，使其看起来像下面这样：
- en: '[PRE79]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Specifically, we've removed a few lines. Note the complete removal of the `[Install]`
    section, as it's not needed when the timer is controlling the startup.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我们删除了一些行。请注意，完全删除了`[Install]`部分，因为当定时器控制启动时，它是不需要的。
- en: In the real world, this wouldn't be something permanent such as a web server,
    it would usually be something small, such as a script to open a web page on a
    wallboard somewhere or send a request to the coffee machine to make you a latte.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实世界中，这不会是像网页服务器这样的永久性东西，通常会是一些小东西，比如一个在某个墙板上打开网页的脚本，或者发送请求给咖啡机给你做拿铁。
- en: 'Next, we''re going to write a `timer` file, putting it in the exact same place
    as our `service` file:'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将编写一个`timer`文件，将其放在与我们的`service`文件完全相同的位置：
- en: '[PRE80]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Afterwards, we''re going to reload systemd and enable the timer, but not the
    service:'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们将重新加载systemd并启用定时器，但不启用服务：
- en: '[PRE81]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Note the creation of `symlink`.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`symlink`的创建。
- en: 'Let''s reboot our box and see what happens. If you''re quick, and you manage
    to run `systemctl list-timers` before your ten seconds are up, you might see something
    like the following:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重新启动我们的服务器，看看会发生什么。如果你很快，而且你设法在十秒钟内运行`systemctl list-timers`，你可能会看到类似以下的东西：
- en: '[PRE82]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Running it again will show that the job has passed:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行将显示作业已经通过了：
- en: '[PRE83]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'A quick `curl` will confirm our service is up:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 一个快速的`curl`将确认我们的服务已经启动：
- en: '[PRE84]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: See also
  id: totrans-424
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can check the status of a systemd timer in the same way as any other unit.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以以与任何其他单元相同的方式检查systemd定时器的状态。
- en: 'Seen in the following is the output and command used to check the status of
    our `pythonWebServer.timer`:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是用于检查我们的`pythonWebServer.timer`状态的输出和命令：
- en: '[PRE85]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Other init systems
  id: totrans-428
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他init系统
- en: systemd might be the dominant init system in the Linux world, but there are
    others that you'll still come across. At the time of writing, CentOS 6 is very
    much alive and kicking, with its upstart core.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: systemd可能是Linux世界中占主导地位的init系统，但你仍然会遇到其他系统。在撰写本文时，CentOS 6仍然非常活跃，具有其upstart核心。
- en: That's without going into the nitty-gritty of what the BSDs use and macOS to
    boot (which I actually quite like).
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 这还没有涉及到BSD和macOS启动时使用的细节（我实际上相当喜欢）。
- en: I have seen some absolutely ancient Debian installations in my time, some of
    which went out of support half a decade or longer ago. I once worked out that
    a box I was SSH'd into, could legally drive.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 我曾经见过一些非常古老的Debian安装，其中一些在半个多世纪前就已经停止支持了。我曾经计算过，我通过SSH连接的一台服务器，现在已经可以合法驾驶了。
- en: Getting ready
  id: totrans-432
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Connect to both of your other VMs:'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到你的其他两个虚拟机：
- en: '[PRE86]'
  id: totrans-434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: How to do it...
  id: totrans-435
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: We have two systems at play; CentOS 6 uses Upstart, and Debian 7 uses SysV init.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有两个系统在运行；CentOS 6使用Upstart，而Debian 7使用SysV init。
- en: CentOS 6 and Upstart
  id: totrans-437
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CentOS 6和Upstart
- en: 'In the old world, `systemctl` won''t work:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 在旧世界中，`systemctl`不起作用：
- en: '[PRE87]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: What's also slightly annoying is that there's no `upstart` command.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一点令人略感恼火的是，没有`upstart`命令。
- en: 'Instead, `Upstart` is skinned to look like a typical `init` system. The main
    page even lists it as such:'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，`Upstart`被设计成看起来像一个典型的`init`系统。主页甚至将其列为这样：
- en: '"init: Upstart process management daemon"'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: “init：Upstart进程管理守护程序”
- en: 'Instead of `systemctl`, we use `service --status-all`:'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`service --status-all`而不是`systemctl`：
- en: '[PRE88]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'This gives you output similar to the following:'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给你类似于以下的输出：
- en: '[PRE89]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Confusingly, the service name might not be what you see. Take `sshd` as an
    example. The previous command might lead you to believe that the daemon on this
    system is called `openssh-daemon`, but that''s incorrect; it''s really `sshd`
    again:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 令人困惑的是，服务名称可能与你看到的不同。以`sshd`为例。前面的命令可能会让你相信这个系统上的守护进程被称为`openssh-daemon`，但这是不正确的；它实际上还是`sshd`：
- en: '[PRE90]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Confused? I was the first time I saw this.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 感到困惑吗？我第一次看到这个时也是。
- en: 'The other way to interact with services is to call them directly (as they''re
    just a script really):'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 与服务交互的另一种方式是直接调用它们（因为它们实际上只是一个脚本）：
- en: '[PRE91]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'Starting and stopping is very similar, but one thing that will catch you out
    is that traditional `init` systems put the control command at the end of the line
    (unlike systemd):'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 启动和停止非常相似，但会让你困惑的一件事是，传统的`init`系统将控制命令放在行的末尾（与systemd不同）：
- en: '[PRE92]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Note the `stop` and `start` tacked on the end.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 注意在末尾添加了`stop`和`start`。
- en: 'Disabling and enabling services is different too; on old CentOS systems, `chkconfig`
    was your best friend:'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 禁用和启用服务也是不同的；在旧的CentOS系统上，`chkconfig`是你最好的朋友：
- en: '[PRE93]'
  id: totrans-456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Note the concept of runlevels still existing, and that `sshd` starts in `2`,
    `3`, and `4`.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 注意运行级别的概念仍然存在，并且`sshd`在`2`、`3`和`4`中启动。
- en: 'We can disable this service with another `chkconfig` command:'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用另一个`chkconfig`命令禁用此服务：
- en: '[PRE94]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'And we enable it using `on`:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们使用`on`来启用它：
- en: '[PRE95]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'Because we''re working with runlevels, you can head to the `rc*.d` directories.
    Specifically, we''re going to drop into `rc3.d` for runlevel `3`:'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们正在处理运行级别，你可以前往`rc*.d`目录。具体来说，我们将进入`rc3.d`来查看运行级别`3`：
- en: '[PRE96]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Within this directory, we're again dealing with symlinks. You'll find a list
    of all jobs run at entry to runlevel `3`.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个目录中，我们再次处理符号链接。你会发现在进入运行级别`3`时运行的所有作业的列表。
- en: 'One will be `sshd` (assuming you''ve not disabled it in the last step):'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个将是`sshd`（假设你在上一步没有禁用它）：
- en: '[PRE97]'
  id: totrans-466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: Debian 7 and SysV init
  id: totrans-467
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Debian 7和SysV init
- en: 'Unlike CentOS 6, Debian 7 uses an older `init` system, its manual page lists
    it like so:'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 与CentOS 6不同，Debian 7使用了一个更旧的`init`系统，其手动页将其列为如下：
- en: '"init, telinit: process control initialization"'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: “init，telinit：进程控制初始化”
- en: Again, we're dealing with PID 1 on the system—that much hasn't changed, only
    now processes are primarily controlled by the `/etc/inittab` file.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们正在处理系统上的PID 1——这一点没有改变，只是现在进程主要由`/etc/inittab`文件控制。
- en: 'Runlevels are again a major player, though we use a different command to discover
    where we are (as a regular user, `root` still has access to the `runlevel` command,
    if you want to use it):'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 运行级别再次是一个主要因素，尽管我们使用不同的命令来发现我们所处的位置（作为普通用户，`root`仍然可以访问`runlevel`命令，如果你想使用它的话）：
- en: '[PRE98]'
  id: totrans-472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'As with `upstart`, the actual destination of our service files is the `/etc/init.d/`
    directory:'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 与`upstart`一样，我们服务文件的实际目的地是`/etc/init.d/`目录：
- en: '[PRE99]'
  id: totrans-474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'This means that, like `Upstart`, we can manually interact with our service
    scripts:'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，与`Upstart`一样，我们可以手动与我们的服务脚本交互：
- en: '[PRE100]'
  id: totrans-476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'The tool we used previously (`chkconfig`) can be installed on Debian 7, but
    by default we use a tool called `update-rc.d` to control starting and stopping
    services at boot:'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前使用的工具（`chkconfig`）可以安装在Debian 7上，但默认情况下我们使用一个叫做`update-rc.d`的工具来控制启动和停止服务：
- en: '[PRE101]'
  id: totrans-478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'If you really want to use `chkconfig`, I won''t shout at you:'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你真的想使用`chkconfig`，我不会责怪你：
- en: '[PRE102]'
  id: totrans-480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: How it works...
  id: totrans-481
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Both `Upstart` and traditional `init` systems rely on the `/etc/init.d/` directory and
    then the various `rc` directories to instruct them what to start at which runlevel:'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: '`Upstart`和传统的`init`系统都依赖于`/etc/init.d/`目录，然后是各种`rc`目录，以指示它们在哪个运行级别启动：'
- en: '[PRE103]'
  id: totrans-483
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'Looking at Debian''s `inittab` we can see the default `runlevel` as configured:'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 查看Debian的`inittab`，我们可以看到默认的`runlevel`配置为：
- en: '[PRE104]'
  id: totrans-485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: So, we know we'll likely end up at runlevel 2, meaning we can check the services
    that start at that runlevel.
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们知道我们很可能最终会到达运行级别2，这意味着我们可以检查在该运行级别启动的服务。
- en: 'The same can be said for `Upstart`, and on our CentOS system, we can see the
    default is set to 3:'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`Upstart`也是如此，在我们的CentOS系统上，我们可以看到默认设置为3：
- en: '[PRE105]'
  id: totrans-488
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: Though it must be said, this is literally the only function that `inittab` serves
    on Upstart systems.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管必须说，这实际上是`inittab`在Upstart系统上的唯一功能。
- en: There's more...
  id: totrans-490
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Honestly, there's a lot more to `Upstart`, and more to traditional `init` systems
    too, but I would suggest that if you're going to be working with Linux and modern
    systems, you should make learning systemd a priority.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 老实说，`Upstart`还有很多内容，传统的`init`系统也是如此，但我建议如果你要在Linux和现代系统上工作，你应该把学习systemd作为首要任务。
- en: If you're working on BSD systems, read up on their own `init` systems and how
    they differ.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在BSD系统上工作，了解一下它们自己的`init`系统以及它们的区别。
- en: If you're working with old servers that you're unlikely to be allowed to turn
    off any time soon, I'm sorry.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用老服务器，而且不太可能被允许随时关闭，我很抱歉。
- en: See also
  id: totrans-494
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: There's good documentation on `Upstart` at [http://upstart.ubuntu.com/cookbook/](http://upstart.ubuntu.com/cookbook/).
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 在[http://upstart.ubuntu.com/cookbook/](http://upstart.ubuntu.com/cookbook/)上有关于`Upstart`的很好的文档。
- en: There're also good accounts, if you can find them from the corners of the internet,
    detailing the events of the Debian Technical Committee vote on their new `init`
    system.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你能从互联网的角落找到它们，还有关于Debian技术委员会对他们的新`init`系统投票事件的很好的记录。
- en: Round-up - services and daemons
  id: totrans-497
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结 - 服务和守护进程
- en: This section turned out a lot longer than I'd expected it to, but at the same
    time, I'm glad that Ubuntu, CentOS, Red Hat, and Debian now share a single `init`
    system.
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分的内容比我预期的要长得多，但与此同时，我很高兴Ubuntu、CentOS、Red Hat和Debian现在共享一个`init`系统。
- en: Had I been writing this book four years ago, I might well have given up at the
    start of this section and gone climbing instead.
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我四年前写这本书，我可能早就放弃了这一部分的开头，去爬山了。
- en: That said, it's over, and I hope you learned something about how systemd works
    in the last few pages.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，这已经结束了，我希望你在最后几页学到了一些关于systemd如何工作的东西。
- en: One last thing to note is that, despite systemd being in all the big players
    now, it still has its critics, and you'll definitely come across the odd grumpy
    sysadmin who can't let go of his bash-script driven systems. My advice in these
    cases is to smile and nod; it's not worth it to get too involved—that or suggest
    they might like to give FreeBSD a go instead?
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 最后要注意的是，尽管systemd现在已经在所有主要系统中，但它仍然有批评者，你肯定会遇到一些无法放弃他的基于bash脚本的系统的抱怨的系统管理员。在这种情况下，我的建议是微笑点头；不值得太过介入——或者建议他们是否愿意尝试一下FreeBSD？
- en: I have mixed memories of SysV and Upstart systems, most of them revolving around
    hacking default bash scripts just to get dependencies working correctly with each
    other. I do get slightly nostalgic when I log on to a system, discover it's running
    Fedora Core 3, and I'm forced to remember everything I thought I'd forgotten about
    SysV init.
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 我对SysV和Upstart系统有着混合的回忆，其中大部分围绕着修改默认的bash脚本以使依赖项正确地与彼此配合。当我登录到一个系统，发现它正在运行Fedora
    Core 3时，我确实有些怀旧，被迫记起我以为已经忘记了的SysV init的一切。
- en: systemd is here to stay, and I personally can't wait to see what it sucks into
    its heaving mass next.
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: systemd已经到来，我个人迫不及待地想看看它接下来会吸收什么。
- en: People might draw the line at `systemd-kerneld` though.
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 人们可能会对`systemd-kerneld`画上界限。
