- en: Chapter 9. Patching a Bash Vulnerability
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章 修补Bash漏洞
- en: 'In this chapter, we will learn the following concepts:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下概念：
- en: Understanding the bash vulnerability through Shellshock
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过Shellshock了解bash漏洞
- en: Shellshock's security issues
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Shellshock的安全问题
- en: The patch management system
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 补丁管理系统
- en: Applying patches on the Linux systems
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Linux系统上应用补丁
- en: Understanding the bash vulnerability through Shellshock
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过Shellshock了解bash漏洞
- en: Shellshock, or Bashdoor, is a vulnerability that's used in most versions of
    the Linux and Unix operating systems. It was discovered on September 12, 2014,
    and it affects all the distributions of Linux using a bash shell. The Shellshock
    vulnerability makes it possible to execute commands remotely using environment
    variables.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Shellshock，或者称为Bashdoor，是Linux和Unix操作系统中大多数版本中使用的漏洞。它于2014年9月12日被发现，影响使用bash
    shell的所有Linux发行版。Shellshock漏洞使得可以使用环境变量远程执行命令。
- en: Getting Ready
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To understand Shellshock, we need a Linux system that uses a version of bash
    prior to 4.3, which is vulnerable to this bug.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解Shellshock，我们需要一个使用早于4.3版本的bash的Linux系统，该版本容易受到此漏洞的影响。
- en: How to do it…
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'In this section, we will take a look at how to set up our system to understand
    the internal details of the Shellshock vulnerability:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看看如何设置我们的系统以了解Shellshock漏洞的内部细节：
- en: The first step is to check the version of bash on the Linux system so that we
    can figure out whether our system is vulnerable to Shellshock. To check the version
    of bash, we run this command:![How to do it…](img/B04234_09_01.jpg)
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是检查Linux系统上bash的版本，以便我们可以确定我们的系统是否容易受到Shellshock的影响。要检查bash的版本，我们运行以下命令：![如何做…](img/B04234_09_01.jpg)
- en: Bash versions from 4.3 and onwards have been reported to be vulnerable to Shellshock.
    For our example, we are using the Ubuntu 12.04 LTS desktop version. From the output
    shown in the preceding image, we can see that this system is vulnerable.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 从4.3版本开始的Bash版本据报告易受Shellshock影响。在我们的示例中，我们使用的是Ubuntu 12.04 LTS桌面版本。从前面的图像输出中，我们可以看到这个系统是有漏洞的。
- en: Now, let's check whether the vulnerability actually exists or not. To do so,
    we run this code:![How to do it…](img/B04234_09_02.jpg)
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们检查漏洞是否真的存在。为此，我们运行以下代码：![如何做…](img/B04234_09_02.jpg)
- en: Once we run the preceding command, if the output has `shellshock` printed, the
    vulnerability is confirmed.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦运行了上述命令，如果输出中打印了`shellshock`，则漏洞已确认。
- en: Let's understand the insights of the vulnerability. For this, we first need
    to understand the basics of the variables of the bash shell.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们了解漏洞的内部情况。为此，我们首先需要了解bash shell的变量基础知识。
- en: 'If we want to create a variable named `testvar` in bash and store a `shellshock`
    value in it, we run this command:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们想在bash中创建一个名为`testvar`的变量，并将`shellshock`值存储在其中，我们运行以下命令：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, if we wish to print the value of this variable, we use the `echo` command,
    as shown here:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们想要打印这个变量的值，我们可以使用`echo`命令，如下所示：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We shall open a child process of bash by running the `bash` command. Then, we
    again try to print the value of the `testvar` variable in the child process:![How
    to do it…](img/B04234_09_03.jpg)
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将通过运行`bash`命令打开一个bash的子进程。然后，我们再次尝试在子进程中打印`testvar`变量的值：![如何做…](img/B04234_09_03.jpg)
- en: We can see that we don't get any output when we try to print the value in the
    child process.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们尝试在子进程中打印该值时，我们看不到任何输出。
- en: Now, we shall try to repeat the preceding process using the environment variables
    of bash. When we start a new shell session of bash, a few variables are available
    for use, and these are called **environment variables**.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将尝试使用bash的环境变量重复上述过程。当我们启动一个新的bash shell会话时，一些变量可供使用，这些被称为**环境变量**。
- en: To make our `testvar` variable an environment variable, we will export it. Once
    it's exported, we can use it in the child shell as well, as shown here:![How to
    do it…](img/B04234_09_04.jpg)
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将我们的`testvar`变量设置为环境变量，我们将对其进行导出。一旦导出，我们也可以在子shell中使用它，如下所示：![如何做…](img/B04234_09_04.jpg)
- en: As we have defined variables and then exported them, in the same way, we can
    define a function and export it in order to make it available in the child shell.
    The following steps show how you can define a function and export it:![How to
    do it…](img/B04234_09_05.jpg)
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们定义变量并导出它们时，同样地，我们可以定义一个函数并导出它，以便在子shell中使用。以下步骤显示了如何定义一个函数并导出它：![如何做…](img/B04234_09_05.jpg)
- en: In the preceding example, the `x` function has been defined, and it has been
    exported using the `-f` flag.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，`x`函数已被定义，并且已使用`-f`标志导出。
- en: 'Now, let''s define a new variable, name it `testfunc`, and assign it a value,
    as shown here:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们定义一个新变量，命名为`testfunc`，并为其赋值，如下所示：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The preceding variable can be accessed in the same way as a regular variable:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 上述变量可以像普通变量一样访问：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, we will export this variable to make it into an environment variable
    and then try to access it from the child shell, as shown here:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将导出这个变量，使其成为一个环境变量，然后尝试从子shell中访问它，如下所示：
- en: '![How to do it…](img/B04234_09_06.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![如何做…](img/B04234_09_06.jpg)'
- en: Something unexpected has taken place in the preceding result. In the parent
    shell, the variable is accessed as a normal variable. However, in the child shell,
    it gets interpreted as a function and executes the body of the function.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的结果中发生了一些意外的事情。在父shell中，该变量被视为普通变量。然而，在子shell中，它被解释为一个函数，并执行函数体。
- en: Next, we shall terminate the definition of the function and then pass any arbitrary
    command to it.![How to do it…](img/B04234_09_07.jpg)
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将终止函数的定义，然后将任意命令传递给它。![如何做…](img/B04234_09_07.jpg)
- en: In the preceding example, as soon as we start a new bash shell, the code that
    was defined outside the function is executed when bash is started.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，一旦我们启动一个新的bash shell，定义在函数外部的代码将在bash启动时执行。
- en: This is the vulnerability in the bash shell.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这是bash shell中的漏洞。
- en: How it works…
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: We first check the version of bash running on our system. Then, we run a well-known
    code to confirm whether the Shellshock vulnerability exists.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先检查系统上运行的bash版本。然后，我们运行一个众所周知的代码来确认Shellshock漏洞是否存在。
- en: To understand how the Shellshock vulnerability works, we create a variable in
    bash and then try to export it to the child shell and execute it there. Next,
    we try to create another variable and set its value as `''() { echo ''shellshock'';}''`.
    After doing this, when we export this variable to the child shell and execute
    it there, we see that it gets interpreted as a function in the child shell and
    executes the body of it.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解Shellshock漏洞是如何工作的，我们在bash中创建一个变量，然后尝试将其导出到子shell并在那里执行。接下来，我们尝试创建另一个变量，并将其值设置为`''()
    { echo ''shellshock'';}''`。这样做后，当我们将这个变量导出到子shell并在那里执行时，我们会看到它在子shell中被解释为一个函数并执行其中的内容。
- en: This is what makes bash vulnerable to Shellshock, where specially crafted variables
    can be used to run any command in bash when it is launched.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是使bash容易受到Shellshock影响的地方，特别设计的变量可以在bash启动时用来运行任何命令。
- en: Shellshock's security issues
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Shellshock的安全问题
- en: In this era where almost everything is online, online security is a major concern.
    These days, a lot of web servers, web-connected devices, and services use Linux
    as their platform. Most versions of Linux use the Unix bash shell, so the *Shellshock*
    vulnerability can affect a huge number of websites and web servers.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个几乎所有东西都在线的时代，在线安全是一个重要的问题。如今，许多Web服务器、Web连接设备和服务都使用Linux作为平台。大多数Linux版本使用Unix
    bash shell，因此*Shellshock*漏洞可能会影响大量的网站和Web服务器。
- en: In the previous recipe, we took a look at the details of the Shellshock vulnerability.
    Now, we will understand how this bug can be exploited through SSH.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个步骤中，我们详细了解了Shellshock漏洞。现在，我们将了解如何通过SSH利用这个漏洞。
- en: Getting Ready
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To exploit the Shellshock vulnerability, we need two systems. The first system
    will be used as a victim and should be vulnerable to Shellshock. In our case,
    we will use an Ubuntu system as the vulnerable system. The second system will
    be used as an attacker and can have any Linux version running on it. In our case,
    we will run Kali on the second system.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要利用Shellshock漏洞，我们需要两个系统。第一个系统将被用作受害者，并且应该容易受到Shellshock的影响。在我们的情况下，我们将使用Ubuntu系统作为易受攻击的系统。第二个系统将被用作攻击者，并且可以运行任何Linux版本。在我们的情况下，我们将在第二个系统上运行Kali。
- en: 'The victim system will run the `openssH-server` package. It can be installed
    using this command:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '受害系统将运行`openssH-server`软件包。可以使用以下命令进行安装:'
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We will configure this system as a vulnerable SSH server to show how it can
    be exploited using the Shellshock bug.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将配置此系统为易受攻击的SSH服务器，以展示如何利用Shellshock漏洞。
- en: How to do it…
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To take a look at how the Shellshock bug can be used to exploit an SSH server,
    we need to first configure our SSH server as a vulnerable system. To do this,
    we will follow these steps:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解Shellshock漏洞如何被用来利用SSH服务器，我们需要首先将我们的SSH服务器配置为易受攻击的系统。为此，我们将按照以下步骤进行：
- en: The first step is to add a new user account called `user1` on the SSH server
    system. We will also add `/home/user1` as its home directory and `/bin/bash` as
    its shell:![How to do it…](img/B04234_09_08.jpg)
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是在SSH服务器系统上添加一个名为`user1`的新用户账户。我们还将`/home/user1`添加为其主目录，`/bin/bash`作为其shell:![如何操作...](img/B04234_09_08.jpg)
- en: Once the account has been added, we cross check by checking the `/etc/passwd`
    file.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 添加完账户后，我们通过检查`/etc/passwd`文件进行交叉检查。
- en: Next, we create a directory for `user1` in `/home` and grant the ownership of
    this directory to the `user1` account.![How to do it…](img/B04234_09_09.jpg)
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们在`/home`中为`user1`创建一个目录，并将该目录的所有权授予`user1`账户。![如何操作...](img/B04234_09_09.jpg)
- en: Now, we need to authenticate the attacker to log in to the SSH server using
    authorization keys. To do this, we will first generate these authorization keys
    on the attacker's system using this command:![How to do it…](img/B04234_09_10.jpg)
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要通过授权密钥来验证攻击者登录到SSH服务器。为此，我们将首先在攻击者的系统上使用以下命令生成这些授权密钥:![如何操作...](img/B04234_09_10.jpg)
- en: We can see that the public/private keys have been generated.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到公钥/私钥已经生成。
- en: After generating the authorization keys, we will send the public key to the
    remote SSH server over SFTP. First, we copy the `id_rsa.pub` public key file to
    `Desktop`, and then we run the command to connect to the SSH server using SFTP.![How
    to do it…](img/B04234_09_11.jpg)
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成授权密钥后，我们将通过SFTP将公钥发送到远程SSH服务器。首先，我们将`id_rsa.pub`公钥文件复制到`桌面`，然后运行连接到SSH服务器的SFTP命令。![如何操作...](img/B04234_09_11.jpg)
- en: When connected, we transfer the file using the `put` command.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 连接后，我们使用`put`命令传输文件。
- en: On the victim SSH server system, we create a`.ssh` directory inside `/home/user1/`,
    and then we write the content of the `id_rsa.pub` file to `authorized_keys` inside
    the `/home/user1/.ssh/` directory:![How to do it…](img/B04234_09_12.jpg)
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在受害者SSH服务器系统上，我们在`/home/user1/`目录下创建一个`.ssh`目录，然后将`id_rsa.pub`文件的内容写入到`/home/user1/.ssh/`目录下的`authorized_keys`文件中:![如何操作...](img/B04234_09_12.jpg)
- en: After this, we edit the configuration file of SSH, `etc/ssh/sshd_config`, and
    enable the `PublicKeyAuthentication` variable. We also check whether `AuthorizedKeysFile`
    has been specified correctly:![How to do it…](img/B04234_09_13.jpg)
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们编辑SSH的配置文件`etc/ssh/sshd_config`，并启用`PublicKeyAuthentication`变量。我们还检查`AuthorizedKeysFile`是否已经正确指定:![如何操作...](img/B04234_09_13.jpg)
- en: Once the preceding steps are successfully completed, we can try to log in to
    the SSH server from the attacker system to check whether we are prompted for a
    password or not:![How to do it…](img/B04234_09_14.jpg)
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在成功完成上述步骤后，我们可以尝试从攻击者系统登录到SSH服务器，以检查是否会提示输入密码:![如何操作...](img/B04234_09_14.jpg)
- en: Now, we will create a basic script, which will display the **restricted** message
    if a user tries to pass the `date` command as an argument. However, if anything
    other than `date` is passed, it will get executed. We will name this script `sample.sh`:![How
    to do it…](img/B04234_09_15.jpg)
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将创建一个基本脚本，如果用户尝试传递`date`命令作为参数，它将显示**restricted**消息。但是，如果传递的不是`date`，它将被执行。我们将把这个脚本命名为`sample.sh`：![如何做…](img/B04234_09_15.jpg)
- en: 'Once the script is created, we run this command to give executable permissions
    to it:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建脚本后，我们运行以下命令为其赋予可执行权限：
- en: '[PRE5]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: After this, we use the `command` option in the `authorized_keys` file to run
    our `sample.sh` script by adding the path of the script, as shown here:![How to
    do it…](img/B04234_09_16.jpg)
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们在`authorized_keys`文件中使用`command`选项运行我们的`sample.sh`脚本，通过添加脚本的路径，如下所示：![如何做…](img/B04234_09_16.jpg)
- en: Making the preceding changes in the `authorized_keys` file in order to restrict
    a user from executing a predefined set of commands will make the Public key authentication
    vulnerable.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在`authorized_keys`文件中进行上述更改，以限制用户执行预定义的一组命令，将使公钥认证变得脆弱。
- en: Now, from the attacker's system, try connecting to the victim's system over
    SSH while passing `date` as the argument.![How to do it…](img/B04234_09_17.jpg)
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，从攻击者的系统中，尝试通过SSH连接到受害系统，同时传递`date`作为参数。![如何做…](img/B04234_09_17.jpg)
- en: We can see the **restricted** message is displayed because of the script that
    we added to the `authorized_keys` file.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到**restricted**消息被显示出来，因为我们将脚本添加到了`authorized_keys`文件中。
- en: Next, we try to pass our Shellshock exploit as an argument, as shown here:![How
    to do it…](img/B04234_09_18.jpg)
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们尝试将我们的Shellshock漏洞利用作为参数传递，如下所示：![如何做…](img/B04234_09_18.jpg)
- en: We can see that even though we have restricted the `date` command in the script,
    it gets executed this time, and we get the output of the `date` command.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，尽管我们在脚本中限制了`date`命令，但这次它被执行了，并且我们得到了`date`命令的输出。
- en: 'Let''s take a look at how to use the Shellshock vulnerability to compromise
    an Apache server, which runs any script that can trigger the bash shell with environment
    variables:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何利用Shellshock漏洞来 compromise 一个运行任何可以触发带环境变量的bash shell的Apache服务器：
- en: 'If Apache is not already installed on the victim''s system, we install it first
    using this command:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果受害系统上尚未安装Apache，我们首先使用此命令安装它：
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Once installed, we launch Apache server using this command:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们使用此命令启动Apache服务器：
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Next, we move to the `/usr/lib/cgi-bin/` path and create an `example.sh` script
    with the following code in it in order to display some HTML output:![How to do
    it…](img/B04234_09_19.jpg)
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们转到`/usr/lib/cgi-bin/`路径，并创建一个`example.sh`脚本，其中包含以下代码，以显示一些HTML输出：![如何做…](img/B04234_09_19.jpg)
- en: 'We then make it executable by running this command:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们通过运行此命令使其可执行：
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: From the attacker's system, we try to access the `example.sh` file remotely
    using a command-line tool called **curl**:![How to do it…](img/B04234_09_20.jpg)
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从攻击者的系统中，我们尝试使用名为**curl**的命令行工具远程访问`example.sh`文件：![如何做…](img/B04234_09_20.jpg)
- en: We get the output of the script as expected, which is `Example Page`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了预期的脚本输出，即`Example Page`。
- en: 'Now, let''s send a malicious request to the server using curl to print the
    content of the `/etc/passwd` file of the victim''s system by running this command:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们使用curl发送一个恶意请求到服务器，以打印受害系统的`/etc/passwd`文件的内容，通过运行此命令：
- en: '[PRE9]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![How to do it…](img/B04234_09_21.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![如何做…](img/B04234_09_21.jpg)'
- en: We can see the output in the attacker's system, showing us how the victim's
    system can be remotely accessed using the Shellshock vulnerability. In the preceding
    command, `() { :;} ;` signifies a variable that looks like a function. In this
    code, the function is a single `:`, which does nothing and is only a simple command.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在攻击者的系统中看到输出，显示了受害系统如何可以使用Shellshock漏洞进行远程访问。在上述命令中，`() { :;} ;`表示一个看起来像函数的变量。在这段代码中，函数是一个单独的`:`，它什么也不做，只是一个简单的命令。
- en: We try another command, as shown here, to take a look at the content of the
    current directory of the victim's system:![How to do it…](img/B04234_09_22.jpg)
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们尝试另一个命令，如下所示，来查看受害系统当前目录的内容：![如何做…](img/B04234_09_22.jpg)
- en: We see the content of the `root` directory of the victim's system in the preceding
    output.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上述输出中看到了受害系统的`root`目录的内容。
- en: How it works…
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: On our SSH server system, we create a new user account and assign the bash shell
    to it as its default shell. We also create a directory for this new user account
    in `/home` and assign its ownership to this account.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的SSH服务器系统上，我们创建一个新的用户账户，并将bash shell分配为其默认shell。我们还在`/home`中为这个新用户账户创建一个目录，并将其所有权分配给这个账户。
- en: Next, we configure our SSH server system to authenticate another system, connecting
    to it using authorization keys.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们配置我们的SSH服务器系统来认证另一个系统，使用授权密钥连接到它。
- en: We then create a bash script to restrict a particular command, such as `date`,
    and add this script path to `authorized_keys` using the command option.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们创建一个bash脚本来限制特定命令，比如`date`，并将此脚本路径添加到`authorized_keys`中使用`command`选项。
- en: After this, when we try to connect to the SSH server from the other system whose
    authorization keys were configured earlier, we'll notice that if we pass the `date`
    command as an argument when connecting, the command gets restricted.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，当我们尝试从之前配置了授权密钥的其他系统连接到SSH服务器时，我们会注意到，如果我们在连接时传递`date`命令作为参数，该命令会受到限制。
- en: However, when the same `date` command is passed with the Shellshock exploit,
    we see the output of the `date` command, thus showing us how Shellshock can be
    used to exploit the SSH server.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当使用Shellshock漏洞传递相同的`date`命令时，我们看到了`date`命令的输出，从而显示了Shellshock如何被用来利用SSH服务器。
- en: Similarly, we exploit the Apache server by creating a sample script and placing
    it in the `/usr/lib/cgi-bin` directory of the Apache system.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，我们通过创建一个示例脚本并将其放置在Apache系统的`/usr/lib/cgi-bin`目录中来利用Apache服务器。
- en: Then, we try to access this script from the other system using the curl tool.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们尝试使用curl工具从另一个系统访问这个脚本。
- en: You'll notice that if we pass a **Shellshock exploit** when accessing the script
    through curl, we are able to run our commands on the Apache server remotely.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到，如果我们通过curl访问脚本时传递了**Shellshock exploit**，我们可以远程在Apache服务器上运行我们的命令。
- en: The patch management system
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 补丁管理系统
- en: In present computing scenarios, vulnerability and patch management are part
    of a never-ending cycle. When a computer is attacked due to a known vulnerability
    for the purpose of being exploited, the patch for such a vulnerability already
    exists; however, it has not been implemented properly on the system, thus causing
    the attack.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前的计算场景中，漏洞和补丁管理是一个永无止境的循环的一部分。当计算机因已知漏洞而受到攻击以被利用时，这种漏洞的补丁已经存在；然而，它尚未正确地在系统上实施，从而导致攻击。
- en: As a system administrator, we have to know which patch needs to be installed
    and which one should be ignored.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 作为系统管理员，我们必须知道哪个补丁需要安装，哪个应该被忽略。
- en: Getting ready
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Since patch management can be done using the inbuilt tools of Linux, no specific
    settings need to be configured before performing the steps.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 由于可以使用Linux的内置工具进行补丁管理，因此在执行这些步骤之前不需要配置特定的设置。
- en: How to do it…
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'The easiest and most efficient way to keep our system updated is using Update
    Manager, which is built into the Linux system. Here, we will explore the workings
    of Update Manager in the Ubuntu system:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 保持系统更新的最简单和最有效的方法是使用内置的更新管理器，该管理器内置在Linux系统中。在这里，我们将探讨Ubuntu系统中更新管理器的工作原理：
- en: To open the graphical version of **Update Manager** in Ubuntu, click on **Superkey**,
    which is on the left-hand side in the toolbar, and then type **update**. Here,
    we can see **Update Manager**:![How to do it…](img/B04234_09_23.jpg)
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在Ubuntu中打开**更新管理器**的图形版本，请点击左侧工具栏上的**Superkey**，然后输入**update**。在这里，我们可以看到**更新管理器**：![如何操作...](img/B04234_09_23.jpg)
- en: When we open **Update Manager**, the following dialog box will appear, showing
    you the different security updates available for installation:![How to do it…](img/B04234_09_24.jpg)
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们打开**更新管理器**时，会出现以下对话框，显示可用于安装的不同安全更新：![如何操作...](img/B04234_09_24.jpg)
- en: Select the updates you want to install, and click on **Install Updates** to
    proceed.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 选择要安装的更新，然后单击**安装更新**以继续。
- en: In the same window, we have the **Settings** button in the bottom-left. When
    we click on it, a new **Software Sources** window will appear, which has more
    options to configure **Update Manager**.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一个窗口中，我们在左下角有一个**设置**按钮。当我们点击它时，会出现一个新的**软件源**窗口，其中有更多选项可以配置**更新管理器**。
- en: The first tab reads **Ubuntu Software**, and it displays a list of repositories
    needed to download updates. We choose the options from the list as per our requirements:![How
    to do it…](img/B04234_09_25.jpg)
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个选项卡是**Ubuntu软件**，它显示了下载更新所需的存储库列表。我们根据自己的需求从列表中选择选项：![如何操作...](img/B04234_09_25.jpg)
- en: If we click on the **Download from** option, we get an option to change the
    repository server that's used for the purposes of downloading. This option is
    useful in case we have any problem connecting to the currently selected server
    or the server is slow.![How to do it…](img/B04234_09_26.jpg)
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们点击**从...下载**选项，我们会得到一个选项来更改用于下载的存储库服务器。如果我们连接到当前选择的服务器存在任何问题或服务器速度慢，这个选项是有用的。![如何操作...](img/B04234_09_26.jpg)
- en: From the drop-down list, when we select the **Other...** option, we get a list
    to select the server we need, as shown in the following image:![How to do it…](img/B04234_09_27.jpg)
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉列表中，当我们选择**其他...**选项时，我们会得到一个服务器选择列表，如下图所示：![如何操作...](img/B04234_09_27.jpg)
- en: The next **Other Software** tab is used to add partner repositories of Canonical:![How
    to do it…](img/B04234_09_28.jpg)
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来的**其他软件**选项卡用于添加Canonical的合作伙伴存储库：![如何操作...](img/B04234_09_28.jpg)
- en: We can choose any option from the list shown in the preceding image, and click
    on **Edit** to make changes to the repository details, as shown here:![How to
    do it…](img/B04234_09_29.jpg)
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以从前面的图像中选择任何选项，并单击**编辑**以更改存储库详细信息，如下所示：![如何操作...](img/B04234_09_29.jpg)
- en: The **Updates** tab is used to define how and when the Ubuntu system receives
    updates:![How to do it…](img/B04234_09_30.jpg)
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**更新**选项卡用于定义Ubuntu系统如何接收更新以及何时接收更新：![如何操作...](img/B04234_09_30.jpg)'
- en: The **Authentication** tab contains details about the authentication keys of
    the software providers as obtained from the maintainer of the software repositories:![How
    to do it…](img/B04234_09_31.jpg)
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**身份验证**选项卡包含有关软件提供者的身份验证密钥的详细信息，这些信息是从软件存储库的维护者那里获得的：![如何操作...](img/B04234_09_31.jpg)'
- en: The last tab is **Statistics**, which is available for users who would like
    to anonymously provide data to the Ubuntu developer project. This information
    helps a developer increase the performance and improve the experience of the software.![How
    to do it…](img/B04234_09_32.jpg)
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一个选项卡是**统计信息**，适用于希望匿名向Ubuntu开发者项目提供数据的用户。这些信息有助于开发人员提高软件的性能和改善用户体验。![如何操作...](img/B04234_09_32.jpg)
- en: After making changes under any of these tabs, when we click on **Close**, we
    are prompted to confirm whether the new updates should be shown in the list or
    not. Click on **Reload** or **Close**:![How to do it…](img/B04234_09_33.jpg)
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这些选项卡中进行任何更改后，当我们点击**关闭**时，会提示我们确认是否应该在列表中显示新的更新。点击**重新加载**或**关闭**：![如何操作...](img/B04234_09_33.jpg)
- en: If we want to check the list of locations from which Update Manager retrieves
    all the packages, we can check the content of the `/etc/apt/sources.list` file.
    We will then get this result:![How to do it…](img/B04234_09_34.jpg)
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们想要检查更新管理器从中检索所有软件包的位置列表，我们可以检查`/etc/apt/sources.list`文件的内容。然后我们会得到这个结果：![如何操作...](img/B04234_09_34.jpg)
- en: How it works…
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: To update our Linux system, we use the built-in Update Manager as per the Linux
    distribution.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新我们的Linux系统，我们使用内置的更新管理器，根据Linux发行版。
- en: In the update manager, we either install all the updates available, or else,
    we configure it as per our requirements using the **Settings** window.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在更新管理器中，我们可以安装所有可用的更新，或者根据我们的需求使用**设置**窗口进行配置。
- en: In the **Settings** window, we have option to display a list of repositories
    from where the updates can be downloaded.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在**设置**窗口中，我们有选项来显示可以下载更新的存储库列表。
- en: The second tab in the **Settings** window lets us add the third-party partner
    repositories of Canonical.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**设置**窗口中的第二个选项卡让我们添加Canonical的第三方合作伙伴存储库。'
- en: Using the next tab, we can specify when and what kind of updates should be downloaded.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 使用下一个选项卡，我们可以指定何时以及何种类型的更新应该被下载。
- en: We also check the authentication keys of the software providers using the settings
    window.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用设置窗口检查软件提供商的身份验证密钥。
- en: The last tab, **Statistics**, helps send data to Ubuntu project developers in
    order to improve the performance of the software.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个选项卡**统计**，帮助将数据发送给Ubuntu项目开发人员，以改进软件的性能。
- en: Applying patches on the Linux systems
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Linux系统上应用补丁
- en: Whenever a security vulnerability is found in any software, a security patch
    is released for the software so that the bug can be fixed. Normally, we use Update
    Manager, which is built into Linux, to apply security updates. However, for software
    that is installed by compiling source code, Update Manager may not be as helpful.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 每当在任何软件中发现安全漏洞时，都会为该软件发布安全补丁，以便修复错误。通常，我们使用内置于Linux中的Update Manager来应用安全更新。但是，对于通过编译源代码安装的软件，Update
    Manager可能不太有用。
- en: For such situations, we can apply the patch file to the original software's
    source code and then recompile the software.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这种情况，我们可以将补丁文件应用到原始软件源代码上，然后重新编译软件。
- en: Getting ready
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Since we will use the built-in commands of Linux to create and apply a patch,
    nothing needs to be done before starting the following steps. We will be creating
    a sample program in C to understand the process of creating a patch file.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将使用Linux的内置命令来创建和应用补丁，在开始以下步骤之前不需要做任何事情。我们将创建一个C语言的示例程序来了解创建补丁文件的过程。
- en: How to do it...
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: In this section, we will take a look at how to create a patch for a program
    using the `diff` command, and then we will apply the patch using the `patch` command.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看看如何使用`diff`命令为程序创建补丁，然后我们将使用`patch`命令应用补丁。
- en: The first step will be to create a simple C program, called `example.c`, to
    print `This is an example`, as shown here:![How to do it...](img/B04234_09_35.jpg)
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步将是创建一个简单的C程序，名为`example.c`，打印`This is an example`，如下所示：![如何做...](img/B04234_09_35.jpg)
- en: Now, we will create a copy of `example.c` and name it `example_new.c`.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将创建`example.c`的副本，并将其命名为`example_new.c`。
- en: Next, we edit the new `example_new.c` file to add a few extra lines of code
    to it, as shown here:![How to do it...](img/B04234_09_36.jpg)
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们编辑新的`example_new.c`文件，向其中添加一些额外的代码行，如下所示：![如何做...](img/B04234_09_36.jpg)
- en: Now, `example_new.c` can be considered as the updated version of `example.c`.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，`example_new.c`可以被视为`example.c`的更新版本。
- en: We will create a patch file and name it `example.patch` using the `diff` command:![How
    to do it...](img/B04234_09_37.jpg)
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用`diff`命令创建一个名为`example.patch`的补丁文件：![如何做...](img/B04234_09_37.jpg)
- en: If we check the content of the patch file, we get this output:![How to do it...](img/B04234_09_38.jpg)
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们检查补丁文件的内容，我们会得到这个输出：![如何做...](img/B04234_09_38.jpg)
- en: Before applying the patch, we can back up the original file using the `-b` option.![How
    to do it...](img/B04234_09_39.jpg)
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用补丁之前，我们可以使用`-b`选项备份原始文件。![如何做...](img/B04234_09_39.jpg)
- en: You will notice that a new `example.c.orig` file has been created, which is
    the backup file.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到一个新的`example.c.orig`文件已经被创建，这是备份文件。
- en: Before performing the actual patching, we can dry run the patch file to check
    whether we get any errors or not. To do this, we run this command:![How to do
    it...](img/B04234_09_40.jpg)
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在实际打补丁之前，我们可以先运行补丁文件的干跑来检查是否有任何错误。为此，我们运行以下命令：![如何做...](img/B04234_09_40.jpg)
- en: If we don't get any error message, it means the patch file can be now run on
    the original file.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们没有收到任何错误消息，这意味着补丁文件现在可以在原始文件上运行。
- en: 'Now, we will run the following command to apply the patch to the original file:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将运行以下命令来将补丁应用到原始文件上：
- en: '[PRE10]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: After applying the patch, if we now check the content of the `example.c` program,
    we will see that it has been updated with some extra lines of code, as written
    in `example_new.c`:![How to do it...](img/B04234_09_41.jpg)
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用补丁后，如果我们现在检查`example.c`程序的内容，我们会看到它已经更新了一些额外的代码行，就像`example_new.c`中写的那样：![如何做...](img/B04234_09_41.jpg)
- en: Once the patch has been applied to the original file, if we wish to reverse
    it, this can be done using the `-R` option:![How to do it...](img/B04234_09_42.jpg)
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦补丁应用到原始文件上，如果我们希望撤销它，可以使用`-R`选项来实现：![如何做...](img/B04234_09_42.jpg)
- en: We can see the difference in the size of the file after patching and then reversing
    it.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到在打补丁后文件的大小差异。
- en: How it works...
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We first create a sample C program. Then, we create its copy, and add few more
    lines of code to make it the updated version. After this, we create a patch file
    using the `diff` command. Before applying the patch, we check it for any errors
    by doing a dry run.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建一个示例C程序。然后，我们创建它的副本，并添加几行代码以使其成为更新版本。之后，我们使用`diff`命令创建一个补丁文件。在应用补丁之前，我们通过干跑来检查是否有任何错误。
- en: If we get no errors, we apply the patch using the patch command. Now, the original
    file will have the same content as the updated version file.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们没有错误，我们使用patch命令应用补丁。现在，原始文件将具有与更新版本文件相同的内容。
- en: We can also reverse the patch using the `-R` option.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用`-R`选项来撤销补丁。
