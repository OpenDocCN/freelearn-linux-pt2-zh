- en: Chapter 1. Using the Terminal / Command Line
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。使用终端/命令行
- en: 'In this chapter we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Command retrieval and line editing
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令检索和行编辑
- en: Using history
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用历史记录
- en: Filename auto-completion
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件名自动完成
- en: The shell prompt
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: shell提示
- en: Other environment variables
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他环境变量
- en: Using aliases
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用别名
- en: The `.bashrc` file
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.bashrc`文件'
- en: Dealing with blanks and special characters in filenames
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理文件名中的空格和特殊字符
- en: Understanding the `$?` variable
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解`$?`变量
- en: Redirection and piping
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重定向和管道
- en: Sending output from one terminal to another
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将输出从一个终端发送到另一个终端
- en: Using the Screen program
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Screen程序
- en: Introduction
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Knowing how to use the command line efficiently will really help you get the
    most out of your computer. There are many ways to save time and effort when typing
    commands, you just need to know what they are.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 了解如何有效使用命令行将真正帮助您充分利用计算机。在输入命令时，有许多节省时间和精力的方法，您只需要知道它们是什么。
- en: There are many different Linux environments available. This chapter focuses
    on the popular **Bash** shell.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多不同的Linux环境可用。本章重点介绍了流行的**Bash** shell。
- en: Command retrieval and line editing
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令检索和行编辑
- en: A standard Bash terminal is automatically set to insert mode, so you don't have
    to press the *Insert* key to insert text. Use the up and down arrow keys to recall
    a previous command, and then other cursor keys to edit that line as needed.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 标准的Bash终端自动设置为插入模式，因此您无需按*Insert*键来插入文本。使用上下箭头键来回忆以前的命令，然后使用其他光标键根据需要编辑该行。
- en: '![Command retrieval and line editing](img/3008_01_01.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![命令检索和行编辑](img/3008_01_01.jpg)'
- en: Getting ready
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: All you need for this example is a terminal running the Bash shell. Other terminals
    may not have these capabilities.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此示例，您只需要运行Bash shell的终端。其他终端可能没有这些功能。
- en: How to do it...
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We will run a few commands as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将按以下方式运行一些命令：
- en: Type in the command `route` and press the *Enter* key.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入命令`route`并按*Enter*键。
- en: Do the same for `uptime`, `ls`, `date`, and `sync`, pressing *Enter* after each
    command.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对`uptime`、`ls`、`date`和`sync`执行相同的操作，每次输入命令后按*Enter*。
- en: 'Now press the up arrow key one time. You should see the following command:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在再按一次上箭头键。您应该会看到以下命令：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now press the up arrow two more times. You should see `date` and `ls`.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在再按两次上箭头键。您应该会看到`date`和`ls`。
- en: Press *Enter*. The `ls` command will run again. Pressing *Enter* will always
    run the command shown.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Enter*。`ls`命令将再次运行。按*Enter*将始终运行显示的命令。
- en: How it works...
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The line is stored in a buffer with full editing capabilities. This buffer is
    sent to the OS when the *Enter* key is pressed.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 该行存储在具有完整编辑功能的缓冲区中。当按下*Enter*键时，该缓冲区将被发送到操作系统。
- en: 'The summary of the keys used for retrieval and editing is as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 用于检索和编辑的键的摘要如下：
- en: '**Up arrow**: It is used to scroll up the history buffer'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**上箭头**：用于向上滚动历史缓冲区'
- en: '**Down arrow**: It is used to scroll down the history buffer'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**下箭头**：用于向下滚动历史缓冲区'
- en: '**Home**: It is used to bring the cursor to the beginning of the line'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Home**：用于将光标移动到行的开头'
- en: '**End**: It is used to bring the cursor to the end of the line'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**End**：用于将光标移动到行的末尾'
- en: '**Delete**: It is used to delete the character to the right of the cursor'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**删除**：用于删除光标右侧的字符'
- en: '**Backspace**: It is used to delete the character to the left of the cursor
    and shift the line'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**退格键**：用于删除光标左侧的字符并移动行'
- en: '**Left and right arrow**: These are the cursor movement keys'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**左右箭头**：这些是光标移动键'
- en: Using history
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用历史记录
- en: The standard Bash shell includes a **history** function. It records each command
    in a database that can be shown by running the `history` command. In this section
    we have shown how this is done.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 标准的Bash shell包括一个**history**功能。它记录每个命令在一个数据库中，可以通过运行`history`命令来显示。在本节中，我们已经展示了如何做到这一点。
- en: Getting ready
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: All you need is a Bash terminal to follow the given steps.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您只需要一个Bash终端来按照给定的步骤进行操作。
- en: 'See the following screenshot:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅以下屏幕截图：
- en: '![Getting ready](img/3008_01_02.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/3008_01_02.jpg)'
- en: How to do it...
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Run a few commands such as `route`, `uptime`, `date`, and `sync`.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行一些命令，如`route`、`uptime`、`date`和`sync`。
- en: Run the `history` command.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`history`命令。
- en: Look for a command you would like to run again, but instead of typing the command,
    type an exclamation point (`!`) and then the number next to the command as shown
    in the history listing, and press *Enter*.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找您想再次运行的命令，但是不要输入命令，而是输入感叹号（`!`），然后输入历史列表中命令旁边的数字，然后按*Enter*。
- en: That command will run again.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该命令将再次运行。
- en: How it works...
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Think of the command line history as a linear database. You can scroll up and
    down until you see the command you want. This is also helpful to recall something
    you did a while back. The `HISTSIZE` environment variable controls how many commands
    will be saved in the buffer.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 将命令行历史视为线性数据库。您可以向上或向下滚动，直到看到所需的命令。这也有助于回忆一段时间前所做的事情。`HISTSIZE`环境变量控制将在缓冲区中保存多少个命令。
- en: Tip
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Be careful with this feature. Make sure you have the correct command before
    running it.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用此功能时要小心。确保在运行之前输入正确的命令。
- en: Filename auto-completion
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件名自动完成
- en: When running a command, you do not have to type the entire filename. This saves
    a lot of time and effort, and also helps prevent typos.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 运行命令时，您无需输入完整的文件名。这样可以节省大量时间和精力，还可以帮助防止输入错误。
- en: 'The *Tab* key is used to invoke filename auto-completion. See the following
    screenshot:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '*Tab*键用于调用文件名自动完成。请参阅以下屏幕截图：'
- en: '![Filename auto-completion](img/3008_01_03.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![文件名自动完成](img/3008_01_03.jpg)'
- en: You only need to type enough characters to make the filename you want unique,
    and then press *Tab*. If you didn't type enough characters, you will hear the
    console beep (in most shells). If you now press *Tab* again, all of the possibilities
    will be displayed.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 您只需输入足够的字符使您想要的文件名变得唯一，然后按*Tab*。如果您没有输入足够的字符，您将听到控制台发出哔哔声（在大多数shell中）。如果现在再次按*Tab*，则将显示所有可能性。
- en: Getting ready
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: All you need for this example is a terminal running the Bash shell.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，你只需要运行 Bash shell 的终端。
- en: How to do it...
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Change to your home directory, in my case it''s:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到你的主目录，我的情况下是：
- en: '[PRE1]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create a directory using the following command:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令创建一个目录：
- en: '[PRE2]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Change to it `Linuxbook` using the following command:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令切换到 `Linuxbook`：
- en: '[PRE3]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now let''s create some dummy files; run using the following command:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们创建一些虚拟文件；使用以下命令运行：
- en: '[PRE4]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now type `ls -la u` and then press *Tab*. The rest of the filename **"unique1.txt"**
    will appear. Press *Enter*.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在输入 `ls -la u`，然后按 *Tab*。其余的文件名 **"unique1.txt"** 将出现。按 *Enter*。
- en: Now type `ls -al file` and press *Tab*. Nothing will happen, and your console
    may beep. Press *Tab* again. Now all 4 filenames will appear.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在输入 `ls -al file` 并按 *Tab*。什么也不会发生，你的控制台可能会响起。再次按 *Tab*。现在所有 4 个文件名将出现。
- en: Add a `4`, press *Tab* again, and then *Enter*. The command `ls -la file4` will
    run.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个 `4`，再次按 *Tab*，然后按 *Enter*。命令 `ls -la file4` 将运行。
- en: This may look complicated or even clumsy but if you give it a chance you will
    become an expert in no time at all.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来复杂甚至笨拙，但如果你给它一个机会，你将很快成为专家。
- en: The shell prompt
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: shell 提示符
- en: A standard terminal usually has a rather cryptic command line prompt. This should
    be changed by modifying the **PS1** environment variable.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 标准终端通常具有相当晦涩的命令行提示符。这应该通过修改 **PS1** 环境变量来更改。
- en: How to do it...
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'An example is shown in the following screenshot:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例：
- en: '![How to do it...](img/3008_01_04.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/3008_01_04.jpg)'
- en: Refer to the line **export PS1="\u \h \w \$ "**
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 参考行 **export PS1="\u \h \w \$ "**
- en: The `\u` command means to show the current user of this shell.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`\u` 命令表示显示此 shell 的当前用户。'
- en: The `\h` command shows the hostname of this machine.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`\h` 命令显示此计算机的主机名。'
- en: The `\w` command means to show the full path of the current directory. This
    change is highly recommended, as the user doesn't have to type **pwd** (**Print
    Working Directory**) all the time to know what directory is being used.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`\w` 命令表示显示当前目录的完整路径。强烈建议进行此更改，因为用户不必一直输入 **pwd** (**Print Working Directory**)
    来了解正在使用的目录。'
- en: The `\$` means to display a `$` or `#` depending on the effective UID.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$` 表示显示 `$` 或 `#` 取决于有效的 UID。'
- en: There's more...
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are many more options, such as showing the time and date, using colors,
    and so on. For more information, run `man bash` and search for `PS1`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他选项，比如显示时间和日期，使用颜色等。要获取更多信息，请运行 `man bash` 并搜索 `PS1`。
- en: Other environment variables
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他环境变量
- en: 'The `PS1` variable is only one of literally hundreds of environment variables.
    Don''t worry, you don''t have to know them all! The following are a few very useful
    ones:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`PS1` 变量只是成百上千个环境变量中的一个。别担心，你不必全部了解它们！以下是一些非常有用的变量：'
- en: '`PS1`: It shows and sets the command line prompt'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PS1`: 显示并设置命令行提示符'
- en: '`USER`: It shows the current user'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`USER`: 显示当前用户'
- en: '`HOSTNAME`: It shows the current hostname for this machine'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HOSTNAME`: 显示此计算机的当前主机名'
- en: '`HOME`: It shows the home directory of the current user'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HOME`: 显示当前用户的主目录'
- en: '`SHELL`: It shows the current shell this terminal is running in'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SHELL`: 显示此终端正在运行的当前 shell'
- en: '`TERM`: It shows which terminal type is being used'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TERM`: 显示正在使用的终端类型'
- en: '`PATH`: It shows and sets the directories where programs are searched for'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PATH`: 显示并设置程序搜索的目录'
- en: '`PWD`: It shows the current working directory'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PWD`: 显示当前工作目录'
- en: '`EDITOR`: It can be set to the full path to your desired text editor for use
    with certain commands such as `crontab -e`'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EDITOR`: 可以设置为所需文本编辑器的完整路径，以便与某些命令一起使用，如 `crontab -e`'
- en: '`TZ`: It shows and sets the time zone variable'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TZ`: 显示并设置时区变量'
- en: '`HISTSIZE`: It shows and sets the size of the history buffer'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HISTSIZE`: 显示并设置历史缓冲区的大小'
- en: Most of these are self-explanatory; however, a few need more discussion. The
    `PATH` environment variable is where commands are searched for in the filesystem.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 其中大多数都是不言自明的；但有一些需要更多讨论。`PATH` 环境变量是在文件系统中搜索命令的地方。
- en: 'The `echo` command is used to display the contents of a variable:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`echo` 命令用于显示变量的内容：'
- en: '![Other environment variables](img/3008_01_05.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![其他环境变量](img/3008_01_05.jpg)'
- en: How to do it...
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Prepending a dot to the `PATH` means the program will be looked for in the
    current directory first, before searching the rest of the path. This is very useful
    during the code development for example. Do this by running:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `PATH` 前加一个点意味着程序将首先在当前目录中查找，然后再搜索其余的路径。例如，在代码开发期间，这非常有用。通过运行以下命令来实现这一点：
- en: '[PRE5]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `EDITOR` variable can be set to your favorite text editor. Most people
    use `vi (or vim)`; however, you can point it to the one you want. If you change
    this, be sure to use the full path. To change the `EDITOR` variable do this:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`EDITOR` 变量可以设置为你喜欢的文本编辑器。大多数人使用 `vi (或 vim)`；但是，你可以指向你想要的编辑器。如果更改了这个，请确保使用完整路径。要更改
    `EDITOR` 变量，请执行以下操作：'
- en: '[PRE6]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'An `export` can be removed by setting it to nothing:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`export` 可以通过将其设置为空来移除：'
- en: '[PRE7]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: By convention, environment variables are usually written in uppercase. View
    the man pages and/or search Google for more information on these variables.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照惯例，环境变量通常以大写字母编写。查看 man 手册和/或在 Google 上搜索有关这些变量的更多信息。
- en: How it works...
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Think of these environment variables just as you would if you were using a programming
    language. In this case, the type of the variable is determined by the OS. For
    example, you could type `A=1` or `A="This is a string"`.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 把这些环境变量想象成你使用编程语言时的变量一样。在这种情况下，变量的类型由操作系统确定。例如，你可以输入 `A=1` 或 `A="This is a string"`。
- en: The OS knows the difference. Also, there is variable scope. Notice I did not
    use `export` above. That means this `A` is local to this shell. Only exporting
    a variable will make it available to other shells (after sourcing the file).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统知道区别。此外，还有变量范围。请注意，我上面没有使用 `export`。这意味着此 `A` 局部于此 shell。只有导出变量才能使其在其他 shell
    中可用（在源文件后）。
- en: Using aliases
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用别名
- en: Wouldn't it be nice if you could easily create a simple command without having
    to make a script out of it? Well, there is a way. This is done using **aliases**.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您可以轻松创建一个简单的命令而无需将其制作成脚本，那不是很好吗？好吧，有办法。这是使用**别名**完成的。
- en: How to do it...
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following are the steps to create an alias:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是创建别名的步骤：
- en: Type `tput clear` and press *Enter*. Your screen should have cleared.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`tput clear`并按*Enter*。您的屏幕应该已经清空了。
- en: Now enter `alias cls="tput clear"`. Now when you run `cls` it will do the same
    thing.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在输入`alias cls="tput clear"`。现在当您运行`cls`时，它将执行相同的操作。
- en: Let's create some more. To show a long directory listing enter `alias la="ls
    -la"`. Enter `'la'` to run the alias.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们再创建一些。要显示长目录列表，请输入`alias la="ls -la"`。输入`'la'`来运行别名。
- en: To show a long listing with the most current files last enter `'alias lt="ls
    -latr"'`.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要显示最新文件的长列表，请输入`'alias lt="ls -latr"'`。
- en: If you create an alias and then decide you no longer want it you can remove
    it by using the `unalias` command, for example, `unalias cls`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您创建了一个别名，然后决定不再需要它，可以使用`unalias`命令将其删除，例如`unalias cls`。
- en: 'You can also use aliases to move around the filesystem efficiently. This is
    very handy and will save you an incredible amount of typing. Here are some examples:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用别名有效地在文件系统中移动。这非常方便，将为您节省大量的输入。以下是一些示例：
- en: '`mkdir /home/jklewis/linuxbook`'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`mkdir /home/jklewis/linuxbook`'
- en: '`alias lbook="cd /home/jklewis/linuxbook"`'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`alias lbook="cd /home/jklewis/linuxbook"`'
- en: '`lbook`'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`lbook`'
- en: 'You will now be taken to that directory. Here is something I make frequent
    use of on my systems:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您将进入该目录。这是我在我的系统上经常使用的东西：
- en: '`export LBOOK="/home/jklewis/linuxbook"`'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`export LBOOK="/home/jklewis/linuxbook"`'
- en: '`alias lbook="cd $LBOOK"`'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`alias lbook="cd $LBOOK"`'
- en: '`lbook`'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`lbook`'
- en: 'As you can see, running `lbook` will take you to the directory as shown above.
    However, you can also use the `LBOOK` variable to copy files to that directory:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，运行`lbook`将带您到如上所示的目录。但是，您也可以使用`LBOOK`变量将文件复制到该目录：
- en: '`cd /tmp`'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`cd /tmp`'
- en: '`touch f1.txt`'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`touch f1.txt`'
- en: '`cp f1.txt $LBOOK`'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`cp f1.txt $LBOOK`'
- en: The file `f1.txt` will now exist in the `/home/jklewis/linuxbook` directory.
    This becomes even more handy when extremely long filenames are used.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 文件`f1.txt`现在将存在于`/home/jklewis/linuxbook`目录中。当使用非常长的文件名时，这将变得更加方便。
- en: Tip
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: To remove the `lbook` alias run `unalias lbook`
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除`lbook`别名，请运行`unalias lbook`
- en: You can list your aliases by just running `alias` without any parameters. Any
    time you find yourself constantly typing the same commands or filenames consider
    creating an alias for it.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过只运行`alias`而不使用任何参数来列出您的别名。每当您发现自己不断输入相同的命令或文件名时，请考虑为其创建别名。
- en: There's more...
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Note that the above examples will only be effective in that terminal and will
    not persist across a reboot. See the next section on how to make the changes permanent.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，上述示例仅在该终端中有效，并且不会在重新启动后保留。请参阅下一节，了解如何使更改永久生效。
- en: Also, in some cases, what you want to do may be too complicated for an alias,
    for example, to check for the proper number of parameters. This is where you can
    create a shell script, which will be covered in [Chapter 8](ch08.html "Chapter 8. Working
    with Scripts"), *Working with Scripts*.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在某些情况下，您想要做的可能对于别名来说太复杂了，例如，检查正确数量的参数。这就是您可以创建一个shell脚本的地方，这将在[第8章](ch08.html
    "第8章。使用脚本")中介绍，*使用脚本*。
- en: The .bashrc file
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: .bashrc文件
- en: There are many environment variables we can look at and change. However, we
    certainly don't want to enter these every time we start a new shell. There is
    a special file, named `.bashrc`, which is used to store your settings. It is located
    in the user's home directory. For example, the `.bashrc` file for the root user
    is in the `/root` directory.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以查看和更改许多环境变量。但是，我们肯定不想每次启动新shell时都输入这些内容。有一个特殊的文件，名为`.bashrc`，用于存储您的设置。它位于用户的主目录中。例如，root用户的`.bashrc`文件位于`/root`目录中。
- en: 'Here is a `.bashrc` file from one of my systems:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我其中一个系统的`.bashrc`文件：
- en: '![The .bashrc file](img/3008_01_06.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![.bashrc文件](img/3008_01_06.jpg)'
- en: How to do it...
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The description of the lines is as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 行的描述如下：
- en: To comment a line, precede it with a `#` symbol.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要注释一行，请在其前面加上`#`符号。
- en: To create a variable, use the `export` tag.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建一个变量，请使用`export`标签。
- en: To create an alias, use the `alias` tag (as shown earlier in this chapter).
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建别名，请使用`alias`标签（如本章前面所示）。
- en: Control statements are allowed; see the `if` clause in the previous screenshot.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 允许控制语句；请参见前面屏幕截图中的`if`子句。
- en: 'After modifying your `.bashrc` file, remember to source it using the dot operator
    as follows:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改您的`.bashrc`文件后，请记得使用点运算符对其进行源操作，如下所示：
- en: '[PRE8]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Dealing with blanks and special characters in filenames
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理文件名中的空格和特殊字符
- en: Linux (and Unix) filesystems were not originally designed to handle blanks in
    filenames. This can cause quite a few problems, as the shell treats each item
    after a blank as another file or parameter. A solution is to use quotes, the backslash,
    or the *Tab* key.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: Linux（和Unix）文件系统最初并不是为处理文件名中的空格而设计的。这可能会导致许多问题，因为shell会将空格后的每个项目视为另一个文件或参数。解决方案是使用引号、反斜杠或*Tab*键。
- en: The following sections assume the user has not modified the Bash **Internal
    Field** Separator (**IFS**) variable.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 以下各节假定用户尚未修改Bash **内部字段**分隔符（**IFS**）变量。
- en: How to do it...
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'See the following screenshot. I purposely created three "bad" filenames:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅以下屏幕截图。我故意创建了三个“坏”文件名：
- en: '![How to do it...](img/3008_01_07.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/3008_01_07.jpg)'
- en: Run `ls -la file with blanks.txt` and notice the errors.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`ls -la file with blanks.txt`并注意错误。
- en: 'Now run it again, but enclose the filename in quotes: `ls -la "file with blanks.txt"`;
    it will work properly now.'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在再次运行它，但用引号括起文件名：`ls -la "file with blanks.txt"`；现在它将正常工作。
- en: Enter `ls -la file` and press *Tab*. It will escape the blanks for you.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`ls -la file`并按*Tab*。它会为您转义空格。
- en: Run `ls -la special>.txt`. Observe the error.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`ls -la special>.txt`。观察错误。
- en: 'Enclose in quotes as before using the following command:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在使用以下命令之前加上引号：
- en: '[PRE9]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now try `ls -la -startswithdash.txt` and then try quoting it. Doesn't work,
    right?
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在尝试`ls -la -startswithdash.txt`，然后尝试用引号括起来。不起作用，对吧？
- en: 'Precede the filename with the `./` operator using the following command:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令在文件名之前加上`./`操作符：
- en: '[PRE10]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As you can see, this can also be a problem if special characters have been used
    in the filename. Study this one a bit and it will become clear. Remember the *Tab*
    key; it works really well for just about every case. If the file starts with a
    dash, use the `./` operator. It means to refer to the file in the current directory.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，如果文件名中使用了特殊字符，这也可能是一个问题。仔细研究一下，它会变得清晰的。记住*Tab*键；它对几乎每种情况都非常有效。如果文件以破折号开头，使用`./`操作符。它表示引用当前目录中的文件。
- en: There's more...
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有...
- en: The issue of blanks and special characters is even more of a problem in scripts.
    This will be covered in more detail in [Chapter 8](ch08.html "Chapter 8. Working
    with Scripts"), *Working with Scripts*.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 空格和特殊字符的问题在脚本中更加严重。这将在[第8章](ch08.html "第8章。使用脚本")*使用脚本*中更详细地介绍。
- en: Understanding the $? variable
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解`$?`变量
- en: Typically, when a command is run in Linux it performs a task; it either reports
    what it did or indicates an error occurred. An internal return code is also generated,
    and is displayed by running the `echo $?` command. Note that this must be the
    very next thing typed after the original command.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当在Linux中运行命令时，它执行一个任务；它要么报告它做了什么，要么指示发生了错误。还会生成一个内部返回代码，并通过运行`echo $?`命令显示出来。请注意，这必须是在原始命令之后输入的下一个东西。
- en: 'The following screenshot shows `echo $?`:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了`echo $?`：
- en: '![Understanding the $? variable](img/3008_01_08.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![理解`$?`变量](img/3008_01_08.jpg)'
- en: How to do it...
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Here is a quick example of **echo $?**:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这是**echo $?**的一个快速示例：
- en: 'Run the following command:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE11]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'It should succeed. Run the following command:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它应该成功。运行以下命令：
- en: '[PRE12]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You should get a `0` for success.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该得到一个`0`表示成功。
- en: 'Now run the following command:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在运行以下命令：
- en: '[PRE13]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Tip
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: It may take a second or two to complete.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 可能需要一两秒才能完成。
- en: Run `echo $?` again. It should return a non-zero value to indicate failure.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次运行`echo $?`。它应该返回一个非零值表示失败。
- en: How it works...
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In general, a return of zero means success. A non-zero return means an error
    has occurred, and in many cases the code returned indicates what the error was.
    Remember this the next time you type a command, hit *Enter*, and get the shell
    prompt back without anything appearing to happen.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，返回值为零表示成功。非零返回表示发生了错误，在许多情况下，返回的代码表示了错误是什么。记住这一点，下次你输入一个命令，按*Enter*，并且没有任何东西发生时，就会得到shell提示符。
- en: There's more...
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有...
- en: The `man` and `info` pages for a command typically contain an entry showing
    what the errors mean. If the `man` page is lacking, consult the web.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 命令的`man`和`info`页面通常包含一个条目，显示错误的含义。如果`man`页面缺少，可以查阅网页。
- en: Redirection and piping
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重定向和管道
- en: Suppose you run a command, say `route`, and want to save the output in a file.
    The **redirection** (`>`) operator is used to do this instead of sending the output
    to the screen.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你运行一个命令，比如`route`，并想将输出保存在一个文件中。**重定向**(`>`)操作符用于这个目的，而不是将输出发送到屏幕上。
- en: How to do it...
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s try some redirection:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试一些重定向：
- en: Enter `ifconfig > file1.txt`. You won't see anything, because the output went
    into the file.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`ifconfig > file1.txt`。你看不到任何东西，因为输出已经进入文件中。
- en: Run `cat file1.txt`. You should now see the output.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`cat file1.txt`。现在你应该看到输出。
- en: 'This works the other direction as well, to read from a file run the following
    command:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这也适用于另一个方向，要从文件中读取，运行以下命令：
- en: '[PRE14]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You can even do both in one step:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你甚至可以一步完成两个操作：
- en: '[PRE15]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: You can also send the output to another command using the pipe operator. For
    example, run `route | grep eth0`. The above command would display only the lines
    from `route` that contain the phrase `eth0`.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你还可以使用管道操作符将输出发送到另一个命令。例如，运行`route | grep eth0`。上面的命令将只显示包含短语`eth0`的`route`行。
- en: There's more...
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有...
- en: 'Here is something that I use all the time. Say I have written a program in
    C a long time ago, have several versions, and want to find the latest one. I could
    run `locate` to find them all:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我经常使用的一个东西。假设我很久以前用C语言写了一个程序，有几个版本，并且想找到最新的版本。我可以运行`locate`来找到它们：
- en: '[PRE16]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This might return quite a few lines. How can I run `ls` on each file to find
    the latest one? By piping the output into the `xargs` command and then `ls`:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能会返回很多行。我怎样才能对每个文件运行`ls`来找到最新的文件？通过将输出导入`xargs`命令，然后再运行`ls`：
- en: '[PRE17]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This will now show the time and date of each file.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将显示每个文件的时间和日期。
- en: This might seem a bit complicated at first, but if you experiment a little it
    will become second nature to you.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这一开始可能有点复杂，但如果你稍微尝试一下，它将成为你的第二天性。
- en: Sending output from one terminal to another
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从一个终端发送输出到另一个终端
- en: This is a really handy feature that is unique to Linux/UNIX systems. It's most
    useful in scripts but can be used on the command line as well. If you have a system
    available try the given steps.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Linux/UNIX系统独有的一个非常方便的功能。它在脚本中最有用，但也可以在命令行上使用。如果你有一个可用的系统，请尝试给定的步骤。
- en: Getting ready
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need two open terminals.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要两个打开的终端。
- en: How to do it...
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We show how to send the output from one terminal to another in the following
    steps:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在以下步骤中展示如何将一个终端的输出发送到另一个终端：
- en: In one terminal run the `tty` command. The output should be something like `/dev/pts/16`.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个终端中运行`tty`命令。输出应该是类似`/dev/pts/16`的东西。
- en: In the other terminal run the `route` command. You will see the output in that
    terminal.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在另一个终端中运行`route`命令。你将在那个终端中看到输出。
- en: 'Now run `route` again, but now using the command:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在再次运行`route`，但现在使用命令：
- en: '[PRE18]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The output will go to that other terminal.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出将进入另一个终端。
- en: How it works...
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Terminals on Linux systems are devices that have their own buffer space. By
    referring to the device by name you can write to it.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: Linux系统上的终端是具有自己的缓冲空间的设备。通过名称引用设备，你可以向其写入。
- en: There's more...
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有...
- en: This feature is even more useful in scripts, which we will see in [Chapter 8](ch08.html
    "Chapter 8. Working with Scripts"), *Working with Scripts*.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 这个功能在脚本中更有用，我们将在[第8章](ch08.html "第8章。使用脚本")中看到，*使用脚本*。
- en: Using the Screen program
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Screen程序
- en: '**Screen** is a full-screen window manager that shares a physical terminal
    with other processes (which are usually other terminals/shells). It is normally
    used when no other manager or desktop is available, such as on a server. It has
    a scroll-back history buffer and also allows for copy and paste of text between
    windows.'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '**Screen**是一个全屏窗口管理器，与其他进程（通常是其他终端/ shell）共享物理终端。通常在没有其他管理器或桌面可用时使用，例如在服务器上。它具有滚动回退历史缓冲区，并且还允许在窗口之间复制和粘贴文本。'
- en: Getting ready
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'The following is a brief list of some of the many key bindings available with
    Screen:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些Screen可用的许多键绑定的简要列表：
- en: '*Ctrl* + *A* + *?*: It displays a list of commands and their key bindings'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ctrl* + *A* + *?*：它显示命令列表及其键绑定'
- en: '*Ctrl* + *A* + *C*: It brings up a new window'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ctrl* + *A* + *C*：它会弹出一个新窗口'
- en: '*Ctrl* + *A* + *D*: It detaches a window'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ctrl* + *A* + *D*：它会分离一个窗口'
- en: '*Ctrl* + *A* + *N*: It is used to go to the next window in the sequence'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ctrl* + *A* + *N*：它用于转到序列中的下一个窗口'
- en: '*Ctrl* + *A* + *P*: It is used to go to the previous window in the sequence'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ctrl* + *A* + *P*：它用于转到序列中的上一个窗口'
- en: '*Ctrl* + *A* + *#* (where # is a number): It is used to go directly to that
    window'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ctrl* + *A* + *#*（其中#是一个数字）：它用于直接转到该窗口'
- en: '*Ctrl* + *A* + *"*: It shows the list of windows; user can select any one by
    the number'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ctrl* + *A* + *"*：它显示窗口列表；用户可以通过数字选择任何一个'
- en: 'The following is a list of frequently used commands:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些经常使用的命令列表：
- en: '`screen -list`: It shows all of the windows'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`screen -list`：它显示所有窗口'
- en: '`screen <program>`: It creates a new window and run that program in it'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`screen <program>`：它创建一个新窗口并在其中运行该程序'
- en: How to do it...
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'An example of running the Screen utility is as follows:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 运行Screen实用程序的示例如下：
- en: In a terminal run the `screen -L` command.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中运行`screen -L`命令。
- en: Now press *Ctrl* + *A* and then press *C*. This will create another window.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在按下*Ctrl* + *A*，然后按*C*。这将创建另一个窗口。
- en: Do this two more times.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再做两次。
- en: Try typing *Ctrl* + *A* + *0*.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试输入*Ctrl* + *A* + *0*。
- en: Try *Ctrl* + *A* + *3*.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试*Ctrl* + *A* + *3*。
- en: How it works...
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the previous section, step 1 will create a new window, `window 0`. If you
    are running inside a window manager you may notice the title change showing which
    window it is.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，第1步将创建一个新窗口，“窗口0”。如果您正在窗口管理器中运行，您可能会注意到标题更改，显示它是哪个窗口。
- en: Step 2 will create another window. After step 3, you will have 4 windows in
    total.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 第2步将创建另一个窗口。完成第3步后，您将总共有4个窗口。
- en: When you perform the actions in step 4, you should be in `window 0`. Typing
    *Ctrl* + *a* + *3* will take you to `window 3`.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 当您执行第4步中的操作时，您应该在`窗口0`中。输入*Ctrl* + *a* + *3*将带您到`窗口3`。
- en: There's more...
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Here is a helpful hint, if you are running only a command line with no desktop,
    you may want to change your `PS1` variable to something like the following in
    your `.bashrc` file:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个有用的提示，如果您只运行命令行而没有桌面，您可能希望在`.bashrc`文件中将您的`PS1`变量更改为以下内容：
- en: '[PRE19]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Now the prompt will always show which window you are in.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 现在提示将始终显示您在哪个窗口。
- en: This describes only a small part of what Screen can do. Consult the `man` page
    for more information.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 这仅描述了Screen可以做的一小部分。请参阅`man`页面以获取更多信息。
