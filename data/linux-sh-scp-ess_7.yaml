- en: Chapter 7. Welcome to the Processes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。欢迎来到进程
- en: A program under execution is known as **process**. When an operating system
    gets booted up, multiple processes get started in order to provide various functionalities
    and user interfaces so that a user can easily perform the required tasks. For
    example, when we start a command line server, we will see a terminal with bash
    or any other shell process that has been started.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 正在执行的程序称为**进程**。当操作系统启动时，多个进程会启动，以提供各种功能和用户界面，以便用户可以轻松执行所需的任务。例如，当我们启动命令行服务器时，我们将看到一个带有bash或任何其他已启动的shell进程的终端。
- en: In Linux, we have full control over processes. It allows us to create, stop,
    and kill processes. In this chapter, we will see how a process is created and
    managed by using commands such as `top`, `ps`, and `kill` and by changing its
    scheduling priority. We will also see how a signal can lead to the sudden termination
    of a process and also the ways to handle signals in a script using the command
    trap. We will also see one of the beautiful features of processes called Inter-process
    communication, which allows them to communicate with each other.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux中，我们对进程有完全控制权。它允许我们创建、停止和终止进程。在本章中，我们将看到如何使用诸如`top`、`ps`和`kill`之类的命令以及通过更改其调度优先级来创建和管理进程。我们还将看到信号如何导致进程突然终止，以及使用命令trap在脚本中处理信号的方法。我们还将看到进程的一个美妙特性，即进程间通信，它允许它们相互通信。
- en: 'This chapter will cover the following topics in detail:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将详细介绍以下主题：
- en: Process management
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进程管理
- en: Listing and monitoring processes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出和监视进程
- en: Process substitution
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进程替换
- en: Process scheduling priorities
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进程调度优先级
- en: Signals
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信号
- en: Traps
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 陷阱
- en: Inter-process Communication
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进程间通信
- en: Process management
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进程管理
- en: Managing processes is very important because processes are what consumes system
    resources. System users should be careful about the processes they are creating,
    in order to ensure that a process is not affecting any other critical processes.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 管理进程非常重要，因为进程是消耗系统资源的主要因素。系统用户应该注意他们正在创建的进程，以确保进程不会影响任何其他关键进程。
- en: Process creation and execution
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进程创建和执行
- en: In bash, creating a process is very easy. When a program is executed, a new
    process is created. In a Linux or Unix-based system, when a new process is created,
    a unique ID is assigned to it, which is known as PID. A PID value is always a
    positive number starting from `1`. Depending upon a system having `init` or `systemd`,
    they always get the PID value 1 because this will be the first process in a system
    and it is the ancestor of all other processes.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在bash中，创建进程非常容易。执行程序时，会创建一个新进程。在Linux或基于Unix的系统中，创建新进程时会为其分配一个唯一的ID，称为PID。PID值始终是从`1`开始的正数。根据系统是否具有`init`或`systemd`，它们始终获得PID值1，因为这将是系统中的第一个进程，它是所有其他进程的祖先。
- en: The maximum value of PID is defined in the `pid_max` file, which should be available
    in the `/proc/sys/kernel/` directory. By default, the `pid_max` file contains
    the value `32768` (max PID + 1), which means a maximum of `32767` processes can
    exist in a system simultaneously. We can change the value of the `pid_max` file
    depending upon needs.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: PID的最大值在`pid_max`文件中定义，该文件应该位于`/proc/sys/kernel/`目录中。默认情况下，`pid_max`文件包含值`32768`（最大PID
    + 1），这意味着系统中最多可以同时存在`32767`个进程。我们可以根据需要更改`pid_max`文件的值。
- en: 'For understanding the process creation better, we will create a new process
    `vi` from bash:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解进程创建，我们将从bash创建一个新进程`vi`：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, we have created a new process `vi` that opens the `hello.txt` file in
    editor to read and write text. Calling the `vi` command causes the binary file
    `/usr/bin/vi` to execute and perform the needed tasks. A process that creates
    another process is known as the parent of the process. In this example, `vi` was
    created from bash, so bash is the parent of the process `vi`. The method of creating
    a child process is known as forking. During the process of fork, a child process
    inherits the properties of its parents such as GID, real and effective UID and
    GID, environment variables, shared memory, and resource limit.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建了一个新进程`vi`，它打开编辑器中的`hello.txt`文件以读写文本。调用`vi`命令会导致二进制文件`/usr/bin/vi`执行并执行所需的任务。创建另一个进程的进程称为该进程的父进程。在本例中，`vi`是从bash创建的，因此bash是进程`vi`的父进程。创建子进程的方法称为forking。在fork过程中，子进程继承其父进程的属性，如GID、真实和有效的UID和GID、环境变量、共享内存和资源限制。
- en: 'To know the PID of the `vi` process created in the preceding section, we can
    use the commands such as `pidof` and `ps`. For example, run the following command
    in a new terminal to know the pid of the `vi` process:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要知道在前一节中创建的`vi`进程的PID，我们可以使用诸如`pidof`和`ps`之类的命令。例如，在新终端中运行以下命令以了解`vi`进程的pid：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Once a task is completed, a process gets terminated and PID is free to get assigned
    to a new process based on need.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 任务完成后，进程终止并且PID可根据需要自由分配给新进程。
- en: The detailed information about each process is available in the `/proc/` directory.
    A directory with the PID name gets created for each process in `/proc/` containing
    its detailed information.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 有关每个进程的详细信息可在`/proc/`目录中找到。对于`/proc/`中的每个进程，都会创建一个名为PID的目录，其中包含其详细信息。
- en: 'A process can be in any of the following states during its lifetime:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 进程在其生命周期中可以处于以下任何状态之一：
- en: '**Running**: In this state, a process is either running or ready to run'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行**：在此状态下，进程正在运行或准备运行'
- en: '**Waiting**: A process is waiting for a resource'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**等待**：进程正在等待资源'
- en: '**Stopped**: A process has been stopped; for example, after receiving a signal'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**停止**：进程已停止；例如，收到信号后'
- en: '**Zombie**: A process has exited successfully, but its state change wasn''t
    yet acknowledged by the parent'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**僵尸**：进程已成功退出，但其状态变化尚未被父进程确认'
- en: Process termination
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进程终止
- en: In normal circumstances, after completing tasks, a process terminates and frees
    up the allocated resources. If the shell has forked any subprocesses, then it
    will wait for them to finish their task first (other than a background process).
    In some cases, a process may not behave normally and it can be waiting or consuming
    resources for a longer time than expected. In some other cases, it may happen
    that a process is now no longer required. In such cases, we can kill the process
    from a terminal and free up resources.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在正常情况下，完成任务后，进程会终止并释放分配的资源。如果shell已经派生了任何子进程，那么它将等待它们完成任务（而不是后台进程）。在某些情况下，进程可能不会正常工作，可能会等待或消耗比预期更长的时间。在其他一些情况下，可能会发生进程现在不再需要的情况。在这种情况下，我们可以从终端杀死进程并释放资源。
- en: To terminate a process, we can use the `kill` command. The `killall` and `pkill`
    commands can also be used if available on a system.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要终止一个进程，我们可以使用`kill`命令。如果系统上有的话，也可以使用`killall`和`pkill`命令。
- en: Using the kill command
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用kill命令
- en: The `kill` command sends the specified signal to the specified processes. If
    no signal is provided, the default `SIGTERM` signal is sent. We will see more
    about signals further down in this chapter.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`kill`命令向指定的进程发送指定的信号。如果没有提供信号，则发送默认的`SIGTERM`信号。我们将在本章后面更多地了解有关信号的信息。'
- en: 'The following is the syntax of using the `kill` command:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用`kill`命令的语法：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: AND
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: AND
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To kill a process, first get the `PID` of that process as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要杀死一个进程，首先获取该进程的`PID`如下：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here, we used the `SIGSTOP` signal to stop the process instead of killing it.
    To kill, we can use the `SIGKILL` signal or the associated value to this signal,
    which is `9`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`SIGSTOP`信号来停止进程而不是杀死它。要杀死，我们可以使用`SIGKILL`信号或与此信号相关的值，即`9`。
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: OR
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: OR
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Using the killall command
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用killall命令
- en: It's easy to remember a process by name rather than by PID. The `killall` command
    makes it easier to kill a process since it takes the command name as a parameter
    to kill a process.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 按名称而不是PID来记住一个进程更容易。`killall`命令使得杀死一个进程更容易，因为它将命令名称作为参数来杀死一个进程。
- en: 'The following is the syntax of the `killall` command:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`killall`命令的语法：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: AND
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: AND
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'For example, we can kill the `firefox` process by name, as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以按名称杀死`firefox`进程，如下所示：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Using the pkill command
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用pkill命令
- en: The `pkill` command can also be used to kill a process by its name. Unlike the
    `killall` command, by default the `pkill` command finds all the processes beginning
    with the name specified in its argument.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`pkill`命令也可以用来按名称杀死一个进程。与`killall`命令不同，默认情况下，`pkill`命令会找到所有以其参数中指定的名称开头的进程。'
- en: 'For example, the following command demonstrates how `pkill` kills the `firefox`
    process from its partial name specified in an argument:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下命令演示了`pkill`如何根据参数中指定的部分名称杀死`firefox`进程：
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `pkill` command should be used carefully because it will kill all the matching
    processes, which may not be our intention. We can determine which processes are
    going to be killed by `pkill`, using the `pgrep` command with the `-l` option.
    The `pgrep` command finds processes based on its name and attributes. Run the
    following commands to list all process names and its PID whose name begin with
    the `firef` and `fire` strings, respectively:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`pkill`命令应该谨慎使用，因为它会杀死所有匹配的进程，这可能不是我们的意图。我们可以使用`pgrep`命令和`-l`选项来确定将要被`pkill`杀死的进程。`pgrep`命令根据其名称和属性找到进程。运行以下命令来列出所有以`firef`和`fire`字符串开头的进程名称及其PID：'
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here, `firefox` is the matching process name and its PID is `8168`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`firefox`是匹配的进程名称，其PID是`8168`：
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We can also tell `pkill` to kill a process with exact match of process name
    using the `--exact` or `-x` option as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以告诉`pkill`使用`--exact`或`-x`选项来精确匹配进程名称杀死进程，如下所示：
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The pkill command can also send a specific signal to all matching processes
    with the `-signal_name` option as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: pkill命令还可以使用`-signal_name`选项向所有匹配的进程发送特定信号，如下所示：
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The preceding command sends the `SIGKILL` signal to all processes whose name
    begins with `firef`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令向所有以`firef`开头的进程发送`SIGKILL`信号。
- en: Listing and monitoring processes
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出和监视进程
- en: In a running system, we often notice that suddenly a system is responding slowly.
    This can be because a running application is consuming a lot of memory or a process
    is doing CPU-intensive work. It's hard to predict which application is causing
    the system to respond slower. To know the reason, it is good to know what all
    processes are running and also know the monitoring behavior (such as the amount
    of CPU or memory being consumed) of processes.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行中的系统中，我们经常会注意到突然系统反应缓慢。这可能是因为运行的应用程序消耗了大量内存，或者进程正在进行CPU密集型工作。很难预测哪个应用程序导致系统反应变慢。为了知道原因，了解正在运行的所有进程以及了解进程的监视行为（例如消耗的CPU或内存量）是很有帮助的。
- en: Listing processes
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列出进程
- en: To know a list of processes running in the system, we can use the `ps` command.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要知道系统中运行的进程列表，我们可以使用`ps`命令。
- en: Syntax
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 语法
- en: 'The syntax of the `ps` command is as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`ps`命令的语法如下：'
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: There are a lot of options to use the `ps` command. The commonly used options
    are explained in the following table.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多选项可以使用`ps`命令。常用选项在下表中有解释。
- en: Simple process selection
  id: totrans-72
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 简单的进程选择
- en: 'The following table shows the multiple options that can be clubbed together
    and used to get a better selection of results:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了可以组合在一起使用以获得更好结果选择的多个选项：
- en: '| Option | Description |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 描述 |'
- en: '| --- | --- |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `-A`, `-e` | Selects all processes |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `-A`, `-e` | 选择所有进程 |'
- en: '| `-N` | Selects all processes that don''t fulfill a condition—that is, negate
    selection |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `-N` | 选择不满足条件的所有进程，即否定选择 |'
- en: '| `T` | Selects the processes associated with the current terminal |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `T` | 选择与当前终端相关的进程 |'
- en: '| `r` | Restricts selection to only running processes |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `r` | 限制选择只有运行中的进程 |'
- en: '| `x` | Selects processes that have no controlling terminal such as daemons
    launched during booting |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `x` | 选择没有控制终端的进程，例如在引导过程中启动的守护进程 |'
- en: '| `a` | Selects the processes on a terminal including all users |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `a` | 选择终端上的进程，包括所有用户 |'
- en: Process selection by list
  id: totrans-82
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 按列表选择进程
- en: 'The following options accept a single argument in the form of a blank-separated
    or comma-separated list; they can be used multiple times:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 以下选项接受以空格分隔或逗号分隔的列表形式的单个参数；它们可以多次使用：
- en: '| Option | Description |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 描述 |'
- en: '| --- | --- |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `-C cmdlist` | Selects the process by its name. The list of names for selection
    is provided in `cmdlist`. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `-C cmdlist` | 通过名称选择进程。提供在`cmdlist`中选择的名称列表。 |'
- en: '| `-g grplist` | Selects the process by an effective group name provided in
    the list of the `grplist` arguments. |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `-g grplist` | 通过`grplist`参数列表中提供的有效组名选择进程。 |'
- en: '| `-G grplist` | Selects the process by a real group name provided in the list
    of the `grplist` arguments. |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| `-G grplist` | 通过`grplist`参数列表中提供的真实组名选择进程。 |'
- en: '| `-p pidlist` | Selects the process by its PID mentioned in `pidlist`. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| `-p pidlist` | 通过`pidlist`中提到的PID选择进程。 |'
- en: '| `-t ttylist` | Selects the process by a terminal mentioned in `ttylist`.
    |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `-t ttylist` | 通过`ttylist`中提到的终端选择进程。 |'
- en: '| `-U userlist` | Selects the process by a real user ID or name mentioned in
    `userlist`. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `-U userlist` | 通过`userlist`中提到的真实用户ID或名称选择进程。 |'
- en: '| `-u userlist` | Selects the process by an effective user ID or name mentioned
    in `userlist`. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `-u userlist` | 通过`userlist`中提到的有效用户ID或名称选择进程。 |'
- en: Output format control
  id: totrans-93
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 输出格式控制
- en: 'The following options are used to choose how to display the `ps` command output:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 以下选项用于选择如何显示`ps`命令的输出：
- en: '| Option | Description |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 描述 |'
- en: '| --- | --- |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `-j` | Shows the job format. |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: 显示作业格式。
- en: '| `-f` | This is used for a full format listing. It also prints the argument
    passed to the command. |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| `-f` | 用于完整格式列表。它还打印传递给命令的参数。 |'
- en: '| `u` | Displays user-oriented format. |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| `u` | 显示面向用户的格式。 |'
- en: '| `-l` | Displays long format. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| `-l` | 显示长格式。 |'
- en: '| `v` | Displays the virtual memory format. |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| `v` | 显示虚拟内存格式。 |'
- en: Listing all processes with details
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 列出所有带有详细信息的进程
- en: 'To know all processes on a system, the `-e` option can be used. To have a more
    detailed output, use it with the `u` option:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解系统上的所有进程，可以使用`-e`选项。要获得更详细的输出，请与`u`选项一起使用：
- en: '[PRE16]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![Listing all processes with details](img/4335_07_01.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![列出所有带有详细信息的进程](img/4335_07_01.jpg)'
- en: We can see from the output that all users' processes are displayed. The command
    that is actually displaying the output—that is, **ps -e u | tail -n5**—is also
    mentioned in the `ps` output as two separate running processes.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从输出中看到所有用户的进程。实际显示输出的命令——即**ps -e u | tail -n5**——也作为两个单独的运行进程在`ps`输出中提到。
- en: 'In BSD style, use the `aux` option to get the result that we get from `-e u`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在BSD风格中，使用`aux`选项可以获得与`-e u`相同的结果：
- en: '[PRE17]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: On a Linux-based operating system, aux as well as `-e u` options will work fine.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于Linux的操作系统上，`aux`以及`-e u`选项都可以正常工作。
- en: Listing all processes run by a user
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 列出特定用户运行的所有进程
- en: To know which processes are being by a specific user, use the `-u` option followed
    by the username. Multiple usernames can also be provided separated by a comma
    (,).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解特定用户正在运行哪些进程，可以使用`-u`选项，后面跟着用户名。也可以提供多个用户名，用逗号（,）分隔。
- en: '[PRE18]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The preceding command displays the following result:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令显示以下结果：
- en: '![Listing all processes run by a user](img/4335_07_02.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![列出用户运行的所有进程](img/4335_07_02.jpg)'
- en: We see that all processes are running as the user root. The rest of the users'
    processes have been filtered out.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到所有进程都是以root用户身份运行的。其他用户的进程已被过滤掉。
- en: Processes running in the current terminal
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在当前终端中运行的进程
- en: It is useful to know which processes are running in the current terminal. It
    can help in deciding whether to kill a running terminal or not. We can make a
    list of processes running in the current terminal using the `T` or `t` option.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 了解当前终端中运行哪些进程很有用。这有助于决定是否终止运行中的终端。我们可以使用`T`或`t`选项制作当前终端中运行的进程列表。
- en: '[PRE19]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The output for the following command as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令的输出如下：
- en: '![Processes running in the current terminal](img/4335_07_03.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![在当前终端中运行的进程](img/4335_07_03.jpg)'
- en: We can see from the output that `bash` and the `ps uT` command (which we just
    executed to display the result) are only running processes in the current terminal.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从输出中看到，`bash`和`ps uT`命令（我们刚刚执行以显示结果）是当前终端中唯一运行的进程。
- en: Listing processes by a command name
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 按命令名称列出进程
- en: 'We can also know process details by its name using the `-C` option followed
    by the command name. Multiple command names can be separated by a comma (`,`):'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`-C`选项按名称了解进程的详细信息，后面跟着命令名称。多个命令名称可以用逗号（`,`）分隔：
- en: '[PRE20]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The following output is obtained:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 获得以下输出：
- en: '![Listing processes by a command name](img/4335_07_04.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![按命令名称列出进程](img/4335_07_04.jpg)'
- en: Tree format display of processes
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进程的树形格式显示
- en: The `pstree` command displays running processes in a tree structure, which makes
    it very easy to understand the parent and child relationship of processes.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`pstree`命令以树形结构显示运行中的进程，这样很容易理解进程的父子关系。'
- en: 'Running the `pstree` command with the `-p` option shows processes in the tree
    format with its PID number as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`-p`选项运行`pstree`命令，以树形格式显示进程及其PID号，如下所示：
- en: '[PRE21]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '![Tree format display of processes](img/4335_07_05.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![进程的树形格式显示](img/4335_07_05.jpg)'
- en: From the `pstree` output, we see that the parent process of all processes is
    `systemd`. This is started as the first process that is responsible for executing
    the rest of the processes. In parenthesis, the PID number of each process is mentioned.
    We can see that the `systemd` process got PID 1 that is always fixed. On the `init`
    based-operating system, `init` will be the parent of all processes and have PID
    1.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `pstree` 输出中，我们可以看到所有进程的父进程是 `systemd`。这是作为负责执行其余进程的第一个进程启动的。在括号中，提到了每个进程的
    PID 号码。我们可以看到 `systemd` 进程得到了 PID 1，这是固定的。在基于 `init` 的操作系统上，`init` 将是所有进程的父进程，并且具有
    PID 1。
- en: 'To see processes process the tree of a particular PID, we can use `pstree`
    with the PID number as an argument:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看特定 PID 的进程树，我们可以使用 `pstree` 并将 PID 号码作为参数：
- en: '[PRE22]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '![Tree format display of processes](img/4335_07_06.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![进程的树状格式显示](img/4335_07_06.jpg)'
- en: 'Use the `pstree` command with the `-u` option to see when the UID of the process
    and parent differs:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `pstree` 命令并带有 `-u` 选项来查看进程的 UID 和父进程不同时：
- en: '[PRE23]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![Tree format display of processes](img/4335_07_07.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![进程的树状格式显示](img/4335_07_07.jpg)'
- en: We can see that initially, `bash` is being run by the user `skumari` with the
    PID `1627`. Further down in the tree, the `sudo` command is running as a root.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到最初，`bash` 由用户 `skumari` 以 PID `1627` 运行。在树的下方，`sudo` 命令以 root 用户身份运行。
- en: Monitoring processes
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 监视进程
- en: It is very important to know how much memory and CPU a process is consuming
    while running, in order to ensure there is no leak of memory and over-CPU computation
    happening. There are commands such as `top`, `htop`, and `vmstat` that can be
    used to monitor the memory and CPU consumed by each process. Here, we will discuss
    the `top` command because it is preinstalled in a Linux-based operating system.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行时了解进程消耗了多少内存和 CPU 是非常重要的，以确保没有内存泄漏和过度 CPU 计算的发生。有一些命令，如 `top`、`htop` 和 `vmstat`，可以用来监视每个进程消耗的内存和
    CPU。在这里，我们将讨论 `top` 命令，因为它是预装在基于 Linux 的操作系统中的。
- en: The `top` command displays the dynamic real-time usage of the CPU, memory, swap,
    and the number of tasks currently running with their state.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`top` 命令显示 CPU、内存、交换和当前正在运行的任务数量的动态实时使用情况。'
- en: 'Running `top` without any options gives the following result:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `top` 而不带任何选项会给出以下结果：
- en: '[PRE24]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '![Monitoring processes](img/4335_07_08.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![监视进程](img/4335_07_08.jpg)'
- en: In the `top` command output, the first line tells us about the length of time
    since the system last booted, the number of users, and the load average.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `top` 命令输出中，第一行告诉我们系统自上次启动以来的时间长度、用户数量和平均负载。
- en: The second line tells us about the number of tasks and their statuses—running,
    sleeping, stopped, and zombie.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 第二行告诉我们任务的数量及其状态 - 运行、睡眠、停止和僵尸。
- en: 'The third line gives us the details of the CPU usage in percentage. The different
    CPU usages are shown in the following table:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 第三行给出了 CPU 使用情况的详细信息。不同的 CPU 使用情况显示在下表中：
- en: '| Value | Description |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| 值 | 描述 |'
- en: '| --- | --- |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `us` | % of the CPU time spent in running un-niced user processes |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| `us` | 在运行非优先用户进程中花费的 CPU 时间百分比 |'
- en: '| `sy` | % of the CPU time spent in kernel space—that is running kernel processes
    |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| `sy` | 在内核空间中花费的 CPU 时间百分比 - 即运行内核进程 |'
- en: '| `ni` | % of the CPU time running niced user processes |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| `ni` | 运行优先用户进程的 CPU 时间百分比 |'
- en: '| `id` | % of the time spent idle |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| `id` | 空闲时间百分比 |'
- en: '| `wa` | % of the time spent waiting for the I/O completion |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| `wa` | 等待 I/O 完成所花费的时间百分比 |'
- en: '| `hi` | % of the time spent servicing the hardware interrupt |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| `hi` | 服务硬件中断所花费的时间百分比 |'
- en: '| `si` | % of the time spent servicing the software interrupts |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| `si` | 服务软件中断所花费的时间百分比 |'
- en: '| `st` | % of the time consumed by a virtual machine |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| `st` | 虚拟机消耗的时间百分比 |'
- en: The fourth line tells us about the total, free, used, and buffered RAM memory
    usage.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 第四行告诉我们关于总、空闲、已使用和缓冲的 RAM 内存使用情况。
- en: The fifth line tells us about the total, free and used swap memory.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 第五行告诉我们关于总交换内存、空闲和已使用的交换内存。
- en: 'The remaining lines give the detailed information about running processes.
    The meaning of each column is described in the following table:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 其余行提供了关于运行进程的详细信息。每列的含义在下表中描述：
- en: '| Column | Description |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| 列 | 描述 |'
- en: '| --- | --- |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| PID | Process ID |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| PID | 进程 ID |'
- en: '| USER | Effective user name of task''s owner |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| USER | 任务所有者的有效用户名 |'
- en: '| PR | Priority of task (lower the value, more is the priority) |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| PR | 任务的优先级（值越低，优先级越高） |'
- en: '| NI | Nice value of task. Negative nice value means more priority and positive
    means lesser priority |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| NI | 任务的优先级。负的优先级值意味着更高的优先级，正的意味着较低的优先级 |'
- en: '| VIRT | Virtual memory size used by process |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| VIRT | 进程使用的虚拟内存大小 |'
- en: '| RES | Non-swapped physical memory a process |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| RES | 未交换的物理内存进程 |'
- en: '| SHR | Amount of shared memory available to a process |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| SHR | 进程可用的共享内存量 |'
- en: '| S | Process status – D (uninterruptible sleep ), R (Running), S(Sleeping),
    T (Stopped by job control signal), t (Stopped by debugger), Z (Zombie) |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| S | 进程状态 - D（不可中断的睡眠），R（运行），S（睡眠），T（被作业控制信号停止），t（被调试器停止），Z（僵尸） |'
- en: '| %CPU | % of CPU currently used by process |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| %CPU | 进程当前使用的 CPU 百分比 |'
- en: '| %MEM | % of Physical memory currently used by process |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| %MEM | 进程当前使用的物理内存百分比 |'
- en: '| TIME+ | CPU Time, hundredths |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| TIME+ | CPU 时间，百分之一秒 |'
- en: '| COMMAND | Command name |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| COMMAND | 命令名称 |'
- en: 'We can also reorder and modify the output when the top is running. To see help,
    use the *?* or *h* key and the help window will be displayed, which contains following
    details:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 当 top 在运行时，我们也可以重新排序和修改输出。要查看帮助，请使用 *?* 或 *h* 键，将显示帮助窗口，其中包含以下详细信息：
- en: '![Monitoring processes](img/4335_07_09.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![监视进程](img/4335_07_09.jpg)'
- en: 'To sort on the basis of a specific field, the easiest method is to press the
    *f* key while `top` is running. A new window opens showing all the columns. The
    opened window looks as follows:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 要根据特定字段进行排序，最简单的方法是在 `top` 运行时按下 *f* 键。一个新窗口会打开，显示所有列。打开的窗口如下所示：
- en: '![Monitoring processes](img/4335_07_10.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![监视进程](img/4335_07_10.jpg)'
- en: Use the up and down arrows to navigate and select a column. To sort on the basis
    of a particular field, press the *s* key and then press *q* to switch back to
    the top output window.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上下箭头导航并选择列。要根据特定字段进行排序，请按下*s*键，然后按*q*键切换回顶部输出窗口。
- en: 'Here, we have selected NI and then pressed the *s* key and the *q* key. Now,
    the `top` output will be sorted with `nice` number. The output of the top after
    sorting with the column **NI** looks as follows:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们选择了NI，然后按下了*s*键和*q*键。现在，`top`输出将按`nice`数字排序。排序后的`top`输出如下所示：
- en: '![Monitoring processes](img/4335_07_11.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![监视进程](img/4335_07_11.jpg)'
- en: Process substitution
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进程替换
- en: 'We know that we can use a pipe to provide the output of a command as an input
    to another command. For example:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道可以使用管道将命令的输出作为另一个命令的输入。例如：
- en: '[PRE25]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Here, the `cat` command output—that is, the content of `file.txt`—is passed
    to the less command as an input. We can redirect the output of only one process
    (cat process in this example) as an input to another process.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`cat`命令的输出——即`file.txt`的内容——作为输入传递给了less命令。我们可以将仅一个进程的输出（在本例中为cat进程）重定向为另一个进程的输入。
- en: We may need to feed the output of multiple processes as an input to another
    process. In such a case, process substitution is used. Process substitution allows
    a process to take the input from the output of one or more processes rather than
    a file.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能需要将多个进程的输出作为另一个进程的输入。在这种情况下，使用进程替换。进程替换允许进程从一个或多个进程的输出中获取输入，而不是文件。
- en: 'The syntax of using process substitution is as follows:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 使用进程替换的语法如下：
- en: To substitute input file(s) by list
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 将输入文件替换为列表
- en: '[PRE26]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: OR
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 或者
- en: To substitute output file(s) by list
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 通过列表替换输出文件(s)
- en: '[PRE27]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Here, `list` is a command or a pipeline of commands. Process substitution makes
    a list act like a file, which is done by giving list a name and then substituting
    that name in the command line.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`list`是一个命令或一系列命令。进程替换使列表的行为类似于文件，方法是给列表命名，然后在命令行中替换该名称。
- en: Diffing the output of two processes
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较两个进程的输出
- en: To compare two sets of data, we use the `diff` command. However, we know that
    the `diff` command takes two files as an input for producing diff. So, we will
    have to first save the two sets of data into two separate files and then run `diff`.
    Saving the content for diff adds extra steps, which is not good. To solve this
    problem, we can use the process substitution feature while performing `diff`.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 要比较两组数据，我们使用`diff`命令。但是，我们知道`diff`命令需要两个文件作为输入来生成差异。因此，我们必须首先将两组数据保存到两个单独的文件中，然后运行`diff`。保存差异内容会增加额外的步骤，这是不好的。为了解决这个问题，我们可以在执行`diff`时使用进程替换功能。
- en: 'For example, we want to know the hidden files in a directory. In a Linux and
    Unix-based system, files that starts with `.` (dot) are known as hidden files.
    To see the hidden files, the `-a` option is used with the `ls` command:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们想要知道目录中的隐藏文件。在Linux和基于Unix的系统中，以`。`（点）开头的文件称为隐藏文件。要查看隐藏文件，可以使用`ls`命令的`-a`选项：
- en: '[PRE28]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'To get only the hidden files in a directory, run the `diff` command on the
    sorted output obtained from the preceding two commands:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 要仅获取目录中的隐藏文件，请对从前两个命令获得的排序输出运行`diff`命令：
- en: '[PRE29]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '![Diffing the output of two processes](img/4335_07_12.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![比较两个进程的输出](img/4335_07_12.jpg)'
- en: Here, we have fed the commands `ls -l ~ | tr -s " " | sort -k9` and `ls -al
    ~ | tr -s " " | sort -k9` as input data to the `diff` command instead of passing
    the two files.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将`ls -l ~ | tr -s " " | sort -k9`和`ls -al ~ | tr -s " " | sort -k9`命令作为输入数据提供给`diff`命令，而不是传递两个文件。
- en: Process scheduling priorities
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进程调度优先级
- en: During a process lifetime, it may need CPU and other resources to keep executing
    normally. We know that multiple processes are running simultaneously in a system
    and they may need a CPU to complete an operation. To share the available CPUs
    and resources, process scheduling is done so that each process gets a chance to
    make use of the CPU. When a process gets created, an initial priority value is
    set. Depending upon the priority value, the process gets the CPU time.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在进程的生命周期中，它可能需要CPU和其他资源来保持正常执行。我们知道系统中同时运行多个进程，并且它们可能需要CPU来完成操作。为了共享可用的CPU和资源，进行进程调度，以便每个进程有机会利用CPU。创建进程时，会设置初始优先级值。根据优先级值，进程获得CPU时间。
- en: The process scheduling priority range is from `-20` to `19`. This value is also
    called a nice value. The lower the nice value, the higher is the scheduling priority
    of a process. So, the process with `-20` will have the highest scheduling priority
    and the process with the nice value `19` will have the lowest scheduling priority.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 进程调度优先级范围是从`-20`到`19`。这个值也被称为nice值。nice值越低，进程的调度优先级就越高。因此，具有`-20`的进程将具有最高的调度优先级，而具有nice值`19`的进程将具有最低的调度优先级。
- en: 'To see the nice value of a process, the `ps` or `top` command can be used.
    The corresponding nice value of a process is available in the NI column:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看进程的nice值，可以使用`ps`或`top`命令。进程的相应nice值在NI列中可用：
- en: '[PRE30]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '![Process scheduling priorities](img/4335_07_13.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![进程调度优先级](img/4335_07_13.jpg)'
- en: In the `ps` output, we can see in the `NI` column that the nice value of bash
    and the `ps` processes is `0`.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ps`输出中，我们可以看到bash和`ps`进程的`NI`列中的nice值为`0`。
- en: Changing scheduling priorities
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改调度优先级
- en: Every process in a system has some priority assigned that depends upon its nice
    value. Based on priority, the process gets CPU time and other resources to use.
    Sometimes, it may happen that a process needs to be executed quickly, but it is
    waiting for CPU resources to be freed for long time because of a lower scheduling
    priority. In such cases, we may want to increase its scheduling priority in order
    to finish a task sooner. We can change the scheduling priority of a process by
    using the `nice` and `renice` commands.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 系统中的每个进程都分配了一些优先级，这取决于它的nice值。根据优先级，进程获得CPU时间和其他资源来使用。有时，可能会发生进程需要快速执行，但由于较低的调度优先级而等待释放CPU资源很长时间。在这种情况下，我们可能希望增加其调度优先级以更快地完成任务。我们可以使用`nice`和`renice`命令来更改进程的调度优先级。
- en: Using nice
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用nice
- en: 'The `nice` command launches a process with a user-defined scheduling priority.
    By default, processes created by a user get the nice value `0`. To verify this,
    run the `nice` command without any option:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`nice`命令以用户定义的调度优先级启动进程。默认情况下，用户创建的进程的nice值为`0`。要验证这一点，请运行不带任何选项的`nice`命令：'
- en: '[PRE31]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Let''s create a new `firefox` process that actually consumes CPU and resources:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个实际消耗CPU和资源的新`firefox`进程：
- en: '[PRE32]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '![Using nice](img/4335_07_14.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![使用nice](img/4335_07_14.jpg)'
- en: We can see that the nice value of `firefox` is `0` and the CPU usage is 8.7%.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到`firefox`的nice值为`0`，CPU使用率为8.7%。
- en: Now, we will kill the current `firefox` and launch another `firefox` with the
    nice value `10`. This means, `firefox` will have a lower priority than other user-created
    processes.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将终止当前的`firefox`并启动另一个`firefox`，其nice值为`10`。这意味着`firefox`的优先级将低于其他用户创建的进程。
- en: 'To create a process with a different nice value, the `-n` option is used with
    `nice`:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个具有不同nice值的进程，可以使用`nice`的`-n`选项：
- en: '[PRE33]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: OR
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 或者
- en: '[PRE34]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'To see what nice value `firefox` has now, check the `top` output:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看`firefox`现在的nice值，请检查`top`输出：
- en: '[PRE35]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '![Using nice](img/4335_07_15.jpg)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![使用nice](img/4335_07_15.jpg)'
- en: We can see that the `firefox` process has the `10` nice value. To provide more
    scheduling priority—that is, setting a negative nice value to a process—root privilege
    is required.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到`firefox`进程的nice值为`10`。要提供更多的调度优先级——即为进程设置负的nice值——需要root权限。
- en: 'The following example sets the `firefox` process as a higher scheduling priority:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例将设置`firefox`进程为更高的调度优先级：
- en: '[PRE36]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: OR
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 或者
- en: '[PRE37]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Using renice
  id: totrans-232
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用renice
- en: The `nice` command can only modify a nice value during the launch of a process.
    However, if we want to change a running process scheduling priority, then the
    `renice` command should be used. The `renice` command alters the scheduling priority
    of one or more running processes.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '`nice`命令只能在启动进程时修改nice值。但是，如果我们想要更改正在运行的进程的调度优先级，则应使用`renice`命令。`renice`命令改变一个或多个正在运行的进程的调度优先级。'
- en: 'The syntax of using `renice` is as follows:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`renice`的语法如下：
- en: '[PRE38]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Here, the `-g` option considers succeeding an argument—that is, identifier as
    GIDs.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`-g`选项考虑后续参数——即GID作为标识符。
- en: The `-p` option considers succeeding an argument—that is, identifier as PIDs.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '`-p`选项考虑后续参数——即PID作为标识符。'
- en: The `-u` option considers succeeding an argument—that is, identifier as usernames
    or UIDs.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '`-u`选项考虑后续参数——即用户名或UID作为标识符。'
- en: If none of the options—`-g`, `-p`, or `-u`—are provided, identifiers are considered
    as PIDs.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有提供`-g`、`-p`或`-u`选项，则将标识符视为PID。
- en: 'For example, we will change the priority of all the processes belonging to
    a user. Firstly, see the current priority of processes owned by the user:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们将更改属于某个用户的所有进程的优先级。首先，查看由用户拥有的进程的当前优先级：
- en: '[PRE39]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '![Using renice](img/4335_07_16.jpg)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![使用renice](img/4335_07_16.jpg)'
- en: 'Now, we will modify the priority of all processes using `renice` with the `–u`
    option:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用`renice`和`-u`选项修改所有进程的优先级：
- en: '[PRE40]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Let''s view a new nice value of processes owned by the user `skumari`:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们查看由用户`skumari`拥有的进程的新的nice值：
- en: '[PRE41]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '![Using renice](img/4335_07_17.jpg)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![使用renice](img/4335_07_17.jpg)'
- en: 'To modify the scheduling priority of a few processes, modify using the process''s
    PIDs. The following example modifies the process plasmashell and Firefox having
    the PIDs `1505` and `5969` respectively:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 要修改几个进程的调度优先级，请使用进程的PID进行修改。以下示例修改了PID分别为`1505`和`5969`的进程plasmashell和Firefox：
- en: '[PRE42]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '![Using renice](img/4335_07_18.jpg)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
  zh: '![使用renice](img/4335_07_18.jpg)'
- en: Now, we can see that the nice values of the process plasmashell and Firefox
    are `2`.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以看到进程plasmashell和Firefox的nice值为`2`。
- en: Signals
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信号
- en: A signal is a software interrupt to notify processes that an external event
    has occurred. In a normal execution, processes keeps running as expected. Now,
    for some reason, a user may want to cancel a running `process`. When the process
    is started from a terminal, it will terminate when we hit the *Ctrl* + *c* keys
    or run the `kill` command.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 信号是一种软件中断，用于通知进程发生外部事件。在正常执行中，进程按预期继续运行。现在，由于某种原因，用户可能希望取消正在运行的`进程`。当进程从终端启动时，当我们按下*Ctrl*
    + *c*键或运行`kill`命令时，它将终止。
- en: When we press *Ctrl* + *c* keys while process is running in a terminal, a signal
    `SIGINT` is generated and sent to the process running in foreground. Also, when
    the `kill` command is called on process, the `SIGKILL` signal is generated and
    the process is terminated.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在终端中运行进程时按下*Ctrl* + *c*键时，会生成信号`SIGINT`并发送到前台运行的进程。此外，当对进程调用`kill`命令时，会生成`SIGKILL`信号并终止进程。
- en: Available signals
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可用信号
- en: 'Among all available signals, we will discuss the frequently used signals here:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有可用的信号中，我们将在这里讨论经常使用的信号：
- en: '| Signal name | Value | Default Action | Description |'
  id: totrans-257
  prefs: []
  type: TYPE_TB
  zh: '| 信号名称 | 值 | 默认操作 | 描述 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-258
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| SIGHUP | 1 | Term | This signal is used to Hangup or death of controlling
    process |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
  zh: '| SIGHUP | 1 | Term | 此信号用于挂起或控制进程的死亡 |'
- en: '| SIGINT | 2 | Term | This signal is used to interrupt from keyboard like ctrl
    + c, ctrl + z |'
  id: totrans-260
  prefs: []
  type: TYPE_TB
  zh: '| SIGINT | 2 | Term | 此信号用于从键盘中断，如ctrl + c，ctrl + z |'
- en: '| SIGQUIT | 3 | Core | This signal is used to quit from keyboard |'
  id: totrans-261
  prefs: []
  type: TYPE_TB
  zh: '| SIGQUIT | 3 | 核心 | 此信号用于从键盘退出 |'
- en: '| SIGILL | 4 | Core | It is used to for Illegal instruction |'
  id: totrans-262
  prefs: []
  type: TYPE_TB
  zh: '| SIGILL | 4 | Core | 用于非法指令 |'
- en: '| SIGTRAP | 5 | Core | This signal is used to trace or breakpoint trap |'
  id: totrans-263
  prefs: []
  type: TYPE_TB
  zh: '| SIGTRAP | 5 | Core | 此信号用于跟踪或断点陷阱 |'
- en: '| SIGABRT | 6 | Core | It is used to abort signal |'
  id: totrans-264
  prefs: []
  type: TYPE_TB
  zh: '| SIGABRT | 6 | Core | 用于中止信号 |'
- en: '| SIGFPE | 8 | Core | Floating point exception |'
  id: totrans-265
  prefs: []
  type: TYPE_TB
  zh: '| SIGFPE | 8 | Core | 浮点异常 |'
- en: '| SIGKILL | 9 | Term | Process terminates immediately |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
  zh: '| SIGKILL | 9 | Term | 进程立即终止 |'
- en: '| SIGSEGV | 11 | Core | Invalid memory reference |'
  id: totrans-267
  prefs: []
  type: TYPE_TB
  zh: '| SIGSEGV | 11 | Core | 无效内存引用 |'
- en: '| SIGPIPE | 13 | Term | Broken pipe |'
  id: totrans-268
  prefs: []
  type: TYPE_TB
  zh: '| SIGPIPE | 13 | Term | 管道破裂 |'
- en: '| SIGALRM | 14 | Term | Alarm signal |'
  id: totrans-269
  prefs: []
  type: TYPE_TB
  zh: '| SIGALRM | 14 | Term | 警报信号 |'
- en: '| SIGTERM | 15 | Term | Terminate the process |'
  id: totrans-270
  prefs: []
  type: TYPE_TB
  zh: '| SIGTERM | 15 | Term | 终止进程 |'
- en: '| SIGCHLD | 17 | Ign | Child stopped or terminated |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
  zh: '| SIGCHLD | 17 | Ign | 子进程停止或终止 |'
- en: '| SIGSTOP | 19 | Stop | This signal is used to stop the process |'
  id: totrans-272
  prefs: []
  type: TYPE_TB
  zh: '| SIGSTOP | 19 | Stop | 此信号用于停止进程 |'
- en: '| SIGPWR | 30 | Term | Power failure |'
  id: totrans-273
  prefs: []
  type: TYPE_TB
  zh: '| SIGPWR | 30 | Term | 电源故障 |'
- en: 'In the preceding table, we mentioned the signal name and value. Any of them
    can be used while referring to a signal. The meaning of terms used in the **Default
    action** section are as follows:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在上表中，我们提到了信号名称和值。在**默认操作**部分中使用的术语的含义如下：
- en: 'Term: Terminate'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Term: 终止'
- en: 'Core: Terminate the process and dump core'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Core: 终止进程并转储核心'
- en: 'Ign: Ignore the signal'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Ign: 忽略信号'
- en: 'Stop: Stop the process'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Stop: 停止进程'
- en: 'Depending upon what kind of signal it is, any of the following actions can
    be taken:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 根据信号的类型，可以采取以下任何一种操作：
- en: A signal can be ignored by a process, which means no action will be taken. Most
    of the signals can be ignored, except `SIGKILL` and `SIGSTOP`. The `SIGKILL` and
    `SIGSTOP` signals can't be caught, blocked, or ignored. This allows the kernel
    to kill or stop any process at any point of time.
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进程可以忽略信号，这意味着不会采取任何操作。除了`SIGKILL`和`SIGSTOP`之外，大多数信号都可以被忽略。`SIGKILL`和`SIGSTOP`信号无法被捕获、阻止或忽略。这允许内核在任何时间点杀死或停止任何进程。
- en: A signal can be handled by writing a signal handler code specifying the required
    action to be taken after a particular signal is received.
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以通过编写信号处理程序代码来处理信号，指定接收到特定信号后要采取的必要操作。
- en: Each signal has a default action, so let the signal perform the default action;
    for example, terminate the process in case the `SIGKILL` signal is sent.
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个信号都有一个默认操作，因此让信号执行默认操作；例如，如果发送`SIGKILL`信号，则终止进程。
- en: 'To know all signals and its corresponding value, use the `kill` command with
    the`–l` option:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解所有信号及其相应的值，请使用`kill`命令和`-l`选项：
- en: '[PRE43]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '![Available signals](img/4335_07_19.jpg)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
  zh: '![可用信号](img/4335_07_19.jpg)'
- en: 'The `kill` command also provides a way to convert a signal number to a name
    when used in the following way:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '`kill`命令还提供了一种在以下方式中将信号编号转换为名称的方法：'
- en: '[PRE44]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'To send a signal to process(es), we can use the `kill`, `pkill`, and `kilall`
    commands:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 要向进程发送信号，可以使用`kill`、`pkill`和`kilall`命令：
- en: '[PRE45]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Traps
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 陷阱
- en: When a process is running and in between we kill the process, the process terminates
    instantly without doing anything further. A programmer who writes a program may
    want to do some tasks before a program actually terminates; for example, a clean
    up of the temporary directories created, saving applications' state, saving logs,
    and so on. In such a case, a programmer would like to listen to signals and do
    the required task before actually allowing you to terminate the process.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个进程正在运行时，我们在中间杀死这个进程，进程会立即终止而不再执行任何操作。编写程序的程序员可能希望在程序实际终止之前执行一些任务；例如，清理创建的临时目录，保存应用程序状态，保存日志等。在这种情况下，程序员希望监听信号并在允许终止进程之前执行所需的任务。
- en: 'Consider the following shell script example:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下shell脚本示例：
- en: '[PRE46]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: This program takes an input from a user file and then reverses the file content.
    This script creates a temporary file to keep the reversed content of the file
    and later copies it to the original file. At the end, it deletes the temporary
    file.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序从用户文件中获取输入，然后反转文件内容。此脚本创建一个临时文件来保存文件的反转内容，然后将其复制到原始文件。最后，它删除临时文件。
- en: When we execute this script, it may be waiting for a user to input a text filename
    or maybe in between reversing the file (a large file takes more time to reverse
    the content). During this, if processes are terminated, then the temporary file
    may not get deleted. It is the programmer's task to make sure that temporary files
    are deleted.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们执行此脚本时，可能正在等待用户输入文本文件名，或者在反转文件时（大文件需要更多时间来反转内容）。在此期间，如果进程被终止，那么临时文件可能不会被删除。程序员的任务是确保删除临时文件。
- en: To solve such a problem, we can handle the signal, perform the necessary tasks,
    and then terminate the process. This can be achieved by using the `trap` command.
    This command allows you to execute a command when a signal is received by a script.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这样的问题，我们可以处理信号，执行必要的任务，然后终止进程。这可以通过使用`trap`命令来实现。该命令允许您在脚本接收到信号时执行命令。
- en: 'The syntax of using `trap` is as follows:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`trap`的语法如下：
- en: '[PRE47]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Here, we can provide `trap action` to be performed. An action can be an executing
    command (s).
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以提供要执行的`trap`操作。操作可以是一个或多个执行命令。
- en: In the preceding syntax of `trap`, `signals` refers to providing one or more
    signal names for which an action has to be performed.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 在`trap`的上述语法中，`signals`指的是要执行操作的一个或多个信号名称。
- en: 'The following shell script demonstrates `how` trap is used to perform tasks
    before a process suddenly exits on receiving a signal:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 以下shell脚本演示了`trap`如何在接收到信号后执行任务以防止进程突然退出：
- en: '[PRE48]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: In this modified script, when any of the signals such as `SIGHUP`, `SIGINT`,
    `SIGABRT`, `SIGTERM`, or `SIGQUIT` are received, then `rm` `$tmpfile; exit` will
    be executed. This means that a temporary file will first be deleted and then you
    can exit from the script.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个修改后的脚本中，当接收到`SIGHUP`、`SIGINT`、`SIGABRT`、`SIGTERM`或`SIGQUIT`等信号时，将执行`rm` `$tmpfile;
    exit`。这意味着首先删除临时文件，然后可以退出脚本。
- en: Inter-process communication
  id: totrans-304
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进程间通信
- en: A process alone can do a certain things, but not everything. It will be a very
    useful and good resource utilization if two or more processes can communicate
    with each other in the form of sharing results, sending or receiving messages,
    and so on. In a Linux or Unix-based operating system, two or more processes can
    communicate with each other using IPC.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 一个进程可以单独完成某些事情，但不是所有事情。如果两个或更多进程可以以共享结果、发送或接收消息等形式相互通信，那将是非常有用和良好的资源利用。在基于Linux或Unix的操作系统中，两个或更多进程可以使用IPC相互通信。
- en: IPC is the technique by which processes communicate with each other and are
    managed by kernel.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: IPC是进程之间通信并由内核管理的技术。
- en: 'IPC is possible to do by any of the following ways:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: IPC可以通过以下任一方式进行：
- en: '**Named pipes**: These allow processes to read from and write into it.'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命名管道**：这允许进程从中读取和写入。'
- en: '**Shared memory**: This is created by one process and is further available
    for read from and write to this memory by multiple processes.'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**共享内存**：这是由一个进程创建的，并且可以被多个进程读取和写入。'
- en: '**Message queue**: This is a structured and an ordered list of memory segments
    where processes store or retrieve data in queue fashion.'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消息队列**：这是一个结构化和有序的内存段列表，进程可以以队列方式存储或检索数据。'
- en: '**Semaphores**: This provides a synchronizing mechanism for processes that
    are accessing the same resource. It has counters that are used to control the
    access to shared resources by multiple processes.'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**信号量**：这为访问相同资源的进程提供了同步机制。它具有用于控制多个进程对共享资源访问的计数器。'
- en: While discussing named pipes in [Chapter 6](ch06.html "Chapter 6. Working with
    Files"), *Working with Files*, we learned how processes can communicate using
    named pipes.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论命名管道时，在[第6章](ch06.html "第6章。处理文件")中，*处理文件*，我们学习了进程如何使用命名管道进行通信。
- en: Information on IPC using ipcs
  id: totrans-313
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用ipcs查看IPC的信息
- en: 'The `ipcs` command provides information about IPC facilities for which a calling
    process has the read access. It can provide information on three resources: shared
    memory, message queue, and semaphore.'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '`ipcs`命令提供了有关IPC设施的信息，对于这些设施，调用进程具有读取访问权限。它可以提供有关三种资源的信息：共享内存、消息队列和信号量。'
- en: 'The syntax of using `ipcs` is as follows:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ipcs`的语法如下：
- en: '[PRE49]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Where options are as follows:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 选项如下：
- en: '| Option | Description |'
  id: totrans-318
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 描述 |'
- en: '| --- | --- |'
  id: totrans-319
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `-a` | Displays information for all resources—shared memory, message queue,
    and semaphore |'
  id: totrans-320
  prefs: []
  type: TYPE_TB
  zh: '| `-a` | 显示所有资源的信息—共享内存、消息队列和信号量 |'
- en: '| `-q` | Displays information about active message queues |'
  id: totrans-321
  prefs: []
  type: TYPE_TB
  zh: '| `-q` | 显示有关活动消息队列的信息 |'
- en: '| `-m` | Displays information about active shared memory segments |'
  id: totrans-322
  prefs: []
  type: TYPE_TB
  zh: '| `-m` | 显示有关活动共享内存段的信息 |'
- en: '| `-s` | Displays information about active semaphore sets |'
  id: totrans-323
  prefs: []
  type: TYPE_TB
  zh: '| `-s` | 显示有关活动信号量集的信息 |'
- en: '| `-i ID` | Shows the detailed information for an ID. Use it with the `-q`,
    `-m` or `-s` option. |'
  id: totrans-324
  prefs: []
  type: TYPE_TB
  zh: '| `-i ID` | 显示ID的详细信息。与`-q`、`-m`或`-s`选项一起使用。 |'
- en: '| `-l` | Shows resource limits |'
  id: totrans-325
  prefs: []
  type: TYPE_TB
  zh: '| `-l` | 显示资源限制 |'
- en: '| `-p` | Shows PIDs of the resource creator and last operator |'
  id: totrans-326
  prefs: []
  type: TYPE_TB
  zh: '| `-p` | 显示资源创建者和最后操作者的PID |'
- en: '| `-b` | Prints sizes in bytes |'
  id: totrans-327
  prefs: []
  type: TYPE_TB
  zh: '| `-b` | 以字节打印大小 |'
- en: '| `--human` | Print sizes in a human-readable format |'
  id: totrans-328
  prefs: []
  type: TYPE_TB
  zh: '| `--human` | 以人类可读的格式打印大小 |'
- en: Listing information provided by IPCs
  id: totrans-329
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IPC提供的信息列表
- en: 'We can use the `ipcs` command without an option or with `–a`:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`ipcs`命令不带选项或带`-a`：
- en: '[PRE50]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: OR
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 或
- en: '[PRE51]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '![Listing information provided by IPCs](img/4335_07_20.jpg)'
  id: totrans-334
  prefs: []
  type: TYPE_IMG
  zh: '![IPC提供的信息列表](img/4335_07_20.jpg)'
- en: 'To see only the shared memory segment, we can use `ipcs` with the `–m` option:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 要仅查看共享内存段，我们可以使用带有`-m`选项的`ipcs`：
- en: '[PRE52]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '![Listing information provided by IPCs](img/4335_07_21.jpg)'
  id: totrans-337
  prefs: []
  type: TYPE_IMG
  zh: '![IPC提供的信息列表](img/4335_07_21.jpg)'
- en: Here, the `--human` option made a size column in a more readable format by providing
    the size in KB and MB instead of giving it in bytes.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`--human`选项通过以KB和MB的大小而不是以字节的方式提供大小，使大小列以更可读的格式显示。
- en: 'To find out detailed information about a resource ID, use `ipcs` with the `-i`
    option followed by the resource ID:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 要查找有关资源ID的详细信息，请使用`ipcs`命令，后跟`-i`选项和资源ID：
- en: '[PRE53]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '![Listing information provided by IPCs](img/4335_07_22.jpg)'
  id: totrans-341
  prefs: []
  type: TYPE_IMG
  zh: '![IPC提供的信息列表](img/4335_07_22.jpg)'
- en: Knowing processes' PID who recently did IPCs
  id: totrans-342
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 知道最近进行IPC的进程的PID
- en: 'We can know the PID of the processes that have recently accessed a specific
    IPC resource using the `-p` option:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`-p`选项知道最近访问特定IPC资源的进程的PID：
- en: '[PRE54]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '![Knowing processes'' PID who recently did IPCs](img/4335_07_23.jpg)'
  id: totrans-345
  prefs: []
  type: TYPE_IMG
  zh: '![知道最近进行IPC的进程的PID](img/4335_07_23.jpg)'
- en: Here, the `cpid` column shows `pid` of the processes that created the shared
    memory resource, and `lpid` refers to the PID of the processes that last accessed
    the shared memory resource.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`cpid`列显示创建共享内存资源的进程的`pid`，而`lpid`指的是最后访问共享内存资源的进程的PID。
- en: Summary
  id: totrans-347
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: After reading this chapter, you will understand what process is in a Linux and
    UNIX-based system. You should now know how to create, stop, terminate, and monitor
    processes. You should also know how to send signals to a process and manage the
    received signals in your shell script with the `trap` command. You have also learned
    how different processes communicate with each other using IPC on mechanism in
    order to share resources or to send and receive messages.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完本章后，您将了解Linux和基于UNIX的系统中的进程是什么。您现在应该知道如何创建、停止、终止和监视进程。您还应该知道如何向进程发送信号，并使用`trap`命令在shell脚本中管理接收到的信号。您还学会了不同进程如何使用IPC进行通信以共享资源或发送和接收消息。
- en: In the next chapter, you will learn about the different ways in which tasks
    can be automated and how they run at a specified time without any further human
    intervention. You will also learn how and why start-up files are created, and
    how to embed other programming languages such as Python in a shell script.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将了解任务可以自动化的不同方式以及它们如何在指定时间运行而无需进一步人工干预。您还将学习如何以及为什么创建启动文件，并如何在shell脚本中嵌入其他编程语言，如Python。
