- en: Chapter 8. Working with Scripts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。使用脚本
- en: 'In this chapter we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Removing text from a file
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从文件中删除文本
- en: Using script parameters
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用脚本参数
- en: Coding a loop in a script
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在脚本中编写循环
- en: Backing up your system
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 备份您的系统
- en: Locking a file for only one use at a time
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一次只能为一个用途锁定文件
- en: Getting introduced to Perl
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 熟悉Perl
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Knowing how to write scripts will allow you to run your system(s) much more
    efficiently. Script writing is easy; you don't need a degree in Computer Science
    or anything like that. Even better, everything you need to create and run scripts
    is already available on your Linux system.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 知道如何编写脚本将使您能够更有效地运行您的系统。编写脚本很容易；您不需要计算机科学学位或类似的东西。更好的是，您需要创建和运行脚本的一切都已经在您的Linux系统上可用。
- en: The main thing to remember while programming is to think like the computer does.
    Try to understand what each step does. If you run into a problem, look at the
    line in question carefully. The computer will do exactly what you tell it to do,
    every time.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 编程时要记住的主要事情是要像计算机一样思考。尝试理解每个步骤的作用。如果遇到问题，请仔细查看相关的行。计算机会按照您的指示每次执行。
- en: 'We will be writing `Bash` shell scripts in these examples. It is good programming
    practice to begin each script with a line indicating which shell is being used.
    This is done with a line that starts in the first column such as the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些示例中，我们将编写`Bash` shell脚本。以指示使用的shell为开头的每个脚本是良好的编程实践。这是通过以第一列开始的一行来完成的，例如以下内容：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Use a text editor to create scripts. I have seen people attempting to use a
    word processor for script writing but I don't recommend it. Word processors are
    cumbersome and always seem to insert bad characters into the file (even though
    they claim not to). If you don't already know by now, learn how to use `EMACS`,
    `vi`, or some other text editor (see [Chapter 3](ch03.html "Chapter 3. Files and
    Directories"), *Files and Directories*). You will be glad you did.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 使用文本编辑器创建脚本。我看到有人试图使用文字处理软件来编写脚本，但我不建议这样做。文字处理软件笨重，似乎总是会在文件中插入不良字符（尽管它们声称不会）。如果您现在还不知道，学习如何使用`EMACS`、`vi`或其他文本编辑器（参见[第3章](ch03.html
    "第3章。文件和目录")，“文件和目录”）。您会为此感到高兴的。
- en: 'In order to execute the script as a command, you need to change the permissions
    on the file. For example, if you have created and saved a text file named `mycmd`,
    you can make it executable by running the following command:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将脚本作为命令执行，您需要更改文件的权限。例如，如果您已经创建并保存了一个名为`mycmd`的文本文件，您可以通过运行以下命令使其可执行：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If you have not done much script writing, to be on the safe side, I would suggest
    using a user account when creating and running scripts. When you get comfortable
    (or if you already are), you can run as root. You will probably have to at some
    point, especially if you are a systems administrator.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有进行过太多的脚本编写，为了安全起见，我建议在创建和运行脚本时使用用户帐户。当您感到舒适（或者如果您已经感到舒适），您可以以root身份运行。您可能会在某个时候必须这样做，特别是如果您是系统管理员。
- en: Several script examples have been given in the following paragraphs. These should
    give a good idea of what can scripts be used for and how to write them.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下段落中给出了几个脚本示例。这些应该很好地说明了脚本可以用于什么以及如何编写它们。
- en: Removing text from a file
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从文件中删除文本
- en: A script can be written to do almost anything you can imagine. The following
    is one such example.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本可以编写成几乎您能想象到的任何事情。以下是一个这样的例子。
- en: How to do it...
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: The following is the listing for a script that can be used to cut the line numbers
    off the examples. You can then run them as is on your system.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个可以用于去掉示例中行号的脚本的清单。然后您可以在您的系统上按原样运行它们。
- en: Script 1 – removing line numbers
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 脚本1 - 去掉行号
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works…
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Let's discuss what the previous given lines do.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论一下前面给出的行是做什么的。
- en: The first line tells the OS what shell this script is for.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一行告诉操作系统这个脚本是为哪个shell准备的。
- en: Line 2 has a `#` in the first column. This is called a comment line. Here I
    have the date the script was written.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第2行在第一列有一个`#`。这被称为注释行。这里我有脚本编写的日期。
- en: The `$1` variable is the first parameter you gave after the name of the command.
    If no parameter is given, it will be equal to the empty string (`""`). The `Usage`
    text will be displayed and the script will exit at line 8.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$1`变量是您在命令名称之后给出的第一个参数。如果没有给出参数，它将等于空字符串（`""`）。`Usage`文本将显示，并且脚本将在第8行退出。'
- en: If a parameter was indeed given, this script assumes it's a filename and so,
    processing will continue with line 10.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果确实给出了参数，此脚本假定它是一个文件名，因此，处理将继续到第10行。
- en: Line 10 uses the `cat` command to stream the contents of the file. In this case,
    the stream is being piped to the `cut` command.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第10行使用`cat`命令来流式传输文件的内容。在这种情况下，流被传输到`cut`命令。
- en: The `cut` command would normally keep the first five characters of each line
    and discard the rest. However, since I used the `--complement` flag, it does just
    the opposite. Many Linux commands have this option or something similar to it.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cut`命令通常会保留每行的前五个字符并丢弃其余部分。但是，由于我使用了`--complement`标志，它做的恰恰相反。许多Linux命令都有这个选项或类似的选项。'
- en: There's more...
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'If you would like to try this on your system, carry out the following steps:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在您的系统上尝试这个，请执行以下步骤：
- en: Open a text editing session, for example `vi removelines.txt`.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个文本编辑会话，例如`vi removelines.txt`。
- en: Put `vi` into Insert mode by pressing *I.*
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按*I.*将`vi`置于插入模式。
- en: 'Copy the text of the script from the book and paste it into `vi`. Save the
    file and exit: `wq`.'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从书中复制脚本的文本并粘贴到`vi`中。保存文件并退出：`wq`。
- en: 'Now run the following command:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在运行以下命令：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then make it executable:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后使其可执行：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Run the following command:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If all went well, the usage screen should appear. You can now use this script
    on the rest of the examples in this chapter.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，使用屏幕应该会出现。您现在可以在本章的其余示例中使用此脚本。
- en: Using script parameters
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用脚本参数
- en: Here we show how to count and show the number of parameters given to a script.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们展示了如何计算和显示给脚本的参数数量。
- en: How to do it...
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following is the script listing:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是脚本清单：
- en: Script 2 – parameters
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 脚本2 - 参数
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works…
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: You already know what lines 1 to 3 do. The `$#` built-in variable contains the
    number of parameters that were given to the script. In line 4, we set the variable
    `N` to that value.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您已经知道第1到3行的作用。`$#`内置变量包含给脚本的参数数量。在第4行，我们将变量`N`设置为该值。
- en: Line 5 displays the value of `N`. Note that to access a variable, you must precede
    it with a `$` character.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第5行显示了`N`的值。请注意，要访问变量，必须在其前面加上`$`字符。
- en: In line 6, we test `N` to see if any parameters were given. If not, we display
    the `Usage` message and exit at line 8.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第6行，我们测试`N`以查看是否给出了任何参数。如果没有，我们显示`Usage`消息，并在第8行退出。
- en: Line 10 is an example of a `for` loop. Note the syntax, and don't forget the
    `done` command at the end of the loop. Note that `$*` is a built-in variable that
    contains a list of all the parameters given to the script.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第10行是一个`for`循环的示例。注意语法，并不要忘记循环结束时的`done`命令。请注意，`$*`是一个内置变量，其中包含给脚本的所有参数的列表。
- en: In line 11, we display the value of the `i` variable.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第11行，我们显示了`i`变量的值。
- en: There's more...
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Make this an executable script on your system by following the example in the
    previous section with the only change in its naming as `parameters`.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按照前一节中的示例进行更改，将其命名为“parameters”，使其成为您系统上的可执行脚本。
- en: 'Run it: `parameters` (you may need to run this as .`/parameters` on your system).'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行它：`parameters`（您可能需要在系统上运行`. /parameters`）。
- en: 'You should see the `Usage` message. Now run it with this command:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到`Usage`消息。现在使用以下命令运行它：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: It should display the number 3 and then each parameter on a line.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它应该显示数字3，然后每个参数一行。
- en: Try it with some other numbers. Also try some wildcard characters.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试使用其他数字。还尝试一些通配符字符。
- en: Note
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Variables require a bit more explanation. For example, the following are numbers:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 变量需要更多的解释。例如，以下是数字：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You test numbers in the following manner:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以按以下方式测试数字：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following are strings:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是字符串：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This is another case where it helps to remember that it's backwards. Use letters
    such as `-eq` to test numbers, and `=` and other numeric operators to test strings.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一种情况，记住它是相反的。使用诸如`-eq`之类的字母来测试数字，使用`=`和其他数字运算符来测试字符串。
- en: Coding a loop in a script
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在脚本中编写一个循环
- en: Our previous scripts were commands that ran quickly to completion. Here is an
    example of a script that runs until you decide to terminate it. Note that if no
    parameters are required, a `Usage` section is probably not needed (but be sure
    to state what the script does in the comment section).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前的脚本是快速运行完成的命令。这是一个运行直到您决定终止它的脚本的示例。请注意，如果不需要参数，则可能不需要`Usage`部分（但一定要在注释部分说明脚本的功能）。
- en: This script monitors the state of the network connection by pinging the provider
    once a minute. Failures are logged to a file.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本通过每分钟一次ping服务提供商来监视网络连接的状态。失败将被记录到文件中。
- en: How to do it...
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following is the program listing:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是程序清单：
- en: Script 3 - loops
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 脚本3 - 循环
- en: '[PRE11]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How it works...
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Line 4 is your provider's IP address or domain name. For this example, I used
    my `bigtwo` machine. Note that this variable could instead be placed in your `.bashrc`
    file (see [Chapter 1](ch01.html "Chapter 1. Using the Terminal / Command Line"),
    *Using the Terminal / Command Line*). That way you would only have to change it
    in one place if you get a new provider in the future.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第4行是您的服务提供商的IP地址或域名。在本例中，我使用了我的`bigtwo`机器。请注意，如果将此变量放在您的`.bashrc`文件中（参见[第1章](ch01.html
    "第1章。使用终端/命令行")，“使用终端/命令行”），那么如果将来更换服务提供商，您只需要在一个地方进行更改。
- en: Line 5 clears the screen.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第5行清除屏幕。
- en: Line 6 might look a little strange. Yes, that is what is known as an infinite
    loop. However, the script can still be terminated by pressing *Ctrl* and *C*,
    by issuing a kill command to it, or by having it watch for a file (more on that
    later).
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第6行可能看起来有点奇怪。是的，这就是所谓的无限循环。但是，脚本仍然可以通过按下*Ctrl*和*C*，通过向其发出kill命令，或者通过让它监视一个文件（稍后会详细介绍）来终止。
- en: In line 7, remember that a `while` statement needs a statement after it.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第7行，记住`while`语句需要在其后有一个语句。
- en: Line 10 uses the `ping` command. The `-c 1` variable tells it to ping only once.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第10行使用了`ping`命令。`-c 1`变量告诉它只ping一次。
- en: Line 11 saves the error code from the previous command.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第11行保存了上一个命令的错误代码。
- en: The `ping` command returns `0` if there are no errors. In case errors are present,
    line 14 appends the system date to the `log1.txt` file.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果没有错误，则`ping`命令返回`0`。如果存在错误，第14行将系统日期附加到`log1.txt`文件中。
- en: Line 15 then appends the text to the log file.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第15行然后将文本附加到日志文件中。
- en: Line 17 waits for 60 seconds and then the loop starts the back up again at line
    6.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第17行等待60秒，然后循环在第6行重新开始。
- en: I have been running this script since January 2007\. I have used the `log1.txt`
    file on more than one occasion to convince my provider to improve their service.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我从2007年1月开始运行这个脚本。我已经多次使用“log1.txt”文件来说服我的服务提供商改进他们的服务。
- en: 'The following is a screenshot of the script running on my Fedora 17 system:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我在Fedora 17系统上运行的脚本的截图：
- en: '![How it works...](img/3008OS_08_01.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/3008OS_08_01.jpg)'
- en: There's more...
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Carry out the following steps to run this script:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤来运行此脚本：
- en: Create the file as in the previous sections. You may name it whatever you want,
    as long as it does not conflict with another script or program. I named mine `loop1`.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照前几节的步骤创建文件。您可以根据需要对其进行命名，只要不会与另一个脚本或程序冲突即可。我将其命名为“loop1”。
- en: Open a terminal on your system. I suggest making it rather small as in the previous
    screenshot.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的系统上打开一个终端。我建议将其设置得比之前的截图小一些。
- en: You do not need to be root to run this script. So, simply type the name you
    gave it to start it up.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您无需以root身份运行此脚本。因此，只需键入您给它的名称即可启动它。
- en: Remember that this script is in a loop; it will run until you terminate it.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请记住，这个脚本是一个循环；它会一直运行直到你终止它。
- en: From time to time you should look at the `log1.txt` file to see how reliable
    your Internet connection is. Note that if your connection goes down a lot, this
    file may get very large.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该不时查看`log1.txt`文件，以了解你的互联网连接有多可靠。请注意，如果你的连接经常中断，这个文件可能会变得非常大。
- en: Scripts such as this one are used quite frequently, especially when performing
    system administration duties to monitor the resources of the network.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的脚本经常被使用，特别是在执行系统管理职责时，用于监视网络资源。
- en: One word of caution, use services such as `ping` with care. For example, do
    not ping your provider an excessive number of times. Once a minute is fine. When
    developing a script like this, use a local ping address for testing until you
    get it just right.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 一个警告，谨慎使用`ping`等服务。例如，不要过多地ping你的提供商。一分钟一次就可以了。在开发这样的脚本时，使用本地ping地址进行测试，直到你完全掌握它。
- en: Backing up your system
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 系统备份
- en: Automating tasks is what makes scripts really powerful. You can spend some time
    getting a script just right and then let it do its thing. I easily have at least
    ten scripts running on each of my Fedora systems right now.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化任务是使脚本真正强大的地方。你可以花一些时间把脚本做得完美，然后让它自己运行。我现在每个Fedora系统上至少有十个脚本在运行。
- en: Here's what I call my *poor man's* backup utility. In the past, I have tried
    some *store-bought* programs only to be disappointed with the quality of the software.
    There's nothing worse than needing your backup files and then discovering there
    aren't any! This script is called by a `cron` job every night at 3 a.m. We cover
    cron in the next chapter.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我所谓的*穷人*备份实用程序。过去，我曾尝试过一些*商店购买*的程序，但对软件质量感到失望。最糟糕的是需要备份文件，然后发现根本没有！这个脚本由一个`cron`作业每天晚上3点调用。我们将在下一章介绍cron。
- en: If you want to try and use this script, be sure you understand what is going
    on. The backup directories must be created manually first, along with the `filenum1`
    file.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想尝试并使用这个脚本，请确保你理解正在发生什么。备份目录必须首先手动创建，以及`filenum1`文件。
- en: This script, as written, must run as root.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如所写的这个脚本必须以root身份运行。
- en: How to do it...
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'I use the following script to make a backup copy of my files:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用以下脚本来备份我的文件：
- en: Script 4 – making backups
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 脚本4 - 备份
- en: '[PRE12]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: How it works...
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Line 4 changes to my backup directory. You would want to change this on your
    system.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第4行切换到我的备份目录。你会想在你的系统上更改这个。
- en: Line 7 appends the current date to the `datelog.txt` file. I check this from
    time to time to make sure everything looks okay.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第7行将当前日期附加到`datelog.txt`文件中。我不时检查这个文件，确保一切看起来都很好。
- en: Line 8 looks really weird; what are those backticks for? The `filenum1` file
    contains a number which is the next directory to copy the backup files to (7 in
    all). As you know, if you were to `cat` this file, it would display its contents
    on the screen. Well, the backticks mean to run this command, but place the resulting
    expression into a variable. This sounds complicated, but you will get used to
    it very quickly.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第8行看起来真的很奇怪；那些反引号是干什么的？`filenum1`文件包含一个数字，这是下一个要复制备份文件的目录（总共7个）。你知道，如果你`cat`这个文件，它会在屏幕上显示它的内容。嗯，反引号的意思是运行这个命令，但将结果表达式放入一个变量中。这听起来很复杂，但你会很快习惯的。
- en: The variable `T` now has the number of the next directory to use. Line 9 uses
    the `expr` command to evaluate the expression and add `1` to `T`.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量`T`现在有了下一个要使用的目录的编号。第9行使用`expr`命令来评估表达式，并将`1`加到`T`上。
- en: Line 10 checks to see if `T` is greater than `7`, and if so, sets it back to
    `1`. Yes, I make seven backups, one for each day of the week. Call me paranoid!
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第10行检查`T`是否大于`7`，如果是，就将它设置回`1`。是的，我做了七次备份，每周一次。叫我偏执狂吧！
- en: Line 13 copies the new value of `T` back to `filenum1` for the next use.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第13行将`T`的新值复制回`filenum1`以供下次使用。
- en: Line 14 sets up the `TDIR` variable, which contains the backup directory we
    are going to copy the files to.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第14行设置了`TDIR`变量，其中包含我们要复制文件的备份目录。
- en: Line 16 changes to `TDIR`.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第16行切换到`TDIR`。
- en: Line 17 displays the current working directory. I had put this in when writing
    this script and got used to it being there, so left it in. This is completely
    optional.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第17行显示当前工作目录。我在编写这个脚本时加入了这个，习惯了它的存在，所以留了下来。这完全是可选的。
- en: Line 18 removes the previous compressed backed up files. I strongly suggest
    you comment this line when first trying out this script. Then, after being sure
    that everything is okay, you can put it back in.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第18行删除了先前压缩的备份文件。我强烈建议你在首次尝试这个脚本时注释掉这一行。然后，在确保一切正常之后，你可以把它放回去。
- en: Line 20 sets up a date timestamp. Again, the backtick operators are being used
    to put the value of date into a variable (`X` in this case).
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第20行设置了一个日期时间戳。同样，反引号操作符被用来将日期的值放入一个变量中（在这种情况下是`X`）。
- en: Line 22 changes to `/`.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第22行切换到`/`。
- en: Lines 23, 24, and 25 back up the directories `/lewis`, `/temp`, and `/root`.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第23、24和25行备份了`/lewis`、`/temp`和`/root`目录。
- en: Line 26 changes to `/home`.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第26行切换到`/home`。
- en: Line 27 tars up my `/home/guest1` directory. The parameters on `tar` tell it
    which directories to exclude from the archive. See the `tar man` page for more
    information.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第27行打包了我的`/home/guest1`目录。`tar`的参数告诉它从归档中排除哪些目录。查看`tar man`页面以获取更多信息。
- en: Line 28 displays the script version, line 29 goes back to the backup directory,
    line 30 displays the directory name, and line 31 shows the file listing.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第28行显示脚本版本，第29行返回到备份目录，第30行显示目录名称，第31行显示文件列表。
- en: This script is more of an example than a true backup program, but it's a good
    place to start from. The real one I use is similar to this, but also copies the
    files to an external USB drive and to another computer off-site (using unattended
    `scp`). Whenever I want to create a new Linux machine, I just copy these files
    to it and extract them, configure and source my `.bashrc`, and I am ready to run.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本更像是一个示例，而不是一个真正的备份程序，但这是一个很好的起点。我使用的真正的备份程序与此类似，但还将文件复制到外部USB驱动器和另一台远程计算机（使用无人值守的`scp`）。每当我想要创建一个新的Linux机器时，我只需将这些文件复制到它并解压缩，配置和源我的`.bashrc`，然后我就可以运行了。
- en: Locking a file for only one use at a time
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一次只能使用一个文件的锁定
- en: This comes up often enough for me to mention it. There may be times when you
    want to edit a file in a terminal by running a simple script. However, if the
    file has already been opened in another terminal, there is the possibility that
    updates made in one session will get overwritten in the other. The following script
    should help prevent that from occurring.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这对我来说经常发生。有时候您可能想通过运行一个简单的脚本在终端中编辑一个文件。但是，如果文件已经在另一个终端中打开，那么一个会话中进行的更新可能会在另一个会话中被覆盖。以下脚本应该有助于防止这种情况发生。
- en: How to do it...
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'Here is an easy way to prevent the same file from being edited by more than
    one terminal at the same time:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是防止同一个文件同时被多个终端编辑的简单方法：
- en: Script 5 – file locking
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 脚本5 - 文件锁定
- en: '[PRE13]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How it works...
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Line 3 sets the variable `FN1` to the name of the lock file.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第3行将变量`FN1`设置为锁定文件的名称。
- en: Line 4 checks to see if the lock file exists. If it does, it displays the contents
    of the lock file and exits the script.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第4行检查锁定文件是否存在。如果存在，它会显示锁定文件的内容并退出脚本。
- en: We get to line 9 if the lock file does not exist. The lock file is now created
    by redirecting the output of the `tty` command to the file.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果锁定文件不存在，我们将到达第9行。现在通过将`tty`命令的输出重定向到文件来创建锁定文件。
- en: In line 11, you can perform whatever action(s) you desire. In my case, I edit
    `/tmp/todo.txt` here using `kw`, my text editor. Even after the editor session
    is closed, the processing of the script continues.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第11行，您可以执行任何您想要的操作。在我的情况下，我在这里使用`kw`，我的文本编辑器编辑`/tmp/todo.txt`。即使编辑器会话关闭，脚本的处理也会继续。
- en: Line 12 removes the lock file.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第12行删除锁定文件。
- en: This is simple and works really well. I use a version of this script to edit
    several of my important files. The `todo` script can be run from anywhere on my
    system and the `todo.txt` file is displayed in my text editor. If I go off to
    another session or window later while the file is still being edited, and try
    to run `todo` again, it will not allow the edit. It also tells me if `tty` is
    in the original session. This can help me find it again more quickly, which is
    very useful as I always have a lot of workspaces and terminals open.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这很简单，而且效果非常好。我使用这个脚本的一个版本来编辑我的几个重要文件。`todo`脚本可以从系统的任何位置运行，并且`todo.txt`文件会显示在我的文本编辑器中。如果我在文件仍在被编辑时离开到另一个会话或窗口，然后尝试再次运行`todo`，它将不允许编辑。它还会告诉我`tty`是否在原始会话中。这可以帮助我更快地再次找到它，这对我来说非常有用，因为我总是有很多工作区和终端打开。
- en: Getting introduced to Perl
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Perl
- en: Perl is a programming language that can be used for text manipulation, web development,
    network programming, system administration, development of GUIs, and a whole lot
    more. It was designed to be easy to use and efficient, and you can use either
    a traditional procedural or object oriented approach in your scripts. Perl also
    has a rather large list of third-party add-on modules that give it even more functionality.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Perl是一种可以用于文本处理、Web开发、网络编程、系统管理、GUI开发等等的编程语言。它被设计成易于使用和高效，您可以在脚本中使用传统的过程化方法或面向对象的方法。Perl还有一个相当大的第三方附加模块列表，使其具有更多的功能。
- en: Getting ready
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this section, we will cover just the very basics of Perl. Most typical Linux
    systems come with it and the documentation already installed. To see a brief introduction,
    run `perldoc perlintro` on your system. The Perl introduction should come right
    up.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将只涵盖Perl的基础知识。大多数典型的Linux系统都已经安装了它和文档。要查看简要介绍，请在您的系统上运行`perldoc perlintro`。Perl介绍应该会立即出现。
- en: 'In order to run a Perl script, you can use the following Perl command:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行Perl脚本，可以使用以下Perl命令：
- en: '[PRE14]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `.pl` parameter is the usual extension given to Perl scripts. You can also
    place the path to Perl in the script similar to how we did with `bash`. First
    run `which perl` to see where Perl is located and then put that in as the first
    line of your script:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`.pl`参数是通常赋予Perl脚本的扩展名。您还可以在脚本中放置Perl的路径，类似于我们在`bash`中所做的。首先运行`which perl`以查看Perl的位置，然后将其放在脚本的第一行中：'
- en: '[PRE15]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: That's the correct path on Fedora. As with `bash` scripts, use a text editor
    to create them and use `chmod 755 filename.pl` to make it executable. Now, you
    can just type the name of the command to run it.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Fedora上的正确路径。与`bash`脚本一样，使用文本编辑器创建它们，并使用`chmod 755 filename.pl`使其可执行。现在，您只需输入命令的名称即可运行它。
- en: How to do it...
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'The following is a small Perl script I wrote when I was first starting out
    learning the language:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我在开始学习这种语言时写的一个小Perl脚本：
- en: '[PRE16]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: How it works...
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Line 1 tells the shell which interpreter to use.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第1行告诉shell要使用哪个解释器。
- en: Line 3 tells the compiler to be rather severe with the syntax. Always use this
    line.
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第3行告诉编译器在语法上要非常严格。也始终使用这一行。
- en: Line 4 says to show all warnings. Always use this too.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第4行表示显示所有警告。也始终使用这个。
- en: Lines 5 to 9 are a subroutine. Line 7 puts the first parameter to the subroutine
    into the variable message. Line 8 displays it.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第5到9行是一个子例程。第7行将子例程的第一个参数放入变量消息中。第8行显示它。
- en: Line 10 clears the screen.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第10行清除屏幕。
- en: Line 11 tells us what this script is supposed to be. Note the `\n` parameter
    at the end of the line. This stands for newline, and signifies continuing the
    next print output on to the next line.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第11行告诉我们这个脚本应该是什么。请注意行尾的`\n`参数。这代表换行，表示将下一个打印输出继续到下一行。
- en: Line 12 sets the variable name to `Jim`. Note the `$` symbol in front of name.
    Don't forget it.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第12行将变量名设置为`Jim`。注意名称前面的`$`符号。不要忘记它。
- en: Line 13 displays the variable.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第13行显示变量。
- en: Line 14 creates an array of numbers. Note the `@` character.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第14行创建一个数字数组。注意`@`字符。
- en: Line 15 displays the first element in the array.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第15行显示数组中的第一个元素。
- en: Line 16 displays the last element by using the special Perl syntax of `$#numbers`.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第16行使用特殊的Perl语法`$#numbers`显示最后一个元素。
- en: Line 17 checks to see if element `0` really is equal to `23` or not. Note the
    double equal sign.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第17行检查元素`0`是否真的等于`23`。注意双等号。
- en: Line 21 creates the variable `count` and sets it to `0`.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第21行创建变量`count`并将其设置为`0`。
- en: Line 22 is another special Perl convention. The `foreach` command means to traverse
    through the array one element at a time. This is a very handy feature.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第22行是另一个特殊的Perl约定。`foreach`命令表示逐个遍历数组中的元素。这是一个非常方便的功能。
- en: Line 24 shows how the special `$_` construct works to display each element of
    an array.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第24行展示了特殊的`$_`结构如何显示数组的每个元素。
- en: Line 25 increments the count by `1`.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第25行将计数增加`1`。
- en: 'The next lines are a way to handle files in Perl. It attempts to open the `input.txt`
    file for reading and `output.txt` for writing. The `input.txt` file must exist
    or else the program will error out and stop right here. The contents of `input.txt`
    are as follows:'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下面的几行是在Perl中处理文件的一种方法。它尝试打开`input.txt`文件进行读取，`output.txt`进行写入。`input.txt`文件必须存在，否则程序将出错并在此停止。`input.txt`的内容如下：
- en: '[PRE17]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Line 30 opens the output file.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第30行打开输出文件。
- en: Lines 31 through 35 read each line from `input.txt` and write it to `output.txt`.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第31到35行读取`input.txt`中的每一行并将其写入`output.txt`。
- en: Lines 36 and 37 close the files. Don't forget this step in your scripts.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第36和37行关闭文件。不要忘记在脚本中执行这一步。
- en: Line 38 uses the subroutine we created earlier to display a message.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第38行使用我们之前创建的子例程显示一条消息。
- en: Line 39 creates and sets the `key` variable.
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第39行创建并设置`key`变量。
- en: Line 40 resets the `count` variable back to `1` again.
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第40行将`count`变量重新设置为`1`。
- en: Line 41 starts a `while` loop.
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第41行开始一个`while`循环。
- en: Lines 43 through 46 are a way to read a key from the keyboard in Perl. If this
    looks convoluted to you, I couldn't agree more.
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第43到46行是在Perl中从键盘读取键的一种方法。如果这对你来说看起来很复杂，我完全同意。
- en: The remaining lines are self-explanatory. When the user presses `q` to quit,
    the `count` variable is increased to `10000`. This causes the `while` loop at
    line 41 to finish early, effectively ending the script. You could have instead
    used a loop control variable here.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 其余的行都是不言自明的。当用户按下`q`退出时，`count`变量增加到`10000`。这会导致第41行的`while`循环提前结束，有效地结束脚本。你也可以在这里使用一个循环控制变量。
- en: 'The following is a screenshot of the previous script running on my system:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我系统上运行的上一个脚本的屏幕截图：
- en: '![How it works...](img/3008OS_08_02.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/3008OS_08_02.jpg)'
- en: There's more...
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Although this is an extremely trivial script, you can do an incredible amount
    of things with Perl. Many years ago, when I was first starting out with home computers,
    there was a text-mode game we could play based on Star Trek. I obtained a copy
    of this game in BASIC and eventually rewrote it in C. A few months ago, I decided
    to rewrite it again, this time in Perl. It's not done yet, probably because I
    am too busy writing this book, but it is getting there.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这是一个非常琐碎的脚本，但你可以用Perl做很多事情。许多年前，当我刚开始接触家用电脑时，有一个基于星际迷航的文本模式游戏可以玩。我得到了这个BASIC游戏的副本，最终用C语言重写了它。几个月前，我决定再次重写它，这次使用Perl。它还没有完成，可能是因为我太忙于写这本书，但它正在进行中。
- en: Good books on Perl should be easy to locate. I have bought a few and find them
    to be very valuable as I attempt to learn it in more detail.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Perl的好书应该很容易找到。我买了几本，发现它们在我试图更详细地学习它时非常有价值。
- en: There are several hundred standard Linux utilities that can be used standalone
    or in scripts. The following is a short list of some of the most common ones.
    Whenever you need to perform any task, check here to see if you can incorporate
    some of the given commands into your script.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 有几百个标准的Linux实用程序可以独立使用或在脚本中使用。以下是一些最常见的一些命令的简短列表。每当你需要执行任何任务时，请在这里检查，看看你是否可以将其中一些命令纳入你的脚本中。
- en: 'The following utilities are located in `/bin`:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 以下实用程序位于`/bin`目录中：
- en: '`awk`, `gawk`: These are used for pattern scanning and processing language'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`awk`，`gawk`：用于模式扫描和处理语言'
- en: '`basename`: It is used to strip directory and suffix from filenames'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`basename`：用于从文件名中剥离目录和后缀'
- en: '`bash`: It is a GNU bourne-again shell'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bash`：GNU的Bourne-Again Shell'
- en: '`cat`: It is used to concatenate files and print on the standard output'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cat`：用于连接文件并在标准输出上打印'
- en: '`chmod`: It is used to change file mode bits'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chmod`：用于更改文件模式位'
- en: '`chown`: It is used to change the file owner and group'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chown`：用于更改文件所有者和组'
- en: '`cp`: It is used to copy files and directories'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cp`：用于复制文件和目录'
- en: '`cut`: It is used to remove sections from each line of files'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cut`：用于从文件的每一行中删除部分'
- en: '`date`: It is used to print or set the system date and time'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`date`：用于打印或设置系统的日期和时间'
- en: '`dmesg`: It is used to print or control the kernel ring buffer'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dmesg`：用于打印或控制内核环形缓冲区'
- en: '`echo`: It is used to display a line of text'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`echo`：用于显示一行文本'
- en: '`find`: It is used to search for files in a directory hierarchy'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`find`：用于在目录层次结构中搜索文件'
- en: '`grep`, `egrep`, `fgrep`: These are used to print lines matching a pattern'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`grep`，`egrep`，`fgrep`：用于打印匹配模式的行'
- en: '`hostname`: It is used to show or set the system''s host name'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hostname`：用于显示或设置系统的主机名'
- en: '`ls`: It is used to list the directory contents'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ls`：用于列出目录内容'
- en: '`mkdir`: It is used to make directories'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mkdir`：用于创建目录'
- en: '`mktemp`: It is used to create a temporary file or directory'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mktemp`：用于创建临时文件或目录'
- en: '`mv`: It is used to move (rename) files'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mv`：用于移动（重命名）文件'
- en: '`ping`, `ping6`: These are used to send `ICMP ECHO_REQUEST` to network hosts'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ping`，`ping6`：用于向网络主机发送`ICMP ECHO_REQUEST`'
- en: '`ps`: It is used to report a snapshot of the current processes'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ps`：用于报告当前进程的快照'
- en: '`pwd`: It is used to print the name of the current/working directory'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pwd`：用于打印当前工作目录的名称'
- en: '`rm`: It is used to remove files or directories'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rm`：用于删除文件或目录'
- en: '`sed`: It is used to invoke the stream editor for filtering and transforming
    text'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sed`：用于调用流编辑器来过滤和转换文本'
- en: '`sleep`: It represents the delay for a specified amount of time'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sleep`：表示延迟一定时间'
- en: '`sort`: It is used to sort the lines of text files'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sort`：用于对文本文件的行进行排序'
- en: '`tar`: It is used to combine and optionally compress files together into a
    single archive'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tar`：用于将文件组合并可选地压缩到单个存档中'
- en: '`touch`: It is used to change file timestamps'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`touch`：用于更改文件时间戳'
- en: 'The following utilities are located in `/usr/bin`:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 以下实用程序位于`/usr/bin`中：
- en: '`diff`: It is used to compare files line by line'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`diff`：用于逐行比较文件'
- en: '`dirname`: It is used to strip the last component from the filename'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dirname`：用于从文件名中剥离最后一个组件'
- en: '`expr`: It is used to evaluate expressions'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expr`：用于评估表达式'
- en: '`file`: It is used to determine the file type'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file`：用于确定文件类型'
- en: '`flock`: It is used to manage locks from shell scripts'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flock`：用于从shell脚本管理锁'
- en: '`stat`: It is used to display file or filesystem status'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stat`：用于显示文件或文件系统状态'
- en: '`tee`: It is used to read from the standard input and write to standard output
    and files'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tee`：用于从标准输入读取并写入标准输出和文件'
- en: '`time`: It is used to time a simple command or give the resource usage'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`time`：用于计时简单命令或提供资源使用情况'
- en: '`tty`: It is used to print the filename of the terminal connected to standard
    input'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tty`：用于打印连接到标准输入的终端的文件名'
- en: '`uniq`: It is used to report or omit repeated lines'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`uniq`：用于报告或省略重复的行'
- en: '`unzip`: It is used to list, test, and extract compressed files in a `ZIP`
    archive'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unzip`：用于列出、测试和提取`ZIP`存档中的压缩文件'
- en: '`who`: It is used to show who is logged on'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`who`：用于显示谁已登录'
- en: '`xargs`: It is used to build and execute command lines from the standard input'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xargs`：用于从标准输入构建和执行命令行'
- en: 'The following commands are built into the shell:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令内置于shell中：
- en: '`cd`: It is used to change the directory'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cd`：用于更改目录'
- en: '`echo`: It is used to display a line of text'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`echo`：用于显示一行文本'
- en: '`exit`: It causes the shell to exit (with an optional return code)'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exit`：导致shell退出（带有可选的返回代码）'
- en: '`export`: It is used to set an environment variable'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`export`：用于设置环境变量'
- en: '`kill`: It is used to send a signal to or terminate a process'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kill`：用于向进程发送信号或终止进程'
- en: '`read`: It is used to get a string from the keyboard and place it into a variable'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`read`：用于从键盘获取字符串并将其放入变量中'
