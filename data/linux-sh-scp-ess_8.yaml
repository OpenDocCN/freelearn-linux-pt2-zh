- en: Chapter 8. Scheduling Tasks and Embedding Languages in Scripts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。安排任务和在脚本中嵌入语言
- en: Until now, we learned about various useful shell utilities and how to write
    them into a shell script in order to avoid writing the same instructions again
    and again. Automating tasks by writing into scripts reduces the tasks up to a
    certain extent, but still we will have to run those scripts whenever required.
    Sometimes, it happens that we want to run a command or script at a particular
    time, for example, sysadmin has to run a clean-up and maintenance of a system
    available in the data center at 12:30 AM. To perform the required operation, sysadmin
    will login into a machine around 12:30 AM and do the necessary work. But what
    if his or her home network is down and the data center is far? It will be inconvenient
    and tough to perform a task at that moment. There are also a few tasks that need
    to be performed on daily or hourly basis, for example, monitoring the network
    usage of each user, taking a system backup, and so on. It will be very boring
    to execute repetitive tasks again and again.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经了解了各种有用的shell实用程序以及如何将它们写入shell脚本，以避免一遍又一遍地编写相同的指令。通过编写脚本自动化任务可以减少任务的数量，但是我们仍然需要在需要时运行这些脚本。有时，我们希望在特定时间运行命令或脚本，例如，系统管理员必须在凌晨12:30对数据中心中可用的系统进行清理和维护。为了执行所需的操作，系统管理员将在凌晨12:30左右登录到计算机并进行必要的工作。但是如果他或她的家庭网络出现故障，数据中心又很远怎么办？在那一刻执行任务将会很不方便和困难。还有一些需要每天或每小时执行的任务，例如监视每个用户的网络使用情况，进行系统备份等。一遍又一遍地执行重复的任务将会非常无聊。
- en: In this chapter, we will see how to solve such issues by scheduling tasks at
    a specific time or interval of time by using utilities `at` and `crontab`. We
    will also see how systemd (the first process started after a system is booted
    up with PID 1) manages processes needed after system start-up. We will also see
    how systemd manages different services and system logs. At the end, we will learn
    how we can embed other scripting languages in a shell script to get extra capabilities
    in the shell script.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到如何通过使用`at`和`crontab`实用程序在特定时间或时间间隔内安排任务来解决这些问题。我们还将看到systemd（系统启动后启动的第一个进程，PID
    1）如何管理系统启动后需要的进程。我们还将看到systemd如何管理不同的服务和系统日志。最后，我们将学习如何在shell脚本中嵌入其他脚本语言，以获得shell脚本中的额外功能。
- en: 'This chapter will cover the following topics in detail:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将详细介绍以下主题：
- en: Running tasks at a specific time
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在特定时间运行任务
- en: Cron jobs
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cron作业
- en: Managing Crontab entry
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理Crontab条目
- en: systemd
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: systemd
- en: Embedding languages
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌入语言
- en: Running tasks at a specific time
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在特定时间运行任务
- en: In general, when we run a command or script, it starts executing instantly.
    However, what if we want it to run later at a specific time? For example, I want
    to download large data from the Internet, but don't want to slow down my Internet
    bandwidth while I am working. So, I would like to run my download script at 1:00
    AM since I won't be using the Internet for any kind of work after 1:00 AM. It
    is possible to schedule download scripts or commands later at a specified time
    using the `at` command. We can also list scheduled tasks using the `atq` command
    or remove any scheduled tasks using the `atrm` command.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当我们运行命令或脚本时，它会立即开始执行。但是，如果我们希望在特定时间后运行它呢？例如，我想从互联网上下载大量数据，但不想在工作时减慢我的互联网带宽。因此，我想在凌晨1:00运行我的下载脚本，因为在凌晨1:00之后我不会使用互联网进行任何工作。使用`at`命令可以在指定的时间后安排下载脚本或命令。我们还可以使用`atq`命令列出已安排的任务，或使用`atrm`命令删除任何已安排的任务。
- en: Executing scripts using at
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`at`执行脚本
- en: 'We will use the `at` command to run tasks at a given time. The syntax of using
    the `at` command is as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`at`命令在指定时间运行任务。使用`at`命令的语法如下：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the preceding syntax, `specified_time` refers to the time at which a command
    or script should run. The time can be in the following format:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的语法中，`specified_time`指的是命令或脚本应该运行的时间。时间可以采用以下格式：
- en: '| Time format | Description |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| 时间格式 | 描述 |'
- en: '| --- | --- |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| HH:MM | The specific time of the day in hours (HH) and minutes (MM). If the
    time is already past, then the next day is assumed. Time is specified in 24 hours
    format. |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| HH:MM | 一天中特定的时间，以小时（HH）和分钟（MM）表示。如果时间已经过去，则假定为第二天。时间以24小时制表示。|'
- en: '| noon | At 12:00 during day time. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| noon | 白天12:00。|'
- en: '| teatime | At 16:00 or 4 pm in afternoon. |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| teatime | 下午4点或下午4点。|'
- en: '| midnight | At 12:00 at night. |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| midnight | 凌晨12:00。|'
- en: '| today | Refers to the current time on same day. |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| today | 指的是同一天的当前时间。|'
- en: '| tomorrow | Refers to the current time on the next day. |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| tomorrow | 指的是第二天的当前时间。|'
- en: '| AM or PM | Suffixed with the time to specify time in 12-hour format, for
    example, 4:00PM. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| AM或PM | 用于在时间后缀中指定12小时制的时间，例如4:00PM。|'
- en: '| now + count time-units | Run a script at the same time after a certain time-unit.
    Count can be an integer number. Time units can be in minutes, hours, days, weeks,
    months, or years. |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| now + count time-units | 在一定时间后以相同时间运行脚本。计数可以是整数。时间单位可以是分钟，小时，天，周，月或年。|'
- en: '| Date | A date can be given in the form of month-name, day, and optional year.
    Date can be in one of the following formats: MMDD[CC]YY, MM/DD/[CC]YY, DD.MM.[CC]YY,
    or [CC]YY-MM-DD. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 日期 | 日期可以以月份-日期和可选年份的形式给出。日期可以采用以下格式之一：MMDD[CC]YY，MM/DD/[CC]YY，DD.MM.[CC]YY，或[CC]YY-MM-DD。|'
- en: 'The options to the `at` command are explained in the following table:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`at`命令的选项在以下表中解释：'
- en: '| Option | Description |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 描述 |'
- en: '| --- | --- |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `-f FILE` | Specify a script file to be executed. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `-f FILE` | 指定要执行的脚本文件。|'
- en: '| `-l` | Alias to the `atq` command. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `-l` | `atq`命令的别名。|'
- en: '| `-m` | Send an e-mail to the user on job completion. |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `-m` | 在作业完成时向用户发送电子邮件。|'
- en: '| `-M` | Don''t send an e-mail to the user. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `-M` | 不向用户发送电子邮件。|'
- en: '| `-r` | Alias to the `atrm` command. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `-r` | `atrm`命令的别名。|'
- en: '| `-t time` | Run a job at the time. The format of time is given as [[CC]YY]MMDDhhmm[.ss].
    |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `-t time` | 在指定时间运行作业。时间的格式为[[CC]YY]MMDDhhmm[.ss]。|'
- en: '| `-c job_number` | Print the job associated with `job_number` on a standard
    output. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `-c job_number` | 在标准输出上打印与`job_number`相关的作业。 |'
- en: '| `-v` | Print the time at which the job will be executed. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `-v` | 打印作业将被执行的时间。 |'
- en: Scheduling commands
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安排命令
- en: 'The following command is scheduled to run at 14:00, which stores the filesystem''s
    usage in a file called `file_system_usage.log` in a user''s home directory:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令被安排在14:00运行，它将文件系统的使用情况存储在一个名为`file_system_usage.log`的文件中，存储在用户的主目录中：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When we run the `at` command as shown, a warning message **warning: commands
    will be executed using /bin/sh** is printed, which specifies which shell will
    be used to execute commands. In the next line, we will see `at prompt` where we
    can specify the list of commands to be executed at 14:00\. In our case, we entered
    the `df > ~/file_system_usage.log` command, which means run the `df` command and
    save its result in the `file_system_usage.log` file.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '当我们像上面那样运行`at`命令时，会打印一个警告消息**warning: commands will be executed using /bin/sh**，指定将使用哪个shell来执行命令。在下一行，我们将看到`at
    prompt`，在那里我们可以指定要在14:00执行的命令列表。在我们的情况下，我们输入了`df > ~/file_system_usage.log`命令，这意味着运行`df`命令并将其结果保存在`file_system_usage.log`文件中。'
- en: Once the list of commands to be entered is finished, press the *Enter* key and
    then, in the next line, use the *Ctrl* + *d* keys to exit from `at` prompt. Before
    getting a normal shell prompt, we will see the message saying created job number
    and time stamp at which the job will be executed. In our case, the job number
    is `33` and the time stamp is `Mon Sep 21 14:00:00 2015`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦输入要输入的命令列表完成，按下*Enter*键，然后在下一行使用*Ctrl* + *d*键从`at`提示中退出。在获得正常的shell提示之前，我们将看到消息，显示创建的作业编号和作业将被执行的时间戳。在我们的情况下，作业编号是`33`，时间戳是`Mon
    Sep 21 14:00:00 2015`。
- en: We can check the content of the `file_system_usage.log` file once the time stamp
    we specified is over.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们指定的时间戳结束，我们可以检查`file_system_usage.log`文件的内容。
- en: 'We can print on `stdout` what is going to be executed when a particular scheduled
    job runs:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当特定的预定作业运行时，我们可以在`stdout`上打印将要执行的内容：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![Scheduling commands](img/4335_08_01.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![安排命令](img/4335_08_01.jpg)'
- en: We can see that the `df > ~/file_system_usage.log` command will be executed.
    The rest of the lines specify in what environment a task will be executed.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到`df > ~/file_system_usage.log`命令将被执行。其余的行指定了任务将在什么环境中执行。
- en: 'Now, consider a job scheduled by the root user:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，考虑一个由root用户安排的作业：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The job with the number `34` is scheduled by the user root. This job system
    will reboot at `4am`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 编号为`34`的作业是由用户root安排的。这个作业系统将在凌晨4点重启。
- en: Scheduling a script file
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安排脚本文件
- en: We can schedule a script file for execution at a specific time using the `-f`
    option with the `at` command.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`at`命令的`-f`选项来安排脚本文件在特定时间执行。
- en: 'For example, we want to run the `loggedin_user_detail.sh` script next week
    at 4 pm. This script lists logged in users and what processes they are running
    when the script gets executed at a scheduled time. The content of the script is
    as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们想要在下周下午4点运行`loggedin_user_detail.sh`脚本。这个脚本列出了登录的用户以及在脚本在预定时间执行时他们正在运行的进程。脚本的内容如下：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, to run the preceding script at 4 pm next week, we will run the following
    command:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要在下周下午4点运行上述脚本，我们将运行以下命令：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We can see that the job has been scheduled to run one week later.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到这个作业已经被安排在一周后运行。
- en: Listing scheduled tasks
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列出预定的任务
- en: 'Sometimes, it happens that a task has been scheduled to run at a specific time,
    but we forget the time at which a task is supposed to run. We can see the already
    scheduled tasks using one of the `atq` or the `at` command with the `-l` option:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，一个任务被安排在特定的时间运行，但我们忘记了任务应该在什么时间运行。我们可以使用`atq`或`at`命令的`-l`选项来查看已经安排的任务：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `atq` command displays jobs scheduled by the current user with the job
    number, time, and user''s name:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`atq`命令显示了当前用户安排的作业，包括作业编号、时间和用户名：'
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Running `atq` with `sudo`, lists jobs scheduled by all users.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`sudo`运行`atq`命令，列出所有用户安排的作业。
- en: Removing scheduled tasks
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除预定的任务
- en: We can also remove a scheduled task if the task is no longer required to be
    performed. Removing a task is also useful when we want to the modify time at which
    a task is to be executed. To modify time, first remove the scheduled task and
    then create the same task again with the new time.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不再需要执行某个预定的任务，我们也可以删除该任务。当我们想要修改任务执行的时间时，删除任务也是有用的。要修改时间，首先删除预定的任务，然后再用新的时间创建相同的任务。
- en: 'For example, we don''t want to reboot a system at 1 am instead of 4 am. For
    this, the root user will first remove the job `34` using the `atrm` command:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们不想在凌晨1点而不是凌晨4点重启系统。为此，root用户将首先使用`atrm`命令删除作业`34`：
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We can see that the task scheduled by the root user will now run at 1 am instead
    of 4 am.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，由root用户安排的任务现在将在凌晨1点而不是凌晨4点运行。
- en: Cron jobs
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定时任务
- en: Cron jobs are jobs or tasks that run at regular intervals of time unlike the
    `at` command. For example, in office, my job is to keep all the detailed information
    of company employees that is confidential. To keep it secure and updated without
    any loss of information, I will have to take the backup of the latest data in
    external devices such as a hard disk or a flash drive. Depending upon the number
    of employees, I may have to take the backup on a minute, hour, daily or weekly
    basis. It's hard, tedious, and a waste of time to back up manually every time.
    By having the knowledge of how to schedule a cron job, it can be very easily achieved.
    A Cron job creation is frequently done by system administrators to schedule tasks
    that are to be performed at regular intervals, for example, taking the backup
    of a system, saving logs of each user who is logged in, monitoring and reporting
    the network usage of each user, performing system clean-up, scheduling system
    update, and so on.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Cron作业是定期运行的任务或作业，与`at`命令不同。例如，在办公室，我的工作是保持公司员工的详细信息是保密的。为了确保信息安全和更新，而不会丢失任何信息，我将不得不在外部设备上备份最新数据，如硬盘或闪存驱动器。根据员工人数，我可能需要每分钟、每小时、每天或每周备份一次。手动备份每次都是困难、繁琐且浪费时间的。通过了解如何安排cron作业，可以很容易地实现。系统管理员经常创建Cron作业来安排定期执行的任务，例如备份系统、保存每个登录用户的日志、监视和报告每个用户的网络使用情况、执行系统清理、安排系统更新等。
- en: 'Cron consists of two parts: cron daemon and cron configuration.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Cron由两部分组成：cron守护进程和cron配置。
- en: Cron daemon
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Cron守护进程
- en: The cron daemon automatically starts when a system is booted and keeps running
    in the background. Daemon process is known as crond and is started by systemd
    or the init process, depending upon what your system has. Its task is to check
    configuration files regularly at one minute intervals and check whether any tasks
    are to be completed.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当系统启动时，cron守护进程会自动启动并在后台持续运行。守护进程被称为crond，并由systemd或init进程启动，这取决于您的系统。它的任务是以一分钟的间隔定期检查配置文件，并检查是否有任何任务需要完成。
- en: Cron configuration
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Cron配置
- en: 'Cron configuration contains files and directories where the Cron jobs to be
    scheduled are written. They are available in the `/etc/` directory. The most important
    file associated with cron configuration is `crontab`. In a Linux system, configuration
    files related to cron are as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Cron配置包含Cron作业的文件和目录。它们位于`/etc/`目录中。与cron配置相关的最重要的文件是`crontab`。在Linux系统中，与cron相关的配置文件如下：
- en: '`/etc/cron.hourly/`: This contains the scripts to be run each hour'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/etc/cron.hourly/`：其中包含每小时运行的脚本'
- en: '`/etc/cron.daily/`: This contains the scripts to be run once in a day'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/etc/cron.daily/`：其中包含每天运行的脚本'
- en: '`/etc/cron.weekly/`: This contains the scripts to be run once in a week'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/etc/cron.weekly/`：其中包含每周运行的脚本'
- en: '`/etc/cron.monthly/`: This contains the scripts to be run once in a month'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/etc/cron.monthly/`：其中包含每月运行的脚本'
- en: '`/etc/crontab`: This contains commands and the interval at which they should
    run'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/etc/crontab`：其中包含命令以及它们应该运行的间隔'
- en: '`/etc/cron.d/`: This is the directory with files having commands and the interval
    at which they should run'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/etc/cron.d/`：其中包含命令以及它们应该运行的间隔的文件目录'
- en: Scripts can be directly added into any of the directories such as `cron.hourly/`,
    `cron.daily/`, `cron.weekly/`, or `cron.monthly/`, in order to run them at an
    hourly, daily, weekly, or monthly basis respectively.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本可以直接添加到`cron.hourly/`、`cron.daily/`、`cron.weekly/`或`cron.monthly/`中的任何一个目录中，以便按小时、每天、每周或每月的基础运行它们。
- en: 'The following is a simple shell script `firefox_memcheck.sh`, which checks
    whether a Firefox process is running or not. If Firefox is running and its memory
    usage is greater than 30 percent, then restart Firefox:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个简单的shell脚本`firefox_memcheck.sh`，它检查Firefox进程是否正在运行。如果Firefox正在运行，并且其内存使用大于30％，则重新启动Firefox：
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We can add this script into the `/etc/cron.hourly/` directory of the system
    and it will keep checking our Firefox memory usage. This script can be modified
    to monitor the memory usage for other processes too.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将此脚本添加到系统的`/etc/cron.hourly/`目录中，它将持续检查我们的Firefox内存使用情况。此脚本可以修改为监视其他进程的内存使用情况。
- en: Crontab entries
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: crontab条目
- en: By putting scripts into `cron.{hourly, daily, weekly, monthly}`, we can only
    set tasks at an interval of an hour, day, week, and month. What if a task has
    to run at 2-day intervals, 10-day intervals, 90 minute intervals, and so on? To
    achieve this, we can add tasks into the `/etc/crontab` file or the `/etc/cron.d/`
    directory. Each user may have their own crontab entry and files related to each
    users are available in `/var/spool/`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将脚本放入`cron.{hourly, daily, weekly, monthly}`中，我们只能设置每小时、每天、每周和每月的间隔任务。如果一个任务需要以2天间隔、10天间隔、90分钟间隔等运行，该怎么办？为了实现这一点，我们可以将任务添加到`/etc/crontab`文件或`/etc/cron.d/`目录中。每个用户可能都有自己的crontab条目，与每个用户相关的文件位于`/var/spool/`中。
- en: 'A crontab entry looks as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: crontab条目如下所示：
- en: '![Crontab entries](img/4335_08_02.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![Crontab entries](img/4335_08_02.jpg)'
- en: We can see from the preceding screenshot that a crontab entry has five asterisks.
    Each asterisk defines a specific duration. We can replace * with a value suggested
    against each of them or leave it as it is. If * is mentioned in a field, then
    it means consider all the instances of that field.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从上述截图中看到，crontab条目有五个星号。每个星号定义了一个特定的持续时间。我们可以用建议的值替换*，或者保持不变。如果在字段中提到*，那么它意味着考虑该字段的所有实例。
- en: 'The timing syntax can also be described as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 时间语法也可以描述如下：
- en: Specify the **minutes** value between 0 to 59
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定**分钟**值介于0到59之间
- en: Specify **hours** that can range from 0 to 23
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定**小时**范围从0到23
- en: Specify **days** that can range from 1 to 31
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定**天数**范围从1到31
- en: Specify **months** that can range from 1 to 12 or we can write Jan, Feb, … Dec
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定**月份**范围从1到12，或者我们可以写Jan，Feb，... Dec
- en: Specify the **day of a week** that can range from 0 to 6 or we can write sun
    (0), mon (1), …, sat (6)
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定**一周中的某一天**范围从0到6，或者我们可以写sun（0），mon（1），...，sat（6）
- en: All five fields are separated by blank spaces. It is followed by a **username**
    that specifies by which user the command will be executed. Specifying the username
    is optional and by default it is run as a root. The last field is command that
    is scheduled for execution.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 所有五个字段由空格分隔。然后是一个**用户名**，指定命令将由哪个用户执行。指定用户名是可选的，默认情况下会作为root运行。最后一个字段是计划执行的命令。
- en: 'An example demonstrating how to write the crontab entry is as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 演示如何编写crontab条目的示例如下：
- en: '[PRE10]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Each field can be explained as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 每个字段的解释如下：
- en: '`20`: 20th minute'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`20`：第20分钟'
- en: '`7`: 7AM'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`7`：上午7点'
- en: '`*`: Each day'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*`：每天'
- en: '`*`: Each month'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*`：每个月'
- en: '`0`: On Sunday'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0`：星期日'
- en: '`foo`: This command will run as the foo user'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`foo`：此命令将作为foo用户运行'
- en: '`command`: This is the specified command to be executed'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`command`：要执行的指定命令'
- en: So, the command will run as root at 7:20 AM every Sunday.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，命令将在每个星期日的上午7:20作为root运行。
- en: 'We can specify multiple instances of a filed using a comma (,):'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用逗号（，）指定字段的多个实例：
- en: '[PRE11]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Here, `command` will run at 8:30 PM and 10:30 PM every day.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`command`将在每天的8:30 PM和10:30 PM运行。
- en: 'We can also specify a range of time in a field using a hyphen (`-`) as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用连字符（`-`）在字段中指定一段时间的范围：
- en: '[PRE12]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This means, the run command is at 7:35, 8:35, 9:35, 10:35, and 11:35 on Sunday,
    Monday, Tuesday, and Wednesday.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着在星期日、星期一、星期二和星期三的7:35、8:35、9:35、10:35和11:35运行命令。
- en: 'To run a script at a specific interval, we can specify the forward slash (/)
    as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 要在特定间隔运行脚本，我们可以使用正斜杠（/）指定如下：
- en: '[PRE13]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The command will run on 9th April between 8:20 AM to 8:45 AM at an interval
    of 4 minutes.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将在4月9日的8:20 AM至8:45 AM之间以4分钟的间隔运行。
- en: Special strings in Crontab
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Crontab中的特殊字符串
- en: 'Crontab may have the following strings specified as well:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Crontab还可以指定以下字符串：
- en: '| String | Description |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| 字符串 | 描述 |'
- en: '| --- | --- |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `@hourly` | Run once in an hour, equivalent to 0 * * * * |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| `@hourly` | 每小时运行一次，相当于0 * * * * |'
- en: '| `@daily` or `@midnight` | Run once in a day, equivalent to 0 0 * * * |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| `@daily`或`@midnight` | 每天运行一次，相当于0 0 * * * |'
- en: '| `@weekly` | Run once in a week, equivalent to 0 0 * * 0 |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| `@weekly` | 每周运行一次，相当于0 0 * * 0 |'
- en: '| `@monthly` | Run once in a month, equivalent to 0 0 1 * * |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| `@monthly` | 每月运行一次，相当于0 0 1 * * |'
- en: '| `@yearly or @annually` | Run once in a year, equivalent to 0 0 1 1 * |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| `@yearly`或`@annually` | 每年运行一次，相当于0 0 1 1 * |'
- en: '| `@reboot` | Run at system start-up |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| `@reboot` | 在系统启动时运行 |'
- en: Managing the crontab entry
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理crontab条目
- en: We don't add or modify an entry of a crontab directly. It is done by using the
    `crontab` command that allows you to add, modify, and list crontab entries. Each
    user can have their own crontab where they can add, delete, or modify tasks. By
    default, it is enabled for all users, but if a system administrator wants to restrict
    some of the users, he or she can add that user in the `/etc/cron.deny` file.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不直接添加或修改crontab的条目。可以使用`crontab`命令来添加、修改和列出crontab的条目。每个用户都可以有自己的crontab，可以在其中添加、删除或修改任务。默认情况下，对所有用户启用，但如果系统管理员想要限制某些用户，可以将该用户添加到`/etc/cron.deny`文件中。
- en: 'The syntax of using the `crontab` command is as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`crontab`命令的语法如下：
- en: '[PRE14]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The options of the crontab are explained in the following table:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: crontab的选项在下表中解释：
- en: '| Option | Description |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 描述 |'
- en: '| --- | --- |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `-u user` | Appends the name of the user whose `crontab` is to be modified
    |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| `-u user` | 追加要修改其`crontab`的用户的名称 |'
- en: '| `-l` | Displays the current crontab on `stdout` |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| `-l` | 在`stdout`上显示当前的crontab |'
- en: '| `-e` | Edit the current `crontab` using an editor specified by the `EDITOR
    env` |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| `-e` | 使用`EDITOR env`指定的编辑器编辑当前的`crontab` |'
- en: '| `-r` | Remove the current `crontab` |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| `-r` | 删除当前的`crontab` |'
- en: '| `-i` | Interactive removal of the current `crontab` when used with the `-r`
    option |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| `-i` | 与`-r`选项一起使用时，交互式删除当前的`crontab` |'
- en: Listing crontab entries
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列出crontab条目
- en: 'To list the `crontab` entries, we use the `-l` option for the current user:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出`crontab`条目，我们使用当前用户的`-l`选项：
- en: '[PRE15]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The output says that there is no `crontab` entry for the user `foo`. It means
    the user `foo` has not added any task in his or her `crontab` yet.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示用户`foo`没有`crontab`条目。这意味着用户`foo`尚未在其`crontab`中添加任何任务。
- en: 'To view `crontab` as the root user, type the following command:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 要以root用户身份查看`crontab`，请输入以下命令：
- en: '[PRE16]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Alternatively, use the following command:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，使用以下命令：
- en: '[PRE17]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Editing crontab entries
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编辑crontab条目
- en: 'Crontab of the current user can be edited or modified by using the `-e` option
    with crontab:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 当前用户的crontab可以使用`-e`选项与crontab进行编辑或修改：
- en: '[PRE18]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'After executing the preceding command, an editor will open where the user can
    add tasks into the `crontab` file. In our case, the `vi` editor is launched. The
    following entries have been added into the user `foo crontab` entry:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 执行上述命令后，将打开一个编辑器，用户可以在其中将任务添加到`crontab`文件中。在我们的情况下，启动了`vi`编辑器。以下条目已添加到用户`foo
    crontab`条目中：
- en: '![Editing crontab entries](img/4335_08_03.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![编辑crontab条目](img/4335_08_03.jpg)'
- en: 'After saving and exiting from the editor, the output obtained is as follows:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 从编辑器保存并退出后，获得的输出如下：
- en: '[PRE19]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'To view the modified crontab entry of the user `foo`, run the `–l` option again:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看用户`foo`的修改后的`crontab`条目，再次运行`-l`选项：
- en: '[PRE20]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '![Editing crontab entries](img/4335_08_04.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![编辑crontab条目](img/4335_08_04.jpg)'
- en: 'To create the `crontab` entry of the user root, we can run `crontab` with the
    `-e` option as the root:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建用户root的`crontab`条目，我们可以作为root使用`-e`选项运行`crontab`：
- en: '[PRE21]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: OR
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 或者
- en: '[PRE22]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'After running the preceding command, the editor opens to modify `crontab` for
    the user root that looks as follows after adding entries:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述命令后，编辑器将打开以修改用户root的`crontab`，在添加条目后如下所示：
- en: '![Editing crontab entries](img/4335_08_05.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![编辑crontab条目](img/4335_08_05.jpg)'
- en: 'To view the `crontab` entry of the root, we can use `crontab -l` as the root
    user:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看root的`crontab`条目，我们可以使用`crontab -l`作为root用户：
- en: '[PRE23]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![Editing crontab entries](img/4335_08_06.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![编辑crontab条目](img/4335_08_06.jpg)'
- en: 'The root user can also view and modify the `crontab` entry of another user.
    This is done by specifying the `-u` option followed by the username:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: root用户还可以查看和修改另一个用户的`crontab`条目。这是通过指定`-u`选项，后跟用户名来完成的：
- en: '[PRE24]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Crontab of the user `foo` will be opened for modification as follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 用户`foo`的crontab将如下所示打开以进行修改：
- en: '![Editing crontab entries](img/4335_08_07.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![编辑crontab条目](img/4335_08_07.jpg)'
- en: 'To view the `crontab` entry of another user, run the `-l` option with `–u`
    as follows:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看另一个用户的`crontab`条目，运行以下命令：
- en: '[PRE25]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We can display the `crontab` of the user `foo` as follows:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以如下显示用户`foo`的`crontab`：
- en: '![Editing crontab entries](img/4335_08_08.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![编辑crontab条目](img/4335_08_08.jpg)'
- en: 'Crontab entries are created using the `crontab` command and are stored in the
    `/var/spool/cron/` directory. A file is created by the name of the user:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`crontab`命令创建crontab条目，并将其存储在`/var/spool/cron/`目录中。文件以用户名命名：
- en: '[PRE26]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: We can see that a file is created for the users `root` and `foo`.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到为用户`root`和`foo`创建了一个文件。
- en: Removing crontab entries
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除crontab条目
- en: 'We can also remove `crontab` using the `-r` option with the `crontab` command.
    By default, `crontab` of the current user is deleted. Using the option with `-i`
    allows the interactive removal of crontab:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`crontab`命令的`-r`选项来删除`crontab`。默认情况下，将删除当前用户的`crontab`。使用`-i`选项允许交互式删除`crontab`：
- en: '[PRE27]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'By running the preceding command, the `crontab` entry of the user root has
    been deleted. We can verify this by running the `-l` option:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行上述命令，已删除了用户root的`crontab`条目。我们可以通过运行`-l`选项来验证这一点：
- en: '[PRE28]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The user root can also delete `crontab` of other users by specifying the user
    in the`–u` option:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 用户root还可以通过在`-u`选项中指定用户来删除其他用户的`crontab`：
- en: '[PRE29]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: We specified '`n`' (no) instead of '`y`' (yes), so the removal of the user `foo
    crontab` will be aborted.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们指定了`n`（否）而不是`y`（是），因此将中止删除用户`foo crontab`。
- en: 'Let''s delete this now:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们删除它：
- en: '[PRE30]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now, the `crontab` entry of the user `foo` has been removed. To verify, run
    the following command:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，用户`foo`的`crontab`条目已被删除。要验证，请运行以下命令：
- en: '[PRE31]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: systemd
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: systemd
- en: Nowadays, most of the Linux distribution systems such as Fedora, Ubuntu, Arch
    Linux, Debian, openSUSE, and so on, have switched from `init` to systemd. systemd
    is the first process that gets started after system boot-up with PID 1\. It controls
    and manages other processes that should be started after the system boot-up. It
    is also known as basic building block for an operating system. To learn about
    an init-based system, refer to the Wikipedia link at [https://en.wikipedia.org/wiki/Init](https://en.wikipedia.org/wiki/Init).
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，大多数Linux发行版系统，如Fedora、Ubuntu、Arch Linux、Debian、openSUSE等，已经从`init`切换到了systemd。systemd是系统启动后第一个启动的进程，具有PID
    1。它控制和管理其他应该在系统启动后启动的进程。它也被称为操作系统的基本构建块。要了解基于init的系统，请参考维基百科链接[https://en.wikipedia.org/wiki/Init](https://en.wikipedia.org/wiki/Init)。
- en: systemd units
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: systemd单元
- en: systemd has several units, each containing a configuration file with information
    about a service, socket, device, mount point, swap file or partition, start-up
    target, and so on.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: systemd有几个单元，每个单元包含一个关于服务、套接字、设备、挂载点、交换文件或分区、启动目标等的配置文件。
- en: 'The following table explains some of unit files:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格解释了一些单元文件：
- en: '| Unit type | File extension | Description |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| 单元类型 | 文件扩展名 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Service unit | `.service` | A system service |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| 服务单元 | `.service` | 系统服务 |'
- en: '| Device unit | `.device` | A device file recognized by kernel |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| 设备单元 | `.device` | 内核识别的设备文件 |'
- en: '| Mount unit | `.mount` | A file system mount point |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| 挂载单元 | `.mount` | 文件系统挂载点 |'
- en: '| Timer unit | `.timer` | A systemd timer |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| 定时器单元 | `.timer` | 一个systemd定时器 |'
- en: '| Swap unit | `.swap` | A swap file |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| 交换单元 | `.swap` | 交换文件 |'
- en: 'To list all the installed unit files in a system, run the `systemctl` command
    with the `list-unit-files` option:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出系统中安装的所有单元文件，请使用`systemctl`命令和`list-unit-files`选项：
- en: '[PRE32]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '![systemd units](img/4335_08_09.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![systemd单元](img/4335_08_09.jpg)'
- en: 'To list unit files of a unit type, use the `list-unit-files` and `--type` options.
    Running the following command will show only a service unit available in the system:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出单元类型的单元文件，请使用`list-unit-files`和`--type`选项。运行以下命令将只显示系统中可用的服务单元：
- en: '[PRE33]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '![systemd units](img/4335_08_10.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![systemd单元](img/4335_08_10.jpg)'
- en: Managing services
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理服务
- en: systemd manages all the available services in a system, from the time of Linux
    kernel boot up till the shutdown of the system. A service in a Linux system is
    an application that runs in the background or is waiting to be used. Service management
    files have the suffix `.service` in its file name.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: systemd管理系统中所有可用的服务，从Linux内核启动到系统关闭的时间。Linux系统中的服务是在后台运行或等待使用的应用程序。服务管理文件的文件名后缀为`.service`。
- en: In systemd-based Linux system, a user or an administrator can manage services
    using the `systemctl` command.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于systemd的Linux系统中，用户或管理员可以使用`systemctl`命令管理服务。
- en: Status of a service
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 服务状态
- en: 'To list the current status of services and check whether it is running or not,
    use `systemctl status`:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出当前服务的状态并检查它是否正在运行，使用`systemctl status`：
- en: 'For example, to see the status of my `NetworkManager` service, run the following
    command:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要查看我的`NetworkManager`服务的状态，请运行以下命令：
- en: '[PRE34]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '![Status of a service](img/4335_08_11.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![服务状态](img/4335_08_11.jpg)'
- en: We can see that the `NetworkManager` service is running and is in active state.
    It also provides detailed information associated with the current `NetworkManager`
    service.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到`NetworkManager`服务正在运行并处于活动状态。它还提供了与当前`NetworkManager`服务相关的详细信息。
- en: 'Let''s see status of another service called the `sshd`. The `sshd` service
    controls whether `ssh` connection is possible to a system or not:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看另一个名为`sshd`的服务的状态。`sshd`服务控制是否可以对系统进行`ssh`连接：
- en: '[PRE35]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '![Status of a service](img/4335_08_12.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![服务状态](img/4335_08_12.jpg)'
- en: This shows that service `sshd` is inactive currently.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明服务`sshd`目前处于非活动状态。
- en: 'If no verbose output is required, then we can just use the `is-active` option
    to see a service status:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不需要详细的输出，那么我们可以只使用`is-active`选项来查看服务状态：
- en: '[PRE36]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Here, `active` means a service is running and `unknown` means a service is not
    running.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，“active”表示服务正在运行，“unknown”表示服务未运行。
- en: Enabling and disabling services
  id: totrans-223
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启用和禁用服务
- en: When a system is booted, systemd automatically starts some of the services.
    A few of the services may not be running as well. To enable a service to run after
    a system is booted, use `systemctl enable` and to stop a service running by a
    system during boot time, use `systemctl disable`.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 当系统启动时，systemd会自动启动一些服务。也可能有一些服务没有运行。要在系统启动后启用服务运行，使用`systemctl enable`，要在系统启动时停止系统运行的服务，使用`systemctl
    disable`。
- en: 'Executing the following command will allow systemd to run the `sshd` service
    after a system is booted up:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下命令将允许systemd在系统启动后运行`sshd`服务：
- en: '[PRE37]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Executing the following command will allow systemd to not run `sshd.service`
    when a system is booted up:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下命令将允许systemd在系统启动时不运行`sshd.service`：
- en: '[PRE38]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'To check whether a service is enabled or not, run the `systemctl is-enabled`
    command:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查服务是否已启用，请运行`systemctl is-enabled`命令：
- en: '[PRE39]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: It means that the `sshd` service is disabled currently during the system start-up,
    while the `NetworkManager` service is enabled during the start-up by `systemd`.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着`sshd`服务当前在系统启动时被禁用，而`NetworkManager`服务在启动时由`systemd`启用。
- en: Start and stop a service
  id: totrans-232
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启动和停止服务
- en: When a system is running, sometimes we may need some services running. For example,
    to do `ssh` in my current system from another system, the `sshd` service must
    be running.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 当系统运行时，有时我们可能需要一些服务在运行。例如，要在我的当前系统中从另一台系统进行`ssh`，`sshd`服务必须在运行。
- en: 'For example, let''s see what the current status of the `sshd` service is:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们看看`sshd`服务的当前状态：
- en: '[PRE40]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The `sshd` service is not running currently. Let''s try to do `ssh` in a system:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '`sshd`服务当前未运行。让我们尝试在系统中进行`ssh`：'
- en: '[PRE41]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: We can see that the `ssh` connection has been refused.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到`ssh`连接已被拒绝。
- en: 'Now, let''s start running the `sshd` service. We can start a service by using
    the `systemctl start` command as follows:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始运行`sshd`服务。我们可以使用以下命令`systemctl start`来启动服务：
- en: '[PRE42]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Now, the `sshd` service is running. Try doing `ssh` into the machine again:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`sshd`服务正在运行。再次尝试从另一台机器进行`ssh`：
- en: '[PRE43]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Now, the login has been done successfully.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，登录已成功。
- en: We can even restart a running service using the `systemctl restart` command.
    This is required when a service has been modified. Then, to enable the modified
    setting, we can just restart it.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以使用`systemctl restart`命令重新启动正在运行的服务。当服务已被修改时，这是必需的。然后，要启用修改的设置，我们只需重新启动它。
- en: '[PRE44]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: The preceding command will restart the `sshd` service.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将重新启动`sshd`服务。
- en: 'When `ssh` is no longer required, it''s safe to stop running it. This avoids
    an anonymous access to a machine. To stop running a service, run the `systemctl
    stop` command:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 当不再需要`ssh`时，停止运行它是安全的。这可以避免对机器的匿名访问。要停止运行服务，请运行`systemctl stop`命令：
- en: '[PRE45]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Viewing system logs
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看系统日志
- en: To check whether a user is working on an individual or enterprise machine, viewing
    system logs is very important in order to trace a problem and get detailed information
    of activities happening in a system. Viewing system logs plays an important role
    in monitoring and ensuring network traffics are not vulnerable. On a systemd-based
    system, system logs are collected and managed by one of its component called `journald`.
    Its task is to collect a log of applications and kernel. Log files are available
    in the `/var/log/journal/` directory.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查用户是在个人还是企业机器上工作，查看系统日志对于追踪问题和获取系统中发生的活动的详细信息非常重要。查看系统日志在监视和确保网络流量不易受攻击方面起着重要作用。在基于systemd的系统上，系统日志由其一个组件`journald`收集和管理。它的任务是收集应用程序和内核的日志。日志文件位于`/var/log/journal/`目录中。
- en: 'To view a log collected by `journald`, the `journalctl` command is used:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看`journald`收集的日志，使用`journalctl`命令：
- en: '[PRE46]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Running the preceding command displays all system logs collected, starting from
    old and grows down to newer logs.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述命令会显示所有收集的系统日志，从旧的开始，逐渐增加到新的日志。
- en: Viewing the latest log entries
  id: totrans-254
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查看最新的日志条目
- en: 'To see the latest log entries and continuously printing new entries as appended
    to the journal, use the `–f` option:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看最新的日志条目并持续打印追加到日志中的新条目，请使用`-f`选项：
- en: '[PRE47]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '![Viewing the latest log entries](img/4335_08_13.jpg)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
  zh: '![查看最新的日志条目](img/4335_08_13.jpg)'
- en: 'To see the log entries captured since the last boot of a system, use the `–b`
    option:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看自系统上次启动以来捕获的日志条目，请使用`-b`选项：
- en: '[PRE48]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '![Viewing the latest log entries](img/4335_08_14.jpg)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
  zh: '![查看最新的日志条目](img/4335_08_14.jpg)'
- en: Viewing logs of a particular time interval
  id: totrans-261
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查看特定时间间隔的日志
- en: 'We can also view logs of a particular time interval. For example, to view logs
    of the last 1 hour, we can run the following command:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以查看特定时间间隔的日志。例如，要查看最近1小时的日志，我们可以运行以下命令：
- en: '[PRE49]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'To view log entries since July 1, 2015 until now, we can run the following
    command:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看自2015年7月1日至今的日志条目，我们可以运行以下命令：
- en: '[PRE50]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'To view logs from Aug 7, 2015 at 7:23 PM to Aug 9, 2015 at 7 AM, we can run
    the following command:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看从2015年8月7日下午7:23到2015年8月9日上午7点的日志，我们可以运行以下命令：
- en: '[PRE51]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Embedding languages
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌入语言
- en: Shell scripting provides a certain set of features as compared to what we get
    in other scripted programming languages such as Python, Ruby, Perl, and AWK. These
    languages provide additional features as compared to what we get in a shell script
    language. On Linux and UNIX-based system, to use these languages, we have to install
    them separately if they are not preinstalled.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他脚本编程语言（如Python、Ruby、Perl和AWK）相比，Shell脚本提供了一定的功能集。这些语言提供了与Shell脚本语言相比的附加功能。在Linux和基于UNIX的系统上，要使用这些语言，如果它们没有预装，我们必须单独安装它们。
- en: 'Consider a simple example: there is a json or XML file and we want to parse
    it and retrieve the data stored in it. It''s very hard and error-prone to do this
    using shell and its commands, but if we are aware of the Python or Ruby languages,
    we can easily do it and then embed it into a shell script. Embedding another language
    in a shell script should be done to reduce the effort and also to achieve better
    performance.'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个简单的例子：有一个json或XML文件，我们想解析它并检索其中存储的数据。使用shell及其命令来做这件事非常困难且容易出错，但如果我们了解Python或Ruby语言，我们可以很容易地做到这一点，然后将其嵌入到shell脚本中。应该嵌入shell脚本中的另一种语言以减少工作量并实现更好的性能。
- en: 'The syntax for embedding other languages in a shell script is as follows:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在shell脚本中嵌入其他语言的语法如下：
- en: '| Scripting language | The syntax of embedding into a shell script |'
  id: totrans-272
  prefs: []
  type: TYPE_TB
  zh: '| 脚本语言 | 嵌入到shell脚本中的语法 |'
- en: '| --- | --- |'
  id: totrans-273
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Python (Python version 2) | `python -c` '' ''. Inside single quotes write
    the Python code to be processed |'
  id: totrans-274
  prefs: []
  type: TYPE_TB
  zh: '| Python（Python版本2）| `python -c` '' ''。在单引号中编写要处理的Python代码|'
- en: '| Python3 | `python3 -c` '' ''. Inside single quotes write the Python version
    3 code to be processed |'
  id: totrans-275
  prefs: []
  type: TYPE_TB
  zh: '| Python3 | `python3 -c` '' ''。在单引号中编写要处理的Python版本3代码|'
- en: '| Perl | `perl -e` '' ''. Inside single quotes write the Perl code. |'
  id: totrans-276
  prefs: []
  type: TYPE_TB
  zh: '| Perl | `perl -e` '' ''。在单引号中编写Perl代码。|'
- en: '| Ruby | `ruby -e` '' ''. Inside single quotes write the Ruby code. |'
  id: totrans-277
  prefs: []
  type: TYPE_TB
  zh: '| Ruby | `ruby -e` '' ''。在单引号中编写Ruby代码。|'
- en: '| AWK | This can be used as a command utility. Refer to the awk man page for
    available options. |'
  id: totrans-278
  prefs: []
  type: TYPE_TB
  zh: '| AWK | 这可以用作命令实用程序。有关可用选项，请参阅awk man页面。|'
- en: Embedding Python language
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 嵌入Python语言
- en: To embed Python language inside a shell script, we will use `python -c " Python
    Code"`. To learn about Python, refer to the official website at [https://www.python.org/](https://www.python.org/).
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 要在shell脚本中嵌入Python语言，我们将使用`python -c " Python Code"`。要了解Python，请参阅官方网站[https://www.python.org/](https://www.python.org/)。
- en: 'A simple Python example would be printing `Hello World` in Python, which is
    done as follows:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的Python示例是在Python中打印`Hello World`，如下所示：
- en: '[PRE52]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: To embed this in a shell script, we can write the code as follows
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 将此嵌入到shell脚本中，我们可以编写以下代码
- en: '[PRE53]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'We will now execute the `python_print.sh` script as follows:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将执行`python_print.sh`脚本如下：
- en: '[PRE54]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'To embed multiple lines of Python code in a shell script, use the following
    code:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 要在shell脚本中嵌入多行Python代码，请使用以下代码：
- en: '[PRE55]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Here, **python -** instructs the python command to take the input from stdin
    and `EOF` is a label that instructs to take the stdin input until it encounters
    the `EOF` text.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，**python -**指示python命令从stdin获取输入，`EOF`是一个标签，指示获取stdin输入直到遇到`EOF`文本。
- en: 'The following example embeds Python language in a shell script and fetches
    unread e-mails from the user''s Gmail account:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例在shell脚本中嵌入Python语言，并从用户的Gmail帐户中获取未读邮件：
- en: '[PRE56]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'After executing this script, the sample output looks as follows:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此脚本后，示例输出如下：
- en: '[PRE57]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Embedding AWK language
  id: totrans-294
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 嵌入AWK语言
- en: Awk is a programming language designed for text processing and is mainly used
    for fetching relevant data and for reporting tools. To learn more about AWK programming
    language, refer to its man page or visit the website at [http://www.gnu.org/software/gawk/manual/gawk.html](http://www.gnu.org/software/gawk/manual/gawk.html).
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: Awk是一种用于文本处理的编程语言，主要用于获取相关数据和报告工具。要了解更多关于AWK编程语言的信息，请参阅其man页面或访问网站[http://www.gnu.org/software/gawk/manual/gawk.html](http://www.gnu.org/software/gawk/manual/gawk.html)。
- en: 'The Awk language can be very easily used in a shell script. For example, consider
    the output of the `df` command on a running system:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: Awk语言可以很容易地在shell脚本中使用。例如，考虑在运行系统上执行`df`命令的输出：
- en: '[PRE58]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '![Embedding AWK language](img/4335_08_15.jpg)'
  id: totrans-298
  prefs: []
  type: TYPE_IMG
  zh: '![嵌入AWK语言](img/4335_08_15.jpg)'
- en: 'To fetch the fourth column—that is, the `Avail` field using `awk`—we can write
    a shell script using `awk` as follows:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`awk`获取第四列，即`Avail`字段，我们可以编写一个使用`awk`的shell脚本如下：
- en: '[PRE59]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '![Embedding AWK language](img/4335_08_16.jpg)'
  id: totrans-301
  prefs: []
  type: TYPE_IMG
  zh: '![嵌入AWK语言](img/4335_08_16.jpg)'
- en: Consider another example in which we will use an input file that will be the
    `/etc/passwd` file of a system. This file contains the basic information about
    each user or account on a Linux or UNIX-based system.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑另一个例子，我们将使用一个输入文件，该文件将是系统的`/etc/passwd`文件。该文件包含有关Linux或基于UNIX的系统上每个用户或帐户的基本信息。
- en: 'Each line of a `/etc/passwd` file looks as follows:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '`/etc/passwd`文件的每一行如下所示：'
- en: '[PRE60]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: There are seven fields and each field is separated by a colon (:). To learn
    the detailed meaning of each field, refer to the Wikipedia link at [https://en.wikipedia.org/wiki/Passwd](https://en.wikipedia.org/wiki/Passwd).
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 有七个字段，每个字段由冒号（:）分隔。要了解每个字段的详细含义，请参阅[https://en.wikipedia.org/wiki/Passwd](https://en.wikipedia.org/wiki/Passwd)上的维基百科链接。
- en: 'The following shell script makes use of awk features and displays some useful
    information from the `/etc/passwd` file. For example, we will consider the following
    as the content of the `passwd` file:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 以下shell脚本利用awk功能并从`/etc/passwd`文件中显示一些有用的信息。例如，我们将考虑以下作为`passwd`文件的内容：
- en: '[PRE61]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Running this script gives following result:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此脚本会得到以下结果：
- en: '[PRE62]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Note
  id: totrans-310
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is also possible to use compiled languages such as C, C++, and Java in a
    shell script. To do so, write commands to compile and execute the code.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以在shell脚本中使用编译语言，如C、C++和Java。为此，编写命令来编译和执行代码。
- en: Summary
  id: totrans-312
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: After reading this chapter, you should now know how to schedule a task to be
    performed at a specific time using the `at` command. You should also know the
    benefits of creating Cron jobs, which need to be performed multiple times. You
    should have also learned how to use the `crontab` command to add, modify, list,
    and remove crontab entries. You also have a good understanding of `systemd`—the
    first process created on a system—and how it manages other system processes, services,
    and logs. You should also know how to embed other scripting languages such as
    Python, AWK, Ruby, and so on, in a shell script.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完本章后，你现在应该知道如何使用`at`命令安排任务在特定时间执行。你还应该知道创建Cron作业的好处，这些作业需要多次执行。你还应该学会如何使用`crontab`命令来添加、修改、列出和删除crontab条目。你还应该对`systemd`有很好的理解——这是系统上创建的第一个进程，它管理其他系统进程、服务和日志。你还应该知道如何在shell脚本中嵌入其他脚本语言，比如Python、AWK、Ruby等。
- en: After reading all of these chapters and practicing the examples, you should
    now be confident in shell scripting. Being a master of the command line, you are
    now capable of writing your own shell scripts to solve your day-to-day tasks.
    Finally, if anything is not covered in this book, you know that you should look
    into the man page of any command for help.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完所有这些章节并练习了例子后，你现在应该对shell脚本有信心了。作为命令行的大师，你现在能够编写自己的shell脚本来解决日常任务。最后，如果这本书中没有涵盖的内容，你知道应该查看任何命令的man页面以获取帮助。
