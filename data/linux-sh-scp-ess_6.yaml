- en: Chapter 6. Working with Files
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。处理文件
- en: For simplicity, everything in UNIX and Linux-based operating systems is treated
    as a file. Files in the filesystem are arranged in a hierarchical tree like a
    structure with the root of the tree denoted by '`/`' (forward slash). A node of
    the tree is either a directory or file where the directory is also a special type
    of file containing inode numbers and a corresponding filename entry of the list
    of files inside it. An inode number is an entry in an inode table that contains
    metadata information related to the file.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简单起见，UNIX和基于Linux的操作系统中的所有内容都被视为文件。文件系统中的文件以分层树状结构排列，树的根由'/'（斜杠）表示。树的节点可以是目录或文件，其中目录也是一种特殊类型的文件，其中包含inode号和相应的文件名条目列表。inode号是inode表中的条目，包含与文件相关的元数据信息。
- en: In this chapter, we will take a closer look at the important and commonly used
    file types. We will see how we can create, modify, and perform other useful operations
    on files. We will also see how to monitor a list of files opened by a process
    or user.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将更详细地了解重要和常用的文件类型。我们将看到如何创建、修改和执行文件的其他有用操作。我们还将看到如何监视进程或用户打开的文件列表。
- en: 'This chapter will cover the following topics in detail:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将详细介绍以下主题：
- en: Performing basic file operations
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行基本文件操作
- en: Moving and copying files
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动和复制文件
- en: Comparing files
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比较文件
- en: Finding files
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找文件
- en: Links to a file
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件的链接
- en: Special files
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特殊文件
- en: Temporary files
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 临时文件
- en: Permission and ownership
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 权限和所有权
- en: Getting the list of open files
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取打开文件的列表
- en: Configuration files
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置文件
- en: Performing basic file operations
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行基本文件操作
- en: Most commonly used files are regular files and directories. In the following
    subsection, we will see the basic file operations.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 最常用的文件是常规文件和目录。在以下子节中，我们将看到基本文件操作。
- en: Creating files
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建文件
- en: We can create both regular files and directories in shell using different shell
    commands.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用不同的shell命令在shell中创建常规文件和目录。
- en: Directory file
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 目录文件
- en: A directory is a special type of file that contains a list of filenames and
    a corresponding inode number. It acts as a container or folder to hold files and
    directories.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 目录是一种特殊类型的文件，其中包含文件名列表和相应的inode号。它充当容器或文件夹，用于保存文件和目录。
- en: 'To create a new directory through shell, we can use the `mkdir` command:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过shell创建新目录，我们可以使用`mkdir`命令：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We can also provide multiple directories'' name as arguments to the `mkdir`
    command as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将多个目录名称作为参数提供给`mkdir`命令，如下所示：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We can create a parent directory if the specified pathname to `mkdir` is not
    present. This is done using the `-p` option in `mkdir`:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果指定的路径名不存在，我们可以使用`mkdir`中的`-p`选项创建父目录。这是通过`mkdir`中的`-p`选项完成的：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, if `dir1` and `dir2` are the parent directories for `dir3` and don't exist
    already, the `-p` option will create the `dir1` directory first and then `dir2`
    subdirectory inside `dir1` and the `dir3` subdirectory inside `dir2`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，如果`dir1`和`dir2`是`dir3`的父目录且尚不存在，则`-p`选项将首先创建`dir1`目录，然后在`dir1`内创建`dir2`子目录，最后在`dir2`内创建`dir3`子目录。
- en: Regular file
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 常规文件
- en: In general, text and binary files are known as regular files. In shell, a regular
    file can be created in multiple ways. Some of them are mentioned in the following
    sections.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，文本和二进制文件被称为常规文件。在shell中，可以通过多种方式创建常规文件。以下部分提到了其中一些。
- en: Touch command
  id: totrans-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Touch命令
- en: 'A new regular file can also be created using the `touch` command. It is mainly
    used to modify the timestamp of the existing file, but if the file doesn''t exist,
    a new file is created:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以使用`touch`命令创建新的常规文件。它主要用于修改现有文件的时间戳，但如果文件不存在，将创建一个新文件：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Using the command line editors
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用命令行编辑器
- en: We can open any command line editor; for example, `vi/vim`, emacs, nano in shell,
    write content, and save content in file.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以打开任何命令行编辑器；例如，在shell中使用`vi/vim`、emacs、nano，编写内容，并将内容保存在文件中。
- en: 'Now, we will create and write a text using the `vi` editor:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用`vi`编辑器创建并编写文本：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Press the key *I* to enter the `INSERT` mode of vi and then type the text as
    shown in the following screenshot:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 按下*I*键进入vi的`INSERT`模式，然后按照以下截图中显示的文本输入：
- en: '![Using the command line editors](img/4335_06_01.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![使用命令行编辑器](img/4335_06_01.jpg)'
- en: 'After writing the text, press the *Esc* key and then type the `:wq` command
    to save and exit from the vi editor. To know `vi/vim` in detail, refer to its
    `man` page or the online documentation ([http://www.vim.org/docs.php](http://www.vim.org/docs.php)):'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在写完文本后，按下*Esc*键，然后输入`:wq`命令保存并退出vi编辑器。要详细了解`vi/vim`，请参考其`man`页面或在线文档([http://www.vim.org/docs.php](http://www.vim.org/docs.php))：
- en: '![Using the command line editors](img/4335_06_02.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![使用命令行编辑器](img/4335_06_02.jpg)'
- en: Using the cat command
  id: totrans-40
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用cat命令
- en: 'We can even use the `cat` command to write the content into an existing or
    a new regular file, as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以使用`cat`命令将内容写入现有或新的常规文件，如下所示：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: By using the `>>` operator instead of `>`, we can append instead of overwriting
    the file's content.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`>>`运算符而不是`>`，我们可以追加而不是覆盖文件的内容。
- en: Redirecting the command's output
  id: totrans-44
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 重定向命令的输出
- en: 'While executing a command in bash or script, we can redirect results into an
    existing or a new file:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在bash或脚本中执行命令时，我们可以将结果重定向到现有文件或新文件中：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Modifying files
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改文件
- en: 'To modify the content of a regular file in shell, open a file in an editor,
    make the required changes, and then save and exit. We can also use the `>>` operator
    to append the command''s output to the specified file:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要在shell中修改常规文件的内容，打开编辑器中的文件，进行所需的更改，然后保存并退出。我们还可以使用`>>`运算符将命令的输出追加到指定的文件中：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'For example, we will save the `ls` output of `/home` in the `ls_output.txt`
    file:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们将保存`/home`的`ls`输出到`ls_output.txt`文件中：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, we will append the `ls` output of another directory `/home/foo/` as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将追加另一个目录`/home/foo/`的`ls`输出如下：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We saw that the `ls_output.txt` file gets modified by appending the content
    of the `ls` command output.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到`ls_output.txt`文件通过追加`ls`命令的内容而被修改。
- en: Viewing files
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看文件
- en: To view the content of a regular file, we can simply open a file in an editor
    such as vi/vim, emacs and nano. We can also use the `cat`, `less` and `more` commands
    to view the file's content.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看常规文件的内容，我们可以简单地在编辑器中打开文件，如vi/vim，emacs和nano。我们还可以使用`cat`，`less`和`more`命令来查看文件的内容。
- en: 'To view the contents of a directory, we use the `ls` command:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看目录的内容，我们使用`ls`命令：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: To view the contents of a directory recursively, use `ls` with the `-R` or `--recursive`
    option.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要递归查看目录的内容，请使用带有`-R`或`--recursive`选项的`ls`。
- en: Viewing content using cat
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用cat查看内容
- en: 'We can use the `cat` command to view the content of the file as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`cat`命令查看文件的内容如下：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: more and less
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: more和less
- en: The `more` and `less` commands are very useful and handy to view a large file
    that doesn't fit on the current terminal.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`more`和`less`命令非常有用，方便查看当前终端上无法容纳的大文件。'
- en: 'The `more` command displays the content of a file in page format, in which
    we can scroll up and down to view the remaining contents of the file:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`more`命令以页面格式显示文件的内容，我们可以向上和向下滚动以查看文件的其余内容：'
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: A file path is passed as an argument to the `more` command. In the above example,
    it will display the content of the file words available in the `/usr/share/dict/`
    directory.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件路径作为参数传递给`more`命令。在上面的示例中，它将显示`/usr/share/dict/`目录中可用的文件单词的内容。
- en: The key *s* is used to skip forward `k` lines of text. The key *f* is used to
    skip forward k screenful of text. The key *b* is used to skip backward k screenful
    of text.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 键*s*用于向前跳过`k`行文本。键*f*用于向前跳过k屏幕文本。键*b*用于向后跳过k屏幕文本。
- en: The `less` command is more popular and widely used to view the content of large
    files. One of the advantages of using the `less` command is that it doesn't load
    entire files in the beginning and as a result, viewing the content of large files
    is faster.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`less`命令更受欢迎，被广泛用于查看大文件的内容。使用`less`命令的优点之一是它不会在开始时加载整个文件，因此查看大文件的内容更快。'
- en: 'The usage of `less` is very similar to the `more` command:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`less`的用法与`more`命令非常相似：
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Navigation is much easier while using the `less` command. It also has more options
    to customize the filtered view of a file's content.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 导航使用`less`命令要容易得多。它还有更多选项来自定义文件内容的过滤视图。
- en: 'The `more` and `less` commands can take an input from `stdin` if no input file
    is provided. Use a pipe (''`|`'') to give an input from `stdin`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有提供输入文件，`more`和`less`命令可以从`stdin`接收输入。使用管道（'`|`'）从`stdin`提供输入：
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: See the `man` page of `more` and `less` for the detailed usage.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 查看`more`和`less`的`man`页面以获取详细用法。
- en: Note
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The behavior of the `more` command may vary on different systems because of
    its different implementations.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 由于不同的实现，`more`命令的行为可能因不同系统而异。
- en: Deleting files
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除文件
- en: We can also delete regular files and directories if they are no longer required.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不再需要，我们也可以删除常规文件和目录。
- en: Deleting a regular file
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除常规文件
- en: To delete a regular file, we use the `rm` command in shell.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除常规文件，我们在shell中使用`rm`命令。
- en: 'The `rm` command deletes the file if it exists, otherwise it prints an error
    on `stdout` if it doesn''t exist:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件存在，则`rm`命令删除文件，否则会在`stdout`上打印错误：
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To ignore an error message, `rm` can be used with the `–f` option:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要忽略错误消息，可以使用`rm`与`-f`选项：
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Enter the key *y* to delete a file and *n* to skip the deletion of a file.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 输入键*y*删除文件，*n*跳过删除文件。
- en: Deleting a directory
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除目录
- en: 'To delete a directory, we can use the `rmdir` and `rm` commands. We will consider
    directories that are created in the `Directory` files under the `File` creation
    subtopic:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除目录，我们可以使用`rmdir`和`rm`命令。我们将考虑在`文件`创建子主题下创建的`目录`文件中创建的目录：
- en: '[PRE17]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: To delete a nonempty directory, first delete the contents and then remove the
    directory. We can also use `rm` to remove an empty or a nonempty directory.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除非空目录，首先删除内容，然后删除目录。我们还可以使用`rm`来删除空目录或非空目录。
- en: 'The `–d` option removes an empty directory as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`-d`选项如下删除空目录：'
- en: '[PRE18]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The option `-r`, `-R`, or `--recursive` removes the directory and its contents
    recursively:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 选项`-r`，`-R`或`--recursive`递归地删除目录及其内容：
- en: '[PRE19]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Typing *y* confirms that `dir1` should be deleted.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 输入*y*确认应删除`dir1`。
- en: Note
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Use `rm` carefully with the `-r` option. If possible, use it with the `-i` option
    to avoid an accidental deletion of an entire directory's contents.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 小心使用`rm`选项`-r`。如果可能的话，使用`-i`选项以避免意外删除整个目录的内容。
- en: Moving and copying files
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动和复制文件
- en: We often need to copy or move files from one location to another in order to
    arrange files according to the need. We also can copy our computer data to an
    external drive or another computer available locally or remotely in order to keep
    the backup of the important data.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们经常需要复制或移动文件到另一个位置，以便根据需要整理文件。我们还可以将计算机数据复制到本地或远程可用的外部驱动器或另一台计算机，以便备份重要数据。
- en: Moving files
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 移动文件
- en: Moving regular files and directories is useful when we want to keep exactly
    one copy of the data at a new location. The `mv` command is used to move files
    from one location to another.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 移动常规文件和目录在我们想要在新位置保留数据的确切副本时非常有用。`mv`命令用于将文件从一个位置移动到另一个位置。
- en: 'The syntax of using the `mv` command is as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`mv`命令的语法如下：
- en: '[PRE20]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Here, `source` is the file or directory to be moved. Multiple source files can
    be specified and `destination` is the location in which the files and directories
    should be moved.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`source`是要移动的文件或目录。可以指定多个源文件，`destination`是应将文件和目录移动到的位置。
- en: 'Some of the important options of the `mv` command are explained in following
    table:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`mv`命令的一些重要选项在下表中解释：'
- en: '| Option | Description |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 描述 |'
- en: '| --- | --- |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `-n` | Don''t overwrite an existing file |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| `-n` | 不覆盖现有文件 |'
- en: '| `-i` | Prompt before overwriting an existing file |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| `-i` | 在覆盖现有文件之前提示 |'
- en: '| `-f` | Don''t prompt while overwriting an existing file |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| `-f` | 在覆盖现有文件时不提示 |'
- en: '| `-u` | Move a source file only when the source is newer than the destination
    or when the destination is missing |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| `-u` | 仅在源文件较新或目标文件丢失时才移动源文件 |'
- en: '| `-v` | Print name of the files being moved |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| `-v` | 打印正在移动的文件的名称 |'
- en: Moving a directory to a new location
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将目录移动到新位置
- en: 'To move a directory from one location to another, execute the following command:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 要将目录从一个位置移动到另一个位置，请执行以下命令：
- en: '[PRE21]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `test_dir1` directory has been moved to `/tmp` and no copy of `test_dir1`
    exists in the home directory now.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`test_dir1`目录已经移动到了`/tmp`，现在主目录中没有`test_dir1`的副本了。'
- en: 'Now, we will create a directory called `test_dir1` again in the user''s home
    directory:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将在用户的主目录中再次创建一个名为`test_dir1`的目录：
- en: '[PRE22]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Try again to move `test_dir1` in `/tmp` with the `–i` option:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试使用`-i`选项再次将`test_dir1`移动到`/tmp`：
- en: '[PRE23]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We can see that the `-i` option asks a user explicitly whether we want to overwrite
    an existing directory with a new directory or not.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到`-i`选项明确询问用户是否要用新目录覆盖现有目录。
- en: Note
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Use the `mv` command with the `-i` option to avoid an accidental overwrite of
    a file.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`mv`命令和`-i`选项来避免意外覆盖文件。
- en: Renaming a file
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重命名文件
- en: 'We can also use the `mv` command to rename a filename. For example, we have
    the `test_dir1` directory in the `/tmp` directory. Now, we want to rename it as
    `test_dir`. We can execute the following command:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用`mv`命令来重命名文件。例如，我们在`/tmp`目录中有`test_dir1`目录。现在，我们想将其重命名为`test_dir`。我们可以执行以下命令：
- en: '[PRE24]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Copying files
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复制文件
- en: Creating copies of files is a very common operation that can be performed locally
    or to a remote system.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 创建文件的副本是一个非常常见的操作，可以在本地或远程系统上执行。
- en: Copying files locally
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在本地复制文件
- en: To copy the files on a local machine, the `cp` command is used.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 要在本地机器上复制文件，使用`cp`命令。
- en: 'The syntax of using the `cp` command is as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`cp`命令的语法如下：
- en: '[PRE25]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Here, `source` can be a single file, multiple file, or a directory, while `destination`
    can be a file if `source` is a single file. Otherwise, `destination` will be a
    directory.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`source`可以是单个文件、多个文件或目录，而`destination`如果`source`是单个文件，则可以是文件。否则，`destination`将是一个目录。
- en: 'Some of important options to the `cp` command are as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`cp`命令的一些重要选项如下：'
- en: '| Options | Description |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 描述 |'
- en: '| --- | --- |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `-f` | Don''t prompt while overwriting an existing file |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| `-f` | 在覆盖现有文件时不提示 |'
- en: '| `-i` | Prompt before overwriting an existing file |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| `-i` | 在覆盖现有文件之前提示 |'
- en: '| `-R` | Copy directories recursively |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| `-R` | 递归复制目录 |'
- en: '| `-u` | Copy a source file only when the source is newer than the destination
    or when the destination is missing |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| `-u` | 仅在源文件较新或目标文件丢失时才复制源文件 |'
- en: '| `-p` | Preserve attributes of a copied file with the original file |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| `-p` | 保留原始文件的属性 |'
- en: '| `-v` | Verbose output of which file is being copied |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| `-v` | 显示正在复制的文件的详细信息 |'
- en: Copying a file to another location
  id: totrans-143
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 将文件复制到另一个位置
- en: 'To copy a file to another location, execute the following command:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 要将文件复制到另一个位置，请执行以下命令：
- en: '[PRE26]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Now, we have two copies of the `copy_file.txt` file that are at the user's home
    directory and the `/tmp` directory.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`copy_file.txt`文件有两个副本，一个在用户的主目录，一个在`/tmp`目录。
- en: 'To copy a directory, we use `cp` with the `-R` option:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 要复制目录，我们使用带有`-R`选项的`cp`：
- en: '[PRE27]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The `test_dir2` directory gets copied to `/tmp` along with all the contents
    available in the directory.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`test_dir2`目录以及目录中的所有内容都被复制到了`/tmp`。'
- en: Copying files remotely
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 远程复制文件
- en: To copy files on a remote machine, the `scp` command is used. It copies files
    between hosts on a network. The `scp` command uses `ssh` to authenticate the target
    host and transfer data.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 要在远程机器上复制文件，使用`scp`命令。它在网络上的主机之间复制文件。`scp`命令使用`ssh`来验证目标主机并传输数据。
- en: 'The simple syntax of `scp` is as follows:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`scp`的简单语法如下：'
- en: '[PRE28]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Here, in `user1@host1:source`, `user1` is the username of the source from where
    a file will be copied and `host1` is the hostname or IP address; `source` can
    be a file or a directory to be copied.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在`user1@host1:source`中，`user1`是要复制文件的源用户名，`host1`是主机名或IP地址；`source`可以是要复制的文件或目录。
- en: In `user2@host2:destination`, `user2` is the username of the target host where
    files should be copied and `host2` is the hostname or IP address; `destination`
    can be a file or directory where it gets copied. If no destination is specified,
    a copy will be made in the target host's home directory.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在`user2@host2:destination`中，`user2`是目标主机的用户名，文件应该被复制到该主机，`host2`是主机名或IP地址；`destination`可以是要复制到的文件或目录。如果没有指定目的地，将在目标主机的主目录中进行复制。
- en: If no remote source and destination to provided, a copy will be made locally.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有提供远程源和目的地，将在本地进行复制。
- en: 'A few important options of `scp` are discussed in the following table:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 讨论了`scp`的一些重要选项如下表所示：
- en: '| Option | Description |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 描述 |'
- en: '| --- | --- |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `-C` | Enable compression while transferring data over a network |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| `-C` | 在网络上传输数据时启用压缩 |'
- en: '| `-l limit` | Limit the used bandwidth specified in Kbit/s |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| `-l limit` | 限制以Kbit/s指定的带宽使用 |'
- en: '| `-p` | Preserve attributes of a copied file with the original file |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| `-p` | 保留原始文件的属性 |'
- en: '| `-q` | Don''t print any progress output on `stdout` |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| `-q` | 不在`stdout`上打印任何进度输出 |'
- en: '| `-r` | Copy directory recursively |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| `-r` | 递归复制目录 |'
- en: '| `-v` | Verbose output while the copy is in progress |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| `-v` | 复制过程中显示详细信息 |'
- en: Copying files to a remote server
  id: totrans-166
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 将文件复制到远程服务器
- en: 'To copy files to a remote server, it is very important that the `ssh` server
    is already running on the server. If it is not, make sure to start the `ssh` server.
    To copy files, use the `scp` command as follows:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 要将文件复制到远程服务器，非常重要的是服务器上已经运行了`ssh`服务器。如果没有，请确保启动`ssh`服务器。要复制文件，请使用以下`scp`命令：
- en: '[PRE29]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Here, we have made a copy to a local machine. So, the hostname used is `localhost`.
    Now, we have another directory `test_dir2` inside `/tmp/test_dir2/`:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们已经将一个副本复制到了本地机器。所以使用的主机名是`localhost`。现在，在`/tmp/test_dir2/`内有另一个目录`test_dir2`：
- en: '[PRE30]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Comparing files
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比较文件
- en: A comparison between two similar files makes sense in order to know what differences
    exist between the two files. For example, comparing the results obtained by a
    command ran on two sets of data. Another example can be comparing an older and
    a newer version of a shell script file in order to know what modifications have
    been made in script. Shell provides the `diff` command for file comparison.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 比较两个相似文件之间的差异是有意义的，以了解这两个文件之间存在哪些差异。例如，比较在两组数据上运行的命令获得的结果。另一个例子可以是比较脚本文件的旧版本和新版本，以了解脚本中进行了哪些修改。Shell提供了用于文件比较的`diff`命令。
- en: Files comparison using diff
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用diff进行文件比较
- en: 'The `diff` command is used to compare files line by line. The syntax of using
    the `diff` command is as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`diff`命令用于逐行比较文件。使用`diff`命令的语法如下：'
- en: '[PRE31]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Where, `file1` and `file2` are the files to be compared.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 其中，`file1`和`file2`是要比较的文件。
- en: 'The options of the `diff` command are explained in the following table:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`diff`命令的选项在下表中解释：'
- en: '| Option | Description |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 描述 |'
- en: '| --- | --- |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `-q` | Only print if files differ |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| `-q` | 仅在文件不同时打印 |'
- en: '| `-s` | Print a message on `stdout` if the two files are identical |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| `-s` | 如果两个文件相同，则在`stdout`上打印消息 |'
- en: '| `-y` | Display the `diff` results side by side |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| `-y` | 侧边显示`diff`结果 |'
- en: '| `-i` | Do case-insensitive comparison of the files'' content |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| `-i` | 对文件内容进行不区分大小写的比较 |'
- en: '| `-b` | Ignore changes in the number of whitespace |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| `-b` | 忽略空格数的更改 |'
- en: '| `-u NUM` | Output `NUM` (default 3) lines of unified context |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| `-u NUM` | 输出`NUM`（默认3）行统一上下文 |'
- en: '| `-a` | Consider files as text files while comparison |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| `-a` | 在比较时将文件视为文本文件 |'
- en: Example
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 例子
- en: The `diff` command shows the comparison results for the added, removed, and
    modified lines between two files.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`diff`命令显示了两个文件之间添加、删除和修改行的比较结果。'
- en: 'We will consider the `comparison_file1.txt` and `comparison_file2.txt` text
    files as an example:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以`comparison_file1.txt`和`comparison_file2.txt`文本文件为例：
- en: '[PRE32]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now, we will compare the `comparison_file1.txt` and `comparison_file2.txt`
    files:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将比较`comparison_file1.txt`和`comparison_file2.txt`文件：
- en: '[PRE34]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Here, `<` (less than) means removed lines and `>` (greater than) means added
    lines.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`<`（小于）表示删除的行，`>`（大于）表示添加的行。
- en: 'Using the `-u` option makes the `diff` output even more readable as follows:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`-u`选项使`diff`输出更易读，如下所示：
- en: '[PRE35]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Here, '`-`' tells the lines available in an older file (`comparison_file1.txt`),
    but which is no longer present in the newer file (`comparison_file2.txt`).
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，'`-`'告诉旧文件（`comparison_file1.txt`）中可用的行，但在新文件（`comparison_file2.txt`）中不再存在。
- en: The '`+`' tells lines being added in newer file (`comparison_file2.txt`).
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '''`+`''表示在新文件（`comparison_file2.txt`）中添加的行。'
- en: 'We can even do a case-insensitive comparison of the content using the `–i`
    option:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以使用`–i`选项对内容进行不区分大小写的比较：
- en: '[PRE36]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'To ignore multiple blank spaces, use `diff` with make `-b` option:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 要忽略多个空格，请使用`diff`并使用`-b`选项：
- en: '[PRE37]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Finding files
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找文件
- en: In a filesystem, there is huge number of files available. Sometimes, there are
    external devices that are attached as well, which may also contain huge number
    of files. Imagine that there are millions and billions of files in a system and
    in which we have to search for a specific file or pattern of a file. Manual searching
    of a file is possible if the number of files is from 10 to 100, but it is almost
    impossible to search in millions of files. To solve this problem, UNIX and Linux
    provide the `find` command. It is a very useful command for searching files in
    a computer.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件系统中，有大量的文件可用。有时，还会连接外部设备，这些设备可能也包含大量的文件。想象一下系统中有数百万甚至数十亿个文件，我们需要在其中搜索特定的文件或文件模式。如果文件数量在10到100之间，手动搜索文件是可能的，但在数百万个文件中几乎是不可能的。为了解决这个问题，UNIX和Linux提供了`find`命令。这是一个非常有用的用于在计算机中搜索文件的命令。
- en: 'The syntax of using the `find` command is as follows:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`find`命令的语法如下：
- en: '`find search_path [option]`'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '`find search_path [option]`'
- en: Here, in `search_path`, specify the path in which `find` should search for `file_search_pattern`.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在`search_path`中，指定`find`应搜索`file_search_pattern`的路径。
- en: 'A few important options are mentioned in the following table:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表中提到了一些重要的选项：
- en: '| Option | Description |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 描述 |'
- en: '| --- | --- |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| -P | Don''t follow symbolic link. This is default behavior |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| -P | 不要遵循符号链接。这是默认行为 |'
- en: '| -L | Follow symbolic link while searching |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| -L | 在搜索时遵循符号链接 |'
- en: '| -exec cmd ; | Execute command cmd passed as parameter to -exec |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| -exec cmd ; | 执行作为-exec参数传递的命令cmd |'
- en: '| -mount | Don''t search in other file system |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| -mount | 不在其他文件系统中搜索 |'
- en: '| -executable | Matches executable files |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| -可执行 | 匹配可执行文件 |'
- en: '| -group gname | File belongs to group gname |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| -group gname | 文件属于组gname |'
- en: '| -user uname | Files owned by user uname |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| -user uname | 属于用户uname的文件 |'
- en: '| -name pattern | Search file for given pattern |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: -名称模式 | 搜索文件以获取给定模式
- en: '| -iname pattern | Case insensitive search of file for given pattern |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| -iname模式 | 对给定模式的文件进行不区分大小写的搜索 |'
- en: '| -inum N | Search file with inode number N |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| -inum N | 搜索具有索引号N的文件 |'
- en: '| -samefile name | File with same inode number as name |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| -samefile name | 具有与名称相同的索引号的文件 |'
- en: '| -regex pattern | Match files with given regular expression pattern. Matches
    for whole path. |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| -regex模式 | 匹配给定正则表达式模式的文件。匹配整个路径。 |'
- en: '| -iregex pattern | Case insensitive match of files with given regular expression
    pattern. Matches for whole path. |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| -iregex模式 | 对给定正则表达式模式的文件进行不区分大小写的匹配。匹配整个路径。 |'
- en: Searching files according to use case
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 根据用例搜索文件
- en: 'The following shell script shows some use cases of how to use the `find` command:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 以下shell脚本显示了如何使用`find`命令的一些用例：
- en: '[PRE38]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The following is the sample output after executing the preceding `finding_files.sh`
    script:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行上述`finding_files.sh`脚本后，以下是示例输出：
- en: '[PRE39]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Finding and deleting a file based on inode number
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 根据索引号查找并删除文件
- en: The `find` command can be used to find a file based on its inode number.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '`find`命令可用于根据其索引号查找文件。'
- en: '[PRE40]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The `-inum` option is good to use with `exec` to delete files that cannot be
    deleted by a filename. For example, a file named `-test.txt` can''t be deleted
    using the `rm` command:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '`-inum`选项可以与`exec`一起使用，用于删除无法通过文件名删除的文件。例如，名为`-test.txt`的文件无法使用`rm`命令删除：'
- en: '[PRE41]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'To delete the `-test.txt` file, execute the following command:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除`-test.txt`文件，执行以下命令：
- en: '[PRE42]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Links to a file
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 链接到一个文件
- en: 'A link to a file means referring the same file by different filenames. In Linux
    and Unix-based system, the following two types of links exist:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 文件的链接意味着用不同的文件名引用相同的文件。在Linux和基于Unix的系统中，存在以下两种类型的链接：
- en: A soft link or a symbolic link
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软链接或符号链接
- en: A hard link
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 硬链接
- en: 'To create links between files, the `ln` command can be used. The syntax is
    as follows:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建文件之间的链接，可以使用`ln`命令。语法如下：
- en: '[PRE43]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Here, `target` is the filename for which a link has to be created and `link_name`
    is the name by which a link has to be created.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`target`是要创建链接的文件名，`link_name`是要创建链接的名称。
- en: Soft link
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 软链接
- en: A soft link is a special kind of file that just points to another file. This
    makes it easier to create a shortcut of a file and easy accessibility of a file
    to a different location in a filesystem.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 软链接是一种特殊类型的文件，它只是指向另一个文件。这使得更容易创建文件的快捷方式，并且可以更容易地在文件系统中的不同位置访问文件。
- en: 'To create a symbolic link of a file, the `ln` command is used with the `-s`
    option. For example, we will create a symbolic link of the `/tmp` directory in
    our home directory:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建文件的符号链接，使用`ln`命令带有`-s`选项。例如，我们将在我们的主目录中创建`/tmp`目录的符号链接：
- en: '[PRE44]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Now, we have a symbolic link of the `/tmp` directory in our home directory
    by the name `local_tmp`. To access the `/tmp` data, we can also `cd` into the
    `~/local_tmp` directory. To know whether a file is a symbolic link or not, run
    `ls -l` on a file:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们在我们的主目录中有一个对`/tmp`目录的符号链接，名为`local_tmp`。要访问`/tmp`数据，我们也可以`cd`到`~/local_tmp`目录。要知道一个文件是否是符号链接，运行`ls
    -l`命令：
- en: '[PRE45]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: If the first character of the first column is `l`, then it means it is a symbolic
    link. Also the last column says `/home/foo/local_tmp -> /tmp/`, which means `local_tmp`
    is pointing to `/tmp`.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 如果第一列的第一个字符是`l`，那么它意味着它是一个符号链接。同时，最后一列显示`/home/foo/local_tmp -> /tmp/`，这意味着`local_tmp`指向`/tmp`。
- en: Hard link
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 硬链接
- en: A hard link is a way to refer a file with different names. All such files will
    have the same inode number. An inode number is an index number in an inode table
    that contains metadata about a file.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 硬链接是一种用不同名称引用文件的方式。所有这些文件都将具有相同的索引节点号。索引节点号是索引表中的索引号，包含有关文件的元数据。
- en: 'To create a hard link of a file, use the `ln` command without any option. In
    our case, we will first create a regular file called `file.txt`:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建文件的硬链接，使用`ln`命令而不带任何选项。在我们的情况下，我们将首先创建一个名为`file.txt`的常规文件：
- en: '[PRE46]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The second column of `ls` tells the link count. We can see that currently it
    is `1`.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '`ls`的第二列显示链接计数。我们可以看到当前是`1`。'
- en: 'Now, to create a hard link of `file.txt`, we will use the `ln` command:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要创建`file.txt`的硬链接，我们将使用`ln`命令：
- en: '[PRE47]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'To check whether a hard link is created for `file.txt`, we will see its link
    count:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查是否为`file.txt`创建了硬链接，我们将查看其链接计数：
- en: '[PRE48]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Now, the link count is `2` because a hard link has been created with the name
    `hard_link_file.txt`.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，链接计数为`2`，因为使用名称`hard_link_file.txt`创建了一个硬链接。
- en: 'We can also see that the inode number of the `file.txt` and `hard_link_file.txt`
    files are the same:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以看到`file.txt`和`hard_link_file.txt`文件的索引节点号是相同的：
- en: '[PRE49]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Difference between hard link and soft link
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 硬链接和软链接之间的区别
- en: 'The following table shows a few important differences between a hard link and
    a soft link:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了硬链接和软链接之间的一些重要区别：
- en: '| Soft link | Hard link |'
  id: totrans-264
  prefs: []
  type: TYPE_TB
  zh: '| 软链接 | 硬链接 |'
- en: '| --- | --- |'
  id: totrans-265
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| The inode number of the actual file and the soft link file are different.
    | The inode number of the actual file and the hard link file are the same. |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
  zh: '| 实际文件和软链接文件的索引节点号是不同的。| 实际文件和硬链接文件的索引节点号是相同的。|'
- en: '| A soft link can be created across different filesystems. | A hard link can
    only be created in the same filesystem. |'
  id: totrans-267
  prefs: []
  type: TYPE_TB
  zh: '| 可以在不同的文件系统之间创建软链接。| 只能在相同的文件系统中创建硬链接。|'
- en: '| A soft link can link to both regular files and directories. | A hard link
    doesn''t link to directories. |'
  id: totrans-268
  prefs: []
  type: TYPE_TB
  zh: '| 软链接可以链接到常规文件和目录。| 硬链接不能链接到目录。|'
- en: '| Soft links are not updated if the actual file is deleted. It keeps pointing
    to a nonexistent file. | Hard links are always updated if the actual file is moved
    or deleted. |'
  id: totrans-269
  prefs: []
  type: TYPE_TB
  zh: '| 如果实际文件被删除，软链接不会更新。它将继续指向一个不存在的文件。| 如果实际文件被移动或删除，硬链接总是会更新。|'
- en: Special files
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特殊文件
- en: 'The files other than regular files, directories, and link files are special
    files. They are as follows:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 除了常规文件、目录和链接文件之外的文件都是特殊文件。它们如下：
- en: The block device file
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 块设备文件
- en: The character device file
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符设备文件
- en: The named pipe file
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命名管道文件
- en: The socket file
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 套接字文件
- en: The block device file
  id: totrans-276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 块设备文件
- en: A block device file is a file that reads and writes data in block. Such files
    are useful when data needs to be written in bulk. Devices such as hard disk drive,
    USB drive, and CD-ROM are considered as block device files. Data is written asynchronously
    and, hence, other users are not blocked to perform the write operation at the
    same time.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 块设备文件是以块形式读写数据的文件。这种文件在需要大量写入数据时非常有用。诸如硬盘驱动器、USB驱动器和CD-ROM之类的设备被视为块设备文件。数据是异步写入的，因此其他用户不会被阻止执行写操作。
- en: 'To create a block device file, `mknod` is used with the option `b` along with
    providing a major and minor number. A major number selects which device driver
    is being called to perform the input and output operation. A minor number is used
    to identify subdevices:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建块设备文件，使用`mknod`命令，带有`b`选项以及提供主要和次要编号。主要编号选择调用哪个设备驱动程序执行输入和输出操作。次要编号用于识别子设备：
- en: '[PRE50]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Here, `0X7` is a major number and `0X6` is a minor number in hexadecimal format:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`0X7`是十六进制格式的主要编号，`0X6`是次要编号：
- en: '[PRE51]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The first character of the first column is `b`, which means it is a block device
    file.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 第一列的第一个字符是`b`，这意味着它是一个块设备文件。
- en: The fifth column of the `ls` output is `7` and `6`. Here, `7` is a major number
    and `6` is a minor number in decimal format.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '`ls`输出的第五列是`7`和`6`。这里，`7`是一个主要号，`6`是一个次要号，以十进制格式表示。'
- en: A character device file is a file that reads and writes data in character-by-character
    fashion. Such devices are synchronous and only one user can do the write operation
    at a time. Devices such as keyboard, printer, and mouse are known as character
    device files.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 字符设备文件是以逐个字符的方式读取和写入数据的文件。这些设备是同步的，一次只能有一个用户进行写操作。键盘、打印机和鼠标等设备被称为字符设备文件。
- en: 'Following command will create a character special file:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令将创建一个字符特殊文件：
- en: '[PRE52]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Here, `0X78` is a major number and `0X60` is a minor number that is in hexadecimal
    format.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`0X78`是一个主要号，`0X60`是一个次要号，以十六进制格式表示。
- en: '[PRE53]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: The first character of the first column is `c`, which means it is a character
    device file. The fifth column of the `ls` output is `120` and `96`. Here, `120`
    is a major number and `96` is a minor number in decimal format.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 第一列的第一个字符是`c`，表示它是一个字符设备文件。`ls`输出的第五列是`120`和`96`。这里，`120`是一个主要号，`96`是一个次要号，以十进制格式表示。
- en: Named pipe file
  id: totrans-290
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命名管道文件
- en: Named pipe files are used by different system processes to communicate with
    each other. Such communication is also known as interprocess communication.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 命名管道文件被不同的系统进程用于相互通信。这种通信也被称为进程间通信。
- en: 'To create such a file, we use the `mkfifo` command:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建这样一个文件，我们使用`mkfifo`命令：
- en: '[PRE54]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Here, the first character of the first column is '`p`', which means it is a
    pipe file. There are a lot of pipe files available in the `/dev` directory.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，第一列的第一个字符是`p`，表示它是一个管道文件。`/dev`目录中有很多管道文件。
- en: 'We can also create a named pipe using the `mknod` command with the `p` option:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`mknod`命令的`p`选项创建一个命名管道：
- en: '[PRE55]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The following shell script demonstrates a reading message from a named pipe.
    The `send.sh` script creates a named pipe called `named_pipe`, if it doesn''t
    exist, and then sends a message on it:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 以下shell脚本演示了从命名管道中读取消息。`send.sh`脚本创建一个名为`named_pipe`的命名管道，如果它不存在的话，然后在其中发送一条消息：
- en: '[PRE56]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The `receive.sh` script checks whether a named pipe with the name `named_pipe`
    exists, reads a message from a pipe, and displays on `stdout`:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '`receive.sh`脚本检查名为`named_pipe`的命名管道是否存在，从管道中读取消息，并显示在`stdout`上：'
- en: '[PRE57]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'To execute it, run `send.sh` in a terminal and `receive.sh` in another terminal:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行它，在一个终端中运行`send.sh`，在另一个终端中运行`receive.sh`：
- en: '[PRE58]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Socket file
  id: totrans-303
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 套接字文件
- en: 'A socket file is used to pass information from one application to another.
    For example, if **Common UNIX Printing System** (**CUPS**) daemon is running and
    my printing application wants to communicate with it, then my printing application
    will write a request to a socket file where CUPS daemon is listening for upcoming
    requests. Once a request is written to a socket file, the daemon will serve the
    request:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 套接字文件用于从一个应用程序传递信息到另一个应用程序。例如，如果**通用UNIX打印系统**（**CUPS**）守护程序正在运行，我的打印应用程序想要与它通信，那么我的打印应用程序将向套接字文件写入一个请求，CUPS守护程序会监听即将到来的请求。一旦请求被写入套接字文件，守护程序将处理请求：
- en: '[PRE59]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: The first character in the first column is `s`, which means it is a socket file.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 第一列中的第一个字符是`s`，表示它是一个套接字文件。
- en: Temporary files
  id: totrans-307
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 临时文件
- en: Temporary files are the files that are needed for a short interval of time while
    an application is running. Such files are being used to keep intermediate results
    of running a program and they are no longer needed after the program execution
    is complete. In shell, we can create temporary files using the `mktemp` command.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 临时文件是在应用程序运行时需要的一段时间内的文件。这些文件被用来保存运行程序的中间结果，在程序执行完成后就不再需要了。在shell中，我们可以使用`mktemp`命令创建临时文件。
- en: Creating a temporary file using mktemp
  id: totrans-309
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`mktemp`创建临时文件
- en: The `mktemp` command creates a temporary file and prints its name on `stdout`.
    Temporary files are created by default in the `/tmp` directory.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '`mktemp`命令创建一个临时文件，并在`stdout`上打印其名称。临时文件默认创建在`/tmp`目录中。'
- en: 'The syntax of creating a temporary file is as follows:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 创建临时文件的语法如下：
- en: '[PRE60]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: A file with the name `tmp.xEXXxYeRcF` gets created into the `/tmp` directory.
    We can further read and write into this file in an application for temporary use.
    Using the `mktemp` command instead of using a random name for a temporary filename
    avoids accidental overwrite of an existing temporary file.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 一个名为`tmp.xEXXxYeRcF`的文件被创建到`/tmp`目录中。我们可以在应用程序中进一步读写这个文件以供临时使用。使用`mktemp`命令而不是使用一个随机名称来创建临时文件名，可以避免意外覆盖现有的临时文件。
- en: 'To create a temporary directory, we can use the `-d` option with `mktemp`:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建临时目录，我们可以使用`mktemp`的`-d`选项：
- en: '[PRE61]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Furthermore, we can explicitly delete it as well:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们也可以明确地删除它：
- en: '[PRE62]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: We can even specify a template to use for a temporary file by providing an argument
    as `name.XXXX`. Here, `name` can be any name by which a temporary file should
    begin, and `XXXX` tells the length of a random character to be used after a dot
    (.). In general, while writing an application if temporary files are needed, the
    application name is given as the temporary file name.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以通过提供一个参数作为`name.XXXX`来指定一个模板用于临时文件。这里，`name`可以是临时文件应该以哪个名称开头，`XXXX`表示在点（.）后使用随机字符的长度。通常，在编写应用程序时，如果需要临时文件，应用程序名称将作为临时文件名。
- en: 'For example, a test application needs to create a temporary file. To create
    a temporary file, we will use the following command:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，一个测试应用程序需要创建一个临时文件。为了创建一个临时文件，我们将使用以下命令：
- en: '[PRE63]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: We can see that the temporary file name begins with `test` and contains exactly
    five random letters.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到临时文件名以`test`开头，后面正好包含五个随机字母。
- en: Note
  id: totrans-322
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The time when temporary files will be cleaned up is distribution-specific.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 临时文件将被清理的时间是与发行版相关的。
- en: Permission and ownership
  id: totrans-324
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 权限和所有权
- en: 'As a user of a system, to access a file in Linux and UNIX, it is important
    that a user has the required permission for that specific file or directory. For
    example, as a regular user, perform `cd` into `/root`:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 作为Linux和UNIX系统的用户，重要的是用户对特定文件或目录具有所需的权限。例如，作为普通用户，执行`cd`进入`/root`：
- en: '[PRE64]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'We were not able to do so because of the permission denied error:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 由于权限被拒绝，我们无法这样做：
- en: '[PRE65]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: We were successfully able to do `cd` into the user's home directory because
    a user had the permission to access its own home directory.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 我们成功地能够进入用户的主目录，因为用户有权限访问自己的主目录。
- en: Every file in UNIX or Linux has an owner and an associated group. It also has
    a set of permissions (read, write, and execute) with respect to the user, group,
    and others.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: UNIX或Linux中的每个文件都有一个所有者和一个关联的组。它还具有相对于用户、组和其他人的一组权限（读取、写入和执行）。
- en: Viewing the ownership and permission of files
  id: totrans-331
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看文件的所有权和权限
- en: 'The `ls` command with the `-l` option is used to view the ownership and permission
    of a file:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ls -l`选项的`ls`命令用于查看文件的所有权和权限：
- en: '[PRE66]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Here, the first column of `ls` contains the permission information—that is,
    `-rw-rw-r--`.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`ls`的第一列包含权限信息，即`-rw-rw-r--`。
- en: 'The first character specifies a file''s type, which is dash (-) in this example.
    A dash means that it is a regular file. It can have other characters as follows:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个字符指定文件的类型，在这个例子中是短横线（-）。短横线表示这是一个常规文件。它可以有其他字符，如下所示：
- en: 'p: This means it is a named pipe file'
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: p：这意味着这是一个命名管道文件
- en: 'd: This means it is a directory file'
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: d：这意味着这是一个目录文件
- en: 's: This means it is a socket file'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: s：这意味着这是一个套接字文件
- en: 'c: This means it is a character device file'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: c：这意味着这是一个字符设备文件
- en: 'b: This means it is a block device file'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: b：这意味着这是一个块设备文件
- en: The next three characters belong to a user's or owner's permission. It can be
    either `rwx` or `dash` at any of these spaces. The permission `r` specifies that
    the read permission is available, `w` specifies that the write permission is available,
    and `x` specifies that the execute permission is available over the given file.
    If a dash is present, then the corresponding permission is missing. In the above
    example, an owner's permission is `rw-`, which means the owner has read and write
    permission on the `permission_test_file.txt` file but no execute permission.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的三个字符属于用户或所有者的权限。它可以是`rwx`或`-`中的任何一个。权限`r`表示读权限可用，`w`表示写权限可用，`x`表示给定文件上的执行权限可用。如果存在短横线，则相应的权限缺失。在上面的例子中，所有者的权限是`rw-`，这意味着所有者对`permission_test_file.txt`文件具有读和写权限，但没有执行权限。
- en: The next three characters belong to a group's permission. It can be `rwx` or
    `dash` at any of these places if the corresponding permission is missing. In the
    preceding example, the permission given to a group is `rw-`, which means the read
    and write permissions are present and the execute permission is missing.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的三个字符属于组的权限。如果相应的权限缺失，则在这些位置中可以是`rwx`或`-`。在前面的例子中，授予组的权限是`rw-`，这意味着读取和写入权限存在，但执行权限缺失。
- en: The next three characters belong to other's permission. In the preceding example,
    the permission given to others is `r--`, which means other users can read the
    content of the `permission_test_file.txt` file but can't modify or execute it.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的三个字符属于其他人的权限。在前面的例子中，授予其他人的权限是`r--`，这意味着其他用户可以读取`permission_test_file.txt`文件的内容，但不能修改或执行它。
- en: The next column in the `ls -l` output—that is, the second column specifies who
    the owner of file is. In our example, the second column value is `foo`, which
    means `foo` has the ownership of the file. By default, the ownership of a file
    is given to whoever has created that file.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '`ls -l`输出中的下一列，即第二列指定文件的所有者是谁。在我们的例子中，第二列的值是`foo`，这意味着`foo`拥有该文件。默认情况下，文件的所有权归创建该文件的人。'
- en: The third column in the `ls -l` output that specifies the group to which a file
    belongs to. In our case, the group of the `permission_test_file.txt` file is `foo`.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '`ls -l`输出中的第三列指定文件所属的组。在我们的例子中，`permission_test_file.txt`文件的组是`foo`。'
- en: Changing permission
  id: totrans-346
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改权限
- en: 'To change the permission of a file, the `chmod` command is used. The syntax
    of using `chmod` is as follows:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改文件的权限，使用`chmod`命令。使用`chmod`的语法如下：
- en: '[PRE67]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Or,
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，
- en: '[PRE68]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: An important option of `chmod` is `-R`, which means change the files and directories
    permission recursively.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '`chmod`的一个重要选项是`-R`，它表示递归更改文件和目录的权限。'
- en: The `mode` can be `[ugoa][-+][rwx]`.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '`mode`可以是`[ugoa][-+][rwx]`。'
- en: Here, `u` is the owner, `g` is the group, `o` is other, and `a` is all users—that
    is, `ugo`.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`u`是所有者，`g`是组，`o`是其他，`a`是所有用户，即`ugo`。
- en: Specifying - (minus) removes the specified permission and specifying `+(plus)`
    adds the specified permission.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 指定-（减号）会移除指定的权限，指定`+`（加号）会添加指定的权限。
- en: The letters `r`(read), `w`(write), and `x`(execute) specify permissions.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 字母`r`（读取）、`w`（写入）和`x`（执行）指定权限。
- en: 'The `octal-mode` specifies the `rwx` permission of a user together in octal
    format, which can be from `0 to 7`. The following table explains the octal representation
    of a permission to a specific user:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '`八进制模式`以八进制格式指定用户的`rwx`权限，可以是`0到7`。以下表格解释了特定用户权限的八进制表示：'
- en: '| Octal Value | Binary representation | Meaning |'
  id: totrans-357
  prefs: []
  type: TYPE_TB
  zh: '| 八进制值 | 二进制表示 | 意义 |'
- en: '| --- | --- | --- |'
  id: totrans-358
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| 0 | 000 | No read, write, and execute permissions (---) |'
  id: totrans-359
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 000 | 没有读取、写入和执行权限（---）|'
- en: '| 1 | 001 | Only execute permission (--x) |'
  id: totrans-360
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 001 | 只有执行权限（--x）|'
- en: '| 2 | 010 | Only write permission (-w-) |'
  id: totrans-361
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 010 | 只有写权限（-w-）|'
- en: '| 3 | 011 | Write and execute permissions (-wx) |'
  id: totrans-362
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 011 | 写和执行权限（-wx）|'
- en: '| 4 | 100 | Only read permission (r--) |'
  id: totrans-363
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 100 | 只有读权限（r--）|'
- en: '| 5 | 101 | Read and execute permissions (r-x) |'
  id: totrans-364
  prefs: []
  type: TYPE_TB
  zh: '| 5 | 101 | 读取和执行权限（r-x）|'
- en: '| 6 | 110 | Read and write permissions (rw-) |'
  id: totrans-365
  prefs: []
  type: TYPE_TB
  zh: '| 6 | 110 | 读取和写入权限（rw-）|'
- en: '| 7 | 111 | Read, write, and execute permissions (rwx) |'
  id: totrans-366
  prefs: []
  type: TYPE_TB
  zh: '| 7 | 111 | 读取、写入和执行权限（rwx）|'
- en: 'To demonstrate the changing permission on a file, we will create a file as
    follows:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示对文件进行权限更改，我们将创建一个文件如下：
- en: '[PRE69]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: The default permission given to a regular file is the `Read` permission to an
    owner, group, and other. The `Write` permission is given to the owner and group.
    No execute permission is given to anyone.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 对于普通文件，默认权限是所有者、组和其他人都有“读”权限。所有者和组有“写”权限。没有人被赋予执行权限。
- en: 'Now, we want to modify a permission in such a way that only the owner can have
    the `write` permission, and keeping the other permission as it is. We can do this
    in the following way:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们想以只有所有者可以拥有“写”权限的方式修改权限，并保持其他权限不变。我们可以这样做：
- en: '[PRE70]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Now, we can see that only an owner can modify `test_file`. While using octal
    mode, we have to specify the exact permission that we want to see further. In
    `chmod`, we gave `octal_mode` as `644`; here the first octal digit, that is, `6`
    signifies the read, write, and execute permissions of the owner. Similarly, the
    second octal digit `4` specifies the permissions for the group and the third digit
    specifies the permission for others.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以看到只有所有者可以修改“test_file”。在使用八进制模式时，我们必须指定我们希望进一步查看的确切权限。在“chmod”中，我们将“octal_mode”设置为“644”；这里的第一个八进制数字，即“6”表示所有者的读、写和执行权限。同样，第二个八进制数字“4”指定了组的权限，第三个数字指定了其他人的权限。
- en: There is another way to modify a permission, which is by using mode. Mode is
    specified as `[ugoa][-+][rwx]`. Here, we only have to specify which permission
    we want to add or remove.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一种修改权限的方法，即使用模式。模式被指定为“[ugoa][-+][rwx]”。在这里，我们只需要指定要添加或删除的权限。
- en: 'For example, we want to remove the write permission from an owner and add the
    execute permission to all. We can do this as follows:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们想要从所有者那里删除写权限，并向所有人添加执行权限。我们可以这样做：
- en: '[PRE71]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Changing the owner and group
  id: totrans-376
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改所有者和组
- en: We can also change the owner and group ownership of a file. This allows flexibility
    to further modify the group and owner of a file.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以更改文件的所有者和组所有权。这允许进一步修改文件的组和所有者。
- en: Changing a file's owner
  id: totrans-378
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改文件的所有者
- en: To change the owner of a command, `chown` is used. This is useful for sysadmin
    in different cases. For example, a user is working on a project and now the user
    is going to discontinue working on that project. In such a case, sysadmin can
    modify the ownership to a new user who is responsible for continuing that project.
    Sysadmin can change the ownership of a file to a new user for all the related
    files in a project.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改命令的所有者，使用“chown”。这对于系统管理员在不同情况下非常有用。例如，用户正在进行一个项目，现在用户将要停止在该项目上的工作。在这种情况下，系统管理员可以将所有权修改为负责继续该项目的新用户。系统管理员可以将文件的所有权更改为项目中所有相关文件的新用户。
- en: In our previous example, `foo` is the owner of the `test_file.txt` file. Now,
    we want to transfer the ownership of a file to user `bar`.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的例子中，“foo”是“test_file.txt”文件的所有者。现在，我们想把文件的所有权转移到用户“bar”。
- en: If the user `bar` doesn't exist in a system, a new user bar can be created using
    the `useradd` command. The `useradd` command needs the root access.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 如果系统中不存在用户“bar”，可以使用“useradd”命令创建一个名为bar的新用户。需要root访问权限。
- en: 'Following command will create a new user called `bar`:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令将创建一个名为“bar”的新用户：
- en: '[PRE72]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'We can change ownership of `test_file.txt` file to user `bar` by executing
    the following command as `root` or `sudo`:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下命令将“test_file.txt”文件的所有权更改为用户“bar”：
- en: '[PRE73]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: We can see that the ownership of a file is changed to bar.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到文件的所有权已更改为bar。
- en: Changing group ownership
  id: totrans-387
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改组所有权
- en: 'To modify the group ownership of a file, we can either use the `chown` or `chgrp`
    command. To create a new group, the `groupadd` command is used as `sudo` or `root`.
    For example, we want to create a new group called `test_group`:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 要修改文件的组所有权，可以使用“chown”或“chgrp”命令。要创建一个新组，使用“groupadd”命令作为“sudo”或“root”。例如，我们想创建一个名为“test_group”的新组：
- en: '[PRE74]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Now, we will change the group of the example file `test_file.txt` by using
    the `chown` command. This can be done by executing the following command:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用“chown”命令将示例文件“test_file.txt”的组更改为。可以通过执行以下命令来完成这个操作：
- en: '[PRE75]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'We can see that the group has been modified to `test_group`. To change the
    group using the `chgrp` command, we can execute the following command:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到组已经修改为“test_group”。要使用“chgrp”命令更改组，可以执行以下命令：
- en: '[PRE76]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Now, we will revert back the owner and group to `foo` for the `test_file.txt`
    file:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将把“test_file.txt”文件的所有者和组还原为“foo”：
- en: '[PRE77]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: The new owner name is provided before `:` (colon) and the group name after `:`
    ,while modifying the owner and group ownership using the `chown` command.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用“chown”命令修改所有者和组所有权时，新的所有者名称在“:”（冒号）之前提供，组名称在“:”之后提供。
- en: Getting the list of open files
  id: totrans-397
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取打开文件的列表
- en: We know that there can be millions of files available in a system, which can
    be binary files, text files, directories, and so on. When a file is not in use,
    they are just available on a storage device as `0 and 1`. To view or process a
    file, it needs to be opened. An application that is executing may open multiple
    files. Knowing what files are opened by a running application is very useful.
    To know the list of opened files, the `lsof` command is used.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道系统中可能有数百万个文件，可以是二进制文件、文本文件、目录等。当文件没有被使用时，它们只是作为“0和1”存储在存储设备上。要查看或处理文件，需要打开它。正在执行的应用程序可能会打开多个文件。知道运行应用程序打开了哪些文件非常有用。要知道已打开文件的列表，使用“lsof”命令。
- en: 'Executing the following command gives the list of all opened files:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下命令会列出所有打开的文件：
- en: '[PRE78]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: This gives a huge output of all the opened files.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 这会给出所有打开文件的大量输出。
- en: Knowing the files opened by a specific application
  id: totrans-402
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 知道特定应用程序打开的文件
- en: 'To know the list of files opened by a specific application, first get the **Process
    ID** (**PID**) of the running application:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 要知道特定应用程序打开的文件列表，首先获取正在运行应用程序的**进程ID**（**PID**）：
- en: '[PRE79]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'For example, let''s run `cat` without any parameter:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们不带任何参数运行“cat”：
- en: '[PRE80]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'In another terminal, run the following commands:'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一个终端中，运行以下命令：
- en: '[PRE81]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Alternatively, we can directly write the following command:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以直接输入以下命令：
- en: '[PRE82]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'The following is a sample screenshot of the `lsof` output:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`lsof`输出的示例截图：
- en: '![Knowing the files opened by a specific application](img/4335_06_03.jpg)'
  id: totrans-412
  prefs: []
  type: TYPE_IMG
  zh: '![了解特定应用程序打开的文件](img/4335_06_03.jpg)'
- en: In the output, we see that there are various columns of results. The first column
    is `COMMAND`—that is, for the application this file has been opened, the PID column
    specifies the PID with which the file has been opened, USER tells which user has
    opened the file, FD is the file descriptor, TYPE specifies the type of file, DEVICE
    specifies the device number with values separated by a comma, SIZE/OFF specifies
    the size of the file or the file offset in bytes, and NAME is the filename with
    the absolute path.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 在输出中，我们看到了各种结果的列。第一列是`COMMAND`，即打开此文件的应用程序，PID列指定了打开文件的PID，USER指示打开文件的用户，FD是文件描述符，TYPE指定文件类型，DEVICE指定设备号，值用逗号分隔，SIZE/OFF指定文件大小或字节偏移量，NAME是带有绝对路径的文件名。
- en: In the output, we can see that the application has opened `cat binary` from
    `/usr/bin`. It has also loaded the shared library files such as `libc-2.21.so`
    and `ld-2.21.so` available in `/usr/lib64/`. Also, there is a character device
    `dev/pts/2` that has been opened.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 在输出中，我们可以看到应用程序已经从`/usr/bin`打开了`cat binary`。它还加载了共享库文件，如`libc-2.21.so`和`ld-2.21.so`，这些文件位于`/usr/lib64/`中。此外，还有一个字符设备`dev/pts/2`被打开。
- en: Listing the applications that opened a file
  id: totrans-415
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列出打开文件的应用程序
- en: 'We can also find out which all applications opened a file. This can be done
    by executing the following command:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以找出哪些应用程序打开了一个文件。可以通过执行以下命令来实现：
- en: '[PRE83]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'The following is the sample output:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是示例输出：
- en: '![Listing the applications that opened a file](img/4335_06_04.jpg)'
  id: totrans-419
  prefs: []
  type: TYPE_IMG
  zh: '![列出打开文件的应用程序](img/4335_06_04.jpg)'
- en: From the output, we can see that the `bash` file has been opened by six running
    applications.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 从输出中，我们可以看到`bash`文件已被六个运行的应用程序打开。
- en: Knowing the files opened by a user
  id: totrans-421
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解用户打开的文件
- en: 'To know the list of files opened by a specific user, run `lsof` with the `-u`
    option. The syntax is as follows:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解特定用户打开的文件列表，请使用`lsof`命令和`-u`选项。语法如下：
- en: '[PRE84]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'For example, consider the following command:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑以下命令：
- en: '[PRE85]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: This means, currently `525` files are opened by the user root.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着当前有`525`个文件由用户root打开。
- en: Configuration files
  id: totrans-427
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置文件
- en: Configuration or config files are regular files that contain settings for an
    application. During the initial stage of execution, many applications in Linux
    and UNIX read settings from config file(s) and configure the application accordingly.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件是包含应用程序设置的常规文件。在Linux和UNIX的执行初始阶段，许多应用程序从配置文件中读取设置，并相应地配置应用程序。
- en: Viewing and modifying configuration files
  id: totrans-429
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看和修改配置文件
- en: Configuration files are generally present in the `/etc/` directory and can be
    viewed using the `cat` command.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件通常位于`/etc/`目录中，可以使用`cat`命令查看。
- en: 'For example, consider viewing the `resolv.conf` config file:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑查看`resolv.conf`配置文件：
- en: '[PRE86]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: The `resolv.conf` file contains the order in which to contact DNS servers.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: '`resolv.conf`文件包含联系DNS服务器的顺序。'
- en: 'We can also modify a configuration file to meet our requirements. For example,
    we can add another DNS entry in the `/etc/resolv.conf` file with the DNS value
    `8.8.8.8`, if some of network URLs are accessible via `192.168.1.1`. The modified
    `cat /etc/resolv.conf` will look like the following:'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以修改配置文件以满足我们的需求。例如，如果一些网络URL可以通过`192.168.1.1`访问，我们可以在`/etc/resolv.conf`文件中添加另一个DNS条目，DNS值为`8.8.8.8`。修改后的`cat
    /etc/resolv.conf`将如下所示：
- en: '[PRE88]'
  id: totrans-436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: There are a lot of other config files available in a system such as `ssh`, `passwd`,
    `profile`, `sysconfig`, `crontab`, `inittab`, and so on, in the `/etc/` directory.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 系统中还有许多其他配置文件，例如`ssh`、`passwd`、`profile`、`sysconfig`、`crontab`、`inittab`等，位于`/etc/`目录中。
- en: Summary
  id: totrans-439
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: After reading this chapter, you should now know that the UNIX and Linux-based
    operating system treats everything as files that can be further categorized as
    regular, directory, link, block device, character device, socket, and pipe files.
    You should also know how to perform basic operations on any of these files. Now,
    you should have good knowledge of how to view and modify the permissions and ownership
    of a file. You should also know how to monitor and manage the list of open files
    in a system using the `lsof` command.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读本章后，您现在应该知道UNIX和基于Linux的操作系统将一切视为文件，可以进一步分类为常规、目录、链接、块设备、字符设备、套接字和管道文件。您还应该知道如何对这些文件中的任何一个执行基本操作。现在，您应该对如何查看和修改文件的权限和所有权有很好的了解。您还应该知道如何使用`lsof`命令监视和管理系统中打开文件的列表。
- en: In the next chapter, you will learn how a process gets created in a system and
    how to monitor and manage all running processes. We will also see how two or more
    processes communicate with each other using **Inter Process Communication** (**IPC**)
    mechanism.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习系统中如何创建进程以及如何监视和管理所有运行中的进程。我们还将看到两个或更多进程如何使用**进程间通信**（**IPC**）机制相互通信。
