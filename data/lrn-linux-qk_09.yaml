- en: Piping and I/O Redirection
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 管道和I/O重定向
- en: One of the main principles in Linux is that *E**ach program does one thing well* and
    thus, every Linux command is designed to accomplish a single task efficiently.
    In this chapter, you will learn how to use Linux pipes to unleash the real power
    of Linux commands by combining their functionality to carry out more complex tasks.
    You will also learn about I/O (input/output) redirection, which will enable you
    to read user input and save command output to a file.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Linux的一个主要原则是*每个程序都做一件事情*，因此，每个Linux命令都设计成能够高效地完成单个任务。在本章中，你将学习如何使用Linux管道来结合命令的功能，以执行更复杂的任务。你还将学习有关I/O（输入/输出）重定向，这将使你能够读取用户输入并将命令输出保存到文件中。
- en: Linux pipes
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux管道
- en: 'In Linux, you can use a pipe to send the output of one command to be the input
    (argument) of another command:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux中，你可以使用管道将一个命令的输出发送到另一个命令的输入（参数）中：
- en: '![](img/cb57d2c1-6ca4-4c4f-aac2-f12da4d9ecb4.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cb57d2c1-6ca4-4c4f-aac2-f12da4d9ecb4.png)'
- en: Figure 1 – A Linux pipe
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 图1- Linux管道
- en: A pipe is represented by the vertical bar character on your keyboard. Linux
    pipes are very useful as they allow you to accomplish a relatively complex task
    in an easy way, and throughout the book, you will see that they come in handy
    very often.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的键盘上，管道由竖线字符表示。Linux管道非常有用，因为它们允许你以一种简单的方式完成相对复杂的任务，而且在整本书中，你会发现它们经常派上用场。
- en: 'Before we do an example, let''s first rename the `hard.txt` file to `facts.txt`,
    as we removed the `facts.txt` file back in [Chapter 6](10bdcc42-aeaf-493a-8c23-9fa33f778424.xhtml),
    *Hard vs. Soft Links*:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们做一个例子之前，让我们先将`hard.txt`文件重命名为`facts.txt`，因为我们在[第6章](10bdcc42-aeaf-493a-8c23-9fa33f778424.xhtml)中删除了`facts.txt`文件，*硬链接与软链接*：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now let''s use the `head` command to view the first five lines of `facts.txt`:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用`head`命令来查看`facts.txt`的前五行：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now I want to display only the fifth line `Sky is high.` of the file `facts.txt`;
    how can I do that?
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我想显示文件`facts.txt`的第五行`Sky is high.`；我该怎么做呢？
- en: 'That''s where the power of Linux pipes comes into play. If you pipe the output
    of the previous command to the `tail -n 1` command, you will get the fifth line:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是Linux管道的威力所在。如果你将前一个命令的输出传输到`tail -n 1`命令，你将得到第五行：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: So by using a pipe, I was able to send the output of the command `head -n 5
    facts.txt` to the input (argument) of the command `tail -n 1`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，通过使用管道，我能够将`head -n 5 facts.txt`命令的输出发送到`tail -n 1`命令的输入（参数）中。
- en: 'Let''s do another example. If you want to display the seventh line of the file
    `facts.txt`, then you will show the first seven lines using the `head` command,
    then use a pipe to `tail` the last line:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们做另一个例子。如果你想显示文件`facts.txt`的第七行，那么你将使用`head`命令显示前七行，然后使用管道`tail`最后一行：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can also use more than one pipe at a time as demonstrated in the following
    diagram:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以同时使用多个管道，就像下面的图表中演示的那样：
- en: '![](img/6eb7018e-8a8e-499a-8308-651eea5d1b14.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6eb7018e-8a8e-499a-8308-651eea5d1b14.png)'
- en: 'Figure 2: Two pipes'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图2：两个管道
- en: 'For example, you already know that the `lscpu` command displays your processor
    information. The fourth line of the `lscpu` command output shows how many CPUs
    your machine has. You can display the fourth line of the `lscpu` command by using
    two pipes:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你已经知道`lscpu`命令会显示处理器信息。`lscpu`命令的第四行输出显示了你的机器有多少个CPU。你可以使用两个管道显示`lscpu`命令的第四行：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'So let''s break down what happened here. The first pipe we used was to show
    the first four lines of the `lscpu` command:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们分解一下这里发生了什么。我们使用的第一个管道是显示`lscpu`命令的前四行：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We then used the second pipe to `tail` the last line, which gets us the fourth line
    in this case:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们使用第二个管道来`tail`最后一行，这样就得到了第四行：
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You can similarly display the second line of `lscpu`, which shows your CPU operation
    modes, but I will leave that for you to do as an exercise.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以类似地显示`lscpu`的第二行，其中显示了CPU的操作模式，但我会把这个留给你作为一个练习。
- en: Input and output redirection
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 输入和输出重定向
- en: 'In this section, you will get to learn one of the coolest Linux features, which
    is I/O (input/output) redirection. Most Linux commands work with three different
    streams of data:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将学习Linux最酷的功能之一，即I/O（输入/输出）重定向。大多数Linux命令都使用三种不同的数据流：
- en: Standard input (also referred to as `stdin`)
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准输入（也称为`stdin`）
- en: Standard output (also referred to as `stdout`)
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准输出（也称为`stdout`）
- en: Standard error (also referred to as `stderr`)
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准错误（也称为`stderr`）
- en: Most of the commands we have discussed so far produce some output. This output
    is sent to a special file called standard output (also referred to as `stdout`).
    By default, the standard output file is linked to the terminal, and that's why
    every time you run a command, you see the output on your terminal. Also, sometimes
    commands will produce error messages. These error messages are sent to another
    special file called standard error (also referred to as `stderr`), and it's also
    linked to the terminal by default.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们讨论的大多数命令都会产生一些输出。这些输出被发送到一个称为标准输出（也称为`stdout`）的特殊文件中。默认情况下，标准输出文件链接到终端，这就是为什么每次运行命令时，你都会在终端上看到输出。有时候命令会产生错误消息。这些错误消息被发送到另一个称为标准错误（也称为`stderr`）的特殊文件中，它也默认链接到终端。
- en: Redirecting standard output
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重定向标准输出
- en: 'You know that running the `date` command will display the current date on your
    terminal:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道运行`date`命令会在你的终端上显示当前日期：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now by using the greater than sign `>`, you can redirect the output of the
    `date` command to a file instead of your terminal! Have a look:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在通过使用大于号`>`，你可以将`date`命令的输出重定向到文件而不是你的终端！看一下：
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As you can see, there is no output displayed on your screen! That''s because
    the output got redirected to the file `mydate.txt`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，屏幕上没有显示任何输出！这是因为输出被重定向到文件`mydate.txt`：
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Cool! Let''s try some more examples. You can print a line on your terminal
    with the `echo` command:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！让我们再试一些例子。你可以使用`echo`命令在你的终端上打印一行：
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If you want to redirect the output to a file named `planets.txt`, you can run
    the command:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想将输出重定向到一个名为`planets.txt`的文件，您可以运行以下命令：
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Awesome! Notice that the file `planets.txt` was also created in the process.
    Now let''s add more planets to the file `planets.txt`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！请注意，文件`planets.txt`也在这个过程中创建了。现在让我们向文件`planets.txt`添加更多的行星：
- en: '[PRE12]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Hmmm. We added the line "Saturn is a planet." but the line "Mars is a planet."
    is now removed! That''s because redirecting standard output with `>` overwrites
    the file. What we need in this case is to append to the file and this can be done
    by using a double greater than sign `>>`. So now let''s append the line "Mars
    is a planet." back to the file `planets.txt`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯。我们添加了一行“土星是一个行星。”但现在删除了“火星是一个行星。”！这是因为用`>`重定向标准输出会覆盖文件。在这种情况下，我们需要的是向文件追加，这可以通过使用双大于号`>>`来实现。所以现在让我们向文件`planets.txt`追加一行“火星是一个行星。”：
- en: '[PRE13]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Great! As you can see, it added the line "Mars is a planet." to the end of
    the file. Let''s append one more planet:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！正如你所看到的，它将“火星是一个行星。”添加到文件的末尾。让我们再添加一个行星：
- en: '[PRE14]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Awesome! One more thing you need to know here is that the standard output (`stdout`)
    is linked to file descriptor 1.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！这里还有一件事情你需要知道，那就是标准输出（`stdout`）链接到文件描述符1。
- en: '**WHAT IS A FILE DESCRIPTOR?**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**文件描述符是什么？**'
- en: A file descriptor is a number that uniquely identifies an open file in a computer's
    operating system.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 文件描述符是一个在计算机操作系统中唯一标识打开文件的数字。
- en: 'And so running the command:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然后运行命令：
- en: '[PRE15]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Is the same as running the command:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 与运行命令相同：
- en: '[PRE16]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Notice that the `1` in `1>` references file descriptor 1 (`stdout`).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`1>`中的`1`是指文件描述符1（`stdout`）。
- en: Redirecting standard error
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重定向标准错误
- en: 'You will get an error message if you try to display the contents of a file
    that doesn''t exist:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尝试显示一个不存在的文件的内容，您将收到一个错误消息：
- en: '[PRE17]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, this error message comes from standard error (`stderr`). If you try to
    redirect errors the same way we did with the standard output, it will not work:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这个错误消息来自标准错误（`stderr`）。如果您尝试以与标准输出相同的方式重定向错误，它将不起作用：
- en: '[PRE18]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'As you can see, it still displays the error message on your terminal. That''s
    because `stderr` is linked to file descriptor 2\. And thus, to redirect errors,
    you have to use `2>`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，它仍然在您的终端上显示错误消息。这是因为`stderr`链接到文件描述符2。因此，要重定向错误，您必须使用`2>`：
- en: '[PRE19]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now if you displayed the contents of the file `error.txt`, you would see the
    error message:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果您显示文件`error.txt`的内容，您将看到错误消息：
- en: '[PRE20]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Let''s try to remove a file that doesn''t exist:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试删除一个不存在的文件：
- en: '[PRE21]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This also produces an error message. We can append this error message to the
    file
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这也会产生一个错误消息。我们可以将这个错误消息追加到文件中
- en: '`error.txt` using `2>>`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`2>>`的`error.txt`：
- en: '[PRE22]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now if you display the contents of the file `error.txt`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果您显示文件`error.txt`的内容：
- en: '[PRE23]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: You will see both error messages.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到两个错误消息。
- en: Redirecting all output to the same file
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将所有输出重定向到同一个文件
- en: 'There are some situations where you can get both standard output and an error
    message at the same time. For example, if you run the following command:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 有些情况下，您可能同时获得标准输出和错误消息。例如，如果您运行以下命令：
- en: '[PRE24]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: You will see that it displayed the contents of the file `planets.txt`, but it
    also displayed an error message at the very last line (because there is no file
    `blabla` to concatenate).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 您会看到它显示了文件`planets.txt`的内容，但在最后一行也显示了一个错误消息（因为没有文件`blabla`来连接）。
- en: 'You can choose to redirect the error to another file:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以选择将错误重定向到另一个文件：
- en: '[PRE25]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This way, you only see the standard output on the screen. Or you may choose
    to redirect the standard output:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，您只能在屏幕上看到标准输出。或者您可以选择重定向标准输出：
- en: '[PRE26]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This way, you only see the error on the screen. Now, what if you want to redirect
    both the standard output and the error to the same file? In this case, you have
    to run:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，您只能在屏幕上看到错误。那么，如果您想将标准输出和错误重定向到同一个文件呢？在这种情况下，您必须运行：
- en: '[PRE27]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '`&1` is referencing the standard output while `2>` is referencing the standard
    error. So what we are basically saying here is: "Redirect the stderr to the same
    place we are redirecting the stdout."'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`&1`是指标准输出，而`2>`是指标准错误。所以我们基本上是在说：“将stderr重定向到我们正在重定向stdout的地方。”'
- en: 'Now if you displayed the contents of the file `all.txt`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果您显示文件`all.txt`的内容：
- en: '[PRE28]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: You can see it includes both the `stdout` and `stderr`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到它包括`stdout`和`stderr`。
- en: Discarding output
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 丢弃输出
- en: 'Sometimes you don''t need to redirect output to anywhere; you just want to
    throw it away and get rid of it. In this case, you can redirect the output to
    `/dev/null`. This is often used with error messages. For example:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候你不需要将输出重定向到任何地方；你只是想抛弃它并摆脱它。在这种情况下，你可以将输出重定向到`/dev/null`。这通常与错误消息一起使用。例如：
- en: '[PRE29]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This will redirect the error message to `/dev/null`. You can think of `/dev/null`
    as a garbage collector.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把错误消息重定向到`/dev/null`。您可以将`/dev/null`视为垃圾收集器。
- en: Redirecting standard input
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重定向标准输入
- en: 'Some Linux commands interact with the user input through the standard input
    (which is your keyboard by default). For example, the `read` command reads input
    from the user and stores it in a variable. For example, you can run the command
    `read weather`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 一些Linux命令通过标准输入与用户输入交互（默认情况下是键盘）。例如，`read`命令从用户那里读取输入并将其存储在一个变量中。例如，您可以运行命令`read
    weather`：
- en: '[PRE30]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'It will then wait for you to enter a line of text. I entered the line `It is
    raining.` and so it stored the line in the `weather` variable. You can use the
    `echo` command to display the contents of a variable:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 然后它将等待您输入一行文本。我输入了一行“下雨了。”，所以它将这行存储在`weather`变量中。您可以使用`echo`命令来显示变量的内容：
- en: '[PRE31]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Notice that you have to precede the variable name with a dollar sign. The `read`
    command is particularly useful in shell scripts, which we will cover later on.
    Now notice I wrote the line `It is raining.` using my keyboard. However, I can
    redirect standard input to come from a file instead using the less-than sign `<`,
    for example:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您必须在变量名之前加上美元符号。`read`命令在shell脚本中特别有用，我们稍后会涉及到。现在请注意，我使用键盘写下了`It is raining.`这一行。然而，我可以使用小于号`<`将标准输入重定向到文件中，例如：
- en: '[PRE32]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'This will read the contents of the file `mydate.txt` and store it in the `message`
    variable:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这将读取文件`mydate.txt`的内容并将其存储在`message`变量中：
- en: '[PRE33]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: As you can see, the variable `message` now has the same contents as the file
    `my- date.txt`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，变量`message`现在具有与文件`my-date.txt`相同的内容。
- en: Knowledge check
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 知识检查
- en: 'For the following exercises, open up your terminal and try to solve the following
    tasks:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 对于以下练习，打开您的终端并尝试解决以下任务：
- en: Display only the *5th* line of the file `facts.txt`.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仅显示文件`facts.txt`的第5行。
- en: Save the output of the `free` command into a file named `system.txt`.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`free`命令的输出保存到名为`system.txt`的文件中。
- en: Append the output of the `lscpu` command to the file `system.txt`.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`lscpu`命令的输出追加到文件`system.txt`中。
- en: Run the command `rmdir /var` and redirect the error message to the file `error.txt`.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行命令`rmdir /var`并将错误消息重定向到文件`error.txt`。
