- en: Analyzing and Manipulating Files
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 分析和操作文件
- en: In this chapter, you will learn various Linux commands that will help you analyze
    and manipulate files. You will learn how to compare two files and get the file
    size. You will also learn how to reveal the type of a file and display the number
    of characters, words, and lines in a file. Furthermore, you will learn how to
    sort files, remove duplicate lines, and much more!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习各种Linux命令，这些命令将帮助你分析和操作文件。你还将学习如何比较两个文件并获取文件大小。你还将学习如何显示文件的类型，并显示文件中的字符数、单词数和行数。此外，你还将学习如何对文件进行排序、删除重复行等等！
- en: Spot the difference
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 找出不同之处
- en: You can use the `diff` command to compare the contents of two files and highlight
    the differences between them.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`diff`命令比较两个文件的内容，并突出它们之间的差异。
- en: 'To demonstrate, let’s first make a copy of the file `facts.txt` named `facts2.txt`:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示，让我们首先复制文件`facts.txt`并命名为`facts2.txt`：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now let’s append the line `"Brazil is a country."` to the file `facts2.txt`:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将行`"Brazil is a country."`附加到文件`facts2.txt`中：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, run the `diff` command on both files:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在两个文件上运行`diff`命令：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Cool! It outputs the difference between the two files, which in this case, is
    the line `Brazil is a country.`
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 酷！它输出了两个文件之间的差异，这种情况下是行`Brazil is a country.`。
- en: Viewing file size
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看文件大小
- en: 'You can use the `du` command to view file size. **du** stands for **disk usage**.
    If you want to see how many bytes are in a file, you can run the `du` command
    with the `-b` option:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`du`命令查看文件大小。**du**代表**磁盘使用**。如果你想查看文件中有多少字节，你可以使用`du`命令和`-b`选项：
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `facts.txt` file has `210` bytes. One character is equal to one byte in
    size, so now you know that the `facts.txt` file has exactly `210` characters.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`facts.txt`文件有`210`字节。一个字符等于一个字节的大小，所以现在你知道`facts.txt`文件确切地有`210`个字符。'
- en: 'You can also use the `-h` option, which will print the file size in a human-readable
    format. For example, to view the size of the `dir1` directory and its contents,
    you can run:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用`-h`选项，它将以人类可读的格式打印文件大小。例如，要查看`dir1`目录及其内容的大小，你可以运行：
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Counting characters, words, and lines
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算字符、单词和行数
- en: 'The word count `wc` command is yet another very handy command. It counts the
    number of lines, words, and characters in a file. For example, to display the
    number of lines in the file `facts.txt`, you can use the `-l` option:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 单词计数`wc`命令是另一个非常方便的命令。它计算文件中的行数、单词数和字符数。例如，要显示文件`facts.txt`中的行数，你可以使用`-l`选项：
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'There are a total of `12` lines in the file `facts.txt`. To display the number
    of words, you can use the `-w` option:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 文件`facts.txt`中总共有`12`行。要显示单词的数量，你可以使用`-w`选项：
- en: '[PRE6]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'So there is a total of `37` words in the file `facts.txt`. To display the number
    of characters (bytes), you can use the `-c` option:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 所以文件`facts.txt`中总共有`37`个单词。要显示字符（字节）的数量，你可以使用`-c`选项：
- en: '[PRE7]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'There is a total of `210` characters in the file `facts.txt`. Without any options,
    the `wc` command will display the number of lines, words, and characters side
    by side:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 文件`facts.txt`中总共有`210`个字符。没有任何选项，`wc`命令将以并列的方式显示行数、单词数和字符数：
- en: '[PRE8]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Viewing the file type
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看文件类型
- en: 'You can determine a file’s type by using the `file` command. For example, if
    you want to determine the type of the file `/var`, you can run:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`file`命令来确定文件的类型。例如，如果你想确定文件`/var`的类型，你可以运行：
- en: '[PRE9]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'And as you would expect, the output shows that `/var` is a directory. If you
    want to show the type of the `facts.txt` file, you can run:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所期望的那样，输出显示`/var`是一个目录。如果你想显示`facts.txt`文件的类型，你可以运行：
- en: '[PRE10]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The output shows that `facts.txt` is an ASCII text file.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示`facts.txt`是一个ASCII文本文件。
- en: '**WHAT IS ASCII?**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**ASCII是什么？**'
- en: '**ASCII**, which is short for **American Standard Code for Information Interchange**, is
    a code for representing `128` English characters as numbers, with each letter
    assigned a number from `0` to `127`.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**ASCII**，即**美国信息交换标准代码**，是用数字表示`128`个英文字符的代码，每个字母被分配一个从`0`到`127`的数字。'
- en: Your computer doesn’t understand human language (letters), just numbers! And
    so each character in the English language is translated to a number. Your computer
    sees any text file as just a bunch of numbers piled together!
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你的计算机不理解人类语言（字母），只理解数字！因此，英语语言中的每个字符都被转换为一个数字。你的计算机将任何文本文件都视为一堆堆的数字！
- en: 'Now let’s create a soft link named `soft.txt` to the `facts.txt` file:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建一个名为`soft.txt`的软链接到`facts.txt`文件：
- en: '[PRE11]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'And run the `file` command on `soft.txt`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 并在`soft.txt`上运行`file`命令：
- en: '[PRE12]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As you can see, it shows that `soft.txt` is a symbolic (soft) link to `facts.txt`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，它显示`soft.txt`是一个指向`facts.txt`的符号（软）链接。
- en: Sorting files
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件排序
- en: 'You can use the `sort` command to sort text files. For example, you can view
    the `facts.txt` file in sorted alphabetical order by running the command:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`sort`命令对文本文件进行排序。例如，你可以通过运行命令按字母顺序查看`facts.txt`文件：
- en: '[PRE13]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You can also use the `-r` option to sort in reverse order:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用`-r`选项以相反的顺序进行排序：
- en: '[PRE14]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You can also use the `-n` option to sort by numerical values rather than literal
    values.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用`-n`选项按数字值而不是文字值进行排序。
- en: Showing unique lines
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示唯一行
- en: 'You can use the `uniq` command to omit repeated lines in a file. For example,
    notice that the line `Cherries are red.` is included four times in the file `facts.txt`:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`uniq`命令省略文件中重复的行。例如，注意文件`facts.txt`中的行`Cherries are red.`被包含了四次：
- en: 'To view `facts.txt` without repeated lines, you can run:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看`facts.txt`而不重复的行，你可以运行：
- en: '[PRE15]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Notice that `Cherries are red.` is still shown twice in the output. That’s
    because the `uniq` command only omits repeated lines but not duplicates! If you
    want to omit duplicates, you have to `sort` the file first and then use a pipe
    to apply the `uniq` command on the sorted output:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`Cherries are red.`在输出中仍然显示了两次。这是因为`uniq`命令只省略了重复的行而不是重复的行！如果你想省略重复的行，你必须首先对文件进行`sort`，然后使用管道在排序输出上应用`uniq`命令：
- en: '[PRE16]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Boom! We have successfully omitted repeated and duplicate lines.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！我们成功地省略了重复和重复的行。
- en: Searching for patterns
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搜索模式
- en: 'The `grep` command is one of the most popular and useful commands in Linux.
    You can use `grep` to print the lines of text that match a specific pattern. For
    example, if you want to only display the lines that contain the word `green` in
    `facts.txt`, you can run:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`grep`命令是Linux中最受欢迎和有用的命令之一。您可以使用`grep`打印与特定模式匹配的文本行。例如，如果您只想显示`facts.txt`中包含单词`green`的行，则可以运行：'
- en: '[PRE17]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As you can see, it only printed the two lines that contain the word `green`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，它只打印了包含单词`green`的两行。
- en: 'The `grep` command can also be very useful when used with pipes. For example,
    to only list the `txt` files in your home directory, you can run the command:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`grep`命令在与管道一起使用时也可能非常有用。例如，要仅列出您的主目录中的`txt`文件，可以运行以下命令：'
- en: '[PRE18]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You can use the `-i` option to make your search case-insensitive. For example,
    if you want to print the lines that contain the word `Earth` in `facts.txt`, then
    use the command:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`-i`选项使您的搜索不区分大小写。例如，如果您想要打印包含单词`Earth`的行在`facts.txt`中，然后使用以下命令：
- en: '[PRE19]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This will show no result because `grep` is case-sensitive by default. However,
    if you pass the `-i` option:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这将不显示任何结果，因为`grep`默认区分大小写。但是，如果您传递`-i`选项：
- en: '[PRE20]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: It will make the search case-insensitive, and hence it will display the line
    `Earth is round.`
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 它将使搜索不区分大小写，因此它将显示行`Earth is round.`
- en: The stream editor
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 流编辑器
- en: 'You can use the stream editor command `sed` to filter and transform text. For
    example, to substitute the word `Sky` with the word `Cloud` in `facts.txt`, you
    can run the command:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用流编辑器命令`sed`来过滤和转换文本。例如，要在`facts.txt`中用单词`Cloud`替换单词`Sky`，可以运行以下命令：
- en: '[PRE21]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'As you can see in the output, the word `Sky` is replaced with `Cloud`. However,
    the file `facts.txt` is not edited. To overwrite (edit) the file, you can use
    the `-i` option:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在输出中所见，单词`Sky`被替换为`Cloud`。但是，文件`facts.txt`没有被编辑。要覆盖（编辑）文件，可以使用`-i`选项：
- en: '[PRE22]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: As you can see, the change is reflected in the file.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，更改已反映在文件中。
- en: Translating characters
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 翻译字符
- en: You can use the `tr` command to translate characters. I am not talking about
    translating to different languages here; instead, I am using the second meaning
    of the word translate, that is, to change from one form to another.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`tr`命令来翻译字符。我这里不是在谈论将文本翻译成不同的语言；相反，我是在使用“翻译”一词的第二个含义，即从一种形式转换为另一种形式。
- en: 'If you read the `man` page of the `tr` command, you will see in the description
    that it: **Translate[s]**, **squeeze[s]**, **and/or delete[s]** **characters from
    standard input, writing to standard output**. And so the `tr` command doesn’t
    accept any arguments.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您阅读`tr`命令的`man`页面，您会在描述中看到：**从标准输入翻译、压缩和/或删除字符，写入标准输出**。因此，`tr`命令不接受任何参数。
- en: 'One popular use of the `tr` command is to change lower case letters to upper
    case (or vice versa). For example, if you want to display all the words in `facts.txt`
    in upper case, you can run:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`tr`命令的一个常见用途是将小写字母转换为大写字母（反之亦然）。例如，如果您想要以大写形式显示`facts.txt`中的所有单词，可以运行：'
- en: '[PRE23]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You can also display all the words in lower case:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以显示所有单词的小写形式：
- en: '[PRE24]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'You can also use the `-d` option to delete characters. For example, to remove
    all spaces in `facts.txt`, you can run:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用`-d`选项来删除字符。例如，要删除`facts.txt`中的所有空格，可以运行：
- en: '[PRE25]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '**A COOL TIP**'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**一个很酷的提示**'
- en: The `tr` command doesn’t change (edit) the contents of the file. It just writes
    the changes to the standard output. However, you can use output redirection to
    store the output into another file.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`tr`命令不会更改（编辑）文件的内容。它只会将更改写入标准输出。但是，您可以使用输出重定向将输出存储到另一个文件中。'
- en: 'For example, running the command:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，运行以下命令：
- en: '[PRE26]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'will store the output of the command:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 将命令的输出存储到：
- en: '[PRE27]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: into the file `upper.txt`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 文件`upper.txt`中。
- en: Cutting text
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 切割文本
- en: 'If you want to view only a part (or a section) of a file, then the `cut` command
    can prove very helpful. For instance, you can see that each line in the `facts.txt`
    file consists of several words that are separated by a single space. If you only
    want to view the first word in each line (first column/field), then you can run
    the following command:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您只想查看文件的一部分（或一节），那么`cut`命令可能非常有用。例如，您可以看到`facts.txt`文件中的每行都由单个空格分隔的多个单词组成。如果您只想查看每行的第一个单词（第一列/字段），那么可以运行以下命令：
- en: '[PRE28]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The `-d` option is the delimiter, and it has to be a single character. In this
    case, I chose the delimiter to be the space character `' '`. I also used the `-f1`
    option to view only the first field (column).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`-d`选项是分隔符，必须是单个字符。在这种情况下，我选择了空格字符`'' ''`作为分隔符。我还使用了`-f1`选项来仅查看第一个字段（列）。'
- en: 'If you want to view the third word of each line (third field), then you can
    use `-f3` instead of `-f1` as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想查看每行的第三个单词（第三个字段），则可以使用`-f3`而不是`-f1`，如下所示：
- en: '[PRE29]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You can also select more than one field at a time. For example, to view the
    first and the third word of each line, you can use `-f1,3`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以一次选择多个字段。例如，要查看每行的第一个和第三个单词，可以使用`-f1,3`：
- en: '[PRE30]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Text processing with awk
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用awk进行文本处理
- en: '`awk` is a very powerful tool you can use in Linux to analyze and process text.
    In fact, `awk` is not like any command you have learned so far, and that’s because
    `awk` is actually a programming language. You will find books that are solely
    written to explain and discuss the use of `awk`. However, I am only going to show
    you the very basics of `awk` here, and you can dig further on your own.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`awk`是一个非常强大的工具，您可以在Linux中用来分析和处理文本。实际上，`awk`不像您迄今为止学到的任何命令，这是因为`awk`实际上是一种编程语言。您会发现有些书专门写来解释和讨论`awk`的用法。但是，我只会在这里向您展示`awk`的基础知识，您可以自己深入研究。'
- en: 'You can use `awk` to achieve the same functionality as the `cut` command. For
    example, to view the first word of each line in the file `facts.txt`, you can
    run:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`awk`来实现与`cut`命令相同的功能。例如，要查看文件`facts.txt`中每行的第一个单词，可以运行：
- en: '[PRE31]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Notice we didn’t need to specify the space character `'' ''` as a delimiter
    as we did with the `cut` command and that’s because `awk` is smart enough to figure
    it out on its own. You can also view more than one field at a time; for example,
    to view the first and the second word of each line, you can run:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们不需要指定空格字符`' '`作为分隔符，就像我们在`cut`命令中所做的那样，这是因为`awk`足够聪明，可以自己弄清楚。您还可以一次查看多个字段；例如，要查看每行的第一个和第二个单词，您可以运行：
- en: '[PRE32]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: One advantage `awk` has over `cut` is that `awk` is smart enough to separate
    the file into different fields even if there is more than one character separating
    each field. The `cut` command only works if the file has a single delimiter like
    a single space, a colon, a comma, and so on.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`awk`比`cut`有一个优势，那就是`awk`足够聪明，即使每个字段之间有多个字符分隔，也能将文件分隔成不同的字段。`cut`命令只有在文件有单个分隔符时才有效，比如单个空格、冒号、逗号等。'
- en: 'To demonstrate, create a file named `animals.txt` and insert these four lines:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示，创建一个名为`animals.txt`的文件，并插入以下四行：
- en: '[PRE33]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Do not edit the format; keep the spaces messed up:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 不要编辑格式；保持空格混乱：
- en: '[PRE34]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Now, if you try to use the `cut` command to only show the third word in each
    line, it will fail because there is more than one space separating each word.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您尝试使用`cut`命令仅显示每行中的第三个单词，它将失败，因为每个单词之间有多个空格分隔。
- en: 'However, `awk` is smart enough to figure it out:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，`awk`足够聪明，可以弄清楚：
- en: '[PRE35]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'As you can see, the third word in each line is displayed. You can also use
    `awk` to search for patterns, just like the `grep` command. For example, to print
    the lines that contain the word `red` in `facts.txt`, you can run the command:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，每行中的第三个单词被显示出来。您也可以使用`awk`来搜索模式，就像`grep`命令一样。例如，要打印包含`facts.txt`中单词`red`的行，您可以运行以下命令：
- en: '[PRE36]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Wildcard characters
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通配符字符
- en: 'The wildcard characters are special characters in Linux, and they are used
    to specify a group (class) of characters. `Table 13` lists all the Linux wildcards:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 通配符字符是Linux中的特殊字符，它们用于指定一组（类）字符。`表13`列出了所有Linux通配符：
- en: '| **Wildcard** | **What it does** |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '**通配符** | **它的作用**'
- en: '| `*` | Matches any character(s). |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '`*` | 匹配任何字符。'
- en: '| `?` | Matches any single character. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '`?` | 匹配任何单个字符。'
- en: '| `[characters]` | Matches the characters that are members of the set characters.
    For example, `[abc]` will match the characters `a`, `b`, or `c`. |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '`[characters]` | 匹配属于字符集的字符。例如，`[abc]`将匹配字符`a`、`b`或`c`。'
- en: '| `[!characters]` | Matches any character that is not a member of the set characters.
    It is basically the negation of `[characters]`. For example, `[!abc]` will match
    any character that is not `a`, `b`, or `c`. |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '`[!characters]` | 匹配不属于字符集的任何字符。基本上是`[characters]`的否定。例如，`[!abc]`将匹配任何不是`a`、`b`或`c`的字符。'
- en: '| `[[:class:]]` | Matches any character that is a member of the character class.
    |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '`[[:class:]]` | 匹配属于字符类的任何字符。'
- en: 'Table 13: Linux wildcards'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 表13：Linux通配符
- en: 'You have already seen character classes before when we were discussing the
    `tr` command. Remember `[:lower:]` and `[:upper:]` represent lower and upper case
    letters, these are two examples of character classes. `Table 14` lists the most
    common character classes:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们讨论`tr`命令时，您已经看到了字符类。记住`[:lower:]`和`[:upper:]`代表小写和大写字母，这是字符类的两个示例。`表14`列出了最常见的字符类：
- en: '| **Character Class** | **What it represents** |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: 字符类 | 它代表什么
- en: '| `[:alnum:]` | Represents all the alphanumeric letters, that is, any letter
    or number. |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '`[:alnum:]` | 代表所有的字母数字，即任何字母或数字。'
- en: '| `[:alpha:]` | Represents all alphabetic letters, that is, any letter. |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '`[:alpha:]` | 代表所有的字母，即任何字母。'
- en: '| `[:digit:]` | Represents all digits, that is, any number. |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '`[:digit:]` | 代表所有的数字，即任何数字。'
- en: '| `[:lower:]` | Represents any lower case letter. |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '`[:lower:]` | 代表任何小写字母。'
- en: '| `[:upper:]` | Represents any upper case letter. |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '`[:upper:]` | 代表任何大写字母。'
- en: 'Table 14: Character classes'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 表14：字符类
- en: 'Ok, enough with all that theory! Let’s look at some examples. You can use the
    `*` wildcard to list all the `txt` files in your home directory:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，够了这些理论！让我们看一些例子。您可以使用`*`通配符来列出您的主目录中的所有`txt`文件：
- en: '[PRE37]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'If you want to list only the filenames that begin with the letter `f`, you
    can use `f*`:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您只想列出以字母`f`开头的文件名，您可以使用`f*`：
- en: '[PRE38]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'If you want to list the filenames that contain three letters followed by a
    `.txt` extension, then you can use the `?` wildcard:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想列出包含三个字母后跟`.txt`扩展名的文件名，那么您可以使用`?`通配符：
- en: '[PRE39]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'You can also use more than one wildcard at the same time. For example, if you
    want to list only the filenames that begin with the letter `a` or `f`, you can
    use the `[af]` wildcard followed by the `*` wildcard:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以同时使用多个通配符。例如，如果您只想列出以字母`a`或`f`开头的文件名，您可以使用`[af]`通配符，后跟`*`通配符：
- en: '[PRE40]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'You can also use set negations, for example, to list all the `.txt` filenames
    that begin with any letter other than `f`, you can run use `[!f]*`:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用集合否定，例如，要列出所有以除`f`之外的任何字母开头的`.txt`文件名，您可以运行`[!f]*`：
- en: '[PRE41]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Now, before we do some examples of character classes, let’s create the following
    four files:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在我们做一些字符类的示例之前，让我们创建以下四个文件：
- en: '[PRE42]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Now, if you want to list the filenames that end with an upper case letter,
    you can use the character class `[:upper:]` as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您想列出以大写字母结尾的文件名，您可以使用字符类`[:upper:]`如下：
- en: '[PRE43]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Notice that the character class itself is also surrounded by brackets.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，字符类本身也被括号括起来。
- en: 'If you want to list the filenames that begin with a digit (number), you can
    use the character class `[:digit:]` as follows:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想列出以数字（数字）开头的文件名，您可以使用字符类`[:digit:]`如下：
- en: '[PRE44]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: And the only match was the file `7wonders`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一匹配的是文件`7wonders`。
- en: Regular expressions
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 正则表达式
- en: Up until now, we have been using wildcards with filenames. **Regular expressions**
    (**Regex** for short) is another Linux feature that will allow you to search for
    a specific pattern in text files. Regex is also often used with the `grep` command.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在使用文件名的通配符。**正则表达式**（简称 **Regex**）是 Linux 的另一个功能，它允许您在文本文件中搜索特定的模式。正则表达式也经常与
    `grep` 命令一起使用。
- en: '`Table 15` lists the most common regular expressions and their uses:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`表15` 列出了最常见的正则表达式及其用途：'
- en: '| **Regex** | **What it does** |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '**正则表达式** | **它的作用**'
- en: '| `*` | Matches zero or more of the preceding characters or expressions. |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '`*` | 匹配前面字符或表达式的零个或多个。'
- en: '| `+` | Matches one or more of the preceding characters or expressions. |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '`+` | 匹配前面字符或表达式的一个或多个。'
- en: '| `.` | Matches any single character. Same as the `?` wildcard. |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '`.` | 匹配任何单个字符。与 `?` 通配符相同。'
- en: '| `^` | Matches the following expression at the beginning of the line. For
    example, `^dog` will match all lines that begin with the word `dog`. |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '`^` | 匹配行首的后面表达式。例如，`^dog` 将匹配所有以单词 `dog` 开头的行。'
- en: '| `$` | Matches the preceding expression at the end of the line. For example,
    `bird$` will match all lines that end with the word `bird`. |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '`$` | 匹配行尾的前面表达式。例如，`bird$` 将匹配所有以单词 `bird` 结尾的行。'
- en: '| `\` | Used as an escape character to match a special character following
    the backslash. For example, `\*` matches a star (asterisk). |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '`\` | 用作转义字符，以匹配反斜杠后面的特殊字符。例如，`\*` 匹配星号（*）。'
- en: '| `[characters]` | Matches the characters that are members of the set characters.
    For example, `[abc]` will match the characters `a`,`b`, or `c`. |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '`[characters]` | 匹配属于字符集字符的字符。例如，`[abc]` 将匹配字符 `a`，`b` 或 `c`。'
- en: '| `[^characters]` | Matches any character that is not a member of the set characters.
    It is basically the negation of `[characters]`. For example, `[!abc]` will match
    any character that is not `a`,`b`, or `c`. |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '`[^characters]` | 匹配不属于字符集字符的任何字符。基本上是对 `[characters]` 的否定。例如，`[!abc]` 将匹配不是
    `a`，`b` 或 `c` 的任何字符。'
- en: '| `{x,y}` | Matches `x` to `y` occurrences of the preceding expression. |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '`{x,y}` | 匹配前面表达式的x到y次出现。'
- en: '| `{x}` | Matches exactly `x` occurrences of the preceding expression. |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '`{x}` | 匹配前面表达式的x次出现。'
- en: '| `{x,}` | Matches `x` or more occurrences of the preceding expression. |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '`{x,}` | 匹配前面表达式的x次或更多出现。'
- en: '| `{,x}` | Matches no more than `x` occurrences of the preceding expression.
    |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '`{,x}` | 匹配前面表达式的最多x次出现。'
- en: 'Table 15: Regular expressions'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 表15：正则表达式
- en: 'Well, that’s a long list of regular expressions. Let’s do some practice with
    them. Create a file named `practice.txt` that contains the following text:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，这是一个很长的正则表达式列表。让我们练习一下。创建一个名为 `practice.txt` 的文件，其中包含以下文本：
- en: '[PRE45]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: To use regular expressions with the `grep` command, you can either use the `-E`
    option or the `egrep` command. The `egrep` command is simply an alias to `grep
    -E`.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 `grep` 命令中使用正则表达式，可以使用 `-E` 选项或 `egrep` 命令。`egrep` 命令只是 `grep -E` 的别名。
- en: 'Now, notice that the `***` regex is different from the `***` wildcard. To realize
    the difference, run the command:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，请注意 `***` 正则表达式与 `***` 通配符是不同的。要了解区别，请运行以下命令：
- en: '[PRE46]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'This will give the following output:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给出以下输出：
- en: '![](img/0d507805-036b-437b-a485-843fb7e3717a.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0d507805-036b-437b-a485-843fb7e3717a.png)'
- en: 'Figure 1: The * regex'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图1：* 正则表达式
- en: 'Notice that `d*g` didn’t match the word `dog`; instead, it matched with:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`d*g` 没有匹配单词 `dog`；相反，它匹配了：
- en: '`g` (zero occurrences of d)'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`g`（d的零次出现）'
- en: '`dg` (one occurrence of d)'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dg`（d的一次出现）'
- en: '`ddg` (two occurrences of d)'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ddg`（d的两次出现）'
- en: '`dddg` (three occurrences of d)'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dddg`（d的三次出现）'
- en: That’s because the `** *regex` matches zero or more of the preceding characters
    or expressions, unlike the `*** wildcard`, which matches any character.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为 `** *regex` 匹配前面字符或表达式的零个或多个，而 `*** 通配符` 匹配任何字符。
- en: 'Now, to match one or more occurrences of `d` followed by `g`, you can use the
    regex `d+g`:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要匹配一个或多个出现的 `d` 后跟 `g`，可以使用正则表达式 `d+g`：
- en: '[PRE47]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'To match the special character `*`, you can use the backslash between single
    or double quotes as follows:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 要匹配特殊字符 `*`，可以在单引号或双引号之间使用反斜杠，如下所示：
- en: '[PRE48]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'To match any pattern that contains the letter `m` followed by any single character,
    then the letter `n`, you can run:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 要匹配包含字母 `m` 后跟任何单个字符，然后是字母 `n` 的任何模式，可以运行：
- en: '[PRE49]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'To match the lines that begin with the word `man`, you can run:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 要匹配以单词 `man` 开头的行，可以运行：
- en: '[PRE50]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'To match the lines that end with the word `man`, you can run:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 要匹配以单词 `man` 结尾的行，可以运行：
- en: '[PRE51]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'You can use character classes as well. For example, to search for all the lines
    that contain at least one digit, you can run:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以使用字符类。例如，要搜索包含至少一个数字的所有行，可以运行：
- en: '[PRE52]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'You can also search for a specific pattern like telephone numbers:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以搜索特定模式，如电话号码：
- en: '[PRE53]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: This will search for the lines that contain three digits followed by a dash,
    then three digits followed by another dash, then another three digits.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这将搜索包含三个数字后跟一个破折号，然后是另外三个数字后跟另一个破折号，然后是另外三个数字的行。
- en: 'I know you think `regex` is complicated, and it’s hard to remember all of that,
    you are right! That’s why there is a `man` page that has all the regular expressions
    we discussed:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道你认为 `regex` 很复杂，很难记住所有这些，你是对的！这就是为什么有一个包含我们讨论的所有正则表达式的 `man` 页面：
- en: '[PRE54]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Also, the `grep` man page includes explanations for all the regular expressions
    discussed in this chapter.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`grep` man 页面包括对本章讨论的所有正则表达式的解释。
- en: Knowledge check
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 知识检查
- en: 'For the following exercises, open up your Terminal and try to solve the following
    tasks:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 对于以下练习，打开您的终端并尝试解决以下任务：
- en: Display the size (in bytes) of the file `/etc/hostname`.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示文件 `/etc/hostname` 的大小（以字节为单位）。
- en: Display only the group names in the file `/etc/group`.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仅显示文件 `/etc/group` 中的组名。
- en: Display the total number of lines in the file `/etc/services`.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示文件 `/etc/services` 中的总行数。
- en: Display only the lines that contain the word "bash" in the file `/etc/passwd`.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仅显示文件 `/etc/passwd` 中包含单词 "bash" 的行。
- en: Display the output of the `uptime` command in all uppercase letters.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示“uptime”命令的输出为全大写字母。
